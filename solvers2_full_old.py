def solve_67a3c6ac_68b16354(I):
    x1 = vmirror(I)
    O = hmirror(x1)
    return O



def solve_67a3c6ac_74dd1130(I):
    x1 = vmirror(I)
    O = dmirror(x1)
    return O



def solve_67a3c6ac_3c9b0459(I):
    x1 = vmirror(I)
    O = rot180(x1)
    return O



def solve_67a3c6ac_6150a2bd(I):
    x1 = vmirror(I)
    O = rot180(x1)
    return O



def solve_67a3c6ac_9172f3a0(I):
    x1 = vmirror(I)
    O = upscale(x1, THREE)
    return O



def solve_67a3c6ac_9dfd6313(I):
    x1 = vmirror(I)
    O = dmirror(x1)
    return O



def solve_67a3c6ac_a416b8f3(I):
    x1 = vmirror(I)
    O = hconcat(x1, x1)
    return O



def solve_67a3c6ac_b1948b0a(I):
    x1 = vmirror(I)
    O = replace(x1, SIX, TWO)
    return O



def solve_67a3c6ac_c59eb873(I):
    x1 = vmirror(I)
    O = upscale(x1, TWO)
    return O



def solve_67a3c6ac_c8f0f002(I):
    x1 = vmirror(I)
    O = replace(x1, SEVEN, FIVE)
    return O



def solve_67a3c6ac_d10ecb37(I):
    x1 = vmirror(I)
    O = crop(x1, ORIGIN, TWO_BY_TWO)
    return O



def solve_67a3c6ac_d511f180(I):
    x1 = vmirror(I)
    O = switch(x1, FIVE, EIGHT)
    return O



def solve_67a3c6ac_ed36ccf7(I):
    x1 = vmirror(I)
    O = rot270(x1)
    return O



def solve_67a3c6ac_4c4377d9(I):
    x1 = vmirror(I)
    x2 = hmirror(x1)
    O = vconcat(x2, x1)
    return O



def solve_67a3c6ac_6d0aefbc(I):
    x1 = vmirror(I)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_67a3c6ac_6fa7a44f(I):
    x1 = vmirror(I)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_67a3c6ac_5614dbcf(I):
    x1 = vmirror(I)
    x2 = replace(x1, FIVE, ZERO)
    O = downscale(x2, THREE)
    return O



def solve_67a3c6ac_5bd6f4ac(I):
    x1 = vmirror(I)
    x2 = tojvec(SIX)
    O = crop(x1, x2, THREE_BY_THREE)
    return O



def solve_67a3c6ac_5582e5ca(I):
    x1 = vmirror(I)
    x2 = mostcolor(x1)
    O = canvas(x2, THREE_BY_THREE)
    return O



def solve_67a3c6ac_8be77c9e(I):
    x1 = vmirror(I)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_67a3c6ac_c9e6f938(I):
    x1 = vmirror(I)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_67a3c6ac_2dee498d(I):
    x1 = vmirror(I)
    x2 = hsplit(x1, THREE)
    O = first(x2)
    return O



def solve_67a3c6ac_1cf80156(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = subgrid(x3, x1)
    return O



def solve_67a3c6ac_32597951(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, EIGHT)
    x3 = delta(x2)
    O = fill(x1, THREE, x3)
    return O



def solve_67a3c6ac_25ff71a9(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = move(x1, x3, DOWN)
    return O



def solve_67a3c6ac_0b148d64(I):
    x1 = vmirror(I)
    x2 = partition(x1)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_67a3c6ac_1f85a75f(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_67a3c6ac_23b5c85d(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_67a3c6ac_ac0a08a4(I):
    x1 = vmirror(I)
    x2 = colorcount(x1, ZERO)
    x3 = subtract(NINE, x2)
    O = upscale(x1, x3)
    return O



def solve_67a3c6ac_be94b721(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_67a3c6ac_c909285e(I):
    x1 = vmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    O = subgrid(x3, x1)
    return O



def solve_67a3c6ac_f25ffba3(I):
    x1 = vmirror(I)
    x2 = bottomhalf(x1)
    x3 = hmirror(x2)
    O = vconcat(x3, x2)
    return O



def solve_67a3c6ac_c1d99e64(I):
    x1 = vmirror(I)
    x2 = frontiers(x1)
    x3 = merge(x2)
    O = fill(x1, TWO, x3)
    return O



def solve_67a3c6ac_b91ae062(I):
    x1 = vmirror(I)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    O = upscale(x1, x3)
    return O



def solve_67a3c6ac_3aa6fb7a(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = mapply(corners, x2)
    O = underfill(x1, ONE, x3)
    return O



def solve_67a3c6ac_7b7f7511(I):
    x1 = vmirror(I)
    x2 = portrait(x1)
    x3 = branch(x2, tophalf, lefthalf)
    O = x3(x1)
    return O



def solve_67a3c6ac_4258a5f9(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, FIVE)
    x3 = mapply(neighbors, x2)
    O = fill(x1, ONE, x3)
    return O



def solve_67a3c6ac_2dc579da(I):
    x1 = vmirror(I)
    x2 = vsplit(x1, TWO)
    x3 = rbind(hsplit, TWO)
    x4 = mapply(x3, x2)
    O = argmax(x4, numcolors)
    return O



def solve_67a3c6ac_28bf18c6(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = hconcat(x4, x4)
    return O



def solve_67a3c6ac_3af2c5a8(I):
    x1 = vmirror(I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_67a3c6ac_44f52bb0(I):
    x1 = vmirror(I)
    x2 = vmirror(x1)
    x3 = equality(x2, x1)
    x4 = branch(x3, ONE, SEVEN)
    O = canvas(x4, UNITY)
    return O



def solve_67a3c6ac_62c24649(I):
    x1 = vmirror(I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_67a3c6ac_67e8384a(I):
    x1 = vmirror(I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_67a3c6ac_7468f01a(I):
    x1 = vmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = vmirror(x4)
    return O



def solve_67a3c6ac_662c240a(I):
    x1 = vmirror(I)
    x2 = vsplit(x1, THREE)
    x3 = fork(equality, dmirror, identity)
    x4 = compose(flip, x3)
    O = extract(x2, x4)
    return O



def solve_67a3c6ac_42a50994(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = cover(x1, x4)
    return O



def solve_67a3c6ac_56ff96f3(I):
    x1 = vmirror(I)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = mapply(x3, x2)
    O = paint(x1, x4)
    return O



def solve_67a3c6ac_50cb2852(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = compose(backdrop, inbox)
    x4 = mapply(x3, x2)
    O = fill(x1, EIGHT, x4)
    return O



def solve_67a3c6ac_4347f46a(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(difference, toindices, box)
    x4 = mapply(x3, x2)
    O = fill(x1, ZERO, x4)
    return O



def solve_67a3c6ac_46f33fce(I):
    x1 = vmirror(I)
    x2 = rot180(x1)
    x3 = downscale(x2, TWO)
    x4 = rot180(x3)
    O = upscale(x4, FOUR)
    return O



def solve_67a3c6ac_a740d043(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    O = replace(x4, ONE, ZERO)
    return O



def solve_67a3c6ac_a79310a0(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = move(x1, x3, DOWN)
    O = replace(x4, EIGHT, TWO)
    return O



def solve_67a3c6ac_aabf363d(I):
    x1 = vmirror(I)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, ZERO)
    x4 = leastcolor(x3)
    O = replace(x3, x4, x2)
    return O



def solve_67a3c6ac_ae4f1146(I):
    x1 = vmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = rbind(colorcount, ONE)
    x4 = argmax(x2, x3)
    O = subgrid(x4, x1)
    return O



def solve_67a3c6ac_b27ca6d3(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, THREE, x4)
    return O



def solve_67a3c6ac_ce22a75a(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = mapply(backdrop, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_67a3c6ac_dc1df850(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_67a3c6ac_f25fbde4(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = upscale(x4, TWO)
    return O



def solve_67a3c6ac_44d8ac46(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(delta, x2)
    x4 = mfilter(x3, square)
    O = fill(x1, TWO, x4)
    return O



def solve_67a3c6ac_1e0a9b12(I):
    x1 = vmirror(I)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = apply(x3, x2)
    O = rot90(x4)
    return O



def solve_67a3c6ac_0d3d703e(I):
    x1 = vmirror(I)
    x2 = switch(x1, THREE, FOUR)
    x3 = switch(x2, EIGHT, NINE)
    x4 = switch(x3, TWO, SIX)
    O = switch(x4, ONE, FIVE)
    return O



def solve_67a3c6ac_3618c87e(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = move(x1, x4, TWO_BY_ZERO)
    return O



def solve_67a3c6ac_1c786137(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, height)
    x4 = subgrid(x3, x1)
    O = trim(x4)
    return O



def solve_67a3c6ac_8efcae92(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ONE)
    x4 = compose(size, delta)
    x5 = argmax(x3, x4)
    O = subgrid(x5, x1)
    return O



def solve_67a3c6ac_445eab21(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(multiply, height, width)
    x4 = argmax(x2, x3)
    x5 = color(x4)
    O = canvas(x5, TWO_BY_TWO)
    return O



def solve_67a3c6ac_6f8cd79b(I):
    x1 = vmirror(I)
    x2 = asindices(x1)
    x3 = apply(initset, x2)
    x4 = rbind(bordering, x1)
    x5 = mfilter(x3, x4)
    O = fill(x1, EIGHT, x5)
    return O



def solve_67a3c6ac_2013d3e2(I):
    x1 = vmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = lefthalf(x4)
    O = tophalf(x5)
    return O



def solve_67a3c6ac_41e4d17e(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = mapply(x4, x2)
    O = underfill(x1, SIX, x5)
    return O



def solve_67a3c6ac_9565186b(I):
    x1 = vmirror(I)
    x2 = shape(x1)
    x3 = objects(x1, T, F, F)
    x4 = argmax(x3, size)
    x5 = canvas(FIVE, x2)
    O = paint(x5, x4)
    return O



def solve_67a3c6ac_aedd82e4(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, TWO)
    x4 = sizefilter(x3, ONE)
    x5 = merge(x4)
    O = fill(x1, ONE, x5)
    return O



def solve_67a3c6ac_bb43febb(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, FIVE)
    x4 = compose(backdrop, inbox)
    x5 = mapply(x4, x3)
    O = fill(x1, TWO, x5)
    return O



def solve_67a3c6ac_e98196ab(I):
    x1 = vmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = objects(x2, T, F, T)
    x5 = merge(x4)
    O = paint(x3, x5)
    return O



def solve_67a3c6ac_f76d97a5(I):
    x1 = vmirror(I)
    x2 = palette(x1)
    x3 = first(x2)
    x4 = last(x2)
    x5 = switch(x1, x3, x4)
    O = replace(x5, FIVE, ZERO)
    return O



def solve_67a3c6ac_ce9e57f2(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(connect, ulcorner, centerofmass)
    x4 = mapply(x3, x2)
    x5 = fill(x1, EIGHT, x4)
    O = switch(x5, EIGHT, TWO)
    return O



def solve_67a3c6ac_22eb0ac0(I):
    x1 = vmirror(I)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    O = paint(x1, x5)
    return O



def solve_67a3c6ac_9f236235(I):
    x1 = vmirror(I)
    x2 = compress(x1)
    x3 = objects(x1, T, F, F)
    x4 = vmirror(x2)
    x5 = valmin(x3, width)
    O = downscale(x4, x5)
    return O



def solve_67a3c6ac_a699fb00(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, RIGHT)
    x4 = shift(x2, LEFT)
    x5 = intersection(x3, x4)
    O = fill(x1, TWO, x5)
    return O



def solve_67a3c6ac_46442a0e(I):
    x1 = vmirror(I)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_67a3c6ac_7fe24cdd(I):
    x1 = vmirror(I)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_67a3c6ac_0ca9ddb6(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x3)
    x6 = fill(x1, SEVEN, x4)
    O = fill(x6, FOUR, x5)
    return O



def solve_67a3c6ac_543a7ed5(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, SIX)
    x4 = mapply(outbox, x3)
    x5 = fill(x1, THREE, x4)
    x6 = mapply(delta, x3)
    O = fill(x5, FOUR, x6)
    return O



def solve_67a3c6ac_0520fde7(I):
    x1 = vmirror(I)
    x2 = vmirror(x1)
    x3 = lefthalf(x2)
    x4 = righthalf(x2)
    x5 = vmirror(x4)
    x6 = cellwise(x3, x5, ZERO)
    O = replace(x6, ONE, TWO)
    return O



def solve_67a3c6ac_dae9d2b5(I):
    x1 = vmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, FOUR)
    x5 = ofcolor(x3, THREE)
    x6 = combine(x4, x5)
    O = fill(x2, SIX, x6)
    return O



def solve_67a3c6ac_8d5021e8(I):
    x1 = vmirror(I)
    x2 = vmirror(x1)
    x3 = hconcat(x2, x1)
    x4 = hmirror(x3)
    x5 = vconcat(x3, x4)
    x6 = vconcat(x5, x3)
    O = hmirror(x6)
    return O



def solve_67a3c6ac_b60334d2(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, FIVE)
    x3 = replace(x1, FIVE, ZERO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x2)
    x6 = fill(x3, ONE, x4)
    O = fill(x6, FIVE, x5)
    return O



def solve_67a3c6ac_b94a9452(I):
    x1 = vmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = leastcolor(x4)
    x6 = mostcolor(x4)
    O = switch(x4, x5, x6)
    return O



def solve_67a3c6ac_d037b0a7(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, DOWN)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    O = paint(x1, x6)
    return O



def solve_67a3c6ac_d0f5fe59(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = astuple(x3, x3)
    x5 = canvas(ZERO, x4)
    x6 = shoot(ORIGIN, UNITY)
    O = fill(x5, EIGHT, x6)
    return O



def solve_67a3c6ac_e3497940(I):
    x1 = vmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = vmirror(x3)
    x5 = objects(x4, T, F, T)
    x6 = merge(x5)
    O = paint(x2, x6)
    return O



def solve_67a3c6ac_e9afcf9a(I):
    x1 = vmirror(I)
    x2 = astuple(TWO, ONE)
    x3 = crop(x1, ORIGIN, x2)
    x4 = hmirror(x3)
    x5 = hconcat(x3, x4)
    x6 = hconcat(x5, x5)
    O = hconcat(x6, x5)
    return O



def solve_67a3c6ac_d406998b(I):
    x1 = vmirror(I)
    x2 = vmirror(x1)
    x3 = ofcolor(x2, FIVE)
    x4 = compose(even, last)
    x5 = sfilter(x3, x4)
    x6 = fill(x2, THREE, x5)
    O = vmirror(x6)
    return O



def solve_67a3c6ac_3906de3d(I):
    x1 = vmirror(I)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = switch(x2, ONE, TWO)
    x5 = apply(x3, x4)
    x6 = switch(x5, ONE, TWO)
    O = cmirror(x6)
    return O



def solve_67a3c6ac_00d62c1b(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, FOUR, x6)
    return O



def solve_67a3c6ac_7b6016b9(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = rbind(bordering, x1)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x4)
    x6 = fill(x1, TWO, x5)
    O = replace(x6, ZERO, THREE)
    return O



def solve_67a3c6ac_67385a82(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, THREE)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = merge(x5)
    O = fill(x1, EIGHT, x6)
    return O



def solve_67a3c6ac_a5313dff(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, ONE, x6)
    return O



def solve_67a3c6ac_ea32f347(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, FIVE, FOUR)
    x4 = argmin(x2, size)
    x5 = argmax(x2, size)
    x6 = fill(x3, ONE, x5)
    O = fill(x6, TWO, x4)
    return O



def solve_67a3c6ac_d631b094(I):
    x1 = vmirror(I)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = ofcolor(x1, x3)
    x5 = size(x4)
    x6 = astuple(ONE, x5)
    O = canvas(x3, x6)
    return O



def solve_67a3c6ac_10fcaaa3(I):
    x1 = vmirror(I)
    x2 = leastcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = vconcat(x3, x3)
    x5 = ofcolor(x4, x2)
    x6 = mapply(ineighbors, x5)
    O = underfill(x4, EIGHT, x6)
    return O



def solve_67a3c6ac_007bbfb7(I):
    x1 = vmirror(I)
    x2 = hupscale(x1, THREE)
    x3 = vupscale(x2, THREE)
    x4 = hconcat(x1, x1)
    x5 = hconcat(x4, x1)
    x6 = vconcat(x5, x5)
    x7 = vconcat(x6, x5)
    O = cellwise(x3, x7, ZERO)
    return O



def solve_67a3c6ac_496994bd(I):
    x1 = vmirror(I)
    x2 = width(x1)
    x3 = height(x1)
    x4 = halve(x3)
    x5 = astuple(x4, x2)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    O = vconcat(x6, x7)
    return O



def solve_67a3c6ac_1f876c06(I):
    x1 = vmirror(I)
    x2 = fgpartition(x1)
    x3 = compose(last, first)
    x4 = power(last, TWO)
    x5 = fork(connect, x3, x4)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_67a3c6ac_39a8645d(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = matcher(color, x5)
    x7 = extract(x2, x6)
    O = subgrid(x7, x1)
    return O



def solve_67a3c6ac_1b2d62fb(I):
    x1 = vmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = replace(x2, NINE, ZERO)
    O = fill(x7, EIGHT, x6)
    return O



def solve_67a3c6ac_90c28cc7(I):
    x1 = vmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = dedupe(x4)
    x6 = rot90(x5)
    x7 = dedupe(x6)
    O = rot270(x7)
    return O



def solve_67a3c6ac_b6afb2da(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = replace(x1, FIVE, TWO)
    x4 = colorfilter(x2, FIVE)
    x5 = mapply(box, x4)
    x6 = fill(x3, FOUR, x5)
    x7 = mapply(corners, x4)
    O = fill(x6, ONE, x7)
    return O



def solve_67a3c6ac_b9b7f026(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = argmin(x2, size)
    x4 = rbind(adjacent, x3)
    x5 = remove(x3, x2)
    x6 = extract(x5, x4)
    x7 = color(x6)
    O = canvas(x7, UNITY)
    return O



def solve_67a3c6ac_ba97ae07(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = ofcolor(x1, x5)
    x7 = backdrop(x6)
    O = fill(x1, x5, x7)
    return O



def solve_67a3c6ac_c9f8e694(I):
    x1 = vmirror(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = ofcolor(x1, ZERO)
    x5 = astuple(x2, ONE)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hupscale(x6, x3)
    O = fill(x7, ZERO, x4)
    return O



def solve_67a3c6ac_d23f8c26(I):
    x1 = vmirror(I)
    x2 = asindices(x1)
    x3 = width(x1)
    x4 = halve(x3)
    x5 = matcher(last, x4)
    x6 = compose(flip, x5)
    x7 = sfilter(x2, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_67a3c6ac_d5d6de2d(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sfilter(x2, square)
    x4 = difference(x2, x3)
    x5 = compose(backdrop, inbox)
    x6 = mapply(x5, x4)
    x7 = replace(x1, TWO, ZERO)
    O = fill(x7, THREE, x6)
    return O



def solve_67a3c6ac_dbc1a6ce(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_67a3c6ac_ded97339(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, EIGHT)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_67a3c6ac_ea786f4a(I):
    x1 = vmirror(I)
    x2 = width(x1)
    x3 = shoot(ORIGIN, UNITY)
    x4 = decrement(x2)
    x5 = tojvec(x4)
    x6 = shoot(x5, DOWN_LEFT)
    x7 = combine(x3, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_67a3c6ac_08ed6ac7(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = order(x2, height)
    x5 = size(x3)
    x6 = interval(x5, ZERO, NEG_ONE)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_67a3c6ac_40853293(I):
    x1 = vmirror(I)
    x2 = partition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    x6 = mfilter(x4, vline)
    x7 = paint(x1, x5)
    O = paint(x7, x6)
    return O



def solve_67a3c6ac_5521c0d9(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = cover(x1, x3)
    x5 = chain(toivec, invert, height)
    x6 = fork(shift, identity, x5)
    x7 = mapply(x6, x2)
    O = paint(x4, x7)
    return O



def solve_67a3c6ac_f8ff0b80(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = rbind(canvas, UNITY)
    x6 = apply(x5, x4)
    x7 = merge(x6)
    O = hmirror(x7)
    return O



def solve_67a3c6ac_85c4e7cd(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = compose(invert, size)
    x4 = order(x2, size)
    x5 = order(x2, x3)
    x6 = apply(color, x5)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_67a3c6ac_d2abd087(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = matcher(size, SIX)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x3)
    x6 = mfilter(x2, x4)
    x7 = fill(x1, TWO, x5)
    O = fill(x7, ONE, x6)
    return O



def solve_67a3c6ac_363442ee(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = asobject(x3)
    x5 = lbind(shift, x4)
    x6 = compose(x5, decrement)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_67a3c6ac_5168d44c(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, THREE)
    x3 = height(x2)
    x4 = equality(x3, ONE)
    x5 = branch(x4, ZERO_BY_TWO, TWO_BY_ZERO)
    x6 = ofcolor(x1, TWO)
    x7 = recolor(TWO, x6)
    O = move(x1, x7, x5)
    return O



def solve_67a3c6ac_e9614598(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = fork(add, first, last)
    x4 = x3(x2)
    x5 = halve(x4)
    x6 = dneighbors(x5)
    x7 = insert(x5, x6)
    O = fill(x1, THREE, x7)
    return O



def solve_67a3c6ac_d9fac9be(I):
    x1 = vmirror(I)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = color(x4)
    x6 = remove(ZERO, x2)
    x7 = other(x6, x5)
    O = canvas(x7, UNITY)
    return O



def solve_67a3c6ac_e50d258f(I):
    x1 = vmirror(I)
    x2 = width(x1)
    x3 = astuple(NINE, x2)
    x4 = canvas(ZERO, x3)
    x5 = vconcat(x1, x4)
    x6 = objects(x5, F, F, T)
    x7 = rbind(colorcount, TWO)
    x8 = argmax(x6, x7)
    O = subgrid(x8, x1)
    return O



def solve_67a3c6ac_810b9b61(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = apply(toindices, x2)
    x4 = fork(either, vline, hline)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = fork(equality, identity, box)
    x8 = mfilter(x6, x7)
    O = fill(x1, THREE, x8)
    return O



def solve_67a3c6ac_54d82841(I):
    x1 = vmirror(I)
    x2 = height(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(last, center)
    x5 = apply(x4, x3)
    x6 = decrement(x2)
    x7 = lbind(astuple, x6)
    x8 = apply(x7, x5)
    O = fill(x1, FOUR, x8)
    return O



def solve_67a3c6ac_60b61512(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = mapply(delta, x2)
    O = fill(x1, SEVEN, x3)
    return O



def solve_67a3c6ac_25d8a9c8(I):
    x1 = vmirror(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, THREE)
    x5 = mfilter(x4, hline)
    x6 = toindices(x5)
    x7 = difference(x2, x6)
    x8 = fill(x1, FIVE, x6)
    O = fill(x8, ZERO, x7)
    return O



def solve_67a3c6ac_239be575(I):
    x1 = vmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = lbind(contained, TWO)
    x4 = compose(x3, palette)
    x5 = sfilter(x2, x4)
    x6 = size(x5)
    x7 = greater(x6, ONE)
    x8 = branch(x7, ZERO, EIGHT)
    O = canvas(x8, UNITY)
    return O



def solve_67a3c6ac_5c0a986e(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, ONE)
    x4 = lrcorner(x2)
    x5 = ulcorner(x3)
    x6 = shoot(x4, UNITY)
    x7 = shoot(x5, NEG_UNITY)
    x8 = fill(x1, TWO, x6)
    O = fill(x8, ONE, x7)
    return O



def solve_67a3c6ac_6430c8c4(I):
    x1 = vmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(FOUR, FOUR)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, THREE, x7)
    return O



def solve_67a3c6ac_94f9d214(I):
    x1 = vmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = astuple(FOUR, FOUR)
    x7 = canvas(ZERO, x6)
    x8 = intersection(x4, x5)
    O = fill(x7, TWO, x8)
    return O



def solve_67a3c6ac_ce4f8723(I):
    x1 = vmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = astuple(FOUR, FOUR)
    x8 = canvas(THREE, x7)
    O = fill(x8, ZERO, x6)
    return O



def solve_67a3c6ac_d13f3404(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, UNITY)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = astuple(SIX, SIX)
    x8 = canvas(ZERO, x7)
    O = paint(x8, x6)
    return O



def solve_67a3c6ac_f2829549(I):
    x1 = vmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = shape(x2)
    x8 = canvas(ZERO, x7)
    O = fill(x8, THREE, x6)
    return O



def solve_67a3c6ac_fafffa47(I):
    x1 = vmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = shape(x3)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, TWO, x7)
    return O



def solve_67a3c6ac_fcb5c309(I):
    x1 = vmirror(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = colorfilter(x3, x2)
    x5 = difference(x3, x4)
    x6 = argmax(x5, size)
    x7 = color(x6)
    x8 = subgrid(x6, x1)
    O = replace(x8, x7, x2)
    return O



def solve_67a3c6ac_ff805c23(I):
    x1 = vmirror(I)
    x2 = hmirror(x1)
    x3 = vmirror(x1)
    x4 = ofcolor(x1, ONE)
    x5 = subgrid(x4, x2)
    x6 = subgrid(x4, x3)
    x7 = palette(x5)
    x8 = contained(ONE, x7)
    O = branch(x8, x6, x5)
    return O



def solve_67a3c6ac_e76a88a6(I):
    x1 = vmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = remove(x3, x2)
    x6 = apply(ulcorner, x5)
    x7 = lbind(shift, x4)
    x8 = mapply(x7, x6)
    O = paint(x1, x8)
    return O



def solve_67a3c6ac_7f4411dc(I):
    x1 = vmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = rbind(difference, x3)
    x5 = rbind(greater, TWO)
    x6 = chain(x5, size, x4)
    x7 = compose(x6, dneighbors)
    x8 = sfilter(x3, x7)
    O = fill(x1, ZERO, x8)
    return O



def solve_67a3c6ac_b230c067(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(normalize, x3)
    x5 = leastcommon(x4)
    x6 = matcher(normalize, x5)
    x7 = extract(x2, x6)
    x8 = replace(x1, EIGHT, ONE)
    O = fill(x8, TWO, x7)
    return O



def solve_67a3c6ac_e8593010(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = sizefilter(x2, TWO)
    x5 = merge(x3)
    x6 = fill(x1, THREE, x5)
    x7 = merge(x4)
    x8 = fill(x6, TWO, x7)
    O = replace(x8, ZERO, ONE)
    return O



def solve_67a3c6ac_6d75e8bb(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = ulcorner(x3)
    x5 = subgrid(x3, x1)
    x6 = replace(x5, ZERO, TWO)
    x7 = asobject(x6)
    x8 = shift(x7, x4)
    O = paint(x1, x8)
    return O



def solve_67a3c6ac_1190e5a7(I):
    x1 = vmirror(I)
    x2 = mostcolor(x1)
    x3 = frontiers(x1)
    x4 = sfilter(x3, vline)
    x5 = difference(x3, x4)
    x6 = astuple(x5, x4)
    x7 = apply(size, x6)
    x8 = increment(x7)
    O = canvas(x2, x8)
    return O



def solve_67a3c6ac_6e02f1e3(I):
    x1 = vmirror(I)
    x2 = numcolors(x1)
    x3 = canvas(ZERO, THREE_BY_THREE)
    x4 = equality(x2, THREE)
    x5 = equality(x2, TWO)
    x6 = branch(x4, TWO_BY_ZERO, ORIGIN)
    x7 = branch(x5, TWO_BY_TWO, ZERO_BY_TWO)
    x8 = connect(x6, x7)
    O = fill(x3, FIVE, x8)
    return O



def solve_67a3c6ac_a61f2674(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = replace(x1, FIVE, ZERO)
    x6 = recolor(ONE, x3)
    x7 = recolor(TWO, x4)
    x8 = combine(x6, x7)
    O = paint(x5, x8)
    return O



def solve_67a3c6ac_fcc82909(I):
    x1 = vmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = rbind(add, DOWN)
    x4 = compose(x3, llcorner)
    x5 = compose(toivec, numcolors)
    x6 = fork(add, lrcorner, x5)
    x7 = fork(astuple, x4, x6)
    x8 = compose(box, x7)
    x9 = mapply(x8, x2)
    O = fill(x1, THREE, x9)
    return O



def solve_67a3c6ac_72ca375d(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = rbind(subgrid, x1)
    x5 = apply(x4, x3)
    x6 = apply(vmirror, x5)
    x7 = papply(equality, x5, x6)
    x8 = pair(x5, x7)
    x9 = extract(x8, last)
    O = first(x9)
    return O



def solve_67a3c6ac_253bf280(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, EIGHT)
    x3 = prapply(connect, x2, x2)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = fork(either, vline, hline)
    x8 = mfilter(x6, x7)
    x9 = fill(x1, THREE, x8)
    O = fill(x9, EIGHT, x2)
    return O



def solve_67a3c6ac_1f642eb9(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = rbind(gravitate, x5)
    x7 = compose(crement, x6)
    x8 = fork(shift, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_67a3c6ac_31aa019c(I):
    x1 = vmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = first(x3)
    x5 = neighbors(x4)
    x6 = astuple(TEN, TEN)
    x7 = canvas(ZERO, x6)
    x8 = initset(x4)
    x9 = fill(x7, x2, x8)
    O = fill(x9, TWO, x5)
    return O



def solve_67a3c6ac_27a28665(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = valmax(x2, size)
    x4 = equality(x3, ONE)
    x5 = equality(x3, FOUR)
    x6 = equality(x3, FIVE)
    x7 = branch(x4, TWO, ONE)
    x8 = branch(x5, THREE, x7)
    x9 = branch(x6, SIX, x8)
    O = canvas(x9, UNITY)
    return O



def solve_67a3c6ac_7ddcd7ec(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = color(x5)
    x7 = lbind(position, x5)
    x8 = fork(shoot, center, x7)
    x9 = mapply(x8, x3)
    O = fill(x1, x6, x9)
    return O



def solve_67a3c6ac_3bd67248(I):
    x1 = vmirror(I)
    x2 = height(x1)
    x3 = decrement(x2)
    x4 = decrement(x3)
    x5 = astuple(x4, ONE)
    x6 = astuple(x3, ONE)
    x7 = shoot(x5, UP_RIGHT)
    x8 = shoot(x6, RIGHT)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_67a3c6ac_73251a56(I):
    x1 = vmirror(I)
    x2 = dmirror(x1)
    x3 = papply(pair, x1, x2)
    x4 = lbind(apply, maximum)
    x5 = apply(x4, x3)
    x6 = mostcolor(x5)
    x7 = replace(x5, ZERO, x6)
    x8 = index(x7, ORIGIN)
    x9 = shoot(ORIGIN, UNITY)
    O = fill(x7, x8, x9)
    return O



def solve_67a3c6ac_25d487eb(I):
    x1 = vmirror(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = ofcolor(x1, x2)
    x5 = center(x4)
    x6 = merge(x3)
    x7 = center(x6)
    x8 = subtract(x7, x5)
    x9 = shoot(x5, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_67a3c6ac_8f2ea7aa(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    O = cellwise(x5, x9, ZERO)
    return O



def solve_67a3c6ac_b8825c91(I):
    x1 = vmirror(I)
    x2 = replace(x1, FOUR, ZERO)
    x3 = dmirror(x2)
    x4 = papply(pair, x2, x3)
    x5 = lbind(apply, maximum)
    x6 = apply(x5, x4)
    x7 = cmirror(x6)
    x8 = papply(pair, x6, x7)
    x9 = apply(x5, x8)
    O = cmirror(x9)
    return O



def solve_67a3c6ac_cce03e0d(I):
    x1 = vmirror(I)
    x2 = upscale(x1, THREE)
    x3 = hconcat(x1, x1)
    x4 = hconcat(x3, x1)
    x5 = vconcat(x4, x4)
    x6 = vconcat(x5, x4)
    x7 = ofcolor(x2, ZERO)
    x8 = ofcolor(x2, ONE)
    x9 = combine(x7, x8)
    O = fill(x6, ZERO, x9)
    return O



def solve_67a3c6ac_d364b489(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, DOWN)
    x4 = fill(x1, EIGHT, x3)
    x5 = shift(x2, UP)
    x6 = fill(x4, TWO, x5)
    x7 = shift(x2, RIGHT)
    x8 = fill(x6, SIX, x7)
    x9 = shift(x2, LEFT)
    O = fill(x8, SEVEN, x9)
    return O



def solve_67a3c6ac_a5f85a15(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = interval(ONE, NINE, ONE)
    x4 = apply(double, x3)
    x5 = apply(decrement, x4)
    x6 = papply(astuple, x5, x5)
    x7 = apply(ulcorner, x2)
    x8 = lbind(shift, x6)
    x9 = mapply(x8, x7)
    O = fill(x1, FOUR, x9)
    return O



def solve_67a3c6ac_3ac3eb23(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = chain(ineighbors, last, first)
    x4 = fork(recolor, color, x3)
    x5 = mapply(x4, x2)
    x6 = paint(x1, x5)
    x7 = vsplit(x6, THREE)
    x8 = first(x7)
    x9 = vconcat(x8, x8)
    O = vconcat(x8, x9)
    return O



def solve_67a3c6ac_22168020(I):
    x1 = vmirror(I)
    x2 = palette(x1)
    x3 = remove(ZERO, x2)
    x4 = lbind(ofcolor, x1)
    x5 = lbind(prapply, connect)
    x6 = fork(x5, x4, x4)
    x7 = compose(merge, x6)
    x8 = fork(recolor, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_67a3c6ac_6e82a1ae(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sizefilter, x2)
    x4 = compose(merge, x3)
    x5 = x4(TWO)
    x6 = x4(THREE)
    x7 = x4(FOUR)
    x8 = fill(x1, THREE, x5)
    x9 = fill(x8, TWO, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_67a3c6ac_868de0fa(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = sfilter(x2, square)
    x4 = compose(even, height)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = merge(x5)
    x8 = merge(x6)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, SEVEN, x8)
    return O



def solve_67a3c6ac_681b3aeb(I):
    x1 = vmirror(I)
    x2 = rot270(x1)
    x3 = objects(x2, T, F, T)
    x4 = argmax(x3, size)
    x5 = argmin(x3, size)
    x6 = color(x5)
    x7 = canvas(x6, THREE_BY_THREE)
    x8 = normalize(x4)
    x9 = paint(x7, x8)
    O = rot90(x9)
    return O



def solve_67a3c6ac_8e5a5113(I):
    x1 = vmirror(I)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = rot90(x2)
    x4 = rot180(x2)
    x5 = astuple(x3, x4)
    x6 = astuple(FOUR, EIGHT)
    x7 = apply(tojvec, x6)
    x8 = apply(asobject, x5)
    x9 = mpapply(shift, x8, x7)
    O = paint(x1, x9)
    return O



def solve_67a3c6ac_025d127b(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(color, x2)
    x4 = merge(x2)
    x5 = lbind(colorfilter, x2)
    x6 = rbind(argmax, rightmost)
    x7 = compose(x6, x5)
    x8 = mapply(x7, x3)
    x9 = difference(x4, x8)
    O = move(x1, x9, RIGHT)
    return O



def solve_67a3c6ac_2281f1f4(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, FIVE)
    x3 = product(x2, x2)
    x4 = power(first, TWO)
    x5 = power(last, TWO)
    x6 = fork(astuple, x4, x5)
    x7 = apply(x6, x3)
    x8 = urcorner(x2)
    x9 = remove(x8, x7)
    O = underfill(x1, TWO, x9)
    return O



def solve_67a3c6ac_cf98881b(I):
    x1 = vmirror(I)
    x2 = hsplit(x1, THREE)
    x3 = first(x2)
    x4 = remove(x3, x2)
    x5 = first(x4)
    x6 = last(x4)
    x7 = ofcolor(x5, NINE)
    x8 = ofcolor(x3, FOUR)
    x9 = fill(x6, NINE, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_67a3c6ac_bda2d7a6(I):
    x1 = vmirror(I)
    x2 = partition(x1)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = last(x3)
    x6 = remove(x5, x3)
    x7 = repeat(x5, ONE)
    x8 = combine(x7, x6)
    x9 = mpapply(recolor, x4, x8)
    O = paint(x1, x9)
    return O



def solve_67a3c6ac_6455b5f5(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = argmax(x2, size)
    x5 = valmin(x2, size)
    x6 = sizefilter(x3, x5)
    x7 = recolor(ONE, x4)
    x8 = merge(x6)
    x9 = paint(x1, x7)
    O = fill(x9, EIGHT, x8)
    return O



def solve_67a3c6ac_b8cdaf2b(I):
    x1 = vmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = shift(x3, UP)
    x5 = ulcorner(x4)
    x6 = urcorner(x4)
    x7 = shoot(x5, NEG_UNITY)
    x8 = shoot(x6, UP_RIGHT)
    x9 = combine(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_67a3c6ac_bd4472b8(I):
    x1 = vmirror(I)
    x2 = width(x1)
    x3 = astuple(TWO, x2)
    x4 = crop(x1, ORIGIN, x3)
    x5 = tophalf(x4)
    x6 = dmirror(x5)
    x7 = hupscale(x6, x2)
    x8 = repeat(x7, TWO)
    x9 = merge(x8)
    O = vconcat(x4, x9)
    return O



def solve_67a3c6ac_4be741c5(I):
    x1 = vmirror(I)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = branch(x2, height, width)
    x5 = x4(x1)
    x6 = astuple(ONE, x5)
    x7 = x3(x1)
    x8 = crop(x7, ORIGIN, x6)
    x9 = apply(dedupe, x8)
    O = x3(x9)
    return O



def solve_67a3c6ac_bbc9ae5d(I):
    x1 = vmirror(I)
    x2 = width(x1)
    x3 = palette(x1)
    x4 = halve(x2)
    x5 = vupscale(x1, x4)
    x6 = rbind(shoot, UNITY)
    x7 = other(x3, ZERO)
    x8 = ofcolor(x5, x7)
    x9 = mapply(x6, x8)
    O = fill(x5, x7, x9)
    return O



def solve_67a3c6ac_d90796e8(I):
    x1 = vmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = lbind(contained, TWO)
    x5 = compose(x4, palette)
    x6 = mfilter(x3, x5)
    x7 = cover(x1, x6)
    x8 = matcher(first, THREE)
    x9 = sfilter(x6, x8)
    O = fill(x7, EIGHT, x9)
    return O



def solve_67a3c6ac_2c608aff(I):
    x1 = vmirror(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = toindices(x4)
    x6 = ofcolor(x1, x2)
    x7 = prapply(connect, x5, x6)
    x8 = fork(either, vline, hline)
    x9 = mfilter(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_67a3c6ac_f8b3ba0a(I):
    x1 = vmirror(I)
    x2 = compress(x1)
    x3 = astuple(THREE, ONE)
    x4 = palette(x2)
    x5 = lbind(colorcount, x2)
    x6 = compose(invert, x5)
    x7 = order(x4, x6)
    x8 = rbind(canvas, UNITY)
    x9 = apply(x8, x7)
    x10 = merge(x9)
    O = crop(x10, DOWN, x3)
    return O



def solve_67a3c6ac_80af3007(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    x10 = cellwise(x5, x9, ZERO)
    O = downscale(x10, THREE)
    return O



def solve_67a3c6ac_83302e8f(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = sfilter(x3, square)
    x5 = difference(x3, x4)
    x6 = merge(x4)
    x7 = recolor(THREE, x6)
    x8 = merge(x5)
    x9 = recolor(FOUR, x8)
    x10 = paint(x1, x7)
    O = paint(x10, x9)
    return O



def solve_67a3c6ac_1fad071e(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, ONE)
    x4 = sizefilter(x3, FOUR)
    x5 = size(x4)
    x6 = subtract(FIVE, x5)
    x7 = astuple(ONE, x5)
    x8 = canvas(ONE, x7)
    x9 = astuple(ONE, x6)
    x10 = canvas(ZERO, x9)
    O = hconcat(x8, x10)
    return O



def solve_67a3c6ac_11852cab(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = hmirror(x3)
    x5 = vmirror(x3)
    x6 = dmirror(x3)
    x7 = cmirror(x3)
    x8 = paint(x1, x4)
    x9 = paint(x8, x5)
    x10 = paint(x9, x6)
    O = paint(x10, x7)
    return O



def solve_67a3c6ac_3428a4f5(I):
    x1 = vmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(SIX, FIVE)
    x5 = ofcolor(x2, TWO)
    x6 = ofcolor(x3, TWO)
    x7 = combine(x5, x6)
    x8 = intersection(x5, x6)
    x9 = difference(x7, x8)
    x10 = canvas(ZERO, x4)
    O = fill(x10, THREE, x9)
    return O



def solve_67a3c6ac_178fcbfb(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(vfrontier, x3)
    x5 = fill(x1, TWO, x4)
    x6 = colorfilter(x2, TWO)
    x7 = difference(x2, x6)
    x8 = compose(hfrontier, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x7)
    O = paint(x5, x10)
    return O



def solve_67a3c6ac_54d9e175(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = compose(neighbors, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x3)
    x7 = paint(x1, x6)
    x8 = replace(x7, ONE, SIX)
    x9 = replace(x8, TWO, SEVEN)
    x10 = replace(x9, THREE, EIGHT)
    O = replace(x10, FOUR, NINE)
    return O



def solve_67a3c6ac_623ea044(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = center(x3)
    x5 = color(x3)
    x6 = astuple(UNITY, NEG_UNITY)
    x7 = astuple(UP_RIGHT, DOWN_LEFT)
    x8 = combine(x6, x7)
    x9 = lbind(shoot, x4)
    x10 = mapply(x9, x8)
    O = fill(x1, x5, x10)
    return O



def solve_67a3c6ac_6b9890af(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, TWO)
    x4 = argmin(x2, size)
    x5 = subgrid(x3, x1)
    x6 = width(x5)
    x7 = divide(x6, THREE)
    x8 = upscale(x4, x7)
    x9 = normalize(x8)
    x10 = shift(x9, UNITY)
    O = paint(x5, x10)
    return O



def solve_67a3c6ac_794b24be(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = size(x2)
    x4 = decrement(x3)
    x5 = canvas(ZERO, THREE_BY_THREE)
    x6 = tojvec(x4)
    x7 = connect(ORIGIN, x6)
    x8 = equality(x3, FOUR)
    x9 = insert(UNITY, x7)
    x10 = branch(x8, x9, x7)
    O = fill(x5, TWO, x10)
    return O



def solve_67a3c6ac_88a62173(I):
    x1 = vmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = tophalf(x3)
    x6 = bottomhalf(x2)
    x7 = bottomhalf(x3)
    x8 = astuple(x4, x5)
    x9 = astuple(x6, x7)
    x10 = combine(x8, x9)
    O = leastcommon(x10)
    return O



def solve_67a3c6ac_890034e9(I):
    x1 = vmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = inbox(x3)
    x5 = recolor(ZERO, x4)
    x6 = occurrences(x1, x5)
    x7 = normalize(x3)
    x8 = shift(x7, NEG_UNITY)
    x9 = lbind(shift, x8)
    x10 = mapply(x9, x6)
    O = fill(x1, x2, x10)
    return O



def solve_67a3c6ac_99b1bc43(I):
    x1 = vmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = combine(x4, x5)
    x7 = intersection(x4, x5)
    x8 = difference(x6, x7)
    x9 = shape(x2)
    x10 = canvas(ZERO, x9)
    O = fill(x10, THREE, x8)
    return O



def solve_67a3c6ac_a9f96cdd(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = shift(x2, NEG_UNITY)
    x5 = fill(x3, THREE, x4)
    x6 = shift(x2, UP_RIGHT)
    x7 = fill(x5, SIX, x6)
    x8 = shift(x2, DOWN_LEFT)
    x9 = fill(x7, EIGHT, x8)
    x10 = shift(x2, UNITY)
    O = fill(x9, SEVEN, x10)
    return O



def solve_67a3c6ac_af902bf9(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, FOUR)
    x3 = prapply(connect, x2, x2)
    x4 = fork(either, vline, hline)
    x5 = mfilter(x3, x4)
    x6 = underfill(x1, NEG_ONE, x5)
    x7 = objects(x6, F, F, T)
    x8 = compose(backdrop, inbox)
    x9 = mapply(x8, x7)
    x10 = fill(x6, TWO, x9)
    O = replace(x10, NEG_ONE, ZERO)
    return O



def solve_67a3c6ac_b548a754(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, EIGHT, ZERO)
    x4 = leastcolor(x3)
    x5 = replace(x3, x4, ZERO)
    x6 = leastcolor(x5)
    x7 = merge(x2)
    x8 = backdrop(x7)
    x9 = box(x7)
    x10 = fill(x1, x4, x8)
    O = fill(x10, x6, x9)
    return O



def solve_67a3c6ac_c3e719e8(I):
    x1 = vmirror(I)
    x2 = mostcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = upscale(x1, THREE)
    x5 = ofcolor(x4, x2)
    x6 = asindices(x4)
    x7 = difference(x6, x5)
    x8 = hconcat(x3, x1)
    x9 = vconcat(x8, x8)
    x10 = vconcat(x9, x8)
    O = fill(x10, ZERO, x7)
    return O



def solve_67a3c6ac_de1cd16c(I):
    x1 = vmirror(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = rbind(subgrid, x1)
    x7 = apply(x6, x5)
    x8 = rbind(colorcount, x2)
    x9 = argmax(x7, x8)
    x10 = mostcolor(x9)
    O = canvas(x10, UNITY)
    return O



def solve_67a3c6ac_d8c310e9(I):
    x1 = vmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = hperiod(x3)
    x5 = multiply(x4, THREE)
    x6 = tojvec(x4)
    x7 = tojvec(x5)
    x8 = shift(x3, x6)
    x9 = shift(x3, x7)
    x10 = paint(x1, x8)
    O = paint(x10, x9)
    return O



def solve_67a3c6ac_a3325580(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = valmax(x2, size)
    x4 = sizefilter(x2, x3)
    x5 = order(x4, leftmost)
    x6 = apply(color, x5)
    x7 = astuple(ONE, x3)
    x8 = rbind(canvas, x7)
    x9 = apply(x8, x6)
    x10 = merge(x9)
    O = dmirror(x10)
    return O



def solve_67a3c6ac_8eb1be9a(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = interval(NEG_TWO, FOUR, ONE)
    x5 = lbind(shift, x3)
    x6 = height(x3)
    x7 = rbind(multiply, x6)
    x8 = apply(x7, x4)
    x9 = apply(toivec, x8)
    x10 = mapply(x5, x9)
    O = paint(x1, x10)
    return O



def solve_67a3c6ac_321b1fc6(I):
    x1 = vmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = colorfilter(x2, EIGHT)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = cover(x1, x5)
    x7 = normalize(x5)
    x8 = lbind(shift, x7)
    x9 = apply(ulcorner, x3)
    x10 = mapply(x8, x9)
    O = paint(x6, x10)
    return O



def solve_67a3c6ac_1caeab9d(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, ONE)
    x4 = lowermost(x3)
    x5 = lbind(subtract, x4)
    x6 = chain(toivec, x5, lowermost)
    x7 = fork(shift, identity, x6)
    x8 = merge(x2)
    x9 = cover(x1, x8)
    x10 = mapply(x7, x2)
    O = paint(x9, x10)
    return O



def solve_67a3c6ac_1b60fb0c(I):
    x1 = vmirror(I)
    x2 = rot90(x1)
    x3 = ofcolor(x1, ONE)
    x4 = ofcolor(x2, ONE)
    x5 = neighbors(ORIGIN)
    x6 = mapply(neighbors, x5)
    x7 = lbind(shift, x4)
    x8 = apply(x7, x6)
    x9 = lbind(intersection, x3)
    x10 = compose(size, x9)
    x11 = argmax(x8, x10)
    O = underfill(x1, TWO, x11)
    return O



def solve_67a3c6ac_ddf7fa4f(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = colorfilter(x2, FIVE)
    x5 = product(x3, x4)
    x6 = fork(vmatching, first, last)
    x7 = sfilter(x5, x6)
    x8 = compose(color, first)
    x9 = fork(recolor, x8, last)
    x10 = mapply(x9, x7)
    O = paint(x1, x10)
    return O



def solve_67a3c6ac_47c1f68c(I):
    x1 = vmirror(I)
    x2 = leastcolor(x1)
    x3 = vmirror(x1)
    x4 = objects(x1, T, T, T)
    x5 = merge(x4)
    x6 = mostcolor(x5)
    x7 = cellwise(x1, x3, x2)
    x8 = hmirror(x7)
    x9 = cellwise(x7, x8, x2)
    x10 = compress(x9)
    O = replace(x10, x2, x6)
    return O



def solve_67a3c6ac_6c434453(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, EIGHT)
    x4 = dneighbors(UNITY)
    x5 = insert(UNITY, x4)
    x6 = merge(x3)
    x7 = cover(x1, x6)
    x8 = apply(ulcorner, x3)
    x9 = lbind(shift, x5)
    x10 = mapply(x9, x8)
    O = fill(x7, TWO, x10)
    return O



def solve_67a3c6ac_23581191(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = paint(x1, x6)
    x8 = fork(intersection, first, last)
    x9 = apply(x4, x2)
    x10 = x8(x9)
    O = fill(x7, TWO, x10)
    return O



def solve_67a3c6ac_c8cbb738(I):
    x1 = vmirror(I)
    x2 = mostcolor(x1)
    x3 = fgpartition(x1)
    x4 = valmax(x3, shape)
    x5 = canvas(x2, x4)
    x6 = apply(normalize, x3)
    x7 = lbind(subtract, x4)
    x8 = chain(halve, x7, shape)
    x9 = fork(shift, identity, x8)
    x10 = mapply(x9, x6)
    O = paint(x5, x10)
    return O



def solve_67a3c6ac_d4469b4b(I):
    x1 = vmirror(I)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = equality(x3, ONE)
    x5 = equality(x3, TWO)
    x6 = branch(x4, UNITY, TWO_BY_TWO)
    x7 = branch(x5, RIGHT, x6)
    x8 = fork(combine, vfrontier, hfrontier)
    x9 = x8(x7)
    x10 = canvas(ZERO, THREE_BY_THREE)
    O = fill(x10, FIVE, x9)
    return O



def solve_67a3c6ac_6ecd11f4(I):
    x1 = vmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = subgrid(x3, x1)
    x6 = subgrid(x4, x1)
    x7 = width(x5)
    x8 = width(x6)
    x9 = divide(x7, x8)
    x10 = downscale(x5, x9)
    x11 = ofcolor(x10, ZERO)
    O = fill(x6, ZERO, x11)
    return O



def solve_67a3c6ac_eb281b96(I):
    x1 = vmirror(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = decrement(x2)
    x5 = astuple(x4, x3)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    x8 = vconcat(x1, x7)
    x9 = double(x4)
    x10 = astuple(x9, x3)
    x11 = crop(x8, DOWN, x10)
    O = vconcat(x8, x11)
    return O



def solve_67a3c6ac_ff28f65a(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = double(x3)
    x5 = interval(ZERO, x4, TWO)
    x6 = apply(tojvec, x5)
    x7 = astuple(ONE, NINE)
    x8 = canvas(ZERO, x7)
    x9 = fill(x8, ONE, x6)
    x10 = hsplit(x9, THREE)
    O = merge(x10)
    return O



def solve_67a3c6ac_7e0986d6(I):
    x1 = vmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = replace(x1, x2, ZERO)
    x5 = leastcolor(x4)
    x6 = rbind(colorcount, x5)
    x7 = chain(positive, decrement, x6)
    x8 = rbind(toobject, x4)
    x9 = chain(x7, x8, dneighbors)
    x10 = sfilter(x3, x9)
    O = fill(x4, x5, x10)
    return O



def solve_67a3c6ac_09629e4f(I):
    x1 = vmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = argmin(x2, numcolors)
    x4 = normalize(x3)
    x5 = upscale(x4, FOUR)
    x6 = paint(x1, x5)
    x7 = ofcolor(x1, FIVE)
    O = fill(x6, FIVE, x7)
    return O



def solve_67a3c6ac_a85d4709(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, FIVE)
    x3 = lbind(matcher, last)
    x4 = lbind(sfilter, x2)
    x5 = lbind(mapply, hfrontier)
    x6 = chain(x5, x4, x3)
    x7 = x6(ZERO)
    x8 = x6(TWO)
    x9 = x6(ONE)
    x10 = fill(x1, TWO, x7)
    x11 = fill(x10, THREE, x8)
    O = fill(x11, FOUR, x9)
    return O



def solve_67a3c6ac_feca6190(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = multiply(x3, FIVE)
    x5 = astuple(x4, x4)
    x6 = canvas(ZERO, x5)
    x7 = rbind(shoot, UNITY)
    x8 = compose(x7, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x2)
    x11 = paint(x6, x10)
    O = hmirror(x11)
    return O



def solve_67a3c6ac_a68b268e(I):
    x1 = vmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = lefthalf(x2)
    x5 = righthalf(x2)
    x6 = lefthalf(x3)
    x7 = righthalf(x3)
    x8 = ofcolor(x5, FOUR)
    x9 = ofcolor(x4, SEVEN)
    x10 = ofcolor(x6, EIGHT)
    x11 = fill(x7, EIGHT, x10)
    x12 = fill(x11, FOUR, x8)
    O = fill(x12, SEVEN, x9)
    return O



def solve_67a3c6ac_beb8660c(I):
    x1 = vmirror(I)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(invert, size)
    x5 = order(x3, x4)
    x6 = apply(normalize, x5)
    x7 = size(x6)
    x8 = interval(ZERO, x7, ONE)
    x9 = apply(toivec, x8)
    x10 = mpapply(shift, x6, x9)
    x11 = canvas(ZERO, x2)
    x12 = paint(x11, x10)
    O = rot180(x12)
    return O



def solve_67a3c6ac_913fb3ed(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, THREE)
    x3 = ofcolor(x1, EIGHT)
    x4 = ofcolor(x1, TWO)
    x5 = mapply(neighbors, x2)
    x6 = mapply(neighbors, x3)
    x7 = mapply(neighbors, x4)
    x8 = fill(x1, SIX, x5)
    x9 = fill(x8, FOUR, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_67a3c6ac_0962bcdd(I):
    x1 = vmirror(I)
    x2 = leastcolor(x1)
    x3 = replace(x1, ZERO, x2)
    x4 = leastcolor(x3)
    x5 = ofcolor(x1, x4)
    x6 = mapply(dneighbors, x5)
    x7 = fill(x1, x4, x6)
    x8 = objects(x7, F, T, T)
    x9 = fork(connect, ulcorner, lrcorner)
    x10 = fork(connect, llcorner, urcorner)
    x11 = fork(combine, x9, x10)
    x12 = mapply(x11, x8)
    O = fill(x7, x2, x12)
    return O



def solve_67a3c6ac_3631a71a(I):
    x1 = vmirror(I)
    x2 = shape(x1)
    x3 = replace(x1, NINE, ZERO)
    x4 = lbind(apply, maximum)
    x5 = dmirror(x3)
    x6 = papply(pair, x3, x5)
    x7 = apply(x4, x6)
    x8 = subtract(x2, TWO_BY_TWO)
    x9 = crop(x7, TWO_BY_TWO, x8)
    x10 = vmirror(x9)
    x11 = objects(x10, T, F, T)
    x12 = merge(x11)
    x13 = shift(x12, TWO_BY_TWO)
    O = paint(x7, x13)
    return O



def solve_67a3c6ac_05269061(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = neighbors(ORIGIN)
    x4 = mapply(neighbors, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = merge(x2)
    x8 = lbind(shift, x7)
    x9 = mapply(x8, x6)
    x10 = shift(x9, UP_RIGHT)
    x11 = shift(x9, DOWN_LEFT)
    x12 = paint(x1, x9)
    x13 = paint(x12, x10)
    O = paint(x13, x11)
    return O



def solve_67a3c6ac_95990924(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = apply(ulcorner, x3)
    x5 = apply(urcorner, x3)
    x6 = apply(llcorner, x3)
    x7 = apply(lrcorner, x3)
    x8 = fill(x1, ONE, x4)
    x9 = fill(x8, TWO, x5)
    x10 = fill(x9, THREE, x6)
    O = fill(x10, FOUR, x7)
    return O



def solve_67a3c6ac_e509e548(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = rbind(subgrid, x1)
    x4 = chain(palette, trim, x3)
    x5 = lbind(contained, THREE)
    x6 = compose(x5, x4)
    x7 = fork(add, height, width)
    x8 = compose(decrement, x7)
    x9 = fork(equality, size, x8)
    x10 = mfilter(x2, x6)
    x11 = mfilter(x2, x9)
    x12 = replace(x1, THREE, SIX)
    x13 = fill(x12, TWO, x10)
    O = fill(x13, ONE, x11)
    return O



def solve_67a3c6ac_d43fd935(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, THREE)
    x4 = sizefilter(x2, ONE)
    x5 = rbind(vmatching, x3)
    x6 = rbind(hmatching, x3)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = rbind(gravitate, x3)
    x10 = fork(add, center, x9)
    x11 = fork(connect, center, x10)
    x12 = fork(recolor, color, x11)
    x13 = mapply(x12, x8)
    O = paint(x1, x13)
    return O



def solve_67a3c6ac_db3e9e38(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, SEVEN)
    x3 = lrcorner(x2)
    x4 = shoot(x3, UP_RIGHT)
    x5 = shoot(x3, NEG_UNITY)
    x6 = combine(x4, x5)
    x7 = rbind(shoot, UP)
    x8 = mapply(x7, x6)
    x9 = last(x3)
    x10 = rbind(subtract, x9)
    x11 = chain(even, x10, last)
    x12 = fill(x1, EIGHT, x8)
    x13 = sfilter(x8, x11)
    O = fill(x12, SEVEN, x13)
    return O



def solve_67a3c6ac_e73095fd(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = fork(equality, toindices, backdrop)
    x5 = sfilter(x3, x4)
    x6 = lbind(mapply, dneighbors)
    x7 = chain(x6, corners, outbox)
    x8 = fork(difference, x7, outbox)
    x9 = ofcolor(x1, FIVE)
    x10 = rbind(intersection, x9)
    x11 = matcher(size, ZERO)
    x12 = chain(x11, x10, x8)
    x13 = mfilter(x5, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_67a3c6ac_1bfc4729(I):
    x1 = vmirror(I)
    x2 = asindices(x1)
    x3 = tophalf(x1)
    x4 = bottomhalf(x1)
    x5 = leastcolor(x3)
    x6 = leastcolor(x4)
    x7 = hfrontier(TWO_BY_ZERO)
    x8 = box(x2)
    x9 = combine(x7, x8)
    x10 = fill(x3, x5, x9)
    x11 = hmirror(x10)
    x12 = replace(x11, x5, x6)
    O = vconcat(x10, x12)
    return O



def solve_67a3c6ac_93b581b8(I):
    x1 = vmirror(I)
    x2 = fgpartition(x1)
    x3 = chain(cmirror, dmirror, merge)
    x4 = x3(x2)
    x5 = upscale(x4, THREE)
    x6 = astuple(NEG_TWO, NEG_TWO)
    x7 = shift(x5, x6)
    x8 = underpaint(x1, x7)
    x9 = toindices(x4)
    x10 = fork(combine, hfrontier, vfrontier)
    x11 = mapply(x10, x9)
    x12 = difference(x11, x9)
    O = fill(x8, ZERO, x12)
    return O



def solve_67a3c6ac_9edfc990(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = ofcolor(x1, ONE)
    x5 = rbind(adjacent, x4)
    x6 = mfilter(x3, x5)
    x7 = recolor(ONE, x6)
    O = paint(x1, x7)
    return O



def solve_67a3c6ac_a65b410d(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = urcorner(x2)
    x4 = shoot(x3, UP_RIGHT)
    x5 = shoot(x3, DOWN_LEFT)
    x6 = underfill(x1, THREE, x4)
    x7 = underfill(x6, ONE, x5)
    x8 = rbind(shoot, LEFT)
    x9 = mapply(x8, x4)
    x10 = mapply(x8, x5)
    x11 = underfill(x7, ONE, x10)
    O = underfill(x11, THREE, x9)
    return O



def solve_67a3c6ac_7447852a(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = compose(last, center)
    x5 = order(x3, x4)
    x6 = size(x5)
    x7 = interval(ZERO, x6, THREE)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = interval(ZERO, x6, ONE)
    x11 = pair(x5, x10)
    x12 = sfilter(x11, x9)
    x13 = mapply(first, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_67a3c6ac_97999447(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(toindices, x2)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    x8 = paint(x1, x7)
    x9 = interval(ZERO, FIVE, ONE)
    x10 = apply(double, x9)
    x11 = apply(increment, x10)
    x12 = apply(tojvec, x11)
    x13 = prapply(shift, x3, x12)
    x14 = merge(x13)
    O = fill(x8, FIVE, x14)
    return O



def solve_67a3c6ac_91714a58(I):
    x1 = vmirror(I)
    x2 = shape(x1)
    x3 = asindices(x1)
    x4 = objects(x1, T, F, T)
    x5 = argmax(x4, size)
    x6 = mostcolor(x5)
    x7 = canvas(ZERO, x2)
    x8 = paint(x7, x5)
    x9 = rbind(toobject, x8)
    x10 = rbind(colorcount, x6)
    x11 = chain(x10, x9, neighbors)
    x12 = lbind(greater, THREE)
    x13 = compose(x12, x11)
    x14 = sfilter(x3, x13)
    O = fill(x8, ZERO, x14)
    return O



def solve_67a3c6ac_8e1813be(I):
    x1 = vmirror(I)
    x2 = replace(x1, FIVE, ZERO)
    x3 = objects(x2, T, T, T)
    x4 = first(x3)
    x5 = vline(x4)
    x6 = branch(x5, dmirror, identity)
    x7 = x6(x2)
    x8 = objects(x7, T, T, T)
    x9 = order(x8, uppermost)
    x10 = apply(color, x9)
    x11 = dedupe(x10)
    x12 = size(x11)
    x13 = rbind(repeat, x12)
    x14 = apply(x13, x11)
    O = x6(x14)
    return O



def solve_67a3c6ac_bc1d5164(I):
    x1 = vmirror(I)
    x2 = leastcolor(x1)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = crop(x1, TWO_BY_ZERO, THREE_BY_THREE)
    x5 = tojvec(FOUR)
    x6 = crop(x1, x5, THREE_BY_THREE)
    x7 = astuple(TWO, FOUR)
    x8 = crop(x1, x7, THREE_BY_THREE)
    x9 = canvas(ZERO, THREE_BY_THREE)
    x10 = rbind(ofcolor, x2)
    x11 = astuple(x3, x4)
    x12 = astuple(x6, x8)
    x13 = combine(x11, x12)
    x14 = mapply(x10, x13)
    O = fill(x9, x2, x14)
    return O



def solve_67a3c6ac_ce602527(I):
    x1 = vmirror(I)
    x2 = vmirror(x1)
    x3 = fgpartition(x2)
    x4 = order(x3, size)
    x5 = last(x4)
    x6 = remove(x5, x4)
    x7 = compose(toindices, normalize)
    x8 = rbind(upscale, TWO)
    x9 = chain(toindices, x8, normalize)
    x10 = x7(x5)
    x11 = rbind(intersection, x10)
    x12 = chain(size, x11, x9)
    x13 = argmax(x6, x12)
    x14 = subgrid(x13, x2)
    O = vmirror(x14)
    return O



def solve_67a3c6ac_5c2c9af4(I):
    x1 = vmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = center(x3)
    x5 = ulcorner(x3)
    x6 = subtract(x4, x5)
    x7 = multiply(NEG_ONE, NINE)
    x8 = interval(ZERO, NINE, ONE)
    x9 = interval(ZERO, x7, NEG_ONE)
    x10 = lbind(multiply, x6)
    x11 = apply(x10, x8)
    x12 = apply(x10, x9)
    x13 = pair(x11, x12)
    x14 = mapply(box, x13)
    x15 = shift(x14, x4)
    O = fill(x1, x2, x15)
    return O



def solve_67a3c6ac_75b8110e(I):
    x1 = vmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = bottomhalf(x2)
    x6 = tophalf(x3)
    x7 = bottomhalf(x3)
    x8 = rbind(ofcolor, ZERO)
    x9 = fork(difference, asindices, x8)
    x10 = fork(toobject, x9, identity)
    x11 = x10(x6)
    x12 = x10(x5)
    x13 = x10(x7)
    x14 = paint(x4, x13)
    x15 = paint(x14, x12)
    O = paint(x15, x11)
    return O



def solve_67a3c6ac_c3f564a4(I):
    x1 = vmirror(I)
    x2 = asindices(x1)
    x3 = dmirror(x1)
    x4 = invert(NINE)
    x5 = papply(pair, x1, x3)
    x6 = lbind(apply, maximum)
    x7 = apply(x6, x5)
    x8 = ofcolor(x7, ZERO)
    x9 = difference(x2, x8)
    x10 = toobject(x9, x7)
    x11 = interval(x4, NINE, ONE)
    x12 = interval(NINE, x4, NEG_ONE)
    x13 = pair(x11, x12)
    x14 = lbind(shift, x10)
    x15 = mapply(x14, x13)
    O = paint(x7, x15)
    return O



def solve_67a3c6ac_1a07d186(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = mapply(x12, x8)
    x14 = merge(x3)
    x15 = cover(x1, x14)
    O = paint(x15, x13)
    return O



def solve_67a3c6ac_d687bc17(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = merge(x3)
    x14 = mapply(x12, x8)
    x15 = cover(x1, x13)
    O = paint(x15, x14)
    return O



def solve_67a3c6ac_9af7a82c(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = order(x2, size)
    x4 = valmax(x2, size)
    x5 = rbind(astuple, ONE)
    x6 = lbind(subtract, x4)
    x7 = compose(x5, size)
    x8 = chain(x5, x6, size)
    x9 = fork(canvas, color, x7)
    x10 = lbind(canvas, ZERO)
    x11 = compose(x10, x8)
    x12 = fork(vconcat, x9, x11)
    x13 = compose(cmirror, x12)
    x14 = apply(x13, x3)
    x15 = merge(x14)
    O = cmirror(x15)
    return O



def solve_67a3c6ac_ef135b50(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, ZERO)
    x4 = product(x2, x2)
    x5 = power(first, TWO)
    x6 = compose(first, last)
    x7 = fork(equality, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = fork(connect, first, last)
    x10 = mapply(x9, x8)
    x11 = intersection(x10, x3)
    x12 = fill(x1, NINE, x11)
    x13 = trim(x12)
    x14 = asobject(x13)
    x15 = shift(x14, UNITY)
    O = paint(x1, x15)
    return O



def solve_67a3c6ac_cbded52d(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = product(x3, x3)
    x5 = fork(vmatching, first, last)
    x6 = fork(hmatching, first, last)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = compose(center, first)
    x10 = compose(center, last)
    x11 = fork(connect, x9, x10)
    x12 = chain(initset, center, x11)
    x13 = compose(color, first)
    x14 = fork(recolor, x13, x12)
    x15 = mapply(x14, x8)
    O = paint(x1, x15)
    return O



def solve_67a3c6ac_e26a3af2(I):
    x1 = vmirror(I)
    x2 = rot90(x1)
    x3 = apply(mostcommon, x1)
    x4 = apply(mostcommon, x2)
    x5 = repeat(x3, ONE)
    x6 = repeat(x4, ONE)
    x7 = compose(size, dedupe)
    x8 = x7(x3)
    x9 = x7(x4)
    x10 = greater(x9, x8)
    x11 = branch(x10, height, width)
    x12 = x11(x1)
    x13 = rot90(x5)
    x14 = branch(x10, x6, x13)
    x15 = branch(x10, vupscale, hupscale)
    O = x15(x14, x12)
    return O



def solve_67a3c6ac_6cf79266(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, ZERO)
    x3 = astuple(ZERO, ORIGIN)
    x4 = initset(x3)
    x5 = upscale(x4, THREE)
    x6 = toindices(x5)
    x7 = lbind(shift, x6)
    x8 = rbind(difference, x2)
    x9 = chain(size, x8, x7)
    x10 = matcher(x9, ZERO)
    x11 = lbind(add, NEG_UNITY)
    x12 = chain(flip, x10, x11)
    x13 = fork(both, x10, x12)
    x14 = sfilter(x2, x13)
    x15 = mapply(x7, x14)
    O = fill(x1, ONE, x15)
    return O



def solve_67a3c6ac_a87f7484(I):
    x1 = vmirror(I)
    x2 = numcolors(x1)
    x3 = portrait(x1)
    x4 = branch(x3, dmirror, identity)
    x5 = x4(x1)
    x6 = decrement(x2)
    x7 = hsplit(x5, x6)
    x8 = rbind(ofcolor, ZERO)
    x9 = apply(x8, x7)
    x10 = leastcommon(x9)
    x11 = matcher(x8, x10)
    x12 = extract(x7, x11)
    O = x4(x12)
    return O



def solve_67a3c6ac_4093f84a(I):
    x1 = vmirror(I)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, FIVE)
    x4 = ofcolor(x1, FIVE)
    x5 = portrait(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x3)
    x8 = lefthalf(x7)
    x9 = righthalf(x7)
    x10 = rbind(order, identity)
    x11 = rbind(order, invert)
    x12 = apply(x10, x8)
    x13 = apply(x11, x9)
    x14 = hconcat(x12, x13)
    O = x6(x14)
    return O



def solve_67a3c6ac_ba26e723(I):
    x1 = vmirror(I)
    x2 = rbind(divide, THREE)
    x3 = rbind(multiply, THREE)
    x4 = compose(x3, x2)
    x5 = fork(equality, identity, x4)
    x6 = compose(x5, last)
    x7 = ofcolor(x1, FOUR)
    x8 = sfilter(x7, x6)
    O = fill(x1, SIX, x8)
    return O



def solve_67a3c6ac_4612dd53(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = box(x2)
    x4 = fill(x1, TWO, x3)
    x5 = subgrid(x2, x4)
    x6 = ofcolor(x5, ONE)
    x7 = mapply(vfrontier, x6)
    x8 = mapply(hfrontier, x6)
    x9 = size(x7)
    x10 = size(x8)
    x11 = greater(x9, x10)
    x12 = branch(x11, x8, x7)
    x13 = fill(x5, TWO, x12)
    x14 = ofcolor(x13, TWO)
    x15 = ulcorner(x2)
    x16 = shift(x14, x15)
    O = underfill(x1, TWO, x16)
    return O



def solve_67a3c6ac_29c11459(I):
    x1 = vmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = objects(x3, T, F, T)
    x5 = objects(x2, T, F, T)
    x6 = compose(hfrontier, center)
    x7 = fork(recolor, color, x6)
    x8 = mapply(x7, x5)
    x9 = paint(x2, x8)
    x10 = mapply(x7, x4)
    x11 = paint(x1, x10)
    x12 = objects(x9, T, F, T)
    x13 = apply(urcorner, x12)
    x14 = shift(x13, RIGHT)
    x15 = merge(x12)
    x16 = paint(x11, x15)
    O = fill(x16, FIVE, x14)
    return O



def solve_67a3c6ac_963e52fc(I):
    x1 = vmirror(I)
    x2 = width(x1)
    x3 = asobject(x1)
    x4 = hperiod(x3)
    x5 = height(x3)
    x6 = astuple(x5, x4)
    x7 = ulcorner(x3)
    x8 = crop(x1, x7, x6)
    x9 = rot90(x8)
    x10 = double(x2)
    x11 = divide(x10, x4)
    x12 = increment(x11)
    x13 = repeat(x9, x12)
    x14 = merge(x13)
    x15 = rot270(x14)
    x16 = astuple(x5, x10)
    O = crop(x15, ORIGIN, x16)
    return O



def solve_67a3c6ac_1f0c79e5(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = leastcolor(x3)
    x5 = ofcolor(x3, x4)
    x6 = combine(x2, x5)
    x7 = recolor(x4, x6)
    x8 = compose(decrement, double)
    x9 = ulcorner(x6)
    x10 = invert(x9)
    x11 = shift(x2, x10)
    x12 = apply(x8, x11)
    x13 = interval(ZERO, NINE, ONE)
    x14 = prapply(multiply, x12, x13)
    x15 = lbind(shift, x7)
    x16 = mapply(x15, x14)
    O = paint(x1, x16)
    return O



def solve_67a3c6ac_6773b310(I):
    x1 = vmirror(I)
    x2 = compress(x1)
    x3 = neighbors(ORIGIN)
    x4 = insert(ORIGIN, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = astuple(FOUR, FOUR)
    x8 = shift(x6, x7)
    x9 = fork(insert, identity, neighbors)
    x10 = apply(x9, x8)
    x11 = rbind(toobject, x2)
    x12 = apply(x11, x10)
    x13 = rbind(colorcount, SIX)
    x14 = matcher(x13, TWO)
    x15 = mfilter(x12, x14)
    x16 = fill(x2, ONE, x15)
    x17 = replace(x16, SIX, ZERO)
    O = downscale(x17, THREE)
    return O



def solve_67a3c6ac_780d0b14(I):
    x1 = vmirror(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, T, T)
    x4 = rbind(greater, TWO)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = totuple(x6)
    x8 = apply(color, x7)
    x9 = apply(center, x7)
    x10 = pair(x8, x9)
    x11 = fill(x1, ZERO, x2)
    x12 = paint(x11, x10)
    x13 = rbind(greater, ONE)
    x14 = compose(dedupe, totuple)
    x15 = chain(x13, size, x14)
    x16 = sfilter(x12, x15)
    x17 = rot90(x16)
    x18 = sfilter(x17, x15)
    O = rot270(x18)
    return O



def solve_67a3c6ac_2204b7a8(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sfilter, x2)
    x4 = compose(size, x3)
    x5 = x4(vline)
    x6 = x4(hline)
    x7 = greater(x5, x6)
    x8 = branch(x7, lefthalf, tophalf)
    x9 = branch(x7, righthalf, bottomhalf)
    x10 = branch(x7, hconcat, vconcat)
    x11 = x8(x1)
    x12 = x9(x1)
    x13 = index(x11, ORIGIN)
    x14 = shape(x12)
    x15 = decrement(x14)
    x16 = index(x12, x15)
    x17 = replace(x11, THREE, x13)
    x18 = replace(x12, THREE, x16)
    O = x10(x17, x18)
    return O



def solve_67a3c6ac_d9f24cd1(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, FIVE)
    x4 = prapply(connect, x2, x3)
    x5 = mfilter(x4, vline)
    x6 = underfill(x1, TWO, x5)
    x7 = matcher(numcolors, TWO)
    x8 = objects(x6, F, F, T)
    x9 = sfilter(x8, x7)
    x10 = difference(x8, x9)
    x11 = colorfilter(x10, TWO)
    x12 = mapply(toindices, x11)
    x13 = apply(urcorner, x9)
    x14 = shift(x13, UNITY)
    x15 = rbind(shoot, UP)
    x16 = mapply(x15, x14)
    x17 = fill(x6, TWO, x16)
    x18 = mapply(vfrontier, x12)
    O = fill(x17, TWO, x18)
    return O



def solve_67a3c6ac_b782dc8a(I):
    x1 = vmirror(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = ofcolor(x1, x2)
    x5 = first(x4)
    x6 = dneighbors(x5)
    x7 = toobject(x6, x1)
    x8 = mostcolor(x7)
    x9 = ofcolor(x1, x8)
    x10 = colorfilter(x3, ZERO)
    x11 = rbind(adjacent, x9)
    x12 = mfilter(x10, x11)
    x13 = toindices(x12)
    x14 = rbind(manhattan, x4)
    x15 = chain(even, x14, initset)
    x16 = sfilter(x13, x15)
    x17 = difference(x13, x16)
    x18 = fill(x1, x2, x16)
    O = fill(x18, x8, x17)
    return O



def solve_67a3c6ac_673ef223(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, EIGHT)
    x4 = replace(x1, EIGHT, FOUR)
    x5 = colorfilter(x2, TWO)
    x6 = argmin(x2, uppermost)
    x7 = apply(uppermost, x5)
    x8 = fork(subtract, maximum, minimum)
    x9 = x8(x7)
    x10 = toivec(x9)
    x11 = leftmost(x6)
    x12 = equality(x11, ZERO)
    x13 = branch(x12, LEFT, RIGHT)
    x14 = rbind(shoot, x13)
    x15 = mapply(x14, x3)
    x16 = underfill(x4, EIGHT, x15)
    x17 = shift(x3, x10)
    x18 = mapply(hfrontier, x17)
    O = underfill(x16, EIGHT, x18)
    return O



def solve_67a3c6ac_f5b8619d(I):
    x1 = vmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = mapply(vfrontier, x3)
    x5 = underfill(x1, EIGHT, x4)
    x6 = hconcat(x5, x5)
    O = vconcat(x6, x6)
    return O



def solve_67a3c6ac_f8c80d96(I):
    x1 = vmirror(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = colorfilter(x3, x2)
    x5 = argmax(x4, size)
    x6 = argmin(x3, width)
    x7 = size(x6)
    x8 = equality(x7, ONE)
    x9 = branch(x8, identity, outbox)
    x10 = chain(outbox, outbox, x9)
    x11 = power(x10, TWO)
    x12 = power(x10, THREE)
    x13 = x10(x5)
    x14 = x11(x5)
    x15 = x12(x5)
    x16 = fill(x1, x2, x13)
    x17 = fill(x16, x2, x14)
    x18 = fill(x17, x2, x15)
    O = replace(x18, ZERO, FIVE)
    return O



def solve_67a3c6ac_ecdecbb3(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = colorfilter(x2, EIGHT)
    x5 = product(x3, x4)
    x6 = fork(gravitate, first, last)
    x7 = compose(crement, x6)
    x8 = compose(center, first)
    x9 = fork(add, x8, x7)
    x10 = fork(connect, x8, x9)
    x11 = apply(x10, x5)
    x12 = lbind(greater, EIGHT)
    x13 = compose(x12, size)
    x14 = mfilter(x11, x13)
    x15 = fill(x1, TWO, x14)
    x16 = apply(x9, x5)
    x17 = intersection(x14, x16)
    x18 = mapply(neighbors, x17)
    O = fill(x15, EIGHT, x18)
    return O



def solve_67a3c6ac_e5062a87(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = recolor(ZERO, x2)
    x4 = normalize(x3)
    x5 = occurrences(x1, x3)
    x6 = lbind(shift, x4)
    x7 = apply(x6, x5)
    x8 = astuple(ONE, THREE)
    x9 = astuple(FIVE, ONE)
    x10 = astuple(TWO, SIX)
    x11 = initset(x8)
    x12 = insert(x9, x11)
    x13 = insert(x10, x12)
    x14 = rbind(contained, x13)
    x15 = chain(flip, x14, ulcorner)
    x16 = sfilter(x7, x15)
    x17 = merge(x16)
    x18 = recolor(TWO, x17)
    O = paint(x1, x18)
    return O



def solve_67a3c6ac_a8d7556c(I):
    x1 = vmirror(I)
    x2 = initset(ORIGIN)
    x3 = recolor(ZERO, x2)
    x4 = upscale(x3, TWO)
    x5 = occurrences(x1, x4)
    x6 = lbind(shift, x4)
    x7 = mapply(x6, x5)
    x8 = fill(x1, TWO, x7)
    x9 = add(SIX, SIX)
    x10 = astuple(EIGHT, x9)
    x11 = index(x8, x10)
    x12 = equality(x11, TWO)
    x13 = initset(x10)
    x14 = add(x10, DOWN)
    x15 = insert(x14, x13)
    x16 = toobject(x15, x8)
    x17 = toobject(x15, x1)
    x18 = branch(x12, x17, x16)
    O = paint(x8, x18)
    return O



def solve_67a3c6ac_4938f0c2(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, TWO)
    x4 = vmirror(x3)
    x5 = height(x3)
    x6 = width(x3)
    x7 = toivec(x5)
    x8 = tojvec(x6)
    x9 = add(x8, ZERO_BY_TWO)
    x10 = add(x7, TWO_BY_ZERO)
    x11 = shift(x4, x9)
    x12 = fill(x1, TWO, x11)
    x13 = ofcolor(x12, TWO)
    x14 = hmirror(x13)
    x15 = shift(x14, x10)
    x16 = fill(x12, TWO, x15)
    x17 = size(x2)
    x18 = greater(x17, FOUR)
    O = branch(x18, x1, x16)
    return O



def solve_67a3c6ac_834ec97d(I):
    x1 = vmirror(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = shift(x4, DOWN)
    x6 = fill(x1, ZERO, x4)
    x7 = paint(x6, x5)
    x8 = uppermost(x5)
    x9 = leftmost(x5)
    x10 = subtract(x9, TEN)
    x11 = add(x9, TEN)
    x12 = interval(x10, x11, TWO)
    x13 = lbind(greater, x8)
    x14 = compose(x13, first)
    x15 = rbind(contained, x12)
    x16 = compose(x15, last)
    x17 = sfilter(x2, x14)
    x18 = sfilter(x17, x16)
    O = fill(x7, FOUR, x18)
    return O



def solve_67a3c6ac_90f3ed37(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, uppermost)
    x4 = first(x3)
    x5 = remove(x4, x3)
    x6 = normalize(x4)
    x7 = lbind(shift, x6)
    x8 = compose(x7, ulcorner)
    x9 = interval(TWO, NEG_ONE, NEG_ONE)
    x10 = apply(tojvec, x9)
    x11 = rbind(apply, x10)
    x12 = lbind(compose, size)
    x13 = lbind(lbind, intersection)
    x14 = compose(x12, x13)
    x15 = lbind(lbind, shift)
    x16 = chain(x11, x15, x8)
    x17 = fork(argmax, x16, x14)
    x18 = mapply(x17, x5)
    O = underfill(x1, ONE, x18)
    return O



def solve_67a3c6ac_8403a5d5(I):
    x1 = vmirror(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = color(x4)
    x6 = leftmost(x4)
    x7 = interval(x6, TEN, TWO)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = sfilter(x2, x9)
    x11 = increment(x6)
    x12 = add(x6, THREE)
    x13 = interval(x11, TEN, FOUR)
    x14 = interval(x12, TEN, FOUR)
    x15 = lbind(astuple, NINE)
    x16 = apply(tojvec, x13)
    x17 = apply(x15, x14)
    x18 = fill(x1, x5, x10)
    x19 = fill(x18, FIVE, x16)
    O = fill(x19, FIVE, x17)
    return O



def solve_67a3c6ac_539a4f51(I):
    x1 = vmirror(I)
    x2 = shape(x1)
    x3 = index(x1, ORIGIN)
    x4 = colorcount(x1, ZERO)
    x5 = decrement(x2)
    x6 = positive(x4)
    x7 = branch(x6, x5, x2)
    x8 = crop(x1, ORIGIN, x7)
    x9 = width(x8)
    x10 = astuple(ONE, x9)
    x11 = crop(x8, ORIGIN, x10)
    x12 = vupscale(x11, x9)
    x13 = dmirror(x12)
    x14 = hconcat(x8, x12)
    x15 = hconcat(x13, x8)
    x16 = vconcat(x14, x15)
    x17 = asobject(x16)
    x18 = multiply(UNITY, TEN)
    x19 = canvas(x3, x18)
    O = paint(x19, x17)
    return O



def solve_67a3c6ac_3bdb4ada(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = compose(increment, ulcorner)
    x5 = compose(decrement, lrcorner)
    x6 = apply(x4, x3)
    x7 = apply(x5, x3)
    x8 = papply(connect, x6, x7)
    x9 = apply(last, x6)
    x10 = compose(last, first)
    x11 = power(last, TWO)
    x12 = fork(subtract, x10, x11)
    x13 = compose(even, x12)
    x14 = lbind(rbind, astuple)
    x15 = lbind(compose, x13)
    x16 = compose(x15, x14)
    x17 = fork(sfilter, first, x16)
    x18 = pair(x8, x9)
    x19 = mapply(x17, x18)
    O = fill(x1, ZERO, x19)
    return O



def solve_67a3c6ac_ec883f72(I):
    x1 = vmirror(I)
    x2 = palette(x1)
    x3 = objects(x1, T, T, T)
    x4 = fork(multiply, height, width)
    x5 = argmax(x3, x4)
    x6 = color(x5)
    x7 = remove(ZERO, x2)
    x8 = other(x7, x6)
    x9 = lrcorner(x5)
    x10 = llcorner(x5)
    x11 = urcorner(x5)
    x12 = ulcorner(x5)
    x13 = shoot(x9, UNITY)
    x14 = shoot(x10, DOWN_LEFT)
    x15 = shoot(x11, UP_RIGHT)
    x16 = shoot(x12, NEG_UNITY)
    x17 = combine(x13, x14)
    x18 = combine(x15, x16)
    x19 = combine(x17, x18)
    O = underfill(x1, x8, x19)
    return O



def solve_67a3c6ac_2bee17df(I):
    x1 = vmirror(I)
    x2 = height(x1)
    x3 = rot90(x1)
    x4 = subtract(x2, TWO)
    x5 = interval(ZERO, x2, ONE)
    x6 = rbind(colorcount, ZERO)
    x7 = matcher(x6, x4)
    x8 = rbind(vsplit, x2)
    x9 = lbind(apply, x7)
    x10 = compose(x9, x8)
    x11 = x10(x1)
    x12 = pair(x5, x11)
    x13 = sfilter(x12, last)
    x14 = mapply(hfrontier, x13)
    x15 = x10(x3)
    x16 = pair(x15, x5)
    x17 = sfilter(x16, first)
    x18 = mapply(vfrontier, x17)
    x19 = astuple(x14, x18)
    x20 = merge(x19)
    O = underfill(x1, THREE, x20)
    return O



def solve_67a3c6ac_29623171(I):
    x1 = vmirror(I)
    x2 = leastcolor(x1)
    x3 = interval(ZERO, NINE, FOUR)
    x4 = product(x3, x3)
    x5 = rbind(add, THREE)
    x6 = rbind(interval, ONE)
    x7 = fork(x6, identity, x5)
    x8 = compose(x7, first)
    x9 = compose(x7, last)
    x10 = fork(product, x8, x9)
    x11 = rbind(colorcount, x2)
    x12 = rbind(toobject, x1)
    x13 = compose(x11, x12)
    x14 = apply(x10, x4)
    x15 = valmax(x14, x13)
    x16 = matcher(x13, x15)
    x17 = compose(flip, x16)
    x18 = mfilter(x14, x16)
    x19 = mfilter(x14, x17)
    x20 = fill(x1, x2, x18)
    O = fill(x20, ZERO, x19)
    return O



def solve_67a3c6ac_b0c4d837(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, FIVE)
    x3 = ofcolor(x1, EIGHT)
    x4 = height(x2)
    x5 = decrement(x4)
    x6 = height(x3)
    x7 = subtract(x5, x6)
    x8 = astuple(ONE, x7)
    x9 = canvas(EIGHT, x8)
    x10 = subtract(SIX, x7)
    x11 = astuple(ONE, x10)
    x12 = canvas(ZERO, x11)
    x13 = hconcat(x9, x12)
    x14 = hsplit(x13, TWO)
    x15 = first(x14)
    x16 = last(x14)
    x17 = vmirror(x16)
    x18 = vconcat(x15, x17)
    x19 = astuple(ONE, THREE)
    x20 = canvas(ZERO, x19)
    O = vconcat(x18, x20)
    return O



def solve_67a3c6ac_8731374e(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = height(x4)
    x6 = width(x4)
    x7 = vsplit(x4, x5)
    x8 = lbind(greater, FOUR)
    x9 = compose(x8, numcolors)
    x10 = sfilter(x7, x9)
    x11 = merge(x10)
    x12 = rot90(x11)
    x13 = vsplit(x12, x6)
    x14 = sfilter(x13, x9)
    x15 = merge(x14)
    x16 = rot270(x15)
    x17 = leastcolor(x16)
    x18 = ofcolor(x16, x17)
    x19 = fork(combine, vfrontier, hfrontier)
    x20 = mapply(x19, x18)
    O = fill(x16, x17, x20)
    return O



def solve_67a3c6ac_db93a21d(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, NINE)
    x4 = colorfilter(x2, NINE)
    x5 = rbind(shoot, DOWN)
    x6 = mapply(x5, x3)
    x7 = underfill(x1, ONE, x6)
    x8 = compose(halve, width)
    x9 = rbind(greater, ONE)
    x10 = compose(x9, x8)
    x11 = matcher(x8, THREE)
    x12 = power(outbox, TWO)
    x13 = power(outbox, THREE)
    x14 = mapply(outbox, x4)
    x15 = sfilter(x4, x10)
    x16 = sfilter(x4, x11)
    x17 = mapply(x12, x15)
    x18 = mapply(x13, x16)
    x19 = fill(x7, THREE, x14)
    x20 = fill(x19, THREE, x17)
    O = fill(x20, THREE, x18)
    return O



def solve_67a3c6ac_53b68214(I):
    x1 = vmirror(I)
    x2 = width(x1)
    x3 = objects(x1, T, T, T)
    x4 = first(x3)
    x5 = vperiod(x4)
    x6 = toivec(x5)
    x7 = interval(ZERO, NINE, ONE)
    x8 = lbind(multiply, x6)
    x9 = apply(x8, x7)
    x10 = lbind(shift, x4)
    x11 = mapply(x10, x9)
    x12 = astuple(x2, x2)
    x13 = portrait(x4)
    x14 = shape(x4)
    x15 = add(DOWN, x14)
    x16 = decrement(x15)
    x17 = shift(x4, x16)
    x18 = branch(x13, x11, x17)
    x19 = canvas(ZERO, x12)
    x20 = paint(x19, x4)
    O = paint(x20, x18)
    return O



def solve_67a3c6ac_d6ad076f(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = argmin(x2, size)
    x4 = argmax(x2, size)
    x5 = vmatching(x3, x4)
    x6 = branch(x5, DOWN, RIGHT)
    x7 = branch(x5, uppermost, leftmost)
    x8 = valmax(x2, x7)
    x9 = x7(x3)
    x10 = equality(x8, x9)
    x11 = branch(x10, NEG_ONE, ONE)
    x12 = multiply(x6, x11)
    x13 = inbox(x3)
    x14 = rbind(shoot, x12)
    x15 = mapply(x14, x13)
    x16 = underfill(x1, EIGHT, x15)
    x17 = objects(x16, T, F, T)
    x18 = colorfilter(x17, EIGHT)
    x19 = rbind(bordering, x1)
    x20 = mfilter(x18, x19)
    O = cover(x16, x20)
    return O



def solve_67a3c6ac_6cdd2623(I):
    x1 = vmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = prapply(connect, x3, x3)
    x5 = fgpartition(x1)
    x6 = merge(x5)
    x7 = cover(x1, x6)
    x8 = fork(either, hline, vline)
    x9 = box(x6)
    x10 = rbind(difference, x9)
    x11 = chain(positive, size, x10)
    x12 = fork(both, x8, x11)
    x13 = mfilter(x4, x12)
    O = fill(x7, x2, x13)
    return O



def solve_67a3c6ac_a3df8b1e(I):
    x1 = vmirror(I)
    x2 = shape(x1)
    x3 = ofcolor(x1, ONE)
    x4 = first(x3)
    x5 = shoot(x4, UP_RIGHT)
    x6 = fill(x1, ONE, x5)
    x7 = ofcolor(x6, ONE)
    x8 = urcorner(x7)
    x9 = shoot(x8, NEG_UNITY)
    x10 = fill(x6, ONE, x9)
    x11 = objects(x10, T, T, T)
    x12 = first(x11)
    x13 = subgrid(x12, x10)
    x14 = shape(x13)
    x15 = subtract(x14, DOWN)
    x16 = crop(x13, DOWN, x15)
    x17 = vconcat(x16, x16)
    x18 = vconcat(x17, x17)
    x19 = vconcat(x18, x18)
    x20 = hmirror(x19)
    x21 = crop(x20, ORIGIN, x2)
    O = hmirror(x21)
    return O



def solve_67a3c6ac_cdecee7f(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = astuple(ONE, THREE)
    x4 = size(x2)
    x5 = order(x2, leftmost)
    x6 = apply(color, x5)
    x7 = rbind(canvas, UNITY)
    x8 = apply(x7, x6)
    x9 = merge(x8)
    x10 = dmirror(x9)
    x11 = subtract(NINE, x4)
    x12 = astuple(ONE, x11)
    x13 = canvas(ZERO, x12)
    x14 = hconcat(x10, x13)
    x15 = hsplit(x14, THREE)
    x16 = merge(x15)
    x17 = crop(x16, ORIGIN, x3)
    x18 = crop(x16, DOWN, x3)
    x19 = crop(x16, TWO_BY_ZERO, x3)
    x20 = vmirror(x18)
    x21 = vconcat(x17, x20)
    O = vconcat(x21, x19)
    return O



def solve_67a3c6ac_3345333e(I):
    x1 = vmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = cover(x1, x3)
    x5 = leastcolor(x4)
    x6 = ofcolor(x4, x5)
    x7 = neighbors(ORIGIN)
    x8 = mapply(neighbors, x7)
    x9 = vmirror(x6)
    x10 = lbind(shift, x9)
    x11 = apply(x10, x8)
    x12 = rbind(intersection, x6)
    x13 = compose(size, x12)
    x14 = argmax(x11, x13)
    O = fill(x4, x5, x14)
    return O



def solve_67a3c6ac_b190f7f5(I):
    x1 = vmirror(I)
    x2 = portrait(x1)
    x3 = branch(x2, vsplit, hsplit)
    x4 = x3(x1, TWO)
    x5 = argmin(x4, numcolors)
    x6 = argmax(x4, numcolors)
    x7 = width(x6)
    x8 = rbind(repeat, x7)
    x9 = chain(dmirror, merge, x8)
    x10 = upscale(x6, x7)
    x11 = x9(x5)
    x12 = x9(x11)
    x13 = ofcolor(x12, ZERO)
    O = fill(x10, ZERO, x13)
    return O



def solve_67a3c6ac_caa06a1f(I):
    x1 = vmirror(I)
    x2 = asobject(x1)
    x3 = shape(x1)
    x4 = decrement(x3)
    x5 = index(x1, x4)
    x6 = double(x3)
    x7 = canvas(x5, x6)
    x8 = paint(x7, x2)
    x9 = objects(x8, F, F, T)
    x10 = first(x9)
    x11 = shift(x10, LEFT)
    x12 = vperiod(x11)
    x13 = hperiod(x11)
    x14 = neighbors(ORIGIN)
    x15 = lbind(mapply, neighbors)
    x16 = power(x15, TWO)
    x17 = x16(x14)
    x18 = astuple(x12, x13)
    x19 = lbind(multiply, x18)
    x20 = apply(x19, x17)
    x21 = lbind(shift, x11)
    x22 = mapply(x21, x20)
    O = paint(x1, x22)
    return O



def solve_67a3c6ac_e21d9049(I):
    x1 = vmirror(I)
    x2 = asindices(x1)
    x3 = leastcolor(x1)
    x4 = objects(x1, T, F, T)
    x5 = ofcolor(x1, x3)
    x6 = merge(x4)
    x7 = shape(x6)
    x8 = neighbors(ORIGIN)
    x9 = lbind(mapply, neighbors)
    x10 = power(x9, TWO)
    x11 = x10(x8)
    x12 = lbind(multiply, x7)
    x13 = lbind(shift, x6)
    x14 = apply(x12, x11)
    x15 = mapply(x13, x14)
    x16 = lbind(hmatching, x5)
    x17 = lbind(vmatching, x5)
    x18 = fork(either, x16, x17)
    x19 = compose(x18, initset)
    x20 = paint(x1, x15)
    x21 = sfilter(x2, x19)
    x22 = difference(x2, x21)
    O = cover(x20, x22)
    return O



def solve_67a3c6ac_746b3537(I):
    x1 = vmirror(I)
    x2 = chain(size, dedupe, first)
    x3 = x2(x1)
    x4 = equality(x3, ONE)
    x5 = branch(x4, dmirror, identity)
    x6 = x5(x1)
    x7 = objects(x6, T, F, F)
    x8 = order(x7, leftmost)
    x9 = apply(color, x8)
    x10 = repeat(x9, ONE)
    O = x5(x10)
    return O



def solve_67a3c6ac_63613498(I):
    x1 = vmirror(I)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = ofcolor(x2, ZERO)
    x4 = asindices(x2)
    x5 = difference(x4, x3)
    x6 = normalize(x5)
    x7 = objects(x1, T, F, T)
    x8 = compose(toindices, normalize)
    x9 = matcher(x8, x6)
    x10 = mfilter(x7, x9)
    x11 = fill(x1, FIVE, x10)
    x12 = asobject(x2)
    O = paint(x11, x12)
    return O



def solve_67a3c6ac_06df4c85(I):
    x1 = vmirror(I)
    x2 = partition(x1)
    x3 = mostcolor(x1)
    x4 = ofcolor(x1, x3)
    x5 = colorfilter(x2, ZERO)
    x6 = argmax(x2, size)
    x7 = difference(x2, x5)
    x8 = remove(x6, x7)
    x9 = merge(x8)
    x10 = product(x9, x9)
    x11 = power(first, TWO)
    x12 = compose(first, last)
    x13 = fork(equality, x11, x12)
    x14 = sfilter(x10, x13)
    x15 = compose(last, first)
    x16 = power(last, TWO)
    x17 = fork(connect, x15, x16)
    x18 = fork(recolor, color, x17)
    x19 = apply(x18, x14)
    x20 = fork(either, vline, hline)
    x21 = mfilter(x19, x20)
    x22 = paint(x1, x21)
    O = fill(x22, x3, x4)
    return O



def solve_67a3c6ac_4522001f(I):
    x1 = vmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = toindices(x3)
    x5 = contained(ZERO_BY_TWO, x4)
    x6 = contained(TWO_BY_TWO, x4)
    x7 = contained(TWO_BY_ZERO, x4)
    x8 = astuple(NINE, NINE)
    x9 = canvas(ZERO, x8)
    x10 = astuple(THREE, ORIGIN)
    x11 = initset(x10)
    x12 = upscale(x11, TWO)
    x13 = upscale(x12, TWO)
    x14 = shape(x13)
    x15 = shift(x13, x14)
    x16 = combine(x13, x15)
    x17 = paint(x9, x16)
    x18 = rot90(x17)
    x19 = rot180(x17)
    x20 = rot270(x17)
    x21 = branch(x5, x18, x17)
    x22 = branch(x6, x19, x21)
    O = branch(x7, x20, x22)
    return O



def solve_67a3c6ac_a48eeaf7(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = outbox(x2)
    x4 = apply(initset, x3)
    x5 = ofcolor(x1, FIVE)
    x6 = lbind(argmin, x4)
    x7 = lbind(lbind, manhattan)
    x8 = compose(x7, initset)
    x9 = compose(x6, x8)
    x10 = mapply(x9, x5)
    x11 = cover(x1, x5)
    O = fill(x11, FIVE, x10)
    return O



def solve_67a3c6ac_eb5a1d5d(I):
    x1 = vmirror(I)
    x2 = compose(dmirror, dedupe)
    x3 = x2(x1)
    x4 = x2(x3)
    x5 = fork(remove, last, identity)
    x6 = compose(hmirror, x5)
    x7 = fork(vconcat, identity, x6)
    x8 = x7(x4)
    x9 = dmirror(x8)
    O = x7(x9)
    return O



def solve_67a3c6ac_e179c5f4(I):
    x1 = vmirror(I)
    x2 = height(x1)
    x3 = ofcolor(x1, ONE)
    x4 = first(x3)
    x5 = shoot(x4, UP_RIGHT)
    x6 = fill(x1, ONE, x5)
    x7 = ofcolor(x6, ONE)
    x8 = urcorner(x7)
    x9 = shoot(x8, NEG_UNITY)
    x10 = fill(x6, ONE, x9)
    x11 = ofcolor(x10, ONE)
    x12 = subgrid(x11, x10)
    x13 = height(x12)
    x14 = width(x12)
    x15 = decrement(x13)
    x16 = astuple(x15, x14)
    x17 = ulcorner(x11)
    x18 = crop(x10, x17, x16)
    x19 = repeat(x18, NINE)
    x20 = merge(x19)
    x21 = astuple(x2, x14)
    x22 = crop(x20, ORIGIN, x21)
    x23 = hmirror(x22)
    O = replace(x23, ZERO, EIGHT)
    return O



def solve_67a3c6ac_995c5fa3(I):
    x1 = vmirror(I)
    x2 = hsplit(x1, THREE)
    x3 = astuple(TWO, ONE)
    x4 = rbind(ofcolor, ZERO)
    x5 = compose(ulcorner, x4)
    x6 = compose(size, x4)
    x7 = matcher(x6, ZERO)
    x8 = matcher(x5, UNITY)
    x9 = matcher(x5, DOWN)
    x10 = matcher(x5, x3)
    x11 = rbind(multiply, THREE)
    x12 = power(double, TWO)
    x13 = compose(double, x7)
    x14 = chain(x12, double, x8)
    x15 = compose(x11, x9)
    x16 = compose(x12, x10)
    x17 = fork(add, x13, x14)
    x18 = fork(add, x15, x16)
    x19 = fork(add, x17, x18)
    x20 = rbind(canvas, UNITY)
    x21 = compose(x20, x19)
    x22 = apply(x21, x2)
    x23 = merge(x22)
    O = hupscale(x23, THREE)
    return O



def solve_67a3c6ac_36fdfd69(I):
    x1 = vmirror(I)
    x2 = upscale(x1, TWO)
    x3 = objects(x2, T, T, T)
    x4 = colorfilter(x3, TWO)
    x5 = fork(manhattan, first, last)
    x6 = lbind(greater, FIVE)
    x7 = compose(x6, x5)
    x8 = product(x4, x4)
    x9 = sfilter(x8, x7)
    x10 = apply(merge, x9)
    x11 = mapply(delta, x10)
    x12 = fill(x2, FOUR, x11)
    x13 = merge(x4)
    x14 = paint(x12, x13)
    O = downscale(x14, TWO)
    return O



def solve_67a3c6ac_0a938d79(I):
    x1 = vmirror(I)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = x3(x1)
    x5 = fgpartition(x4)
    x6 = merge(x5)
    x7 = chain(double, decrement, width)
    x8 = x7(x6)
    x9 = compose(vfrontier, tojvec)
    x10 = lbind(mapply, x9)
    x11 = rbind(interval, x8)
    x12 = width(x4)
    x13 = rbind(x11, x12)
    x14 = chain(x10, x13, leftmost)
    x15 = fork(recolor, color, x14)
    x16 = mapply(x15, x5)
    x17 = paint(x4, x16)
    O = x3(x17)
    return O



def solve_67a3c6ac_045e512c(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = lbind(shift, x3)
    x6 = lbind(mapply, x5)
    x7 = double(TEN)
    x8 = interval(FOUR, x7, FOUR)
    x9 = rbind(apply, x8)
    x10 = lbind(position, x3)
    x11 = lbind(rbind, multiply)
    x12 = chain(x9, x11, x10)
    x13 = compose(x6, x12)
    x14 = fork(recolor, color, x13)
    x15 = mapply(x14, x4)
    O = paint(x1, x15)
    return O



def solve_67a3c6ac_99fa7670(I):
    x1 = vmirror(I)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x3)
    x8 = paint(x1, x7)
    x9 = add(x2, DOWN_LEFT)
    x10 = initset(x9)
    x11 = recolor(ZERO, x10)
    x12 = objects(x8, T, F, T)
    x13 = insert(x11, x12)
    x14 = order(x13, uppermost)
    x15 = first(x14)
    x16 = remove(x11, x14)
    x17 = remove(x15, x14)
    x18 = compose(lrcorner, first)
    x19 = compose(lrcorner, last)
    x20 = fork(connect, x18, x19)
    x21 = compose(color, first)
    x22 = fork(recolor, x21, x20)
    x23 = pair(x16, x17)
    x24 = mapply(x22, x23)
    O = underpaint(x8, x24)
    return O



def solve_67a3c6ac_72322fa7(I):
    x1 = vmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = matcher(numcolors, ONE)
    x4 = sfilter(x2, x3)
    x5 = difference(x2, x4)
    x6 = lbind(matcher, first)
    x7 = compose(x6, mostcolor)
    x8 = fork(sfilter, identity, x7)
    x9 = fork(difference, identity, x8)
    x10 = lbind(occurrences, x1)
    x11 = compose(x10, x8)
    x12 = compose(x10, x9)
    x13 = compose(ulcorner, x9)
    x14 = fork(subtract, ulcorner, x13)
    x15 = lbind(rbind, add)
    x16 = compose(x15, x14)
    x17 = fork(apply, x16, x12)
    x18 = lbind(lbind, shift)
    x19 = compose(x18, normalize)
    x20 = fork(mapply, x19, x11)
    x21 = fork(mapply, x19, x17)
    x22 = mapply(x20, x5)
    x23 = mapply(x21, x5)
    x24 = paint(x1, x22)
    O = paint(x24, x23)
    return O



def solve_67a3c6ac_855e0971(I):
    x1 = vmirror(I)
    x2 = frontiers(x1)
    x3 = sfilter(x2, hline)
    x4 = size(x3)
    x5 = positive(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x1)
    x8 = rbind(subgrid, x7)
    x9 = matcher(color, ZERO)
    x10 = compose(flip, x9)
    x11 = partition(x7)
    x12 = sfilter(x11, x10)
    x13 = rbind(ofcolor, ZERO)
    x14 = lbind(mapply, vfrontier)
    x15 = chain(x14, x13, x8)
    x16 = fork(shift, x15, ulcorner)
    x17 = fork(intersection, toindices, x16)
    x18 = mapply(x17, x12)
    x19 = fill(x7, ZERO, x18)
    O = x6(x19)
    return O



def solve_67a3c6ac_a78176bb(I):
    x1 = vmirror(I)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = remove(ZERO, x2)
    x5 = other(x4, FIVE)
    x6 = colorfilter(x3, FIVE)
    x7 = lbind(index, x1)
    x8 = compose(x7, urcorner)
    x9 = matcher(x8, FIVE)
    x10 = sfilter(x6, x9)
    x11 = difference(x6, x10)
    x12 = apply(urcorner, x10)
    x13 = apply(llcorner, x11)
    x14 = rbind(add, UP_RIGHT)
    x15 = rbind(add, DOWN_LEFT)
    x16 = apply(x14, x12)
    x17 = apply(x15, x13)
    x18 = rbind(shoot, UNITY)
    x19 = rbind(shoot, NEG_UNITY)
    x20 = fork(combine, x18, x19)
    x21 = mapply(x20, x16)
    x22 = mapply(x20, x17)
    x23 = combine(x21, x22)
    x24 = fill(x1, x5, x23)
    O = replace(x24, FIVE, ZERO)
    return O



def solve_67a3c6ac_952a094c(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = argmax(x2, size)
    x5 = outbox(x4)
    x6 = corners(x5)
    x7 = lbind(rbind, manhattan)
    x8 = lbind(argmax, x3)
    x9 = chain(x8, x7, initset)
    x10 = compose(color, x9)
    x11 = fork(astuple, x10, identity)
    x12 = apply(x11, x6)
    x13 = merge(x3)
    x14 = cover(x1, x13)
    O = paint(x14, x12)
    return O



def solve_67a3c6ac_6d58a25d(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = merge(x4)
    x6 = color(x5)
    x7 = uppermost(x3)
    x8 = rbind(greater, x7)
    x9 = compose(x8, uppermost)
    x10 = rbind(vmatching, x3)
    x11 = fork(both, x10, x9)
    x12 = sfilter(x4, x11)
    x13 = increment(x7)
    x14 = rbind(greater, x13)
    x15 = compose(x14, first)
    x16 = rbind(sfilter, x15)
    x17 = chain(x16, vfrontier, center)
    x18 = mapply(x17, x12)
    O = underfill(x1, x6, x18)
    return O



def solve_67a3c6ac_6aa20dc0(I):
    x1 = vmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(rbind, upscale)
    x10 = interval(ONE, FOUR, ONE)
    x11 = apply(x9, x10)
    x12 = initset(identity)
    x13 = insert(vmirror, x12)
    x14 = insert(hmirror, x13)
    x15 = insert(cmirror, x14)
    x16 = insert(dmirror, x15)
    x17 = fork(compose, first, last)
    x18 = lbind(occurrences, x1)
    x19 = lbind(lbind, shift)
    x20 = compose(x18, x8)
    x21 = product(x16, x11)
    x22 = apply(x17, x21)
    x23 = rapply(x22, x4)
    x24 = fork(mapply, x19, x20)
    x25 = mapply(x24, x23)
    O = paint(x1, x25)
    return O



def solve_67a3c6ac_447fd412(I):
    x1 = vmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(rbind, upscale)
    x10 = interval(ONE, FOUR, ONE)
    x11 = apply(x9, x10)
    x12 = lbind(recolor, ZERO)
    x13 = compose(x12, outbox)
    x14 = fork(combine, identity, x13)
    x15 = lbind(occurrences, x1)
    x16 = lbind(rbind, subtract)
    x17 = lbind(apply, increment)
    x18 = lbind(lbind, shift)
    x19 = chain(x16, ulcorner, x8)
    x20 = chain(x15, x14, x8)
    x21 = fork(apply, x19, x20)
    x22 = compose(x17, x21)
    x23 = fork(mapply, x18, x22)
    x24 = rapply(x11, x4)
    x25 = mapply(x23, x24)
    O = paint(x1, x25)
    return O



def solve_67a3c6ac_2bcee788(I):
    x1 = vmirror(I)
    x2 = mostcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = replace(x1, x2, THREE)
    x5 = argmax(x3, size)
    x6 = argmin(x3, size)
    x7 = position(x5, x6)
    x8 = first(x7)
    x9 = last(x7)
    x10 = subgrid(x5, x4)
    x11 = hline(x6)
    x12 = hmirror(x10)
    x13 = vmirror(x10)
    x14 = branch(x11, x12, x13)
    x15 = branch(x11, x8, ZERO)
    x16 = branch(x11, ZERO, x9)
    x17 = asobject(x14)
    x18 = matcher(first, THREE)
    x19 = compose(flip, x18)
    x20 = sfilter(x17, x19)
    x21 = ulcorner(x5)
    x22 = shape(x5)
    x23 = astuple(x15, x16)
    x24 = multiply(x22, x23)
    x25 = add(x21, x24)
    x26 = shift(x20, x25)
    O = paint(x4, x26)
    return O



def solve_67a3c6ac_f35d900a(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = palette(x1)
    x4 = remove(ZERO, x3)
    x5 = lbind(other, x4)
    x6 = compose(x5, color)
    x7 = fork(recolor, x6, outbox)
    x8 = mapply(x7, x2)
    x9 = mapply(toindices, x2)
    x10 = box(x9)
    x11 = difference(x10, x9)
    x12 = lbind(argmin, x9)
    x13 = rbind(compose, initset)
    x14 = lbind(rbind, manhattan)
    x15 = chain(x13, x14, initset)
    x16 = chain(initset, x12, x15)
    x17 = fork(manhattan, initset, x16)
    x18 = compose(even, x17)
    x19 = sfilter(x11, x18)
    x20 = paint(x1, x8)
    O = fill(x20, FIVE, x19)
    return O



def solve_67a3c6ac_0dfd9992(I):
    x1 = vmirror(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_67a3c6ac_29ec7d0e(I):
    x1 = vmirror(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_67a3c6ac_469497ad(I):
    x1 = vmirror(I)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    x4 = upscale(x1, x3)
    x5 = objects(x4, F, F, T)
    x6 = argmin(x5, size)
    x7 = ulcorner(x6)
    x8 = llcorner(x6)
    x9 = shoot(x7, NEG_UNITY)
    x10 = shoot(x7, UNITY)
    x11 = shoot(x8, DOWN_LEFT)
    x12 = shoot(x8, UP_RIGHT)
    x13 = combine(x9, x10)
    x14 = combine(x11, x12)
    x15 = combine(x13, x14)
    x16 = underfill(x4, TWO, x15)
    x17 = objects(x16, T, F, T)
    x18 = argmax(x17, lrcorner)
    O = paint(x16, x18)
    return O



def solve_67a3c6ac_484b58aa(I):
    x1 = vmirror(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, TWO)
    x9 = astuple(TWO, x3)
    x10 = power(decrement, TWO)
    x11 = x10(x2)
    x12 = x10(x3)
    x13 = toivec(x12)
    x14 = tojvec(x11)
    x15 = crop(x1, x13, x9)
    x16 = crop(x1, x14, x8)
    x17 = asobject(x16)
    x18 = asobject(x15)
    x19 = vperiod(x17)
    x20 = hperiod(x18)
    x21 = astuple(x19, x20)
    x22 = lbind(multiply, x21)
    x23 = neighbors(ORIGIN)
    x24 = mapply(neighbors, x23)
    x25 = apply(x22, x24)
    x26 = lbind(shift, x7)
    x27 = mapply(x26, x25)
    O = paint(x1, x27)
    return O



def solve_67a3c6ac_3befdf3e(I):
    x1 = vmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = leastcolor(x1)
    x4 = palette(x1)
    x5 = remove(ZERO, x4)
    x6 = other(x5, x3)
    x7 = switch(x1, x3, x6)
    x8 = compose(width, inbox)
    x9 = lbind(power, outbox)
    x10 = compose(x9, x8)
    x11 = initset(x10)
    x12 = lbind(rapply, x11)
    x13 = chain(initset, first, x12)
    x14 = fork(rapply, x13, identity)
    x15 = compose(first, x14)
    x16 = compose(backdrop, x15)
    x17 = lbind(chain, backdrop)
    x18 = lbind(x17, inbox)
    x19 = compose(x18, x10)
    x20 = lbind(apply, initset)
    x21 = chain(x20, corners, x16)
    x22 = fork(mapply, x19, x21)
    x23 = fork(intersection, x16, x22)
    x24 = mapply(x16, x2)
    x25 = mapply(x23, x2)
    x26 = underfill(x7, x6, x24)
    O = fill(x26, ZERO, x25)
    return O



def solve_67a3c6ac_49d1d64f(I):
    x1 = vmirror(I)
    x2 = shape(x1)
    x3 = add(x2, TWO)
    x4 = canvas(ZERO, x3)
    x5 = asobject(x1)
    x6 = shift(x5, UNITY)
    x7 = paint(x4, x6)
    x8 = asindices(x4)
    x9 = fork(difference, box, corners)
    x10 = x9(x8)
    x11 = lbind(lbind, manhattan)
    x12 = rbind(compose, initset)
    x13 = chain(x12, x11, initset)
    x14 = lbind(argmin, x6)
    x15 = chain(first, x14, x13)
    x16 = fork(astuple, x15, identity)
    x17 = apply(x16, x10)
    O = paint(x7, x17)
    return O



def solve_67a3c6ac_57aa92db(I):
    x1 = vmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = objects(x1, T, F, T)
    x4 = lbind(lbind, colorcount)
    x5 = fork(apply, x4, palette)
    x6 = compose(maximum, x5)
    x7 = compose(minimum, x5)
    x8 = fork(subtract, x6, x7)
    x9 = argmax(x2, x8)
    x10 = leastcolor(x9)
    x11 = normalize(x9)
    x12 = matcher(first, x10)
    x13 = sfilter(x11, x12)
    x14 = ulcorner(x13)
    x15 = colorfilter(x3, x10)
    x16 = rbind(toobject, x1)
    x17 = lbind(remove, ZERO)
    x18 = chain(first, x17, palette)
    x19 = chain(x18, x16, outbox)
    x20 = lbind(multiply, x14)
    x21 = compose(x20, width)
    x22 = fork(subtract, ulcorner, x21)
    x23 = lbind(shift, x11)
    x24 = compose(x23, x22)
    x25 = fork(upscale, x24, width)
    x26 = fork(recolor, x19, x25)
    x27 = mapply(x26, x15)
    x28 = paint(x1, x27)
    x29 = merge(x3)
    O = paint(x28, x29)
    return O



def solve_67a3c6ac_aba27056(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = mapply(toindices, x2)
    x4 = box(x3)
    x5 = difference(x4, x3)
    x6 = delta(x3)
    x7 = position(x6, x5)
    x8 = interval(ZERO, NINE, ONE)
    x9 = lbind(multiply, x7)
    x10 = apply(x9, x8)
    x11 = lbind(shift, x5)
    x12 = mapply(x11, x10)
    x13 = fill(x1, FOUR, x6)
    x14 = fill(x13, FOUR, x12)
    x15 = corners(x5)
    x16 = ofcolor(x14, ZERO)
    x17 = rbind(toobject, x14)
    x18 = rbind(colorcount, ZERO)
    x19 = chain(x18, x17, dneighbors)
    x20 = matcher(x19, TWO)
    x21 = rbind(adjacent, x3)
    x22 = rbind(adjacent, x12)
    x23 = fork(both, x21, x22)
    x24 = compose(x23, initset)
    x25 = sfilter(x16, x20)
    x26 = sfilter(x25, x24)
    x27 = product(x15, x26)
    x28 = fork(subtract, last, first)
    x29 = fork(shoot, first, x28)
    x30 = mapply(x29, x27)
    O = fill(x14, FOUR, x30)
    return O



def solve_67a3c6ac_508bd3b6(I):
    x1 = vmirror(I)
    x2 = width(x1)
    x3 = objects(x1, T, T, T)
    x4 = argmin(x3, size)
    x5 = argmax(x3, size)
    x6 = ulcorner(x4)
    x7 = urcorner(x4)
    x8 = index(x1, x6)
    x9 = equality(x8, EIGHT)
    x10 = branch(x9, x6, x7)
    x11 = branch(x9, UNITY, DOWN_LEFT)
    x12 = multiply(x11, x2)
    x13 = double(x12)
    x14 = add(x10, x13)
    x15 = subtract(x10, x13)
    x16 = connect(x14, x15)
    x17 = fill(x1, THREE, x16)
    x18 = paint(x17, x5)
    x19 = objects(x18, T, F, T)
    x20 = rbind(adjacent, x5)
    x21 = extract(x19, x20)
    x22 = first(x21)
    x23 = last(x22)
    x24 = flip(x9)
    x25 = branch(x24, UNITY, DOWN_LEFT)
    x26 = multiply(x25, x2)
    x27 = double(x26)
    x28 = add(x23, x27)
    x29 = subtract(x23, x27)
    x30 = connect(x28, x29)
    x31 = fill(x18, THREE, x30)
    x32 = paint(x31, x4)
    O = paint(x32, x5)
    return O



def solve_67a3c6ac_d07ae81c(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = sizefilter(x2, ONE)
    x4 = apply(color, x3)
    x5 = difference(x2, x3)
    x6 = apply(color, x5)
    x7 = first(x6)
    x8 = last(x6)
    x9 = ofcolor(x1, x7)
    x10 = ofcolor(x1, x8)
    x11 = rbind(shoot, UNITY)
    x12 = rbind(shoot, NEG_UNITY)
    x13 = rbind(shoot, DOWN_LEFT)
    x14 = rbind(shoot, UP_RIGHT)
    x15 = fork(combine, x11, x12)
    x16 = fork(combine, x13, x14)
    x17 = fork(combine, x15, x16)
    x18 = compose(x17, center)
    x19 = mapply(x18, x3)
    x20 = intersection(x9, x19)
    x21 = intersection(x10, x19)
    x22 = first(x3)
    x23 = color(x22)
    x24 = center(x22)
    x25 = neighbors(x24)
    x26 = toobject(x25, x1)
    x27 = mostcolor(x26)
    x28 = other(x4, x23)
    x29 = equality(x27, x7)
    x30 = branch(x29, x23, x28)
    x31 = branch(x29, x28, x23)
    x32 = fill(x1, x30, x20)
    O = fill(x32, x31, x21)
    return O



def solve_67a3c6ac_0e206a2e(I):
    x1 = vmirror(I)
    x2 = palette(x1)
    x3 = objects(x1, F, F, T)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, numcolors)
    x6 = sfilter(x3, x5)
    x7 = remove(ZERO, x2)
    x8 = lbind(colorcount, x1)
    x9 = argmax(x7, x8)
    x10 = remove(x9, x7)
    x11 = rbind(contained, x10)
    x12 = compose(x11, first)
    x13 = rbind(sfilter, x12)
    x14 = lbind(rbind, subtract)
    x15 = lbind(occurrences, x1)
    x16 = lbind(lbind, shift)
    x17 = compose(x14, ulcorner)
    x18 = chain(x17, x13, normalize)
    x19 = chain(x15, x13, normalize)
    x20 = fork(apply, x18, x19)
    x21 = compose(x16, normalize)
    x22 = fork(mapply, x21, x20)
    x23 = astuple(cmirror, dmirror)
    x24 = astuple(hmirror, vmirror)
    x25 = combine(x23, x24)
    x26 = product(x25, x25)
    x27 = fork(compose, first, last)
    x28 = apply(x27, x26)
    x29 = totuple(x28)
    x30 = combine(x25, x29)
    x31 = lbind(rapply, x30)
    x32 = mapply(x31, x6)
    x33 = mapply(x22, x32)
    x34 = paint(x1, x33)
    x35 = merge(x6)
    O = cover(x34, x35)
    return O



def solve_67a3c6ac_d22278a0(I):
    x1 = vmirror(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = fork(multiply, sign, identity)
    x5 = lbind(apply, x4)
    x6 = chain(even, maximum, x5)
    x7 = lbind(sfilter, x2)
    x8 = fork(add, first, last)
    x9 = rbind(remove, x3)
    x10 = compose(center, last)
    x11 = fork(subtract, first, x10)
    x12 = compose(x6, x11)
    x13 = lbind(rbind, equality)
    x14 = lbind(argmin, x3)
    x15 = chain(x8, x5, x11)
    x16 = lbind(lbind, astuple)
    x17 = lbind(rbind, astuple)
    x18 = lbind(compose, x12)
    x19 = lbind(compose, x15)
    x20 = compose(x19, x16)
    x21 = compose(x19, x17)
    x22 = compose(x14, x20)
    x23 = rbind(compose, x22)
    x24 = lbind(lbind, valmin)
    x25 = rbind(compose, x20)
    x26 = chain(x25, x24, x9)
    x27 = lbind(fork, greater)
    x28 = fork(x27, x26, x21)
    x29 = chain(x7, x18, x17)
    x30 = chain(x7, x23, x13)
    x31 = fork(intersection, x29, x30)
    x32 = compose(x7, x28)
    x33 = fork(intersection, x31, x32)
    x34 = fork(recolor, color, x33)
    x35 = mapply(x34, x3)
    O = paint(x1, x35)
    return O



def solve_67a3c6ac_50846271(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = prapply(connect, x2, x2)
    x4 = lbind(greater, SIX)
    x5 = compose(x4, size)
    x6 = fork(either, vline, hline)
    x7 = fork(both, x5, x6)
    x8 = mfilter(x3, x7)
    x9 = fill(x1, TWO, x8)
    x10 = objects(x9, T, F, F)
    x11 = colorfilter(x10, TWO)
    x12 = valmax(x11, width)
    x13 = halve(x12)
    x14 = toivec(x13)
    x15 = tojvec(x13)
    x16 = rbind(add, ZERO_BY_TWO)
    x17 = rbind(add, TWO_BY_ZERO)
    x18 = rbind(subtract, ZERO_BY_TWO)
    x19 = rbind(subtract, TWO_BY_ZERO)
    x20 = rbind(colorcount, TWO)
    x21 = rbind(toobject, x9)
    x22 = compose(initset, x16)
    x23 = fork(insert, x17, x22)
    x24 = fork(insert, x18, x23)
    x25 = fork(insert, x19, x24)
    x26 = fork(combine, dneighbors, x25)
    x27 = chain(x20, x21, x26)
    x28 = rbind(argmax, x27)
    x29 = compose(x28, toindices)
    x30 = apply(x29, x11)
    x31 = rbind(add, x14)
    x32 = rbind(subtract, x14)
    x33 = rbind(add, x15)
    x34 = rbind(subtract, x15)
    x35 = fork(connect, x31, x32)
    x36 = fork(connect, x33, x34)
    x37 = fork(combine, x35, x36)
    x38 = mapply(x37, x30)
    x39 = fill(x9, EIGHT, x38)
    O = fill(x39, TWO, x2)
    return O



def solve_67a3c6ac_150deff5(I):
    x1 = vmirror(I)
    x2 = canvas(FIVE, TWO_BY_TWO)
    x3 = asobject(x2)
    x4 = occurrences(x1, x3)
    x5 = lbind(shift, x3)
    x6 = mapply(x5, x4)
    x7 = fill(x1, EIGHT, x6)
    x8 = canvas(FIVE, UNITY)
    x9 = astuple(TWO, ONE)
    x10 = canvas(EIGHT, x9)
    x11 = vconcat(x10, x8)
    x12 = asobject(x11)
    x13 = occurrences(x7, x12)
    x14 = lbind(shift, x12)
    x15 = mapply(x14, x13)
    x16 = fill(x7, TWO, x15)
    x17 = astuple(ONE, THREE)
    x18 = canvas(FIVE, x17)
    x19 = asobject(x18)
    x20 = occurrences(x16, x19)
    x21 = lbind(shift, x19)
    x22 = mapply(x21, x20)
    x23 = fill(x16, TWO, x22)
    x24 = hmirror(x11)
    x25 = asobject(x24)
    x26 = occurrences(x23, x25)
    x27 = lbind(shift, x25)
    x28 = mapply(x27, x26)
    x29 = fill(x23, TWO, x28)
    x30 = dmirror(x11)
    x31 = asobject(x30)
    x32 = occurrences(x29, x31)
    x33 = lbind(shift, x31)
    x34 = mapply(x33, x32)
    x35 = fill(x29, TWO, x34)
    x36 = vmirror(x30)
    x37 = asobject(x36)
    x38 = occurrences(x35, x37)
    x39 = lbind(shift, x37)
    x40 = mapply(x39, x38)
    O = fill(x35, TWO, x40)
    return O



def solve_67a3c6ac_9d9215db(I):
    x1 = vmirror(I)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = initset(x1)
    x6 = chain(numcolors, lefthalf, tophalf)
    x7 = insert(x2, x5)
    x8 = insert(x3, x7)
    x9 = insert(x4, x8)
    x10 = argmax(x9, x6)
    x11 = vmirror(x10)
    x12 = papply(pair, x10, x11)
    x13 = lbind(apply, maximum)
    x14 = apply(x13, x12)
    x15 = partition(x14)
    x16 = sizefilter(x15, FOUR)
    x17 = apply(llcorner, x16)
    x18 = apply(lrcorner, x16)
    x19 = combine(x17, x18)
    x20 = cover(x14, x19)
    x21 = tojvec(NEG_TWO)
    x22 = rbind(add, ZERO_BY_TWO)
    x23 = rbind(add, x21)
    x24 = compose(x22, ulcorner)
    x25 = compose(x23, urcorner)
    x26 = fork(connect, x24, x25)
    x27 = compose(even, last)
    x28 = rbind(sfilter, x27)
    x29 = chain(normalize, x28, x26)
    x30 = fork(shift, x29, x24)
    x31 = fork(recolor, color, x30)
    x32 = mapply(x31, x16)
    x33 = paint(x20, x32)
    x34 = rot90(x33)
    x35 = rot180(x33)
    x36 = rot270(x33)
    x37 = papply(pair, x33, x34)
    x38 = apply(x13, x37)
    x39 = papply(pair, x38, x35)
    x40 = apply(x13, x39)
    x41 = papply(pair, x40, x36)
    O = apply(x13, x41)
    return O



def solve_67a3c6ac_264363fd(I):
    x1 = vmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = argmin(x2, size)
    x4 = normalize(x3)
    x5 = height(x3)
    x6 = width(x3)
    x7 = equality(x5, FIVE)
    x8 = equality(x6, FIVE)
    x9 = astuple(x7, x8)
    x10 = add(UNITY, x9)
    x11 = invert(x10)
    x12 = center(x3)
    x13 = index(x1, x12)
    x14 = branch(x7, UP, RIGHT)
    x15 = add(x14, x12)
    x16 = index(x1, x15)
    x17 = astuple(x13, ORIGIN)
    x18 = initset(x17)
    x19 = cover(x1, x3)
    x20 = mostcolor(x19)
    x21 = ofcolor(x19, x20)
    x22 = occurrences(x19, x18)
    x23 = objects(x19, F, F, T)
    x24 = rbind(occurrences, x18)
    x25 = rbind(subgrid, x19)
    x26 = compose(x24, x25)
    x27 = lbind(mapply, vfrontier)
    x28 = lbind(mapply, hfrontier)
    x29 = compose(x27, x26)
    x30 = compose(x28, x26)
    x31 = branch(x7, x29, x30)
    x32 = branch(x8, x30, x29)
    x33 = fork(combine, x31, x32)
    x34 = lbind(recolor, x16)
    x35 = compose(x34, x33)
    x36 = fork(paint, x25, x35)
    x37 = compose(asobject, x36)
    x38 = fork(shift, x37, ulcorner)
    x39 = mapply(x38, x23)
    x40 = paint(x19, x39)
    x41 = shift(x4, x11)
    x42 = lbind(shift, x41)
    x43 = mapply(x42, x22)
    x44 = paint(x40, x43)
    O = fill(x44, x20, x21)
    return O



def solve_67a3c6ac_7df24a62(I):
    x1 = vmirror(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = ofcolor(x1, ONE)
    x5 = ofcolor(x1, FOUR)
    x6 = ulcorner(x4)
    x7 = subgrid(x4, x1)
    x8 = rot90(x7)
    x9 = rot180(x7)
    x10 = rot270(x7)
    x11 = matcher(size, ZERO)
    x12 = rbind(ofcolor, ONE)
    x13 = compose(normalize, x12)
    x14 = rbind(ofcolor, FOUR)
    x15 = rbind(shift, x6)
    x16 = compose(x15, x14)
    x17 = lbind(subtract, x2)
    x18 = chain(increment, x17, height)
    x19 = lbind(subtract, x3)
    x20 = chain(increment, x19, width)
    x21 = rbind(interval, ONE)
    x22 = lbind(x21, ZERO)
    x23 = compose(x22, x18)
    x24 = compose(x22, x20)
    x25 = fork(product, x23, x24)
    x26 = rbind(shift, NEG_UNITY)
    x27 = lbind(lbind, shift)
    x28 = chain(x27, x26, x13)
    x29 = astuple(x7, x8)
    x30 = astuple(x9, x10)
    x31 = combine(x29, x30)
    x32 = apply(x16, x31)
    x33 = lbind(difference, x5)
    x34 = apply(x33, x32)
    x35 = apply(normalize, x32)
    x36 = apply(x25, x35)
    x37 = lbind(rbind, difference)
    x38 = apply(x27, x35)
    x39 = apply(x37, x34)
    x40 = papply(compose, x39, x38)
    x41 = lbind(compose, x11)
    x42 = apply(x41, x40)
    x43 = papply(sfilter, x36, x42)
    x44 = apply(x28, x31)
    x45 = mpapply(mapply, x44, x43)
    O = fill(x1, ONE, x45)
    return O



def solve_67a3c6ac_234bbc79(I):
    x1 = vmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = rbind(other, FIVE)
    x4 = compose(x3, palette)
    x5 = fork(recolor, x4, identity)
    x6 = apply(x5, x2)
    x7 = order(x6, leftmost)
    x8 = compose(last, last)
    x9 = lbind(matcher, x8)
    x10 = compose(x9, leftmost)
    x11 = compose(x9, rightmost)
    x12 = fork(sfilter, identity, x10)
    x13 = fork(sfilter, identity, x11)
    x14 = compose(dneighbors, last)
    x15 = rbind(chain, x14)
    x16 = lbind(x15, size)
    x17 = lbind(rbind, intersection)
    x18 = chain(x16, x17, toindices)
    x19 = fork(argmin, x12, x18)
    x20 = fork(argmin, x13, x18)
    x21 = compose(last, x19)
    x22 = compose(last, x20)
    x23 = astuple(ZERO, DOWN_LEFT)
    x24 = initset(x23)
    x25 = lbind(add, RIGHT)
    x26 = chain(x21, first, last)
    x27 = compose(x22, first)
    x28 = fork(subtract, x27, x26)
    x29 = compose(first, last)
    x30 = compose(x25, x28)
    x31 = fork(shift, x29, x30)
    x32 = fork(combine, first, x31)
    x33 = fork(remove, x29, last)
    x34 = fork(astuple, x32, x33)
    x35 = size(x2)
    x36 = power(x34, x35)
    x37 = astuple(x24, x7)
    x38 = x36(x37)
    x39 = first(x38)
    x40 = width(x39)
    x41 = decrement(x40)
    x42 = astuple(THREE, x41)
    x43 = canvas(ZERO, x42)
    O = paint(x43, x39)
    return O



def solve_67a3c6ac_22233c11(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = rbind(upscale, TWO)
    x4 = chain(invert, halve, shape)
    x5 = fork(combine, hfrontier, vfrontier)
    x6 = compose(x3, vmirror)
    x7 = fork(shift, x6, x4)
    x8 = compose(toindices, x7)
    x9 = lbind(mapply, x5)
    x10 = compose(x9, toindices)
    x11 = fork(difference, x8, x10)
    x12 = mapply(x11, x2)
    O = fill(x1, EIGHT, x12)
    return O



def solve_67a3c6ac_a64e4611(I):
    x1 = vmirror(I)
    x2 = asindices(x1)
    x3 = fork(product, identity, identity)
    x4 = lbind(canvas, ZERO)
    x5 = compose(asobject, x4)
    x6 = fork(multiply, first, last)
    x7 = compose(positive, size)
    x8 = lbind(lbind, shift)
    x9 = rbind(fork, x6)
    x10 = lbind(x9, multiply)
    x11 = lbind(chain, x7)
    x12 = rbind(x11, x5)
    x13 = lbind(lbind, occurrences)
    x14 = chain(x10, x12, x13)
    x15 = compose(x3, first)
    x16 = compose(x14, last)
    x17 = fork(argmax, x15, x16)
    x18 = chain(x8, x5, x17)
    x19 = compose(x5, x17)
    x20 = fork(occurrences, last, x19)
    x21 = fork(mapply, x18, x20)
    x22 = multiply(TWO, SIX)
    x23 = interval(THREE, x22, ONE)
    x24 = astuple(x23, x1)
    x25 = x21(x24)
    x26 = fill(x1, THREE, x25)
    x27 = interval(THREE, TEN, ONE)
    x28 = astuple(x27, x26)
    x29 = x21(x28)
    x30 = fill(x26, THREE, x29)
    x31 = astuple(x27, x30)
    x32 = x21(x31)
    x33 = fill(x30, THREE, x32)
    x34 = rbind(toobject, x33)
    x35 = rbind(colorcount, THREE)
    x36 = chain(x35, x34, neighbors)
    x37 = matcher(x36, EIGHT)
    x38 = sfilter(x2, x37)
    x39 = fill(x1, THREE, x38)
    x40 = ofcolor(x39, ZERO)
    x41 = rbind(bordering, x39)
    x42 = compose(x41, initset)
    x43 = lbind(contained, THREE)
    x44 = rbind(toobject, x39)
    x45 = chain(x43, palette, x44)
    x46 = compose(x45, dneighbors)
    x47 = fork(both, x46, x42)
    x48 = sfilter(x40, x47)
    O = fill(x39, THREE, x48)
    return O



def solve_67a3c6ac_97a05b5b(I):
    x1 = vmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = rbind(greater, ONE)
    x6 = compose(x5, numcolors)
    x7 = sfilter(x2, x6)
    x8 = lbind(rbind, subtract)
    x9 = switch(x4, TWO, ZERO)
    x10 = lbind(occurrences, x9)
    x11 = lbind(lbind, shift)
    x12 = compose(x8, ulcorner)
    x13 = matcher(first, TWO)
    x14 = compose(flip, x13)
    x15 = rbind(sfilter, x13)
    x16 = rbind(sfilter, x14)
    x17 = lbind(recolor, ZERO)
    x18 = compose(x17, x16)
    x19 = fork(combine, x18, x15)
    x20 = chain(x12, x19, normalize)
    x21 = objects(x9, T, T, T)
    x22 = apply(toindices, x21)
    x23 = chain(x10, x19, normalize)
    x24 = rbind(colorcount, TWO)
    x25 = lbind(sfilter, x22)
    x26 = chain(size, first, x25)
    x27 = compose(positive, size)
    x28 = lbind(lbind, contained)
    x29 = chain(x27, x25, x28)
    x30 = compose(x26, x28)
    x31 = rbind(sfilter, x29)
    x32 = compose(x31, x23)
    x33 = lbind(rbind, equality)
    x34 = rbind(compose, x30)
    x35 = chain(x34, x33, x24)
    x36 = fork(sfilter, x32, x35)
    x37 = fork(apply, x20, x36)
    x38 = compose(x11, normalize)
    x39 = fork(mapply, x38, x37)
    x40 = astuple(cmirror, dmirror)
    x41 = astuple(hmirror, vmirror)
    x42 = combine(x40, x41)
    x43 = product(x42, x42)
    x44 = fork(compose, first, last)
    x45 = apply(x44, x43)
    x46 = lbind(rapply, x45)
    x47 = mapply(x46, x7)
    x48 = mapply(x39, x47)
    x49 = paint(x4, x48)
    x50 = palette(x48)
    x51 = lbind(remove, TWO)
    x52 = x51(x50)
    x53 = chain(first, x51, palette)
    x54 = rbind(contained, x52)
    x55 = chain(flip, x54, x53)
    x56 = sfilter(x7, x55)
    x57 = fork(apply, x20, x23)
    x58 = fork(mapply, x38, x57)
    x59 = mapply(x46, x56)
    x60 = mapply(x58, x59)
    O = paint(x49, x60)
    return O



def solve_67a3c6ac_3e980e27(I):
    x1 = vmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = astuple(TEN, TEN)
    x4 = invert(x3)
    x5 = astuple(TWO, x4)
    x6 = astuple(THREE, x4)
    x7 = initset(x5)
    x8 = insert(x6, x7)
    x9 = insert(x8, x2)
    x10 = lbind(contained, TWO)
    x11 = lbind(contained, THREE)
    x12 = compose(invert, ulcorner)
    x13 = lbind(compose, x12)
    x14 = lbind(rbind, sfilter)
    x15 = compose(x13, x14)
    x16 = rbind(compose, center)
    x17 = lbind(lbind, shift)
    x18 = x15(x10)
    x19 = x15(x11)
    x20 = fork(shift, identity, x18)
    x21 = fork(shift, identity, x19)
    x22 = compose(x10, palette)
    x23 = compose(x11, palette)
    x24 = sfilter(x9, x22)
    x25 = argmax(x24, size)
    x26 = remove(x25, x24)
    x27 = vmirror(x25)
    x28 = chain(x16, x17, x20)
    x29 = x28(x27)
    x30 = mapply(x29, x26)
    x31 = sfilter(x9, x23)
    x32 = argmax(x31, size)
    x33 = remove(x32, x31)
    x34 = chain(x16, x17, x21)
    x35 = x34(x32)
    x36 = mapply(x35, x33)
    x37 = combine(x30, x36)
    O = paint(x1, x37)
    return O



def solve_68b16354_67a3c6ac(I):
    x1 = hmirror(I)
    O = vmirror(x1)
    return O



def solve_68b16354_74dd1130(I):
    x1 = hmirror(I)
    O = dmirror(x1)
    return O



def solve_68b16354_3c9b0459(I):
    x1 = hmirror(I)
    O = rot180(x1)
    return O



def solve_68b16354_6150a2bd(I):
    x1 = hmirror(I)
    O = rot180(x1)
    return O



def solve_68b16354_9172f3a0(I):
    x1 = hmirror(I)
    O = upscale(x1, THREE)
    return O



def solve_68b16354_9dfd6313(I):
    x1 = hmirror(I)
    O = dmirror(x1)
    return O



def solve_68b16354_a416b8f3(I):
    x1 = hmirror(I)
    O = hconcat(x1, x1)
    return O



def solve_68b16354_b1948b0a(I):
    x1 = hmirror(I)
    O = replace(x1, SIX, TWO)
    return O



def solve_68b16354_c59eb873(I):
    x1 = hmirror(I)
    O = upscale(x1, TWO)
    return O



def solve_68b16354_c8f0f002(I):
    x1 = hmirror(I)
    O = replace(x1, SEVEN, FIVE)
    return O



def solve_68b16354_d10ecb37(I):
    x1 = hmirror(I)
    O = crop(x1, ORIGIN, TWO_BY_TWO)
    return O



def solve_68b16354_d511f180(I):
    x1 = hmirror(I)
    O = switch(x1, FIVE, EIGHT)
    return O



def solve_68b16354_ed36ccf7(I):
    x1 = hmirror(I)
    O = rot270(x1)
    return O



def solve_68b16354_4c4377d9(I):
    x1 = hmirror(I)
    x2 = hmirror(x1)
    O = vconcat(x2, x1)
    return O



def solve_68b16354_6d0aefbc(I):
    x1 = hmirror(I)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_68b16354_6fa7a44f(I):
    x1 = hmirror(I)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_68b16354_5614dbcf(I):
    x1 = hmirror(I)
    x2 = replace(x1, FIVE, ZERO)
    O = downscale(x2, THREE)
    return O



def solve_68b16354_5bd6f4ac(I):
    x1 = hmirror(I)
    x2 = tojvec(SIX)
    O = crop(x1, x2, THREE_BY_THREE)
    return O



def solve_68b16354_5582e5ca(I):
    x1 = hmirror(I)
    x2 = mostcolor(x1)
    O = canvas(x2, THREE_BY_THREE)
    return O



def solve_68b16354_8be77c9e(I):
    x1 = hmirror(I)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_68b16354_c9e6f938(I):
    x1 = hmirror(I)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_68b16354_2dee498d(I):
    x1 = hmirror(I)
    x2 = hsplit(x1, THREE)
    O = first(x2)
    return O



def solve_68b16354_1cf80156(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = subgrid(x3, x1)
    return O



def solve_68b16354_32597951(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, EIGHT)
    x3 = delta(x2)
    O = fill(x1, THREE, x3)
    return O



def solve_68b16354_25ff71a9(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = move(x1, x3, DOWN)
    return O



def solve_68b16354_0b148d64(I):
    x1 = hmirror(I)
    x2 = partition(x1)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_68b16354_1f85a75f(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_68b16354_23b5c85d(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_68b16354_ac0a08a4(I):
    x1 = hmirror(I)
    x2 = colorcount(x1, ZERO)
    x3 = subtract(NINE, x2)
    O = upscale(x1, x3)
    return O



def solve_68b16354_be94b721(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_68b16354_c909285e(I):
    x1 = hmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    O = subgrid(x3, x1)
    return O



def solve_68b16354_f25ffba3(I):
    x1 = hmirror(I)
    x2 = bottomhalf(x1)
    x3 = hmirror(x2)
    O = vconcat(x3, x2)
    return O



def solve_68b16354_c1d99e64(I):
    x1 = hmirror(I)
    x2 = frontiers(x1)
    x3 = merge(x2)
    O = fill(x1, TWO, x3)
    return O



def solve_68b16354_b91ae062(I):
    x1 = hmirror(I)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    O = upscale(x1, x3)
    return O



def solve_68b16354_3aa6fb7a(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = mapply(corners, x2)
    O = underfill(x1, ONE, x3)
    return O



def solve_68b16354_7b7f7511(I):
    x1 = hmirror(I)
    x2 = portrait(x1)
    x3 = branch(x2, tophalf, lefthalf)
    O = x3(x1)
    return O



def solve_68b16354_4258a5f9(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, FIVE)
    x3 = mapply(neighbors, x2)
    O = fill(x1, ONE, x3)
    return O



def solve_68b16354_2dc579da(I):
    x1 = hmirror(I)
    x2 = vsplit(x1, TWO)
    x3 = rbind(hsplit, TWO)
    x4 = mapply(x3, x2)
    O = argmax(x4, numcolors)
    return O



def solve_68b16354_28bf18c6(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = hconcat(x4, x4)
    return O



def solve_68b16354_3af2c5a8(I):
    x1 = hmirror(I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_68b16354_44f52bb0(I):
    x1 = hmirror(I)
    x2 = vmirror(x1)
    x3 = equality(x2, x1)
    x4 = branch(x3, ONE, SEVEN)
    O = canvas(x4, UNITY)
    return O



def solve_68b16354_62c24649(I):
    x1 = hmirror(I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_68b16354_67e8384a(I):
    x1 = hmirror(I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_68b16354_7468f01a(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = vmirror(x4)
    return O



def solve_68b16354_662c240a(I):
    x1 = hmirror(I)
    x2 = vsplit(x1, THREE)
    x3 = fork(equality, dmirror, identity)
    x4 = compose(flip, x3)
    O = extract(x2, x4)
    return O



def solve_68b16354_42a50994(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = cover(x1, x4)
    return O



def solve_68b16354_56ff96f3(I):
    x1 = hmirror(I)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = mapply(x3, x2)
    O = paint(x1, x4)
    return O



def solve_68b16354_50cb2852(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = compose(backdrop, inbox)
    x4 = mapply(x3, x2)
    O = fill(x1, EIGHT, x4)
    return O



def solve_68b16354_4347f46a(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(difference, toindices, box)
    x4 = mapply(x3, x2)
    O = fill(x1, ZERO, x4)
    return O



def solve_68b16354_46f33fce(I):
    x1 = hmirror(I)
    x2 = rot180(x1)
    x3 = downscale(x2, TWO)
    x4 = rot180(x3)
    O = upscale(x4, FOUR)
    return O



def solve_68b16354_a740d043(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    O = replace(x4, ONE, ZERO)
    return O



def solve_68b16354_a79310a0(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = move(x1, x3, DOWN)
    O = replace(x4, EIGHT, TWO)
    return O



def solve_68b16354_aabf363d(I):
    x1 = hmirror(I)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, ZERO)
    x4 = leastcolor(x3)
    O = replace(x3, x4, x2)
    return O



def solve_68b16354_ae4f1146(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = rbind(colorcount, ONE)
    x4 = argmax(x2, x3)
    O = subgrid(x4, x1)
    return O



def solve_68b16354_b27ca6d3(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, THREE, x4)
    return O



def solve_68b16354_ce22a75a(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = mapply(backdrop, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_68b16354_dc1df850(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_68b16354_f25fbde4(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = upscale(x4, TWO)
    return O



def solve_68b16354_44d8ac46(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(delta, x2)
    x4 = mfilter(x3, square)
    O = fill(x1, TWO, x4)
    return O



def solve_68b16354_1e0a9b12(I):
    x1 = hmirror(I)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = apply(x3, x2)
    O = rot90(x4)
    return O



def solve_68b16354_0d3d703e(I):
    x1 = hmirror(I)
    x2 = switch(x1, THREE, FOUR)
    x3 = switch(x2, EIGHT, NINE)
    x4 = switch(x3, TWO, SIX)
    O = switch(x4, ONE, FIVE)
    return O



def solve_68b16354_3618c87e(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = move(x1, x4, TWO_BY_ZERO)
    return O



def solve_68b16354_1c786137(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, height)
    x4 = subgrid(x3, x1)
    O = trim(x4)
    return O



def solve_68b16354_8efcae92(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ONE)
    x4 = compose(size, delta)
    x5 = argmax(x3, x4)
    O = subgrid(x5, x1)
    return O



def solve_68b16354_445eab21(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(multiply, height, width)
    x4 = argmax(x2, x3)
    x5 = color(x4)
    O = canvas(x5, TWO_BY_TWO)
    return O



def solve_68b16354_6f8cd79b(I):
    x1 = hmirror(I)
    x2 = asindices(x1)
    x3 = apply(initset, x2)
    x4 = rbind(bordering, x1)
    x5 = mfilter(x3, x4)
    O = fill(x1, EIGHT, x5)
    return O



def solve_68b16354_2013d3e2(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = lefthalf(x4)
    O = tophalf(x5)
    return O



def solve_68b16354_41e4d17e(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = mapply(x4, x2)
    O = underfill(x1, SIX, x5)
    return O



def solve_68b16354_9565186b(I):
    x1 = hmirror(I)
    x2 = shape(x1)
    x3 = objects(x1, T, F, F)
    x4 = argmax(x3, size)
    x5 = canvas(FIVE, x2)
    O = paint(x5, x4)
    return O



def solve_68b16354_aedd82e4(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, TWO)
    x4 = sizefilter(x3, ONE)
    x5 = merge(x4)
    O = fill(x1, ONE, x5)
    return O



def solve_68b16354_bb43febb(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, FIVE)
    x4 = compose(backdrop, inbox)
    x5 = mapply(x4, x3)
    O = fill(x1, TWO, x5)
    return O



def solve_68b16354_e98196ab(I):
    x1 = hmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = objects(x2, T, F, T)
    x5 = merge(x4)
    O = paint(x3, x5)
    return O



def solve_68b16354_f76d97a5(I):
    x1 = hmirror(I)
    x2 = palette(x1)
    x3 = first(x2)
    x4 = last(x2)
    x5 = switch(x1, x3, x4)
    O = replace(x5, FIVE, ZERO)
    return O



def solve_68b16354_ce9e57f2(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(connect, ulcorner, centerofmass)
    x4 = mapply(x3, x2)
    x5 = fill(x1, EIGHT, x4)
    O = switch(x5, EIGHT, TWO)
    return O



def solve_68b16354_22eb0ac0(I):
    x1 = hmirror(I)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    O = paint(x1, x5)
    return O



def solve_68b16354_9f236235(I):
    x1 = hmirror(I)
    x2 = compress(x1)
    x3 = objects(x1, T, F, F)
    x4 = vmirror(x2)
    x5 = valmin(x3, width)
    O = downscale(x4, x5)
    return O



def solve_68b16354_a699fb00(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, RIGHT)
    x4 = shift(x2, LEFT)
    x5 = intersection(x3, x4)
    O = fill(x1, TWO, x5)
    return O



def solve_68b16354_46442a0e(I):
    x1 = hmirror(I)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_68b16354_7fe24cdd(I):
    x1 = hmirror(I)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_68b16354_0ca9ddb6(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x3)
    x6 = fill(x1, SEVEN, x4)
    O = fill(x6, FOUR, x5)
    return O



def solve_68b16354_543a7ed5(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, SIX)
    x4 = mapply(outbox, x3)
    x5 = fill(x1, THREE, x4)
    x6 = mapply(delta, x3)
    O = fill(x5, FOUR, x6)
    return O



def solve_68b16354_0520fde7(I):
    x1 = hmirror(I)
    x2 = vmirror(x1)
    x3 = lefthalf(x2)
    x4 = righthalf(x2)
    x5 = vmirror(x4)
    x6 = cellwise(x3, x5, ZERO)
    O = replace(x6, ONE, TWO)
    return O



def solve_68b16354_dae9d2b5(I):
    x1 = hmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, FOUR)
    x5 = ofcolor(x3, THREE)
    x6 = combine(x4, x5)
    O = fill(x2, SIX, x6)
    return O



def solve_68b16354_8d5021e8(I):
    x1 = hmirror(I)
    x2 = vmirror(x1)
    x3 = hconcat(x2, x1)
    x4 = hmirror(x3)
    x5 = vconcat(x3, x4)
    x6 = vconcat(x5, x3)
    O = hmirror(x6)
    return O



def solve_68b16354_b60334d2(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, FIVE)
    x3 = replace(x1, FIVE, ZERO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x2)
    x6 = fill(x3, ONE, x4)
    O = fill(x6, FIVE, x5)
    return O



def solve_68b16354_b94a9452(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = leastcolor(x4)
    x6 = mostcolor(x4)
    O = switch(x4, x5, x6)
    return O



def solve_68b16354_d037b0a7(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, DOWN)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    O = paint(x1, x6)
    return O



def solve_68b16354_d0f5fe59(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = astuple(x3, x3)
    x5 = canvas(ZERO, x4)
    x6 = shoot(ORIGIN, UNITY)
    O = fill(x5, EIGHT, x6)
    return O



def solve_68b16354_e3497940(I):
    x1 = hmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = vmirror(x3)
    x5 = objects(x4, T, F, T)
    x6 = merge(x5)
    O = paint(x2, x6)
    return O



def solve_68b16354_e9afcf9a(I):
    x1 = hmirror(I)
    x2 = astuple(TWO, ONE)
    x3 = crop(x1, ORIGIN, x2)
    x4 = hmirror(x3)
    x5 = hconcat(x3, x4)
    x6 = hconcat(x5, x5)
    O = hconcat(x6, x5)
    return O



def solve_68b16354_48d8fb45(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = matcher(size, ONE)
    x4 = extract(x2, x3)
    x5 = lbind(adjacent, x4)
    x6 = extract(x2, x5)
    O = subgrid(x6, x1)
    return O



def solve_68b16354_d406998b(I):
    x1 = hmirror(I)
    x2 = vmirror(x1)
    x3 = ofcolor(x2, FIVE)
    x4 = compose(even, last)
    x5 = sfilter(x3, x4)
    x6 = fill(x2, THREE, x5)
    O = vmirror(x6)
    return O



def solve_68b16354_3906de3d(I):
    x1 = hmirror(I)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = switch(x2, ONE, TWO)
    x5 = apply(x3, x4)
    x6 = switch(x5, ONE, TWO)
    O = cmirror(x6)
    return O



def solve_68b16354_00d62c1b(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, FOUR, x6)
    return O



def solve_68b16354_7b6016b9(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = rbind(bordering, x1)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x4)
    x6 = fill(x1, TWO, x5)
    O = replace(x6, ZERO, THREE)
    return O



def solve_68b16354_67385a82(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, THREE)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = merge(x5)
    O = fill(x1, EIGHT, x6)
    return O



def solve_68b16354_a5313dff(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, ONE, x6)
    return O



def solve_68b16354_ea32f347(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, FIVE, FOUR)
    x4 = argmin(x2, size)
    x5 = argmax(x2, size)
    x6 = fill(x3, ONE, x5)
    O = fill(x6, TWO, x4)
    return O



def solve_68b16354_d631b094(I):
    x1 = hmirror(I)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = ofcolor(x1, x3)
    x5 = size(x4)
    x6 = astuple(ONE, x5)
    O = canvas(x3, x6)
    return O



def solve_68b16354_10fcaaa3(I):
    x1 = hmirror(I)
    x2 = leastcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = vconcat(x3, x3)
    x5 = ofcolor(x4, x2)
    x6 = mapply(ineighbors, x5)
    O = underfill(x4, EIGHT, x6)
    return O



def solve_68b16354_007bbfb7(I):
    x1 = hmirror(I)
    x2 = hupscale(x1, THREE)
    x3 = vupscale(x2, THREE)
    x4 = hconcat(x1, x1)
    x5 = hconcat(x4, x1)
    x6 = vconcat(x5, x5)
    x7 = vconcat(x6, x5)
    O = cellwise(x3, x7, ZERO)
    return O



def solve_68b16354_496994bd(I):
    x1 = hmirror(I)
    x2 = width(x1)
    x3 = height(x1)
    x4 = halve(x3)
    x5 = astuple(x4, x2)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    O = vconcat(x6, x7)
    return O



def solve_68b16354_1f876c06(I):
    x1 = hmirror(I)
    x2 = fgpartition(x1)
    x3 = compose(last, first)
    x4 = power(last, TWO)
    x5 = fork(connect, x3, x4)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_68b16354_05f2a901(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = first(x3)
    x5 = colorfilter(x2, EIGHT)
    x6 = first(x5)
    x7 = gravitate(x4, x6)
    O = move(x1, x4, x7)
    return O



def solve_68b16354_39a8645d(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = matcher(color, x5)
    x7 = extract(x2, x6)
    O = subgrid(x7, x1)
    return O



def solve_68b16354_1b2d62fb(I):
    x1 = hmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = replace(x2, NINE, ZERO)
    O = fill(x7, EIGHT, x6)
    return O



def solve_68b16354_90c28cc7(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = dedupe(x4)
    x6 = rot90(x5)
    x7 = dedupe(x6)
    O = rot270(x7)
    return O



def solve_68b16354_b6afb2da(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = replace(x1, FIVE, TWO)
    x4 = colorfilter(x2, FIVE)
    x5 = mapply(box, x4)
    x6 = fill(x3, FOUR, x5)
    x7 = mapply(corners, x4)
    O = fill(x6, ONE, x7)
    return O



def solve_68b16354_b9b7f026(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = argmin(x2, size)
    x4 = rbind(adjacent, x3)
    x5 = remove(x3, x2)
    x6 = extract(x5, x4)
    x7 = color(x6)
    O = canvas(x7, UNITY)
    return O



def solve_68b16354_ba97ae07(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = ofcolor(x1, x5)
    x7 = backdrop(x6)
    O = fill(x1, x5, x7)
    return O



def solve_68b16354_c9f8e694(I):
    x1 = hmirror(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = ofcolor(x1, ZERO)
    x5 = astuple(x2, ONE)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hupscale(x6, x3)
    O = fill(x7, ZERO, x4)
    return O



def solve_68b16354_d23f8c26(I):
    x1 = hmirror(I)
    x2 = asindices(x1)
    x3 = width(x1)
    x4 = halve(x3)
    x5 = matcher(last, x4)
    x6 = compose(flip, x5)
    x7 = sfilter(x2, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_68b16354_d5d6de2d(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sfilter(x2, square)
    x4 = difference(x2, x3)
    x5 = compose(backdrop, inbox)
    x6 = mapply(x5, x4)
    x7 = replace(x1, TWO, ZERO)
    O = fill(x7, THREE, x6)
    return O



def solve_68b16354_dbc1a6ce(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_68b16354_ded97339(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, EIGHT)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_68b16354_ea786f4a(I):
    x1 = hmirror(I)
    x2 = width(x1)
    x3 = shoot(ORIGIN, UNITY)
    x4 = decrement(x2)
    x5 = tojvec(x4)
    x6 = shoot(x5, DOWN_LEFT)
    x7 = combine(x3, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_68b16354_08ed6ac7(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = order(x2, height)
    x5 = size(x3)
    x6 = interval(x5, ZERO, NEG_ONE)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_68b16354_40853293(I):
    x1 = hmirror(I)
    x2 = partition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    x6 = mfilter(x4, vline)
    x7 = paint(x1, x5)
    O = paint(x7, x6)
    return O



def solve_68b16354_5521c0d9(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = cover(x1, x3)
    x5 = chain(toivec, invert, height)
    x6 = fork(shift, identity, x5)
    x7 = mapply(x6, x2)
    O = paint(x4, x7)
    return O



def solve_68b16354_f8ff0b80(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = rbind(canvas, UNITY)
    x6 = apply(x5, x4)
    x7 = merge(x6)
    O = hmirror(x7)
    return O



def solve_68b16354_85c4e7cd(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = compose(invert, size)
    x4 = order(x2, size)
    x5 = order(x2, x3)
    x6 = apply(color, x5)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_68b16354_d2abd087(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = matcher(size, SIX)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x3)
    x6 = mfilter(x2, x4)
    x7 = fill(x1, TWO, x5)
    O = fill(x7, ONE, x6)
    return O



def solve_68b16354_363442ee(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = asobject(x3)
    x5 = lbind(shift, x4)
    x6 = compose(x5, decrement)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_68b16354_5168d44c(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, THREE)
    x3 = height(x2)
    x4 = equality(x3, ONE)
    x5 = branch(x4, ZERO_BY_TWO, TWO_BY_ZERO)
    x6 = ofcolor(x1, TWO)
    x7 = recolor(TWO, x6)
    O = move(x1, x7, x5)
    return O



def solve_68b16354_e9614598(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = fork(add, first, last)
    x4 = x3(x2)
    x5 = halve(x4)
    x6 = dneighbors(x5)
    x7 = insert(x5, x6)
    O = fill(x1, THREE, x7)
    return O



def solve_68b16354_d9fac9be(I):
    x1 = hmirror(I)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = color(x4)
    x6 = remove(ZERO, x2)
    x7 = other(x6, x5)
    O = canvas(x7, UNITY)
    return O



def solve_68b16354_e50d258f(I):
    x1 = hmirror(I)
    x2 = width(x1)
    x3 = astuple(NINE, x2)
    x4 = canvas(ZERO, x3)
    x5 = vconcat(x1, x4)
    x6 = objects(x5, F, F, T)
    x7 = rbind(colorcount, TWO)
    x8 = argmax(x6, x7)
    O = subgrid(x8, x1)
    return O



def solve_68b16354_810b9b61(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = apply(toindices, x2)
    x4 = fork(either, vline, hline)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = fork(equality, identity, box)
    x8 = mfilter(x6, x7)
    O = fill(x1, THREE, x8)
    return O



def solve_68b16354_54d82841(I):
    x1 = hmirror(I)
    x2 = height(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(last, center)
    x5 = apply(x4, x3)
    x6 = decrement(x2)
    x7 = lbind(astuple, x6)
    x8 = apply(x7, x5)
    O = fill(x1, FOUR, x8)
    return O



def solve_68b16354_60b61512(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = mapply(delta, x2)
    O = fill(x1, SEVEN, x3)
    return O



def solve_68b16354_25d8a9c8(I):
    x1 = hmirror(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, THREE)
    x5 = mfilter(x4, hline)
    x6 = toindices(x5)
    x7 = difference(x2, x6)
    x8 = fill(x1, FIVE, x6)
    O = fill(x8, ZERO, x7)
    return O



def solve_68b16354_239be575(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = lbind(contained, TWO)
    x4 = compose(x3, palette)
    x5 = sfilter(x2, x4)
    x6 = size(x5)
    x7 = greater(x6, ONE)
    x8 = branch(x7, ZERO, EIGHT)
    O = canvas(x8, UNITY)
    return O



def solve_68b16354_5c0a986e(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, ONE)
    x4 = lrcorner(x2)
    x5 = ulcorner(x3)
    x6 = shoot(x4, UNITY)
    x7 = shoot(x5, NEG_UNITY)
    x8 = fill(x1, TWO, x6)
    O = fill(x8, ONE, x7)
    return O



def solve_68b16354_6430c8c4(I):
    x1 = hmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(FOUR, FOUR)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, THREE, x7)
    return O



def solve_68b16354_94f9d214(I):
    x1 = hmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = astuple(FOUR, FOUR)
    x7 = canvas(ZERO, x6)
    x8 = intersection(x4, x5)
    O = fill(x7, TWO, x8)
    return O



def solve_68b16354_a1570a43(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, THREE)
    x4 = recolor(TWO, x2)
    x5 = ulcorner(x3)
    x6 = ulcorner(x2)
    x7 = subtract(x5, x6)
    x8 = increment(x7)
    O = move(x1, x4, x8)
    return O



def solve_68b16354_ce4f8723(I):
    x1 = hmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = astuple(FOUR, FOUR)
    x8 = canvas(THREE, x7)
    O = fill(x8, ZERO, x6)
    return O



def solve_68b16354_d13f3404(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, UNITY)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = astuple(SIX, SIX)
    x8 = canvas(ZERO, x7)
    O = paint(x8, x6)
    return O



def solve_68b16354_dc433765(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, THREE)
    x3 = ofcolor(x1, FOUR)
    x4 = first(x2)
    x5 = first(x3)
    x6 = subtract(x5, x4)
    x7 = sign(x6)
    x8 = recolor(THREE, x2)
    O = move(x1, x8, x7)
    return O



def solve_68b16354_f2829549(I):
    x1 = hmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = shape(x2)
    x8 = canvas(ZERO, x7)
    O = fill(x8, THREE, x6)
    return O



def solve_68b16354_fafffa47(I):
    x1 = hmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = shape(x3)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, TWO, x7)
    return O



def solve_68b16354_fcb5c309(I):
    x1 = hmirror(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = colorfilter(x3, x2)
    x5 = difference(x3, x4)
    x6 = argmax(x5, size)
    x7 = color(x6)
    x8 = subgrid(x6, x1)
    O = replace(x8, x7, x2)
    return O



def solve_68b16354_ff805c23(I):
    x1 = hmirror(I)
    x2 = hmirror(x1)
    x3 = vmirror(x1)
    x4 = ofcolor(x1, ONE)
    x5 = subgrid(x4, x2)
    x6 = subgrid(x4, x3)
    x7 = palette(x5)
    x8 = contained(ONE, x7)
    O = branch(x8, x6, x5)
    return O



def solve_68b16354_e76a88a6(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = remove(x3, x2)
    x6 = apply(ulcorner, x5)
    x7 = lbind(shift, x4)
    x8 = mapply(x7, x6)
    O = paint(x1, x8)
    return O



def solve_68b16354_7c008303(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, THREE)
    x3 = subgrid(x2, x1)
    x4 = ofcolor(x3, ZERO)
    x5 = replace(x1, THREE, ZERO)
    x6 = replace(x5, EIGHT, ZERO)
    x7 = compress(x6)
    x8 = upscale(x7, THREE)
    O = fill(x8, ZERO, x4)
    return O



def solve_68b16354_7f4411dc(I):
    x1 = hmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = rbind(difference, x3)
    x5 = rbind(greater, TWO)
    x6 = chain(x5, size, x4)
    x7 = compose(x6, dneighbors)
    x8 = sfilter(x3, x7)
    O = fill(x1, ZERO, x8)
    return O



def solve_68b16354_b230c067(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(normalize, x3)
    x5 = leastcommon(x4)
    x6 = matcher(normalize, x5)
    x7 = extract(x2, x6)
    x8 = replace(x1, EIGHT, ONE)
    O = fill(x8, TWO, x7)
    return O



def solve_68b16354_e8593010(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = sizefilter(x2, TWO)
    x5 = merge(x3)
    x6 = fill(x1, THREE, x5)
    x7 = merge(x4)
    x8 = fill(x6, TWO, x7)
    O = replace(x8, ZERO, ONE)
    return O



def solve_68b16354_6d75e8bb(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = ulcorner(x3)
    x5 = subgrid(x3, x1)
    x6 = replace(x5, ZERO, TWO)
    x7 = asobject(x6)
    x8 = shift(x7, x4)
    O = paint(x1, x8)
    return O



def solve_68b16354_1190e5a7(I):
    x1 = hmirror(I)
    x2 = mostcolor(x1)
    x3 = frontiers(x1)
    x4 = sfilter(x3, vline)
    x5 = difference(x3, x4)
    x6 = astuple(x5, x4)
    x7 = apply(size, x6)
    x8 = increment(x7)
    O = canvas(x2, x8)
    return O



def solve_68b16354_6e02f1e3(I):
    x1 = hmirror(I)
    x2 = numcolors(x1)
    x3 = canvas(ZERO, THREE_BY_THREE)
    x4 = equality(x2, THREE)
    x5 = equality(x2, TWO)
    x6 = branch(x4, TWO_BY_ZERO, ORIGIN)
    x7 = branch(x5, TWO_BY_TWO, ZERO_BY_TWO)
    x8 = connect(x6, x7)
    O = fill(x3, FIVE, x8)
    return O



def solve_68b16354_a61f2674(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = replace(x1, FIVE, ZERO)
    x6 = recolor(ONE, x3)
    x7 = recolor(TWO, x4)
    x8 = combine(x6, x7)
    O = paint(x5, x8)
    return O



def solve_68b16354_fcc82909(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = rbind(add, DOWN)
    x4 = compose(x3, llcorner)
    x5 = compose(toivec, numcolors)
    x6 = fork(add, lrcorner, x5)
    x7 = fork(astuple, x4, x6)
    x8 = compose(box, x7)
    x9 = mapply(x8, x2)
    O = fill(x1, THREE, x9)
    return O



def solve_68b16354_72ca375d(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = rbind(subgrid, x1)
    x5 = apply(x4, x3)
    x6 = apply(vmirror, x5)
    x7 = papply(equality, x5, x6)
    x8 = pair(x5, x7)
    x9 = extract(x8, last)
    O = first(x9)
    return O



def solve_68b16354_253bf280(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, EIGHT)
    x3 = prapply(connect, x2, x2)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = fork(either, vline, hline)
    x8 = mfilter(x6, x7)
    x9 = fill(x1, THREE, x8)
    O = fill(x9, EIGHT, x2)
    return O



def solve_68b16354_694f12f3(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, FOUR)
    x4 = compose(backdrop, inbox)
    x5 = argmin(x3, size)
    x6 = argmax(x3, size)
    x7 = x4(x5)
    x8 = x4(x6)
    x9 = fill(x1, ONE, x7)
    O = fill(x9, TWO, x8)
    return O



def solve_68b16354_1f642eb9(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = rbind(gravitate, x5)
    x7 = compose(crement, x6)
    x8 = fork(shift, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_68b16354_31aa019c(I):
    x1 = hmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = first(x3)
    x5 = neighbors(x4)
    x6 = astuple(TEN, TEN)
    x7 = canvas(ZERO, x6)
    x8 = initset(x4)
    x9 = fill(x7, x2, x8)
    O = fill(x9, TWO, x5)
    return O



def solve_68b16354_27a28665(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = valmax(x2, size)
    x4 = equality(x3, ONE)
    x5 = equality(x3, FOUR)
    x6 = equality(x3, FIVE)
    x7 = branch(x4, TWO, ONE)
    x8 = branch(x5, THREE, x7)
    x9 = branch(x6, SIX, x8)
    O = canvas(x9, UNITY)
    return O



def solve_68b16354_7ddcd7ec(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = color(x5)
    x7 = lbind(position, x5)
    x8 = fork(shoot, center, x7)
    x9 = mapply(x8, x3)
    O = fill(x1, x6, x9)
    return O



def solve_68b16354_3bd67248(I):
    x1 = hmirror(I)
    x2 = height(x1)
    x3 = decrement(x2)
    x4 = decrement(x3)
    x5 = astuple(x4, ONE)
    x6 = astuple(x3, ONE)
    x7 = shoot(x5, UP_RIGHT)
    x8 = shoot(x6, RIGHT)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_68b16354_73251a56(I):
    x1 = hmirror(I)
    x2 = dmirror(x1)
    x3 = papply(pair, x1, x2)
    x4 = lbind(apply, maximum)
    x5 = apply(x4, x3)
    x6 = mostcolor(x5)
    x7 = replace(x5, ZERO, x6)
    x8 = index(x7, ORIGIN)
    x9 = shoot(ORIGIN, UNITY)
    O = fill(x7, x8, x9)
    return O



def solve_68b16354_25d487eb(I):
    x1 = hmirror(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = ofcolor(x1, x2)
    x5 = center(x4)
    x6 = merge(x3)
    x7 = center(x6)
    x8 = subtract(x7, x5)
    x9 = shoot(x5, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_68b16354_8f2ea7aa(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    O = cellwise(x5, x9, ZERO)
    return O



def solve_68b16354_b8825c91(I):
    x1 = hmirror(I)
    x2 = replace(x1, FOUR, ZERO)
    x3 = dmirror(x2)
    x4 = papply(pair, x2, x3)
    x5 = lbind(apply, maximum)
    x6 = apply(x5, x4)
    x7 = cmirror(x6)
    x8 = papply(pair, x6, x7)
    x9 = apply(x5, x8)
    O = cmirror(x9)
    return O



def solve_68b16354_cce03e0d(I):
    x1 = hmirror(I)
    x2 = upscale(x1, THREE)
    x3 = hconcat(x1, x1)
    x4 = hconcat(x3, x1)
    x5 = vconcat(x4, x4)
    x6 = vconcat(x5, x4)
    x7 = ofcolor(x2, ZERO)
    x8 = ofcolor(x2, ONE)
    x9 = combine(x7, x8)
    O = fill(x6, ZERO, x9)
    return O



def solve_68b16354_d364b489(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, DOWN)
    x4 = fill(x1, EIGHT, x3)
    x5 = shift(x2, UP)
    x6 = fill(x4, TWO, x5)
    x7 = shift(x2, RIGHT)
    x8 = fill(x6, SIX, x7)
    x9 = shift(x2, LEFT)
    O = fill(x8, SEVEN, x9)
    return O



def solve_68b16354_a5f85a15(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = interval(ONE, NINE, ONE)
    x4 = apply(double, x3)
    x5 = apply(decrement, x4)
    x6 = papply(astuple, x5, x5)
    x7 = apply(ulcorner, x2)
    x8 = lbind(shift, x6)
    x9 = mapply(x8, x7)
    O = fill(x1, FOUR, x9)
    return O



def solve_68b16354_3ac3eb23(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = chain(ineighbors, last, first)
    x4 = fork(recolor, color, x3)
    x5 = mapply(x4, x2)
    x6 = paint(x1, x5)
    x7 = vsplit(x6, THREE)
    x8 = first(x7)
    x9 = vconcat(x8, x8)
    O = vconcat(x8, x9)
    return O



def solve_68b16354_22168020(I):
    x1 = hmirror(I)
    x2 = palette(x1)
    x3 = remove(ZERO, x2)
    x4 = lbind(ofcolor, x1)
    x5 = lbind(prapply, connect)
    x6 = fork(x5, x4, x4)
    x7 = compose(merge, x6)
    x8 = fork(recolor, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_68b16354_6e82a1ae(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sizefilter, x2)
    x4 = compose(merge, x3)
    x5 = x4(TWO)
    x6 = x4(THREE)
    x7 = x4(FOUR)
    x8 = fill(x1, THREE, x5)
    x9 = fill(x8, TWO, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_68b16354_868de0fa(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = sfilter(x2, square)
    x4 = compose(even, height)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = merge(x5)
    x8 = merge(x6)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, SEVEN, x8)
    return O



def solve_68b16354_681b3aeb(I):
    x1 = hmirror(I)
    x2 = rot270(x1)
    x3 = objects(x2, T, F, T)
    x4 = argmax(x3, size)
    x5 = argmin(x3, size)
    x6 = color(x5)
    x7 = canvas(x6, THREE_BY_THREE)
    x8 = normalize(x4)
    x9 = paint(x7, x8)
    O = rot90(x9)
    return O



def solve_68b16354_8e5a5113(I):
    x1 = hmirror(I)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = rot90(x2)
    x4 = rot180(x2)
    x5 = astuple(x3, x4)
    x6 = astuple(FOUR, EIGHT)
    x7 = apply(tojvec, x6)
    x8 = apply(asobject, x5)
    x9 = mpapply(shift, x8, x7)
    O = paint(x1, x9)
    return O



def solve_68b16354_025d127b(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(color, x2)
    x4 = merge(x2)
    x5 = lbind(colorfilter, x2)
    x6 = rbind(argmax, rightmost)
    x7 = compose(x6, x5)
    x8 = mapply(x7, x3)
    x9 = difference(x4, x8)
    O = move(x1, x9, RIGHT)
    return O



def solve_68b16354_2281f1f4(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, FIVE)
    x3 = product(x2, x2)
    x4 = power(first, TWO)
    x5 = power(last, TWO)
    x6 = fork(astuple, x4, x5)
    x7 = apply(x6, x3)
    x8 = urcorner(x2)
    x9 = remove(x8, x7)
    O = underfill(x1, TWO, x9)
    return O



def solve_68b16354_cf98881b(I):
    x1 = hmirror(I)
    x2 = hsplit(x1, THREE)
    x3 = first(x2)
    x4 = remove(x3, x2)
    x5 = first(x4)
    x6 = last(x4)
    x7 = ofcolor(x5, NINE)
    x8 = ofcolor(x3, FOUR)
    x9 = fill(x6, NINE, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_68b16354_bda2d7a6(I):
    x1 = hmirror(I)
    x2 = partition(x1)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = last(x3)
    x6 = remove(x5, x3)
    x7 = repeat(x5, ONE)
    x8 = combine(x7, x6)
    x9 = mpapply(recolor, x4, x8)
    O = paint(x1, x9)
    return O



def solve_68b16354_6455b5f5(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = argmax(x2, size)
    x5 = valmin(x2, size)
    x6 = sizefilter(x3, x5)
    x7 = recolor(ONE, x4)
    x8 = merge(x6)
    x9 = paint(x1, x7)
    O = fill(x9, EIGHT, x8)
    return O



def solve_68b16354_b8cdaf2b(I):
    x1 = hmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = shift(x3, UP)
    x5 = ulcorner(x4)
    x6 = urcorner(x4)
    x7 = shoot(x5, NEG_UNITY)
    x8 = shoot(x6, UP_RIGHT)
    x9 = combine(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_68b16354_bd4472b8(I):
    x1 = hmirror(I)
    x2 = width(x1)
    x3 = astuple(TWO, x2)
    x4 = crop(x1, ORIGIN, x3)
    x5 = tophalf(x4)
    x6 = dmirror(x5)
    x7 = hupscale(x6, x2)
    x8 = repeat(x7, TWO)
    x9 = merge(x8)
    O = vconcat(x4, x9)
    return O



def solve_68b16354_4be741c5(I):
    x1 = hmirror(I)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = branch(x2, height, width)
    x5 = x4(x1)
    x6 = astuple(ONE, x5)
    x7 = x3(x1)
    x8 = crop(x7, ORIGIN, x6)
    x9 = apply(dedupe, x8)
    O = x3(x9)
    return O



def solve_68b16354_bbc9ae5d(I):
    x1 = hmirror(I)
    x2 = width(x1)
    x3 = palette(x1)
    x4 = halve(x2)
    x5 = vupscale(x1, x4)
    x6 = rbind(shoot, UNITY)
    x7 = other(x3, ZERO)
    x8 = ofcolor(x5, x7)
    x9 = mapply(x6, x8)
    O = fill(x5, x7, x9)
    return O



def solve_68b16354_d90796e8(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = lbind(contained, TWO)
    x5 = compose(x4, palette)
    x6 = mfilter(x3, x5)
    x7 = cover(x1, x6)
    x8 = matcher(first, THREE)
    x9 = sfilter(x6, x8)
    O = fill(x7, EIGHT, x9)
    return O



def solve_68b16354_2c608aff(I):
    x1 = hmirror(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = toindices(x4)
    x6 = ofcolor(x1, x2)
    x7 = prapply(connect, x5, x6)
    x8 = fork(either, vline, hline)
    x9 = mfilter(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_68b16354_f8b3ba0a(I):
    x1 = hmirror(I)
    x2 = compress(x1)
    x3 = astuple(THREE, ONE)
    x4 = palette(x2)
    x5 = lbind(colorcount, x2)
    x6 = compose(invert, x5)
    x7 = order(x4, x6)
    x8 = rbind(canvas, UNITY)
    x9 = apply(x8, x7)
    x10 = merge(x9)
    O = crop(x10, DOWN, x3)
    return O



def solve_68b16354_80af3007(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    x10 = cellwise(x5, x9, ZERO)
    O = downscale(x10, THREE)
    return O



def solve_68b16354_83302e8f(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = sfilter(x3, square)
    x5 = difference(x3, x4)
    x6 = merge(x4)
    x7 = recolor(THREE, x6)
    x8 = merge(x5)
    x9 = recolor(FOUR, x8)
    x10 = paint(x1, x7)
    O = paint(x10, x9)
    return O



def solve_68b16354_1fad071e(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, ONE)
    x4 = sizefilter(x3, FOUR)
    x5 = size(x4)
    x6 = subtract(FIVE, x5)
    x7 = astuple(ONE, x5)
    x8 = canvas(ONE, x7)
    x9 = astuple(ONE, x6)
    x10 = canvas(ZERO, x9)
    O = hconcat(x8, x10)
    return O



def solve_68b16354_11852cab(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = hmirror(x3)
    x5 = vmirror(x3)
    x6 = dmirror(x3)
    x7 = cmirror(x3)
    x8 = paint(x1, x4)
    x9 = paint(x8, x5)
    x10 = paint(x9, x6)
    O = paint(x10, x7)
    return O



def solve_68b16354_3428a4f5(I):
    x1 = hmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(SIX, FIVE)
    x5 = ofcolor(x2, TWO)
    x6 = ofcolor(x3, TWO)
    x7 = combine(x5, x6)
    x8 = intersection(x5, x6)
    x9 = difference(x7, x8)
    x10 = canvas(ZERO, x4)
    O = fill(x10, THREE, x9)
    return O



def solve_68b16354_178fcbfb(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(vfrontier, x3)
    x5 = fill(x1, TWO, x4)
    x6 = colorfilter(x2, TWO)
    x7 = difference(x2, x6)
    x8 = compose(hfrontier, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x7)
    O = paint(x5, x10)
    return O



def solve_68b16354_54d9e175(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = compose(neighbors, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x3)
    x7 = paint(x1, x6)
    x8 = replace(x7, ONE, SIX)
    x9 = replace(x8, TWO, SEVEN)
    x10 = replace(x9, THREE, EIGHT)
    O = replace(x10, FOUR, NINE)
    return O



def solve_68b16354_623ea044(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = center(x3)
    x5 = color(x3)
    x6 = astuple(UNITY, NEG_UNITY)
    x7 = astuple(UP_RIGHT, DOWN_LEFT)
    x8 = combine(x6, x7)
    x9 = lbind(shoot, x4)
    x10 = mapply(x9, x8)
    O = fill(x1, x5, x10)
    return O



def solve_68b16354_6b9890af(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, TWO)
    x4 = argmin(x2, size)
    x5 = subgrid(x3, x1)
    x6 = width(x5)
    x7 = divide(x6, THREE)
    x8 = upscale(x4, x7)
    x9 = normalize(x8)
    x10 = shift(x9, UNITY)
    O = paint(x5, x10)
    return O



def solve_68b16354_794b24be(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = size(x2)
    x4 = decrement(x3)
    x5 = canvas(ZERO, THREE_BY_THREE)
    x6 = tojvec(x4)
    x7 = connect(ORIGIN, x6)
    x8 = equality(x3, FOUR)
    x9 = insert(UNITY, x7)
    x10 = branch(x8, x9, x7)
    O = fill(x5, TWO, x10)
    return O



def solve_68b16354_88a62173(I):
    x1 = hmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = tophalf(x3)
    x6 = bottomhalf(x2)
    x7 = bottomhalf(x3)
    x8 = astuple(x4, x5)
    x9 = astuple(x6, x7)
    x10 = combine(x8, x9)
    O = leastcommon(x10)
    return O



def solve_68b16354_890034e9(I):
    x1 = hmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = inbox(x3)
    x5 = recolor(ZERO, x4)
    x6 = occurrences(x1, x5)
    x7 = normalize(x3)
    x8 = shift(x7, NEG_UNITY)
    x9 = lbind(shift, x8)
    x10 = mapply(x9, x6)
    O = fill(x1, x2, x10)
    return O



def solve_68b16354_99b1bc43(I):
    x1 = hmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = combine(x4, x5)
    x7 = intersection(x4, x5)
    x8 = difference(x6, x7)
    x9 = shape(x2)
    x10 = canvas(ZERO, x9)
    O = fill(x10, THREE, x8)
    return O



def solve_68b16354_a9f96cdd(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = shift(x2, NEG_UNITY)
    x5 = fill(x3, THREE, x4)
    x6 = shift(x2, UP_RIGHT)
    x7 = fill(x5, SIX, x6)
    x8 = shift(x2, DOWN_LEFT)
    x9 = fill(x7, EIGHT, x8)
    x10 = shift(x2, UNITY)
    O = fill(x9, SEVEN, x10)
    return O



def solve_68b16354_af902bf9(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, FOUR)
    x3 = prapply(connect, x2, x2)
    x4 = fork(either, vline, hline)
    x5 = mfilter(x3, x4)
    x6 = underfill(x1, NEG_ONE, x5)
    x7 = objects(x6, F, F, T)
    x8 = compose(backdrop, inbox)
    x9 = mapply(x8, x7)
    x10 = fill(x6, TWO, x9)
    O = replace(x10, NEG_ONE, ZERO)
    return O



def solve_68b16354_b548a754(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, EIGHT, ZERO)
    x4 = leastcolor(x3)
    x5 = replace(x3, x4, ZERO)
    x6 = leastcolor(x5)
    x7 = merge(x2)
    x8 = backdrop(x7)
    x9 = box(x7)
    x10 = fill(x1, x4, x8)
    O = fill(x10, x6, x9)
    return O



def solve_68b16354_bdad9b1f(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, EIGHT)
    x4 = center(x2)
    x5 = center(x3)
    x6 = hfrontier(x4)
    x7 = vfrontier(x5)
    x8 = intersection(x6, x7)
    x9 = fill(x1, TWO, x6)
    x10 = fill(x9, EIGHT, x7)
    O = fill(x10, FOUR, x8)
    return O



def solve_68b16354_c3e719e8(I):
    x1 = hmirror(I)
    x2 = mostcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = upscale(x1, THREE)
    x5 = ofcolor(x4, x2)
    x6 = asindices(x4)
    x7 = difference(x6, x5)
    x8 = hconcat(x3, x1)
    x9 = vconcat(x8, x8)
    x10 = vconcat(x9, x8)
    O = fill(x10, ZERO, x7)
    return O



def solve_68b16354_de1cd16c(I):
    x1 = hmirror(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = rbind(subgrid, x1)
    x7 = apply(x6, x5)
    x8 = rbind(colorcount, x2)
    x9 = argmax(x7, x8)
    x10 = mostcolor(x9)
    O = canvas(x10, UNITY)
    return O



def solve_68b16354_d8c310e9(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = hperiod(x3)
    x5 = multiply(x4, THREE)
    x6 = tojvec(x4)
    x7 = tojvec(x5)
    x8 = shift(x3, x6)
    x9 = shift(x3, x7)
    x10 = paint(x1, x8)
    O = paint(x10, x9)
    return O



def solve_68b16354_a3325580(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = valmax(x2, size)
    x4 = sizefilter(x2, x3)
    x5 = order(x4, leftmost)
    x6 = apply(color, x5)
    x7 = astuple(ONE, x3)
    x8 = rbind(canvas, x7)
    x9 = apply(x8, x6)
    x10 = merge(x9)
    O = dmirror(x10)
    return O



def solve_68b16354_8eb1be9a(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = interval(NEG_TWO, FOUR, ONE)
    x5 = lbind(shift, x3)
    x6 = height(x3)
    x7 = rbind(multiply, x6)
    x8 = apply(x7, x4)
    x9 = apply(toivec, x8)
    x10 = mapply(x5, x9)
    O = paint(x1, x10)
    return O



def solve_68b16354_321b1fc6(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = colorfilter(x2, EIGHT)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = cover(x1, x5)
    x7 = normalize(x5)
    x8 = lbind(shift, x7)
    x9 = apply(ulcorner, x3)
    x10 = mapply(x8, x9)
    O = paint(x6, x10)
    return O



def solve_68b16354_1caeab9d(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, ONE)
    x4 = lowermost(x3)
    x5 = lbind(subtract, x4)
    x6 = chain(toivec, x5, lowermost)
    x7 = fork(shift, identity, x6)
    x8 = merge(x2)
    x9 = cover(x1, x8)
    x10 = mapply(x7, x2)
    O = paint(x9, x10)
    return O



def solve_68b16354_77fdfe62(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, EIGHT)
    x3 = subgrid(x2, x1)
    x4 = replace(x1, EIGHT, ZERO)
    x5 = replace(x4, ONE, ZERO)
    x6 = compress(x5)
    x7 = width(x3)
    x8 = halve(x7)
    x9 = upscale(x6, x8)
    x10 = ofcolor(x3, ZERO)
    O = fill(x9, ZERO, x10)
    return O



def solve_68b16354_1b60fb0c(I):
    x1 = hmirror(I)
    x2 = rot90(x1)
    x3 = ofcolor(x1, ONE)
    x4 = ofcolor(x2, ONE)
    x5 = neighbors(ORIGIN)
    x6 = mapply(neighbors, x5)
    x7 = lbind(shift, x4)
    x8 = apply(x7, x6)
    x9 = lbind(intersection, x3)
    x10 = compose(size, x9)
    x11 = argmax(x8, x10)
    O = underfill(x1, TWO, x11)
    return O



def solve_68b16354_ddf7fa4f(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = colorfilter(x2, FIVE)
    x5 = product(x3, x4)
    x6 = fork(vmatching, first, last)
    x7 = sfilter(x5, x6)
    x8 = compose(color, first)
    x9 = fork(recolor, x8, last)
    x10 = mapply(x9, x7)
    O = paint(x1, x10)
    return O



def solve_68b16354_47c1f68c(I):
    x1 = hmirror(I)
    x2 = leastcolor(x1)
    x3 = vmirror(x1)
    x4 = objects(x1, T, T, T)
    x5 = merge(x4)
    x6 = mostcolor(x5)
    x7 = cellwise(x1, x3, x2)
    x8 = hmirror(x7)
    x9 = cellwise(x7, x8, x2)
    x10 = compress(x9)
    O = replace(x10, x2, x6)
    return O



def solve_68b16354_6c434453(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, EIGHT)
    x4 = dneighbors(UNITY)
    x5 = insert(UNITY, x4)
    x6 = merge(x3)
    x7 = cover(x1, x6)
    x8 = apply(ulcorner, x3)
    x9 = lbind(shift, x5)
    x10 = mapply(x9, x8)
    O = fill(x7, TWO, x10)
    return O



def solve_68b16354_23581191(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = paint(x1, x6)
    x8 = fork(intersection, first, last)
    x9 = apply(x4, x2)
    x10 = x8(x9)
    O = fill(x7, TWO, x10)
    return O



def solve_68b16354_c8cbb738(I):
    x1 = hmirror(I)
    x2 = mostcolor(x1)
    x3 = fgpartition(x1)
    x4 = valmax(x3, shape)
    x5 = canvas(x2, x4)
    x6 = apply(normalize, x3)
    x7 = lbind(subtract, x4)
    x8 = chain(halve, x7, shape)
    x9 = fork(shift, identity, x8)
    x10 = mapply(x9, x6)
    O = paint(x5, x10)
    return O



def solve_68b16354_dc0a314f(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, THREE)
    x3 = replace(x1, THREE, ZERO)
    x4 = dmirror(x3)
    x5 = papply(pair, x3, x4)
    x6 = lbind(apply, maximum)
    x7 = apply(x6, x5)
    x8 = cmirror(x7)
    x9 = papply(pair, x7, x8)
    x10 = apply(x6, x9)
    O = subgrid(x2, x10)
    return O



def solve_68b16354_d4469b4b(I):
    x1 = hmirror(I)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = equality(x3, ONE)
    x5 = equality(x3, TWO)
    x6 = branch(x4, UNITY, TWO_BY_TWO)
    x7 = branch(x5, RIGHT, x6)
    x8 = fork(combine, vfrontier, hfrontier)
    x9 = x8(x7)
    x10 = canvas(ZERO, THREE_BY_THREE)
    O = fill(x10, FIVE, x9)
    return O



def solve_68b16354_6ecd11f4(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = subgrid(x3, x1)
    x6 = subgrid(x4, x1)
    x7 = width(x5)
    x8 = width(x6)
    x9 = divide(x7, x8)
    x10 = downscale(x5, x9)
    x11 = ofcolor(x10, ZERO)
    O = fill(x6, ZERO, x11)
    return O



def solve_68b16354_760b3cac(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, FOUR)
    x3 = ofcolor(x1, EIGHT)
    x4 = ulcorner(x2)
    x5 = index(x1, x4)
    x6 = equality(x5, FOUR)
    x7 = branch(x6, NEG_ONE, ONE)
    x8 = multiply(x7, THREE)
    x9 = tojvec(x8)
    x10 = vmirror(x3)
    x11 = shift(x10, x9)
    O = fill(x1, EIGHT, x11)
    return O



def solve_68b16354_d4a91cb9(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, EIGHT)
    x3 = ofcolor(x1, TWO)
    x4 = first(x2)
    x5 = first(x3)
    x6 = last(x4)
    x7 = first(x5)
    x8 = astuple(x7, x6)
    x9 = connect(x8, x4)
    x10 = connect(x8, x5)
    x11 = combine(x9, x10)
    O = underfill(x1, FOUR, x11)
    return O



def solve_68b16354_eb281b96(I):
    x1 = hmirror(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = decrement(x2)
    x5 = astuple(x4, x3)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    x8 = vconcat(x1, x7)
    x9 = double(x4)
    x10 = astuple(x9, x3)
    x11 = crop(x8, DOWN, x10)
    O = vconcat(x8, x11)
    return O



def solve_68b16354_ff28f65a(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = double(x3)
    x5 = interval(ZERO, x4, TWO)
    x6 = apply(tojvec, x5)
    x7 = astuple(ONE, NINE)
    x8 = canvas(ZERO, x7)
    x9 = fill(x8, ONE, x6)
    x10 = hsplit(x9, THREE)
    O = merge(x10)
    return O



def solve_68b16354_7e0986d6(I):
    x1 = hmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = replace(x1, x2, ZERO)
    x5 = leastcolor(x4)
    x6 = rbind(colorcount, x5)
    x7 = chain(positive, decrement, x6)
    x8 = rbind(toobject, x4)
    x9 = chain(x7, x8, dneighbors)
    x10 = sfilter(x3, x9)
    O = fill(x4, x5, x10)
    return O



def solve_68b16354_09629e4f(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = argmin(x2, numcolors)
    x4 = normalize(x3)
    x5 = upscale(x4, FOUR)
    x6 = paint(x1, x5)
    x7 = ofcolor(x1, FIVE)
    O = fill(x6, FIVE, x7)
    return O



def solve_68b16354_a85d4709(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, FIVE)
    x3 = lbind(matcher, last)
    x4 = lbind(sfilter, x2)
    x5 = lbind(mapply, hfrontier)
    x6 = chain(x5, x4, x3)
    x7 = x6(ZERO)
    x8 = x6(TWO)
    x9 = x6(ONE)
    x10 = fill(x1, TWO, x7)
    x11 = fill(x10, THREE, x8)
    O = fill(x11, FOUR, x9)
    return O



def solve_68b16354_feca6190(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = multiply(x3, FIVE)
    x5 = astuple(x4, x4)
    x6 = canvas(ZERO, x5)
    x7 = rbind(shoot, UNITY)
    x8 = compose(x7, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x2)
    x11 = paint(x6, x10)
    O = hmirror(x11)
    return O



def solve_68b16354_a68b268e(I):
    x1 = hmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = lefthalf(x2)
    x5 = righthalf(x2)
    x6 = lefthalf(x3)
    x7 = righthalf(x3)
    x8 = ofcolor(x5, FOUR)
    x9 = ofcolor(x4, SEVEN)
    x10 = ofcolor(x6, EIGHT)
    x11 = fill(x7, EIGHT, x10)
    x12 = fill(x11, FOUR, x8)
    O = fill(x12, SEVEN, x9)
    return O



def solve_68b16354_beb8660c(I):
    x1 = hmirror(I)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(invert, size)
    x5 = order(x3, x4)
    x6 = apply(normalize, x5)
    x7 = size(x6)
    x8 = interval(ZERO, x7, ONE)
    x9 = apply(toivec, x8)
    x10 = mpapply(shift, x6, x9)
    x11 = canvas(ZERO, x2)
    x12 = paint(x11, x10)
    O = rot180(x12)
    return O



def solve_68b16354_913fb3ed(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, THREE)
    x3 = ofcolor(x1, EIGHT)
    x4 = ofcolor(x1, TWO)
    x5 = mapply(neighbors, x2)
    x6 = mapply(neighbors, x3)
    x7 = mapply(neighbors, x4)
    x8 = fill(x1, SIX, x5)
    x9 = fill(x8, FOUR, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_68b16354_0962bcdd(I):
    x1 = hmirror(I)
    x2 = leastcolor(x1)
    x3 = replace(x1, ZERO, x2)
    x4 = leastcolor(x3)
    x5 = ofcolor(x1, x4)
    x6 = mapply(dneighbors, x5)
    x7 = fill(x1, x4, x6)
    x8 = objects(x7, F, T, T)
    x9 = fork(connect, ulcorner, lrcorner)
    x10 = fork(connect, llcorner, urcorner)
    x11 = fork(combine, x9, x10)
    x12 = mapply(x11, x8)
    O = fill(x7, x2, x12)
    return O



def solve_68b16354_3631a71a(I):
    x1 = hmirror(I)
    x2 = shape(x1)
    x3 = replace(x1, NINE, ZERO)
    x4 = lbind(apply, maximum)
    x5 = dmirror(x3)
    x6 = papply(pair, x3, x5)
    x7 = apply(x4, x6)
    x8 = subtract(x2, TWO_BY_TWO)
    x9 = crop(x7, TWO_BY_TWO, x8)
    x10 = vmirror(x9)
    x11 = objects(x10, T, F, T)
    x12 = merge(x11)
    x13 = shift(x12, TWO_BY_TWO)
    O = paint(x7, x13)
    return O



def solve_68b16354_05269061(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = neighbors(ORIGIN)
    x4 = mapply(neighbors, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = merge(x2)
    x8 = lbind(shift, x7)
    x9 = mapply(x8, x6)
    x10 = shift(x9, UP_RIGHT)
    x11 = shift(x9, DOWN_LEFT)
    x12 = paint(x1, x9)
    x13 = paint(x12, x10)
    O = paint(x13, x11)
    return O



def solve_68b16354_95990924(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = apply(ulcorner, x3)
    x5 = apply(urcorner, x3)
    x6 = apply(llcorner, x3)
    x7 = apply(lrcorner, x3)
    x8 = fill(x1, ONE, x4)
    x9 = fill(x8, TWO, x5)
    x10 = fill(x9, THREE, x6)
    O = fill(x10, FOUR, x7)
    return O



def solve_68b16354_e509e548(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = rbind(subgrid, x1)
    x4 = chain(palette, trim, x3)
    x5 = lbind(contained, THREE)
    x6 = compose(x5, x4)
    x7 = fork(add, height, width)
    x8 = compose(decrement, x7)
    x9 = fork(equality, size, x8)
    x10 = mfilter(x2, x6)
    x11 = mfilter(x2, x9)
    x12 = replace(x1, THREE, SIX)
    x13 = fill(x12, TWO, x10)
    O = fill(x13, ONE, x11)
    return O



def solve_68b16354_d43fd935(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, THREE)
    x4 = sizefilter(x2, ONE)
    x5 = rbind(vmatching, x3)
    x6 = rbind(hmatching, x3)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = rbind(gravitate, x3)
    x10 = fork(add, center, x9)
    x11 = fork(connect, center, x10)
    x12 = fork(recolor, color, x11)
    x13 = mapply(x12, x8)
    O = paint(x1, x13)
    return O



def solve_68b16354_db3e9e38(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, SEVEN)
    x3 = lrcorner(x2)
    x4 = shoot(x3, UP_RIGHT)
    x5 = shoot(x3, NEG_UNITY)
    x6 = combine(x4, x5)
    x7 = rbind(shoot, UP)
    x8 = mapply(x7, x6)
    x9 = last(x3)
    x10 = rbind(subtract, x9)
    x11 = chain(even, x10, last)
    x12 = fill(x1, EIGHT, x8)
    x13 = sfilter(x8, x11)
    O = fill(x12, SEVEN, x13)
    return O



def solve_68b16354_e73095fd(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = fork(equality, toindices, backdrop)
    x5 = sfilter(x3, x4)
    x6 = lbind(mapply, dneighbors)
    x7 = chain(x6, corners, outbox)
    x8 = fork(difference, x7, outbox)
    x9 = ofcolor(x1, FIVE)
    x10 = rbind(intersection, x9)
    x11 = matcher(size, ZERO)
    x12 = chain(x11, x10, x8)
    x13 = mfilter(x5, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_68b16354_1bfc4729(I):
    x1 = hmirror(I)
    x2 = asindices(x1)
    x3 = tophalf(x1)
    x4 = bottomhalf(x1)
    x5 = leastcolor(x3)
    x6 = leastcolor(x4)
    x7 = hfrontier(TWO_BY_ZERO)
    x8 = box(x2)
    x9 = combine(x7, x8)
    x10 = fill(x3, x5, x9)
    x11 = hmirror(x10)
    x12 = replace(x11, x5, x6)
    O = vconcat(x10, x12)
    return O



def solve_68b16354_93b581b8(I):
    x1 = hmirror(I)
    x2 = fgpartition(x1)
    x3 = chain(cmirror, dmirror, merge)
    x4 = x3(x2)
    x5 = upscale(x4, THREE)
    x6 = astuple(NEG_TWO, NEG_TWO)
    x7 = shift(x5, x6)
    x8 = underpaint(x1, x7)
    x9 = toindices(x4)
    x10 = fork(combine, hfrontier, vfrontier)
    x11 = mapply(x10, x9)
    x12 = difference(x11, x9)
    O = fill(x8, ZERO, x12)
    return O



def solve_68b16354_9edfc990(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = ofcolor(x1, ONE)
    x5 = rbind(adjacent, x4)
    x6 = mfilter(x3, x5)
    x7 = recolor(ONE, x6)
    O = paint(x1, x7)
    return O



def solve_68b16354_a65b410d(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = urcorner(x2)
    x4 = shoot(x3, UP_RIGHT)
    x5 = shoot(x3, DOWN_LEFT)
    x6 = underfill(x1, THREE, x4)
    x7 = underfill(x6, ONE, x5)
    x8 = rbind(shoot, LEFT)
    x9 = mapply(x8, x4)
    x10 = mapply(x8, x5)
    x11 = underfill(x7, ONE, x10)
    O = underfill(x11, THREE, x9)
    return O



def solve_68b16354_7447852a(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = compose(last, center)
    x5 = order(x3, x4)
    x6 = size(x5)
    x7 = interval(ZERO, x6, THREE)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = interval(ZERO, x6, ONE)
    x11 = pair(x5, x10)
    x12 = sfilter(x11, x9)
    x13 = mapply(first, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_68b16354_97999447(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(toindices, x2)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    x8 = paint(x1, x7)
    x9 = interval(ZERO, FIVE, ONE)
    x10 = apply(double, x9)
    x11 = apply(increment, x10)
    x12 = apply(tojvec, x11)
    x13 = prapply(shift, x3, x12)
    x14 = merge(x13)
    O = fill(x8, FIVE, x14)
    return O



def solve_68b16354_91714a58(I):
    x1 = hmirror(I)
    x2 = shape(x1)
    x3 = asindices(x1)
    x4 = objects(x1, T, F, T)
    x5 = argmax(x4, size)
    x6 = mostcolor(x5)
    x7 = canvas(ZERO, x2)
    x8 = paint(x7, x5)
    x9 = rbind(toobject, x8)
    x10 = rbind(colorcount, x6)
    x11 = chain(x10, x9, neighbors)
    x12 = lbind(greater, THREE)
    x13 = compose(x12, x11)
    x14 = sfilter(x3, x13)
    O = fill(x8, ZERO, x14)
    return O



def solve_68b16354_8e1813be(I):
    x1 = hmirror(I)
    x2 = replace(x1, FIVE, ZERO)
    x3 = objects(x2, T, T, T)
    x4 = first(x3)
    x5 = vline(x4)
    x6 = branch(x5, dmirror, identity)
    x7 = x6(x2)
    x8 = objects(x7, T, T, T)
    x9 = order(x8, uppermost)
    x10 = apply(color, x9)
    x11 = dedupe(x10)
    x12 = size(x11)
    x13 = rbind(repeat, x12)
    x14 = apply(x13, x11)
    O = x6(x14)
    return O



def solve_68b16354_bc1d5164(I):
    x1 = hmirror(I)
    x2 = leastcolor(x1)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = crop(x1, TWO_BY_ZERO, THREE_BY_THREE)
    x5 = tojvec(FOUR)
    x6 = crop(x1, x5, THREE_BY_THREE)
    x7 = astuple(TWO, FOUR)
    x8 = crop(x1, x7, THREE_BY_THREE)
    x9 = canvas(ZERO, THREE_BY_THREE)
    x10 = rbind(ofcolor, x2)
    x11 = astuple(x3, x4)
    x12 = astuple(x6, x8)
    x13 = combine(x11, x12)
    x14 = mapply(x10, x13)
    O = fill(x9, x2, x14)
    return O



def solve_68b16354_ce602527(I):
    x1 = hmirror(I)
    x2 = vmirror(x1)
    x3 = fgpartition(x2)
    x4 = order(x3, size)
    x5 = last(x4)
    x6 = remove(x5, x4)
    x7 = compose(toindices, normalize)
    x8 = rbind(upscale, TWO)
    x9 = chain(toindices, x8, normalize)
    x10 = x7(x5)
    x11 = rbind(intersection, x10)
    x12 = chain(size, x11, x9)
    x13 = argmax(x6, x12)
    x14 = subgrid(x13, x2)
    O = vmirror(x14)
    return O



def solve_68b16354_5c2c9af4(I):
    x1 = hmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = center(x3)
    x5 = ulcorner(x3)
    x6 = subtract(x4, x5)
    x7 = multiply(NEG_ONE, NINE)
    x8 = interval(ZERO, NINE, ONE)
    x9 = interval(ZERO, x7, NEG_ONE)
    x10 = lbind(multiply, x6)
    x11 = apply(x10, x8)
    x12 = apply(x10, x9)
    x13 = pair(x11, x12)
    x14 = mapply(box, x13)
    x15 = shift(x14, x4)
    O = fill(x1, x2, x15)
    return O



def solve_68b16354_75b8110e(I):
    x1 = hmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = bottomhalf(x2)
    x6 = tophalf(x3)
    x7 = bottomhalf(x3)
    x8 = rbind(ofcolor, ZERO)
    x9 = fork(difference, asindices, x8)
    x10 = fork(toobject, x9, identity)
    x11 = x10(x6)
    x12 = x10(x5)
    x13 = x10(x7)
    x14 = paint(x4, x13)
    x15 = paint(x14, x12)
    O = paint(x15, x11)
    return O



def solve_68b16354_c3f564a4(I):
    x1 = hmirror(I)
    x2 = asindices(x1)
    x3 = dmirror(x1)
    x4 = invert(NINE)
    x5 = papply(pair, x1, x3)
    x6 = lbind(apply, maximum)
    x7 = apply(x6, x5)
    x8 = ofcolor(x7, ZERO)
    x9 = difference(x2, x8)
    x10 = toobject(x9, x7)
    x11 = interval(x4, NINE, ONE)
    x12 = interval(NINE, x4, NEG_ONE)
    x13 = pair(x11, x12)
    x14 = lbind(shift, x10)
    x15 = mapply(x14, x13)
    O = paint(x7, x15)
    return O



def solve_68b16354_1a07d186(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = mapply(x12, x8)
    x14 = merge(x3)
    x15 = cover(x1, x14)
    O = paint(x15, x13)
    return O



def solve_68b16354_d687bc17(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = merge(x3)
    x14 = mapply(x12, x8)
    x15 = cover(x1, x13)
    O = paint(x15, x14)
    return O



def solve_68b16354_9af7a82c(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = order(x2, size)
    x4 = valmax(x2, size)
    x5 = rbind(astuple, ONE)
    x6 = lbind(subtract, x4)
    x7 = compose(x5, size)
    x8 = chain(x5, x6, size)
    x9 = fork(canvas, color, x7)
    x10 = lbind(canvas, ZERO)
    x11 = compose(x10, x8)
    x12 = fork(vconcat, x9, x11)
    x13 = compose(cmirror, x12)
    x14 = apply(x13, x3)
    x15 = merge(x14)
    O = cmirror(x15)
    return O



def solve_68b16354_ef135b50(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, ZERO)
    x4 = product(x2, x2)
    x5 = power(first, TWO)
    x6 = compose(first, last)
    x7 = fork(equality, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = fork(connect, first, last)
    x10 = mapply(x9, x8)
    x11 = intersection(x10, x3)
    x12 = fill(x1, NINE, x11)
    x13 = trim(x12)
    x14 = asobject(x13)
    x15 = shift(x14, UNITY)
    O = paint(x1, x15)
    return O



def solve_68b16354_cbded52d(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = product(x3, x3)
    x5 = fork(vmatching, first, last)
    x6 = fork(hmatching, first, last)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = compose(center, first)
    x10 = compose(center, last)
    x11 = fork(connect, x9, x10)
    x12 = chain(initset, center, x11)
    x13 = compose(color, first)
    x14 = fork(recolor, x13, x12)
    x15 = mapply(x14, x8)
    O = paint(x1, x15)
    return O



def solve_68b16354_8a004b2b(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = ofcolor(x1, FOUR)
    x4 = subgrid(x3, x1)
    x5 = argmax(x2, lowermost)
    x6 = normalize(x5)
    x7 = replace(x4, FOUR, ZERO)
    x8 = objects(x7, T, F, T)
    x9 = merge(x8)
    x10 = width(x9)
    x11 = ulcorner(x9)
    x12 = width(x5)
    x13 = divide(x10, x12)
    x14 = upscale(x6, x13)
    x15 = shift(x14, x11)
    O = paint(x4, x15)
    return O



def solve_68b16354_e26a3af2(I):
    x1 = hmirror(I)
    x2 = rot90(x1)
    x3 = apply(mostcommon, x1)
    x4 = apply(mostcommon, x2)
    x5 = repeat(x3, ONE)
    x6 = repeat(x4, ONE)
    x7 = compose(size, dedupe)
    x8 = x7(x3)
    x9 = x7(x4)
    x10 = greater(x9, x8)
    x11 = branch(x10, height, width)
    x12 = x11(x1)
    x13 = rot90(x5)
    x14 = branch(x10, x6, x13)
    x15 = branch(x10, vupscale, hupscale)
    O = x15(x14, x12)
    return O



def solve_68b16354_6cf79266(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, ZERO)
    x3 = astuple(ZERO, ORIGIN)
    x4 = initset(x3)
    x5 = upscale(x4, THREE)
    x6 = toindices(x5)
    x7 = lbind(shift, x6)
    x8 = rbind(difference, x2)
    x9 = chain(size, x8, x7)
    x10 = matcher(x9, ZERO)
    x11 = lbind(add, NEG_UNITY)
    x12 = chain(flip, x10, x11)
    x13 = fork(both, x10, x12)
    x14 = sfilter(x2, x13)
    x15 = mapply(x7, x14)
    O = fill(x1, ONE, x15)
    return O



def solve_68b16354_a87f7484(I):
    x1 = hmirror(I)
    x2 = numcolors(x1)
    x3 = portrait(x1)
    x4 = branch(x3, dmirror, identity)
    x5 = x4(x1)
    x6 = decrement(x2)
    x7 = hsplit(x5, x6)
    x8 = rbind(ofcolor, ZERO)
    x9 = apply(x8, x7)
    x10 = leastcommon(x9)
    x11 = matcher(x8, x10)
    x12 = extract(x7, x11)
    O = x4(x12)
    return O



def solve_68b16354_4093f84a(I):
    x1 = hmirror(I)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, FIVE)
    x4 = ofcolor(x1, FIVE)
    x5 = portrait(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x3)
    x8 = lefthalf(x7)
    x9 = righthalf(x7)
    x10 = rbind(order, identity)
    x11 = rbind(order, invert)
    x12 = apply(x10, x8)
    x13 = apply(x11, x9)
    x14 = hconcat(x12, x13)
    O = x6(x14)
    return O



def solve_68b16354_ba26e723(I):
    x1 = hmirror(I)
    x2 = rbind(divide, THREE)
    x3 = rbind(multiply, THREE)
    x4 = compose(x3, x2)
    x5 = fork(equality, identity, x4)
    x6 = compose(x5, last)
    x7 = ofcolor(x1, FOUR)
    x8 = sfilter(x7, x6)
    O = fill(x1, SIX, x8)
    return O



def solve_68b16354_4612dd53(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = box(x2)
    x4 = fill(x1, TWO, x3)
    x5 = subgrid(x2, x4)
    x6 = ofcolor(x5, ONE)
    x7 = mapply(vfrontier, x6)
    x8 = mapply(hfrontier, x6)
    x9 = size(x7)
    x10 = size(x8)
    x11 = greater(x9, x10)
    x12 = branch(x11, x8, x7)
    x13 = fill(x5, TWO, x12)
    x14 = ofcolor(x13, TWO)
    x15 = ulcorner(x2)
    x16 = shift(x14, x15)
    O = underfill(x1, TWO, x16)
    return O



def solve_68b16354_29c11459(I):
    x1 = hmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = objects(x3, T, F, T)
    x5 = objects(x2, T, F, T)
    x6 = compose(hfrontier, center)
    x7 = fork(recolor, color, x6)
    x8 = mapply(x7, x5)
    x9 = paint(x2, x8)
    x10 = mapply(x7, x4)
    x11 = paint(x1, x10)
    x12 = objects(x9, T, F, T)
    x13 = apply(urcorner, x12)
    x14 = shift(x13, RIGHT)
    x15 = merge(x12)
    x16 = paint(x11, x15)
    O = fill(x16, FIVE, x14)
    return O



def solve_68b16354_963e52fc(I):
    x1 = hmirror(I)
    x2 = width(x1)
    x3 = asobject(x1)
    x4 = hperiod(x3)
    x5 = height(x3)
    x6 = astuple(x5, x4)
    x7 = ulcorner(x3)
    x8 = crop(x1, x7, x6)
    x9 = rot90(x8)
    x10 = double(x2)
    x11 = divide(x10, x4)
    x12 = increment(x11)
    x13 = repeat(x9, x12)
    x14 = merge(x13)
    x15 = rot270(x14)
    x16 = astuple(x5, x10)
    O = crop(x15, ORIGIN, x16)
    return O



def solve_68b16354_1f0c79e5(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = leastcolor(x3)
    x5 = ofcolor(x3, x4)
    x6 = combine(x2, x5)
    x7 = recolor(x4, x6)
    x8 = compose(decrement, double)
    x9 = ulcorner(x6)
    x10 = invert(x9)
    x11 = shift(x2, x10)
    x12 = apply(x8, x11)
    x13 = interval(ZERO, NINE, ONE)
    x14 = prapply(multiply, x12, x13)
    x15 = lbind(shift, x7)
    x16 = mapply(x15, x14)
    O = paint(x1, x16)
    return O



def solve_68b16354_56dc2b01(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, THREE)
    x4 = first(x3)
    x5 = ofcolor(x1, TWO)
    x6 = gravitate(x4, x5)
    x7 = first(x6)
    x8 = equality(x7, ZERO)
    x9 = branch(x8, width, height)
    x10 = x9(x4)
    x11 = gravitate(x5, x4)
    x12 = sign(x11)
    x13 = multiply(x12, x10)
    x14 = crement(x13)
    x15 = recolor(EIGHT, x5)
    x16 = shift(x15, x14)
    x17 = paint(x1, x16)
    O = move(x17, x4, x6)
    return O



def solve_68b16354_6773b310(I):
    x1 = hmirror(I)
    x2 = compress(x1)
    x3 = neighbors(ORIGIN)
    x4 = insert(ORIGIN, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = astuple(FOUR, FOUR)
    x8 = shift(x6, x7)
    x9 = fork(insert, identity, neighbors)
    x10 = apply(x9, x8)
    x11 = rbind(toobject, x2)
    x12 = apply(x11, x10)
    x13 = rbind(colorcount, SIX)
    x14 = matcher(x13, TWO)
    x15 = mfilter(x12, x14)
    x16 = fill(x2, ONE, x15)
    x17 = replace(x16, SIX, ZERO)
    O = downscale(x17, THREE)
    return O



def solve_68b16354_780d0b14(I):
    x1 = hmirror(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, T, T)
    x4 = rbind(greater, TWO)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = totuple(x6)
    x8 = apply(color, x7)
    x9 = apply(center, x7)
    x10 = pair(x8, x9)
    x11 = fill(x1, ZERO, x2)
    x12 = paint(x11, x10)
    x13 = rbind(greater, ONE)
    x14 = compose(dedupe, totuple)
    x15 = chain(x13, size, x14)
    x16 = sfilter(x12, x15)
    x17 = rot90(x16)
    x18 = sfilter(x17, x15)
    O = rot270(x18)
    return O



def solve_68b16354_2204b7a8(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sfilter, x2)
    x4 = compose(size, x3)
    x5 = x4(vline)
    x6 = x4(hline)
    x7 = greater(x5, x6)
    x8 = branch(x7, lefthalf, tophalf)
    x9 = branch(x7, righthalf, bottomhalf)
    x10 = branch(x7, hconcat, vconcat)
    x11 = x8(x1)
    x12 = x9(x1)
    x13 = index(x11, ORIGIN)
    x14 = shape(x12)
    x15 = decrement(x14)
    x16 = index(x12, x15)
    x17 = replace(x11, THREE, x13)
    x18 = replace(x12, THREE, x16)
    O = x10(x17, x18)
    return O



def solve_68b16354_d9f24cd1(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, FIVE)
    x4 = prapply(connect, x2, x3)
    x5 = mfilter(x4, vline)
    x6 = underfill(x1, TWO, x5)
    x7 = matcher(numcolors, TWO)
    x8 = objects(x6, F, F, T)
    x9 = sfilter(x8, x7)
    x10 = difference(x8, x9)
    x11 = colorfilter(x10, TWO)
    x12 = mapply(toindices, x11)
    x13 = apply(urcorner, x9)
    x14 = shift(x13, UNITY)
    x15 = rbind(shoot, UP)
    x16 = mapply(x15, x14)
    x17 = fill(x6, TWO, x16)
    x18 = mapply(vfrontier, x12)
    O = fill(x17, TWO, x18)
    return O



def solve_68b16354_b782dc8a(I):
    x1 = hmirror(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = ofcolor(x1, x2)
    x5 = first(x4)
    x6 = dneighbors(x5)
    x7 = toobject(x6, x1)
    x8 = mostcolor(x7)
    x9 = ofcolor(x1, x8)
    x10 = colorfilter(x3, ZERO)
    x11 = rbind(adjacent, x9)
    x12 = mfilter(x10, x11)
    x13 = toindices(x12)
    x14 = rbind(manhattan, x4)
    x15 = chain(even, x14, initset)
    x16 = sfilter(x13, x15)
    x17 = difference(x13, x16)
    x18 = fill(x1, x2, x16)
    O = fill(x18, x8, x17)
    return O



def solve_68b16354_673ef223(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, EIGHT)
    x4 = replace(x1, EIGHT, FOUR)
    x5 = colorfilter(x2, TWO)
    x6 = argmin(x2, uppermost)
    x7 = apply(uppermost, x5)
    x8 = fork(subtract, maximum, minimum)
    x9 = x8(x7)
    x10 = toivec(x9)
    x11 = leftmost(x6)
    x12 = equality(x11, ZERO)
    x13 = branch(x12, LEFT, RIGHT)
    x14 = rbind(shoot, x13)
    x15 = mapply(x14, x3)
    x16 = underfill(x4, EIGHT, x15)
    x17 = shift(x3, x10)
    x18 = mapply(hfrontier, x17)
    O = underfill(x16, EIGHT, x18)
    return O



def solve_68b16354_f5b8619d(I):
    x1 = hmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = mapply(vfrontier, x3)
    x5 = underfill(x1, EIGHT, x4)
    x6 = hconcat(x5, x5)
    O = vconcat(x6, x6)
    return O



def solve_68b16354_f8c80d96(I):
    x1 = hmirror(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = colorfilter(x3, x2)
    x5 = argmax(x4, size)
    x6 = argmin(x3, width)
    x7 = size(x6)
    x8 = equality(x7, ONE)
    x9 = branch(x8, identity, outbox)
    x10 = chain(outbox, outbox, x9)
    x11 = power(x10, TWO)
    x12 = power(x10, THREE)
    x13 = x10(x5)
    x14 = x11(x5)
    x15 = x12(x5)
    x16 = fill(x1, x2, x13)
    x17 = fill(x16, x2, x14)
    x18 = fill(x17, x2, x15)
    O = replace(x18, ZERO, FIVE)
    return O



def solve_68b16354_ecdecbb3(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = colorfilter(x2, EIGHT)
    x5 = product(x3, x4)
    x6 = fork(gravitate, first, last)
    x7 = compose(crement, x6)
    x8 = compose(center, first)
    x9 = fork(add, x8, x7)
    x10 = fork(connect, x8, x9)
    x11 = apply(x10, x5)
    x12 = lbind(greater, EIGHT)
    x13 = compose(x12, size)
    x14 = mfilter(x11, x13)
    x15 = fill(x1, TWO, x14)
    x16 = apply(x9, x5)
    x17 = intersection(x14, x16)
    x18 = mapply(neighbors, x17)
    O = fill(x15, EIGHT, x18)
    return O



def solve_68b16354_e5062a87(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = recolor(ZERO, x2)
    x4 = normalize(x3)
    x5 = occurrences(x1, x3)
    x6 = lbind(shift, x4)
    x7 = apply(x6, x5)
    x8 = astuple(ONE, THREE)
    x9 = astuple(FIVE, ONE)
    x10 = astuple(TWO, SIX)
    x11 = initset(x8)
    x12 = insert(x9, x11)
    x13 = insert(x10, x12)
    x14 = rbind(contained, x13)
    x15 = chain(flip, x14, ulcorner)
    x16 = sfilter(x7, x15)
    x17 = merge(x16)
    x18 = recolor(TWO, x17)
    O = paint(x1, x18)
    return O



def solve_68b16354_a8d7556c(I):
    x1 = hmirror(I)
    x2 = initset(ORIGIN)
    x3 = recolor(ZERO, x2)
    x4 = upscale(x3, TWO)
    x5 = occurrences(x1, x4)
    x6 = lbind(shift, x4)
    x7 = mapply(x6, x5)
    x8 = fill(x1, TWO, x7)
    x9 = add(SIX, SIX)
    x10 = astuple(EIGHT, x9)
    x11 = index(x8, x10)
    x12 = equality(x11, TWO)
    x13 = initset(x10)
    x14 = add(x10, DOWN)
    x15 = insert(x14, x13)
    x16 = toobject(x15, x8)
    x17 = toobject(x15, x1)
    x18 = branch(x12, x17, x16)
    O = paint(x8, x18)
    return O



def solve_68b16354_4938f0c2(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, TWO)
    x4 = vmirror(x3)
    x5 = height(x3)
    x6 = width(x3)
    x7 = toivec(x5)
    x8 = tojvec(x6)
    x9 = add(x8, ZERO_BY_TWO)
    x10 = add(x7, TWO_BY_ZERO)
    x11 = shift(x4, x9)
    x12 = fill(x1, TWO, x11)
    x13 = ofcolor(x12, TWO)
    x14 = hmirror(x13)
    x15 = shift(x14, x10)
    x16 = fill(x12, TWO, x15)
    x17 = size(x2)
    x18 = greater(x17, FOUR)
    O = branch(x18, x1, x16)
    return O



def solve_68b16354_834ec97d(I):
    x1 = hmirror(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = shift(x4, DOWN)
    x6 = fill(x1, ZERO, x4)
    x7 = paint(x6, x5)
    x8 = uppermost(x5)
    x9 = leftmost(x5)
    x10 = subtract(x9, TEN)
    x11 = add(x9, TEN)
    x12 = interval(x10, x11, TWO)
    x13 = lbind(greater, x8)
    x14 = compose(x13, first)
    x15 = rbind(contained, x12)
    x16 = compose(x15, last)
    x17 = sfilter(x2, x14)
    x18 = sfilter(x17, x16)
    O = fill(x7, FOUR, x18)
    return O



def solve_68b16354_90f3ed37(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, uppermost)
    x4 = first(x3)
    x5 = remove(x4, x3)
    x6 = normalize(x4)
    x7 = lbind(shift, x6)
    x8 = compose(x7, ulcorner)
    x9 = interval(TWO, NEG_ONE, NEG_ONE)
    x10 = apply(tojvec, x9)
    x11 = rbind(apply, x10)
    x12 = lbind(compose, size)
    x13 = lbind(lbind, intersection)
    x14 = compose(x12, x13)
    x15 = lbind(lbind, shift)
    x16 = chain(x11, x15, x8)
    x17 = fork(argmax, x16, x14)
    x18 = mapply(x17, x5)
    O = underfill(x1, ONE, x18)
    return O



def solve_68b16354_8403a5d5(I):
    x1 = hmirror(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = color(x4)
    x6 = leftmost(x4)
    x7 = interval(x6, TEN, TWO)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = sfilter(x2, x9)
    x11 = increment(x6)
    x12 = add(x6, THREE)
    x13 = interval(x11, TEN, FOUR)
    x14 = interval(x12, TEN, FOUR)
    x15 = lbind(astuple, NINE)
    x16 = apply(tojvec, x13)
    x17 = apply(x15, x14)
    x18 = fill(x1, x5, x10)
    x19 = fill(x18, FIVE, x16)
    O = fill(x19, FIVE, x17)
    return O



def solve_68b16354_539a4f51(I):
    x1 = hmirror(I)
    x2 = shape(x1)
    x3 = index(x1, ORIGIN)
    x4 = colorcount(x1, ZERO)
    x5 = decrement(x2)
    x6 = positive(x4)
    x7 = branch(x6, x5, x2)
    x8 = crop(x1, ORIGIN, x7)
    x9 = width(x8)
    x10 = astuple(ONE, x9)
    x11 = crop(x8, ORIGIN, x10)
    x12 = vupscale(x11, x9)
    x13 = dmirror(x12)
    x14 = hconcat(x8, x12)
    x15 = hconcat(x13, x8)
    x16 = vconcat(x14, x15)
    x17 = asobject(x16)
    x18 = multiply(UNITY, TEN)
    x19 = canvas(x3, x18)
    O = paint(x19, x17)
    return O



def solve_68b16354_3bdb4ada(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = compose(increment, ulcorner)
    x5 = compose(decrement, lrcorner)
    x6 = apply(x4, x3)
    x7 = apply(x5, x3)
    x8 = papply(connect, x6, x7)
    x9 = apply(last, x6)
    x10 = compose(last, first)
    x11 = power(last, TWO)
    x12 = fork(subtract, x10, x11)
    x13 = compose(even, x12)
    x14 = lbind(rbind, astuple)
    x15 = lbind(compose, x13)
    x16 = compose(x15, x14)
    x17 = fork(sfilter, first, x16)
    x18 = pair(x8, x9)
    x19 = mapply(x17, x18)
    O = fill(x1, ZERO, x19)
    return O



def solve_68b16354_ec883f72(I):
    x1 = hmirror(I)
    x2 = palette(x1)
    x3 = objects(x1, T, T, T)
    x4 = fork(multiply, height, width)
    x5 = argmax(x3, x4)
    x6 = color(x5)
    x7 = remove(ZERO, x2)
    x8 = other(x7, x6)
    x9 = lrcorner(x5)
    x10 = llcorner(x5)
    x11 = urcorner(x5)
    x12 = ulcorner(x5)
    x13 = shoot(x9, UNITY)
    x14 = shoot(x10, DOWN_LEFT)
    x15 = shoot(x11, UP_RIGHT)
    x16 = shoot(x12, NEG_UNITY)
    x17 = combine(x13, x14)
    x18 = combine(x15, x16)
    x19 = combine(x17, x18)
    O = underfill(x1, x8, x19)
    return O



def solve_68b16354_2bee17df(I):
    x1 = hmirror(I)
    x2 = height(x1)
    x3 = rot90(x1)
    x4 = subtract(x2, TWO)
    x5 = interval(ZERO, x2, ONE)
    x6 = rbind(colorcount, ZERO)
    x7 = matcher(x6, x4)
    x8 = rbind(vsplit, x2)
    x9 = lbind(apply, x7)
    x10 = compose(x9, x8)
    x11 = x10(x1)
    x12 = pair(x5, x11)
    x13 = sfilter(x12, last)
    x14 = mapply(hfrontier, x13)
    x15 = x10(x3)
    x16 = pair(x15, x5)
    x17 = sfilter(x16, first)
    x18 = mapply(vfrontier, x17)
    x19 = astuple(x14, x18)
    x20 = merge(x19)
    O = underfill(x1, THREE, x20)
    return O



def solve_68b16354_29623171(I):
    x1 = hmirror(I)
    x2 = leastcolor(x1)
    x3 = interval(ZERO, NINE, FOUR)
    x4 = product(x3, x3)
    x5 = rbind(add, THREE)
    x6 = rbind(interval, ONE)
    x7 = fork(x6, identity, x5)
    x8 = compose(x7, first)
    x9 = compose(x7, last)
    x10 = fork(product, x8, x9)
    x11 = rbind(colorcount, x2)
    x12 = rbind(toobject, x1)
    x13 = compose(x11, x12)
    x14 = apply(x10, x4)
    x15 = valmax(x14, x13)
    x16 = matcher(x13, x15)
    x17 = compose(flip, x16)
    x18 = mfilter(x14, x16)
    x19 = mfilter(x14, x17)
    x20 = fill(x1, x2, x18)
    O = fill(x20, ZERO, x19)
    return O



def solve_68b16354_a2fd1cf0(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, THREE)
    x4 = uppermost(x2)
    x5 = leftmost(x2)
    x6 = uppermost(x3)
    x7 = leftmost(x3)
    x8 = astuple(x4, x6)
    x9 = minimum(x8)
    x10 = maximum(x8)
    x11 = astuple(x9, x7)
    x12 = astuple(x10, x7)
    x13 = connect(x11, x12)
    x14 = astuple(x5, x7)
    x15 = minimum(x14)
    x16 = maximum(x14)
    x17 = astuple(x4, x15)
    x18 = astuple(x4, x16)
    x19 = connect(x17, x18)
    x20 = combine(x13, x19)
    O = underfill(x1, EIGHT, x20)
    return O



def solve_68b16354_8731374e(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = height(x4)
    x6 = width(x4)
    x7 = vsplit(x4, x5)
    x8 = lbind(greater, FOUR)
    x9 = compose(x8, numcolors)
    x10 = sfilter(x7, x9)
    x11 = merge(x10)
    x12 = rot90(x11)
    x13 = vsplit(x12, x6)
    x14 = sfilter(x13, x9)
    x15 = merge(x14)
    x16 = rot270(x15)
    x17 = leastcolor(x16)
    x18 = ofcolor(x16, x17)
    x19 = fork(combine, vfrontier, hfrontier)
    x20 = mapply(x19, x18)
    O = fill(x16, x17, x20)
    return O



def solve_68b16354_db93a21d(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, NINE)
    x4 = colorfilter(x2, NINE)
    x5 = rbind(shoot, DOWN)
    x6 = mapply(x5, x3)
    x7 = underfill(x1, ONE, x6)
    x8 = compose(halve, width)
    x9 = rbind(greater, ONE)
    x10 = compose(x9, x8)
    x11 = matcher(x8, THREE)
    x12 = power(outbox, TWO)
    x13 = power(outbox, THREE)
    x14 = mapply(outbox, x4)
    x15 = sfilter(x4, x10)
    x16 = sfilter(x4, x11)
    x17 = mapply(x12, x15)
    x18 = mapply(x13, x16)
    x19 = fill(x7, THREE, x14)
    x20 = fill(x19, THREE, x17)
    O = fill(x20, THREE, x18)
    return O



def solve_68b16354_53b68214(I):
    x1 = hmirror(I)
    x2 = width(x1)
    x3 = objects(x1, T, T, T)
    x4 = first(x3)
    x5 = vperiod(x4)
    x6 = toivec(x5)
    x7 = interval(ZERO, NINE, ONE)
    x8 = lbind(multiply, x6)
    x9 = apply(x8, x7)
    x10 = lbind(shift, x4)
    x11 = mapply(x10, x9)
    x12 = astuple(x2, x2)
    x13 = portrait(x4)
    x14 = shape(x4)
    x15 = add(DOWN, x14)
    x16 = decrement(x15)
    x17 = shift(x4, x16)
    x18 = branch(x13, x11, x17)
    x19 = canvas(ZERO, x12)
    x20 = paint(x19, x4)
    O = paint(x20, x18)
    return O



def solve_68b16354_d6ad076f(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = argmin(x2, size)
    x4 = argmax(x2, size)
    x5 = vmatching(x3, x4)
    x6 = branch(x5, DOWN, RIGHT)
    x7 = branch(x5, uppermost, leftmost)
    x8 = valmax(x2, x7)
    x9 = x7(x3)
    x10 = equality(x8, x9)
    x11 = branch(x10, NEG_ONE, ONE)
    x12 = multiply(x6, x11)
    x13 = inbox(x3)
    x14 = rbind(shoot, x12)
    x15 = mapply(x14, x13)
    x16 = underfill(x1, EIGHT, x15)
    x17 = objects(x16, T, F, T)
    x18 = colorfilter(x17, EIGHT)
    x19 = rbind(bordering, x1)
    x20 = mfilter(x18, x19)
    O = cover(x16, x20)
    return O



def solve_68b16354_6cdd2623(I):
    x1 = hmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = prapply(connect, x3, x3)
    x5 = fgpartition(x1)
    x6 = merge(x5)
    x7 = cover(x1, x6)
    x8 = fork(either, hline, vline)
    x9 = box(x6)
    x10 = rbind(difference, x9)
    x11 = chain(positive, size, x10)
    x12 = fork(both, x8, x11)
    x13 = mfilter(x4, x12)
    O = fill(x7, x2, x13)
    return O



def solve_68b16354_a3df8b1e(I):
    x1 = hmirror(I)
    x2 = shape(x1)
    x3 = ofcolor(x1, ONE)
    x4 = first(x3)
    x5 = shoot(x4, UP_RIGHT)
    x6 = fill(x1, ONE, x5)
    x7 = ofcolor(x6, ONE)
    x8 = urcorner(x7)
    x9 = shoot(x8, NEG_UNITY)
    x10 = fill(x6, ONE, x9)
    x11 = objects(x10, T, T, T)
    x12 = first(x11)
    x13 = subgrid(x12, x10)
    x14 = shape(x13)
    x15 = subtract(x14, DOWN)
    x16 = crop(x13, DOWN, x15)
    x17 = vconcat(x16, x16)
    x18 = vconcat(x17, x17)
    x19 = vconcat(x18, x18)
    x20 = hmirror(x19)
    x21 = crop(x20, ORIGIN, x2)
    O = hmirror(x21)
    return O



def solve_68b16354_cdecee7f(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = astuple(ONE, THREE)
    x4 = size(x2)
    x5 = order(x2, leftmost)
    x6 = apply(color, x5)
    x7 = rbind(canvas, UNITY)
    x8 = apply(x7, x6)
    x9 = merge(x8)
    x10 = dmirror(x9)
    x11 = subtract(NINE, x4)
    x12 = astuple(ONE, x11)
    x13 = canvas(ZERO, x12)
    x14 = hconcat(x10, x13)
    x15 = hsplit(x14, THREE)
    x16 = merge(x15)
    x17 = crop(x16, ORIGIN, x3)
    x18 = crop(x16, DOWN, x3)
    x19 = crop(x16, TWO_BY_ZERO, x3)
    x20 = vmirror(x18)
    x21 = vconcat(x17, x20)
    O = vconcat(x21, x19)
    return O



def solve_68b16354_3345333e(I):
    x1 = hmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = cover(x1, x3)
    x5 = leastcolor(x4)
    x6 = ofcolor(x4, x5)
    x7 = neighbors(ORIGIN)
    x8 = mapply(neighbors, x7)
    x9 = vmirror(x6)
    x10 = lbind(shift, x9)
    x11 = apply(x10, x8)
    x12 = rbind(intersection, x6)
    x13 = compose(size, x12)
    x14 = argmax(x11, x13)
    O = fill(x4, x5, x14)
    return O



def solve_68b16354_b190f7f5(I):
    x1 = hmirror(I)
    x2 = portrait(x1)
    x3 = branch(x2, vsplit, hsplit)
    x4 = x3(x1, TWO)
    x5 = argmin(x4, numcolors)
    x6 = argmax(x4, numcolors)
    x7 = width(x6)
    x8 = rbind(repeat, x7)
    x9 = chain(dmirror, merge, x8)
    x10 = upscale(x6, x7)
    x11 = x9(x5)
    x12 = x9(x11)
    x13 = ofcolor(x12, ZERO)
    O = fill(x10, ZERO, x13)
    return O



def solve_68b16354_caa06a1f(I):
    x1 = hmirror(I)
    x2 = asobject(x1)
    x3 = shape(x1)
    x4 = decrement(x3)
    x5 = index(x1, x4)
    x6 = double(x3)
    x7 = canvas(x5, x6)
    x8 = paint(x7, x2)
    x9 = objects(x8, F, F, T)
    x10 = first(x9)
    x11 = shift(x10, LEFT)
    x12 = vperiod(x11)
    x13 = hperiod(x11)
    x14 = neighbors(ORIGIN)
    x15 = lbind(mapply, neighbors)
    x16 = power(x15, TWO)
    x17 = x16(x14)
    x18 = astuple(x12, x13)
    x19 = lbind(multiply, x18)
    x20 = apply(x19, x17)
    x21 = lbind(shift, x11)
    x22 = mapply(x21, x20)
    O = paint(x1, x22)
    return O



def solve_68b16354_e21d9049(I):
    x1 = hmirror(I)
    x2 = asindices(x1)
    x3 = leastcolor(x1)
    x4 = objects(x1, T, F, T)
    x5 = ofcolor(x1, x3)
    x6 = merge(x4)
    x7 = shape(x6)
    x8 = neighbors(ORIGIN)
    x9 = lbind(mapply, neighbors)
    x10 = power(x9, TWO)
    x11 = x10(x8)
    x12 = lbind(multiply, x7)
    x13 = lbind(shift, x6)
    x14 = apply(x12, x11)
    x15 = mapply(x13, x14)
    x16 = lbind(hmatching, x5)
    x17 = lbind(vmatching, x5)
    x18 = fork(either, x16, x17)
    x19 = compose(x18, initset)
    x20 = paint(x1, x15)
    x21 = sfilter(x2, x19)
    x22 = difference(x2, x21)
    O = cover(x20, x22)
    return O



def solve_68b16354_d89b689b(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, EIGHT)
    x4 = sizefilter(x2, ONE)
    x5 = apply(initset, x3)
    x6 = lbind(argmin, x5)
    x7 = lbind(rbind, manhattan)
    x8 = compose(x6, x7)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x4)
    x11 = merge(x4)
    x12 = cover(x1, x11)
    O = paint(x12, x10)
    return O



def solve_68b16354_746b3537(I):
    x1 = hmirror(I)
    x2 = chain(size, dedupe, first)
    x3 = x2(x1)
    x4 = equality(x3, ONE)
    x5 = branch(x4, dmirror, identity)
    x6 = x5(x1)
    x7 = objects(x6, T, F, F)
    x8 = order(x7, leftmost)
    x9 = apply(color, x8)
    x10 = repeat(x9, ONE)
    O = x5(x10)
    return O



def solve_68b16354_63613498(I):
    x1 = hmirror(I)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = ofcolor(x2, ZERO)
    x4 = asindices(x2)
    x5 = difference(x4, x3)
    x6 = normalize(x5)
    x7 = objects(x1, T, F, T)
    x8 = compose(toindices, normalize)
    x9 = matcher(x8, x6)
    x10 = mfilter(x7, x9)
    x11 = fill(x1, FIVE, x10)
    x12 = asobject(x2)
    O = paint(x11, x12)
    return O



def solve_68b16354_06df4c85(I):
    x1 = hmirror(I)
    x2 = partition(x1)
    x3 = mostcolor(x1)
    x4 = ofcolor(x1, x3)
    x5 = colorfilter(x2, ZERO)
    x6 = argmax(x2, size)
    x7 = difference(x2, x5)
    x8 = remove(x6, x7)
    x9 = merge(x8)
    x10 = product(x9, x9)
    x11 = power(first, TWO)
    x12 = compose(first, last)
    x13 = fork(equality, x11, x12)
    x14 = sfilter(x10, x13)
    x15 = compose(last, first)
    x16 = power(last, TWO)
    x17 = fork(connect, x15, x16)
    x18 = fork(recolor, color, x17)
    x19 = apply(x18, x14)
    x20 = fork(either, vline, hline)
    x21 = mfilter(x19, x20)
    x22 = paint(x1, x21)
    O = fill(x22, x3, x4)
    return O



def solve_68b16354_4522001f(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = toindices(x3)
    x5 = contained(ZERO_BY_TWO, x4)
    x6 = contained(TWO_BY_TWO, x4)
    x7 = contained(TWO_BY_ZERO, x4)
    x8 = astuple(NINE, NINE)
    x9 = canvas(ZERO, x8)
    x10 = astuple(THREE, ORIGIN)
    x11 = initset(x10)
    x12 = upscale(x11, TWO)
    x13 = upscale(x12, TWO)
    x14 = shape(x13)
    x15 = shift(x13, x14)
    x16 = combine(x13, x15)
    x17 = paint(x9, x16)
    x18 = rot90(x17)
    x19 = rot180(x17)
    x20 = rot270(x17)
    x21 = branch(x5, x18, x17)
    x22 = branch(x6, x19, x21)
    O = branch(x7, x20, x22)
    return O



def solve_68b16354_a48eeaf7(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = outbox(x2)
    x4 = apply(initset, x3)
    x5 = ofcolor(x1, FIVE)
    x6 = lbind(argmin, x4)
    x7 = lbind(lbind, manhattan)
    x8 = compose(x7, initset)
    x9 = compose(x6, x8)
    x10 = mapply(x9, x5)
    x11 = cover(x1, x5)
    O = fill(x11, FIVE, x10)
    return O



def solve_68b16354_eb5a1d5d(I):
    x1 = hmirror(I)
    x2 = compose(dmirror, dedupe)
    x3 = x2(x1)
    x4 = x2(x3)
    x5 = fork(remove, last, identity)
    x6 = compose(hmirror, x5)
    x7 = fork(vconcat, identity, x6)
    x8 = x7(x4)
    x9 = dmirror(x8)
    O = x7(x9)
    return O



def solve_68b16354_e179c5f4(I):
    x1 = hmirror(I)
    x2 = height(x1)
    x3 = ofcolor(x1, ONE)
    x4 = first(x3)
    x5 = shoot(x4, UP_RIGHT)
    x6 = fill(x1, ONE, x5)
    x7 = ofcolor(x6, ONE)
    x8 = urcorner(x7)
    x9 = shoot(x8, NEG_UNITY)
    x10 = fill(x6, ONE, x9)
    x11 = ofcolor(x10, ONE)
    x12 = subgrid(x11, x10)
    x13 = height(x12)
    x14 = width(x12)
    x15 = decrement(x13)
    x16 = astuple(x15, x14)
    x17 = ulcorner(x11)
    x18 = crop(x10, x17, x16)
    x19 = repeat(x18, NINE)
    x20 = merge(x19)
    x21 = astuple(x2, x14)
    x22 = crop(x20, ORIGIN, x21)
    x23 = hmirror(x22)
    O = replace(x23, ZERO, EIGHT)
    return O



def solve_68b16354_995c5fa3(I):
    x1 = hmirror(I)
    x2 = hsplit(x1, THREE)
    x3 = astuple(TWO, ONE)
    x4 = rbind(ofcolor, ZERO)
    x5 = compose(ulcorner, x4)
    x6 = compose(size, x4)
    x7 = matcher(x6, ZERO)
    x8 = matcher(x5, UNITY)
    x9 = matcher(x5, DOWN)
    x10 = matcher(x5, x3)
    x11 = rbind(multiply, THREE)
    x12 = power(double, TWO)
    x13 = compose(double, x7)
    x14 = chain(x12, double, x8)
    x15 = compose(x11, x9)
    x16 = compose(x12, x10)
    x17 = fork(add, x13, x14)
    x18 = fork(add, x15, x16)
    x19 = fork(add, x17, x18)
    x20 = rbind(canvas, UNITY)
    x21 = compose(x20, x19)
    x22 = apply(x21, x2)
    x23 = merge(x22)
    O = hupscale(x23, THREE)
    return O



def solve_68b16354_d06dbe63(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, EIGHT)
    x3 = center(x2)
    x4 = connect(ORIGIN, DOWN)
    x5 = connect(ORIGIN, ZERO_BY_TWO)
    x6 = combine(x4, x5)
    x7 = subtract(x3, TWO_BY_ZERO)
    x8 = shift(x6, x7)
    x9 = astuple(NEG_TWO, TWO)
    x10 = interval(ZERO, FIVE, ONE)
    x11 = lbind(multiply, x9)
    x12 = apply(x11, x10)
    x13 = lbind(shift, x8)
    x14 = mapply(x13, x12)
    x15 = fill(x1, FIVE, x14)
    x16 = rot180(x15)
    x17 = ofcolor(x16, EIGHT)
    x18 = center(x17)
    x19 = subtract(x18, x7)
    x20 = shift(x14, x19)
    x21 = toivec(NEG_TWO)
    x22 = shift(x20, x21)
    x23 = fill(x16, FIVE, x22)
    O = rot180(x23)
    return O



def solve_68b16354_36fdfd69(I):
    x1 = hmirror(I)
    x2 = upscale(x1, TWO)
    x3 = objects(x2, T, T, T)
    x4 = colorfilter(x3, TWO)
    x5 = fork(manhattan, first, last)
    x6 = lbind(greater, FIVE)
    x7 = compose(x6, x5)
    x8 = product(x4, x4)
    x9 = sfilter(x8, x7)
    x10 = apply(merge, x9)
    x11 = mapply(delta, x10)
    x12 = fill(x2, FOUR, x11)
    x13 = merge(x4)
    x14 = paint(x12, x13)
    O = downscale(x14, TWO)
    return O



def solve_68b16354_0a938d79(I):
    x1 = hmirror(I)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = x3(x1)
    x5 = fgpartition(x4)
    x6 = merge(x5)
    x7 = chain(double, decrement, width)
    x8 = x7(x6)
    x9 = compose(vfrontier, tojvec)
    x10 = lbind(mapply, x9)
    x11 = rbind(interval, x8)
    x12 = width(x4)
    x13 = rbind(x11, x12)
    x14 = chain(x10, x13, leftmost)
    x15 = fork(recolor, color, x14)
    x16 = mapply(x15, x5)
    x17 = paint(x4, x16)
    O = x3(x17)
    return O



def solve_68b16354_045e512c(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = lbind(shift, x3)
    x6 = lbind(mapply, x5)
    x7 = double(TEN)
    x8 = interval(FOUR, x7, FOUR)
    x9 = rbind(apply, x8)
    x10 = lbind(position, x3)
    x11 = lbind(rbind, multiply)
    x12 = chain(x9, x11, x10)
    x13 = compose(x6, x12)
    x14 = fork(recolor, color, x13)
    x15 = mapply(x14, x4)
    O = paint(x1, x15)
    return O



def solve_68b16354_82819916(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = normalize(x3)
    x6 = compose(last, last)
    x7 = rbind(argmin, x6)
    x8 = compose(first, x7)
    x9 = fork(other, palette, x8)
    x10 = x8(x5)
    x11 = matcher(first, x10)
    x12 = sfilter(x5, x11)
    x13 = difference(x5, x12)
    x14 = compose(toivec, uppermost)
    x15 = lbind(shift, x12)
    x16 = lbind(shift, x13)
    x17 = compose(x15, x14)
    x18 = compose(x16, x14)
    x19 = fork(recolor, x8, x17)
    x20 = fork(recolor, x9, x18)
    x21 = fork(combine, x19, x20)
    x22 = mapply(x21, x4)
    O = paint(x1, x22)
    return O



def solve_68b16354_99fa7670(I):
    x1 = hmirror(I)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x3)
    x8 = paint(x1, x7)
    x9 = add(x2, DOWN_LEFT)
    x10 = initset(x9)
    x11 = recolor(ZERO, x10)
    x12 = objects(x8, T, F, T)
    x13 = insert(x11, x12)
    x14 = order(x13, uppermost)
    x15 = first(x14)
    x16 = remove(x11, x14)
    x17 = remove(x15, x14)
    x18 = compose(lrcorner, first)
    x19 = compose(lrcorner, last)
    x20 = fork(connect, x18, x19)
    x21 = compose(color, first)
    x22 = fork(recolor, x21, x20)
    x23 = pair(x16, x17)
    x24 = mapply(x22, x23)
    O = underpaint(x8, x24)
    return O



def solve_68b16354_72322fa7(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = matcher(numcolors, ONE)
    x4 = sfilter(x2, x3)
    x5 = difference(x2, x4)
    x6 = lbind(matcher, first)
    x7 = compose(x6, mostcolor)
    x8 = fork(sfilter, identity, x7)
    x9 = fork(difference, identity, x8)
    x10 = lbind(occurrences, x1)
    x11 = compose(x10, x8)
    x12 = compose(x10, x9)
    x13 = compose(ulcorner, x9)
    x14 = fork(subtract, ulcorner, x13)
    x15 = lbind(rbind, add)
    x16 = compose(x15, x14)
    x17 = fork(apply, x16, x12)
    x18 = lbind(lbind, shift)
    x19 = compose(x18, normalize)
    x20 = fork(mapply, x19, x11)
    x21 = fork(mapply, x19, x17)
    x22 = mapply(x20, x5)
    x23 = mapply(x21, x5)
    x24 = paint(x1, x22)
    O = paint(x24, x23)
    return O



def solve_68b16354_855e0971(I):
    x1 = hmirror(I)
    x2 = frontiers(x1)
    x3 = sfilter(x2, hline)
    x4 = size(x3)
    x5 = positive(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x1)
    x8 = rbind(subgrid, x7)
    x9 = matcher(color, ZERO)
    x10 = compose(flip, x9)
    x11 = partition(x7)
    x12 = sfilter(x11, x10)
    x13 = rbind(ofcolor, ZERO)
    x14 = lbind(mapply, vfrontier)
    x15 = chain(x14, x13, x8)
    x16 = fork(shift, x15, ulcorner)
    x17 = fork(intersection, toindices, x16)
    x18 = mapply(x17, x12)
    x19 = fill(x7, ZERO, x18)
    O = x6(x19)
    return O



def solve_68b16354_a78176bb(I):
    x1 = hmirror(I)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = remove(ZERO, x2)
    x5 = other(x4, FIVE)
    x6 = colorfilter(x3, FIVE)
    x7 = lbind(index, x1)
    x8 = compose(x7, urcorner)
    x9 = matcher(x8, FIVE)
    x10 = sfilter(x6, x9)
    x11 = difference(x6, x10)
    x12 = apply(urcorner, x10)
    x13 = apply(llcorner, x11)
    x14 = rbind(add, UP_RIGHT)
    x15 = rbind(add, DOWN_LEFT)
    x16 = apply(x14, x12)
    x17 = apply(x15, x13)
    x18 = rbind(shoot, UNITY)
    x19 = rbind(shoot, NEG_UNITY)
    x20 = fork(combine, x18, x19)
    x21 = mapply(x20, x16)
    x22 = mapply(x20, x17)
    x23 = combine(x21, x22)
    x24 = fill(x1, x5, x23)
    O = replace(x24, FIVE, ZERO)
    return O



def solve_68b16354_952a094c(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = argmax(x2, size)
    x5 = outbox(x4)
    x6 = corners(x5)
    x7 = lbind(rbind, manhattan)
    x8 = lbind(argmax, x3)
    x9 = chain(x8, x7, initset)
    x10 = compose(color, x9)
    x11 = fork(astuple, x10, identity)
    x12 = apply(x11, x6)
    x13 = merge(x3)
    x14 = cover(x1, x13)
    O = paint(x14, x12)
    return O



def solve_68b16354_6d58a25d(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = merge(x4)
    x6 = color(x5)
    x7 = uppermost(x3)
    x8 = rbind(greater, x7)
    x9 = compose(x8, uppermost)
    x10 = rbind(vmatching, x3)
    x11 = fork(both, x10, x9)
    x12 = sfilter(x4, x11)
    x13 = increment(x7)
    x14 = rbind(greater, x13)
    x15 = compose(x14, first)
    x16 = rbind(sfilter, x15)
    x17 = chain(x16, vfrontier, center)
    x18 = mapply(x17, x12)
    O = underfill(x1, x6, x18)
    return O



def solve_68b16354_6aa20dc0(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(rbind, upscale)
    x10 = interval(ONE, FOUR, ONE)
    x11 = apply(x9, x10)
    x12 = initset(identity)
    x13 = insert(vmirror, x12)
    x14 = insert(hmirror, x13)
    x15 = insert(cmirror, x14)
    x16 = insert(dmirror, x15)
    x17 = fork(compose, first, last)
    x18 = lbind(occurrences, x1)
    x19 = lbind(lbind, shift)
    x20 = compose(x18, x8)
    x21 = product(x16, x11)
    x22 = apply(x17, x21)
    x23 = rapply(x22, x4)
    x24 = fork(mapply, x19, x20)
    x25 = mapply(x24, x23)
    O = paint(x1, x25)
    return O



def solve_68b16354_447fd412(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(rbind, upscale)
    x10 = interval(ONE, FOUR, ONE)
    x11 = apply(x9, x10)
    x12 = lbind(recolor, ZERO)
    x13 = compose(x12, outbox)
    x14 = fork(combine, identity, x13)
    x15 = lbind(occurrences, x1)
    x16 = lbind(rbind, subtract)
    x17 = lbind(apply, increment)
    x18 = lbind(lbind, shift)
    x19 = chain(x16, ulcorner, x8)
    x20 = chain(x15, x14, x8)
    x21 = fork(apply, x19, x20)
    x22 = compose(x17, x21)
    x23 = fork(mapply, x18, x22)
    x24 = rapply(x11, x4)
    x25 = mapply(x23, x24)
    O = paint(x1, x25)
    return O



def solve_68b16354_2bcee788(I):
    x1 = hmirror(I)
    x2 = mostcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = replace(x1, x2, THREE)
    x5 = argmax(x3, size)
    x6 = argmin(x3, size)
    x7 = position(x5, x6)
    x8 = first(x7)
    x9 = last(x7)
    x10 = subgrid(x5, x4)
    x11 = hline(x6)
    x12 = hmirror(x10)
    x13 = vmirror(x10)
    x14 = branch(x11, x12, x13)
    x15 = branch(x11, x8, ZERO)
    x16 = branch(x11, ZERO, x9)
    x17 = asobject(x14)
    x18 = matcher(first, THREE)
    x19 = compose(flip, x18)
    x20 = sfilter(x17, x19)
    x21 = ulcorner(x5)
    x22 = shape(x5)
    x23 = astuple(x15, x16)
    x24 = multiply(x22, x23)
    x25 = add(x21, x24)
    x26 = shift(x20, x25)
    O = paint(x4, x26)
    return O



def solve_68b16354_f35d900a(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = palette(x1)
    x4 = remove(ZERO, x3)
    x5 = lbind(other, x4)
    x6 = compose(x5, color)
    x7 = fork(recolor, x6, outbox)
    x8 = mapply(x7, x2)
    x9 = mapply(toindices, x2)
    x10 = box(x9)
    x11 = difference(x10, x9)
    x12 = lbind(argmin, x9)
    x13 = rbind(compose, initset)
    x14 = lbind(rbind, manhattan)
    x15 = chain(x13, x14, initset)
    x16 = chain(initset, x12, x15)
    x17 = fork(manhattan, initset, x16)
    x18 = compose(even, x17)
    x19 = sfilter(x11, x18)
    x20 = paint(x1, x8)
    O = fill(x20, FIVE, x19)
    return O



def solve_68b16354_0dfd9992(I):
    x1 = hmirror(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_68b16354_29ec7d0e(I):
    x1 = hmirror(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_68b16354_36d67576(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = argmax(x2, numcolors)
    x4 = astuple(TWO, FOUR)
    x5 = rbind(contained, x4)
    x6 = compose(x5, first)
    x7 = rbind(sfilter, x6)
    x8 = lbind(rbind, subtract)
    x9 = lbind(occurrences, x1)
    x10 = lbind(lbind, shift)
    x11 = compose(x8, ulcorner)
    x12 = chain(x11, x7, normalize)
    x13 = chain(x9, x7, normalize)
    x14 = fork(apply, x12, x13)
    x15 = compose(x10, normalize)
    x16 = fork(mapply, x15, x14)
    x17 = astuple(cmirror, dmirror)
    x18 = astuple(hmirror, vmirror)
    x19 = combine(x17, x18)
    x20 = product(x19, x19)
    x21 = fork(compose, first, last)
    x22 = apply(x21, x20)
    x23 = totuple(x22)
    x24 = combine(x19, x23)
    x25 = rapply(x24, x3)
    x26 = mapply(x16, x25)
    O = paint(x1, x26)
    return O



def solve_68b16354_469497ad(I):
    x1 = hmirror(I)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    x4 = upscale(x1, x3)
    x5 = objects(x4, F, F, T)
    x6 = argmin(x5, size)
    x7 = ulcorner(x6)
    x8 = llcorner(x6)
    x9 = shoot(x7, NEG_UNITY)
    x10 = shoot(x7, UNITY)
    x11 = shoot(x8, DOWN_LEFT)
    x12 = shoot(x8, UP_RIGHT)
    x13 = combine(x9, x10)
    x14 = combine(x11, x12)
    x15 = combine(x13, x14)
    x16 = underfill(x4, TWO, x15)
    x17 = objects(x16, T, F, T)
    x18 = argmax(x17, lrcorner)
    O = paint(x16, x18)
    return O



def solve_68b16354_484b58aa(I):
    x1 = hmirror(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, TWO)
    x9 = astuple(TWO, x3)
    x10 = power(decrement, TWO)
    x11 = x10(x2)
    x12 = x10(x3)
    x13 = toivec(x12)
    x14 = tojvec(x11)
    x15 = crop(x1, x13, x9)
    x16 = crop(x1, x14, x8)
    x17 = asobject(x16)
    x18 = asobject(x15)
    x19 = vperiod(x17)
    x20 = hperiod(x18)
    x21 = astuple(x19, x20)
    x22 = lbind(multiply, x21)
    x23 = neighbors(ORIGIN)
    x24 = mapply(neighbors, x23)
    x25 = apply(x22, x24)
    x26 = lbind(shift, x7)
    x27 = mapply(x26, x25)
    O = paint(x1, x27)
    return O



def solve_68b16354_3befdf3e(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = leastcolor(x1)
    x4 = palette(x1)
    x5 = remove(ZERO, x4)
    x6 = other(x5, x3)
    x7 = switch(x1, x3, x6)
    x8 = compose(width, inbox)
    x9 = lbind(power, outbox)
    x10 = compose(x9, x8)
    x11 = initset(x10)
    x12 = lbind(rapply, x11)
    x13 = chain(initset, first, x12)
    x14 = fork(rapply, x13, identity)
    x15 = compose(first, x14)
    x16 = compose(backdrop, x15)
    x17 = lbind(chain, backdrop)
    x18 = lbind(x17, inbox)
    x19 = compose(x18, x10)
    x20 = lbind(apply, initset)
    x21 = chain(x20, corners, x16)
    x22 = fork(mapply, x19, x21)
    x23 = fork(intersection, x16, x22)
    x24 = mapply(x16, x2)
    x25 = mapply(x23, x2)
    x26 = underfill(x7, x6, x24)
    O = fill(x26, ZERO, x25)
    return O



def solve_68b16354_49d1d64f(I):
    x1 = hmirror(I)
    x2 = shape(x1)
    x3 = add(x2, TWO)
    x4 = canvas(ZERO, x3)
    x5 = asobject(x1)
    x6 = shift(x5, UNITY)
    x7 = paint(x4, x6)
    x8 = asindices(x4)
    x9 = fork(difference, box, corners)
    x10 = x9(x8)
    x11 = lbind(lbind, manhattan)
    x12 = rbind(compose, initset)
    x13 = chain(x12, x11, initset)
    x14 = lbind(argmin, x6)
    x15 = chain(first, x14, x13)
    x16 = fork(astuple, x15, identity)
    x17 = apply(x16, x10)
    O = paint(x7, x17)
    return O



def solve_68b16354_57aa92db(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = objects(x1, T, F, T)
    x4 = lbind(lbind, colorcount)
    x5 = fork(apply, x4, palette)
    x6 = compose(maximum, x5)
    x7 = compose(minimum, x5)
    x8 = fork(subtract, x6, x7)
    x9 = argmax(x2, x8)
    x10 = leastcolor(x9)
    x11 = normalize(x9)
    x12 = matcher(first, x10)
    x13 = sfilter(x11, x12)
    x14 = ulcorner(x13)
    x15 = colorfilter(x3, x10)
    x16 = rbind(toobject, x1)
    x17 = lbind(remove, ZERO)
    x18 = chain(first, x17, palette)
    x19 = chain(x18, x16, outbox)
    x20 = lbind(multiply, x14)
    x21 = compose(x20, width)
    x22 = fork(subtract, ulcorner, x21)
    x23 = lbind(shift, x11)
    x24 = compose(x23, x22)
    x25 = fork(upscale, x24, width)
    x26 = fork(recolor, x19, x25)
    x27 = mapply(x26, x15)
    x28 = paint(x1, x27)
    x29 = merge(x3)
    O = paint(x28, x29)
    return O



def solve_68b16354_aba27056(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = mapply(toindices, x2)
    x4 = box(x3)
    x5 = difference(x4, x3)
    x6 = delta(x3)
    x7 = position(x6, x5)
    x8 = interval(ZERO, NINE, ONE)
    x9 = lbind(multiply, x7)
    x10 = apply(x9, x8)
    x11 = lbind(shift, x5)
    x12 = mapply(x11, x10)
    x13 = fill(x1, FOUR, x6)
    x14 = fill(x13, FOUR, x12)
    x15 = corners(x5)
    x16 = ofcolor(x14, ZERO)
    x17 = rbind(toobject, x14)
    x18 = rbind(colorcount, ZERO)
    x19 = chain(x18, x17, dneighbors)
    x20 = matcher(x19, TWO)
    x21 = rbind(adjacent, x3)
    x22 = rbind(adjacent, x12)
    x23 = fork(both, x21, x22)
    x24 = compose(x23, initset)
    x25 = sfilter(x16, x20)
    x26 = sfilter(x25, x24)
    x27 = product(x15, x26)
    x28 = fork(subtract, last, first)
    x29 = fork(shoot, first, x28)
    x30 = mapply(x29, x27)
    O = fill(x14, FOUR, x30)
    return O



def solve_68b16354_1e32b0e9(I):
    x1 = hmirror(I)
    x2 = height(x1)
    x3 = mostcolor(x1)
    x4 = asobject(x1)
    x5 = subtract(x2, TWO)
    x6 = divide(x5, THREE)
    x7 = astuple(x6, x6)
    x8 = crop(x1, ORIGIN, x7)
    x9 = partition(x8)
    x10 = matcher(color, ZERO)
    x11 = compose(flip, x10)
    x12 = extract(x9, x11)
    x13 = initset(x3)
    x14 = palette(x4)
    x15 = palette(x12)
    x16 = difference(x14, x15)
    x17 = difference(x16, x13)
    x18 = first(x17)
    x19 = interval(ZERO, THREE, ONE)
    x20 = product(x19, x19)
    x21 = totuple(x20)
    x22 = apply(first, x21)
    x23 = apply(last, x21)
    x24 = lbind(multiply, x6)
    x25 = apply(x24, x22)
    x26 = apply(x24, x23)
    x27 = papply(add, x25, x22)
    x28 = papply(add, x26, x23)
    x29 = papply(astuple, x27, x28)
    x30 = lbind(shift, x12)
    x31 = mapply(x30, x29)
    O = underfill(x1, x18, x31)
    return O



def solve_68b16354_28e73c20(I):
    x1 = hmirror(I)
    x2 = width(x1)
    x3 = astuple(ONE, TWO)
    x4 = astuple(TWO, TWO)
    x5 = astuple(TWO, ONE)
    x6 = astuple(THREE, ONE)
    x7 = canvas(THREE, UNITY)
    x8 = upscale(x7, FOUR)
    x9 = initset(DOWN)
    x10 = insert(UNITY, x9)
    x11 = insert(x3, x10)
    x12 = insert(x4, x11)
    x13 = fill(x8, ZERO, x12)
    x14 = vupscale(x7, FIVE)
    x15 = hupscale(x14, THREE)
    x16 = insert(x5, x10)
    x17 = insert(x6, x16)
    x18 = fill(x15, ZERO, x17)
    x19 = even(x2)
    x20 = branch(x19, x13, x18)
    x21 = canvas(ZERO, UNITY)
    x22 = lbind(hupscale, x21)
    x23 = chain(x22, decrement, height)
    x24 = rbind(hconcat, x7)
    x25 = compose(x24, x23)
    x26 = lbind(hupscale, x7)
    x27 = compose(x26, height)
    x28 = fork(vconcat, x25, rot90)
    x29 = fork(vconcat, x27, x28)
    x30 = subtract(x2, FOUR)
    x31 = power(x29, x30)
    O = x31(x20)
    return O



def solve_68b16354_508bd3b6(I):
    x1 = hmirror(I)
    x2 = width(x1)
    x3 = objects(x1, T, T, T)
    x4 = argmin(x3, size)
    x5 = argmax(x3, size)
    x6 = ulcorner(x4)
    x7 = urcorner(x4)
    x8 = index(x1, x6)
    x9 = equality(x8, EIGHT)
    x10 = branch(x9, x6, x7)
    x11 = branch(x9, UNITY, DOWN_LEFT)
    x12 = multiply(x11, x2)
    x13 = double(x12)
    x14 = add(x10, x13)
    x15 = subtract(x10, x13)
    x16 = connect(x14, x15)
    x17 = fill(x1, THREE, x16)
    x18 = paint(x17, x5)
    x19 = objects(x18, T, F, T)
    x20 = rbind(adjacent, x5)
    x21 = extract(x19, x20)
    x22 = first(x21)
    x23 = last(x22)
    x24 = flip(x9)
    x25 = branch(x24, UNITY, DOWN_LEFT)
    x26 = multiply(x25, x2)
    x27 = double(x26)
    x28 = add(x23, x27)
    x29 = subtract(x23, x27)
    x30 = connect(x28, x29)
    x31 = fill(x18, THREE, x30)
    x32 = paint(x31, x4)
    O = paint(x32, x5)
    return O



def solve_68b16354_6d0160f0(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, FOUR)
    x3 = first(x2)
    x4 = first(x3)
    x5 = last(x3)
    x6 = greater(x4, THREE)
    x7 = greater(x4, SEVEN)
    x8 = greater(x5, THREE)
    x9 = greater(x5, SEVEN)
    x10 = branch(x6, FOUR, ZERO)
    x11 = branch(x7, EIGHT, x10)
    x12 = branch(x8, FOUR, ZERO)
    x13 = branch(x9, EIGHT, x12)
    x14 = astuple(x11, x13)
    x15 = initset(ZERO)
    x16 = insert(FOUR, x15)
    x17 = insert(EIGHT, x16)
    x18 = product(x17, x17)
    x19 = crop(x1, ORIGIN, THREE_BY_THREE)
    x20 = asindices(x19)
    x21 = recolor(ZERO, x20)
    x22 = lbind(shift, x21)
    x23 = mapply(x22, x18)
    x24 = paint(x1, x23)
    x25 = crop(x1, x14, THREE_BY_THREE)
    x26 = replace(x25, FIVE, ZERO)
    x27 = ofcolor(x26, FOUR)
    x28 = first(x27)
    x29 = asindices(x26)
    x30 = toobject(x29, x26)
    x31 = multiply(x28, FOUR)
    x32 = shift(x30, x31)
    O = paint(x24, x32)
    return O



def solve_68b16354_f8a8fe49(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, FIVE, ZERO)
    x4 = colorfilter(x2, TWO)
    x5 = first(x4)
    x6 = portrait(x5)
    x7 = branch(x6, hsplit, vsplit)
    x8 = branch(x6, vmirror, hmirror)
    x9 = ofcolor(x1, TWO)
    x10 = subgrid(x9, x1)
    x11 = trim(x10)
    x12 = x8(x11)
    x13 = x7(x12, TWO)
    x14 = compose(normalize, asobject)
    x15 = apply(x14, x13)
    x16 = last(x15)
    x17 = first(x15)
    x18 = ulcorner(x9)
    x19 = increment(x18)
    x20 = shift(x16, x19)
    x21 = shift(x17, x19)
    x22 = branch(x6, width, height)
    x23 = branch(x6, tojvec, toivec)
    x24 = x22(x16)
    x25 = double(x24)
    x26 = compose(x23, increment)
    x27 = x26(x24)
    x28 = invert(x27)
    x29 = x26(x25)
    x30 = shift(x20, x28)
    x31 = shift(x21, x29)
    x32 = paint(x3, x30)
    O = paint(x32, x31)
    return O



def solve_68b16354_d07ae81c(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = sizefilter(x2, ONE)
    x4 = apply(color, x3)
    x5 = difference(x2, x3)
    x6 = apply(color, x5)
    x7 = first(x6)
    x8 = last(x6)
    x9 = ofcolor(x1, x7)
    x10 = ofcolor(x1, x8)
    x11 = rbind(shoot, UNITY)
    x12 = rbind(shoot, NEG_UNITY)
    x13 = rbind(shoot, DOWN_LEFT)
    x14 = rbind(shoot, UP_RIGHT)
    x15 = fork(combine, x11, x12)
    x16 = fork(combine, x13, x14)
    x17 = fork(combine, x15, x16)
    x18 = compose(x17, center)
    x19 = mapply(x18, x3)
    x20 = intersection(x9, x19)
    x21 = intersection(x10, x19)
    x22 = first(x3)
    x23 = color(x22)
    x24 = center(x22)
    x25 = neighbors(x24)
    x26 = toobject(x25, x1)
    x27 = mostcolor(x26)
    x28 = other(x4, x23)
    x29 = equality(x27, x7)
    x30 = branch(x29, x23, x28)
    x31 = branch(x29, x28, x23)
    x32 = fill(x1, x30, x20)
    O = fill(x32, x31, x21)
    return O



def solve_68b16354_0e206a2e(I):
    x1 = hmirror(I)
    x2 = palette(x1)
    x3 = objects(x1, F, F, T)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, numcolors)
    x6 = sfilter(x3, x5)
    x7 = remove(ZERO, x2)
    x8 = lbind(colorcount, x1)
    x9 = argmax(x7, x8)
    x10 = remove(x9, x7)
    x11 = rbind(contained, x10)
    x12 = compose(x11, first)
    x13 = rbind(sfilter, x12)
    x14 = lbind(rbind, subtract)
    x15 = lbind(occurrences, x1)
    x16 = lbind(lbind, shift)
    x17 = compose(x14, ulcorner)
    x18 = chain(x17, x13, normalize)
    x19 = chain(x15, x13, normalize)
    x20 = fork(apply, x18, x19)
    x21 = compose(x16, normalize)
    x22 = fork(mapply, x21, x20)
    x23 = astuple(cmirror, dmirror)
    x24 = astuple(hmirror, vmirror)
    x25 = combine(x23, x24)
    x26 = product(x25, x25)
    x27 = fork(compose, first, last)
    x28 = apply(x27, x26)
    x29 = totuple(x28)
    x30 = combine(x25, x29)
    x31 = lbind(rapply, x30)
    x32 = mapply(x31, x6)
    x33 = mapply(x22, x32)
    x34 = paint(x1, x33)
    x35 = merge(x6)
    O = cover(x34, x35)
    return O



def solve_68b16354_d22278a0(I):
    x1 = hmirror(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = fork(multiply, sign, identity)
    x5 = lbind(apply, x4)
    x6 = chain(even, maximum, x5)
    x7 = lbind(sfilter, x2)
    x8 = fork(add, first, last)
    x9 = rbind(remove, x3)
    x10 = compose(center, last)
    x11 = fork(subtract, first, x10)
    x12 = compose(x6, x11)
    x13 = lbind(rbind, equality)
    x14 = lbind(argmin, x3)
    x15 = chain(x8, x5, x11)
    x16 = lbind(lbind, astuple)
    x17 = lbind(rbind, astuple)
    x18 = lbind(compose, x12)
    x19 = lbind(compose, x15)
    x20 = compose(x19, x16)
    x21 = compose(x19, x17)
    x22 = compose(x14, x20)
    x23 = rbind(compose, x22)
    x24 = lbind(lbind, valmin)
    x25 = rbind(compose, x20)
    x26 = chain(x25, x24, x9)
    x27 = lbind(fork, greater)
    x28 = fork(x27, x26, x21)
    x29 = chain(x7, x18, x17)
    x30 = chain(x7, x23, x13)
    x31 = fork(intersection, x29, x30)
    x32 = compose(x7, x28)
    x33 = fork(intersection, x31, x32)
    x34 = fork(recolor, color, x33)
    x35 = mapply(x34, x3)
    O = paint(x1, x35)
    return O



def solve_68b16354_50846271(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = prapply(connect, x2, x2)
    x4 = lbind(greater, SIX)
    x5 = compose(x4, size)
    x6 = fork(either, vline, hline)
    x7 = fork(both, x5, x6)
    x8 = mfilter(x3, x7)
    x9 = fill(x1, TWO, x8)
    x10 = objects(x9, T, F, F)
    x11 = colorfilter(x10, TWO)
    x12 = valmax(x11, width)
    x13 = halve(x12)
    x14 = toivec(x13)
    x15 = tojvec(x13)
    x16 = rbind(add, ZERO_BY_TWO)
    x17 = rbind(add, TWO_BY_ZERO)
    x18 = rbind(subtract, ZERO_BY_TWO)
    x19 = rbind(subtract, TWO_BY_ZERO)
    x20 = rbind(colorcount, TWO)
    x21 = rbind(toobject, x9)
    x22 = compose(initset, x16)
    x23 = fork(insert, x17, x22)
    x24 = fork(insert, x18, x23)
    x25 = fork(insert, x19, x24)
    x26 = fork(combine, dneighbors, x25)
    x27 = chain(x20, x21, x26)
    x28 = rbind(argmax, x27)
    x29 = compose(x28, toindices)
    x30 = apply(x29, x11)
    x31 = rbind(add, x14)
    x32 = rbind(subtract, x14)
    x33 = rbind(add, x15)
    x34 = rbind(subtract, x15)
    x35 = fork(connect, x31, x32)
    x36 = fork(connect, x33, x34)
    x37 = fork(combine, x35, x36)
    x38 = mapply(x37, x30)
    x39 = fill(x9, EIGHT, x38)
    O = fill(x39, TWO, x2)
    return O



def solve_68b16354_150deff5(I):
    x1 = hmirror(I)
    x2 = canvas(FIVE, TWO_BY_TWO)
    x3 = asobject(x2)
    x4 = occurrences(x1, x3)
    x5 = lbind(shift, x3)
    x6 = mapply(x5, x4)
    x7 = fill(x1, EIGHT, x6)
    x8 = canvas(FIVE, UNITY)
    x9 = astuple(TWO, ONE)
    x10 = canvas(EIGHT, x9)
    x11 = vconcat(x10, x8)
    x12 = asobject(x11)
    x13 = occurrences(x7, x12)
    x14 = lbind(shift, x12)
    x15 = mapply(x14, x13)
    x16 = fill(x7, TWO, x15)
    x17 = astuple(ONE, THREE)
    x18 = canvas(FIVE, x17)
    x19 = asobject(x18)
    x20 = occurrences(x16, x19)
    x21 = lbind(shift, x19)
    x22 = mapply(x21, x20)
    x23 = fill(x16, TWO, x22)
    x24 = hmirror(x11)
    x25 = asobject(x24)
    x26 = occurrences(x23, x25)
    x27 = lbind(shift, x25)
    x28 = mapply(x27, x26)
    x29 = fill(x23, TWO, x28)
    x30 = dmirror(x11)
    x31 = asobject(x30)
    x32 = occurrences(x29, x31)
    x33 = lbind(shift, x31)
    x34 = mapply(x33, x32)
    x35 = fill(x29, TWO, x34)
    x36 = vmirror(x30)
    x37 = asobject(x36)
    x38 = occurrences(x35, x37)
    x39 = lbind(shift, x37)
    x40 = mapply(x39, x38)
    O = fill(x35, TWO, x40)
    return O



def solve_68b16354_9d9215db(I):
    x1 = hmirror(I)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = initset(x1)
    x6 = chain(numcolors, lefthalf, tophalf)
    x7 = insert(x2, x5)
    x8 = insert(x3, x7)
    x9 = insert(x4, x8)
    x10 = argmax(x9, x6)
    x11 = vmirror(x10)
    x12 = papply(pair, x10, x11)
    x13 = lbind(apply, maximum)
    x14 = apply(x13, x12)
    x15 = partition(x14)
    x16 = sizefilter(x15, FOUR)
    x17 = apply(llcorner, x16)
    x18 = apply(lrcorner, x16)
    x19 = combine(x17, x18)
    x20 = cover(x14, x19)
    x21 = tojvec(NEG_TWO)
    x22 = rbind(add, ZERO_BY_TWO)
    x23 = rbind(add, x21)
    x24 = compose(x22, ulcorner)
    x25 = compose(x23, urcorner)
    x26 = fork(connect, x24, x25)
    x27 = compose(even, last)
    x28 = rbind(sfilter, x27)
    x29 = chain(normalize, x28, x26)
    x30 = fork(shift, x29, x24)
    x31 = fork(recolor, color, x30)
    x32 = mapply(x31, x16)
    x33 = paint(x20, x32)
    x34 = rot90(x33)
    x35 = rot180(x33)
    x36 = rot270(x33)
    x37 = papply(pair, x33, x34)
    x38 = apply(x13, x37)
    x39 = papply(pair, x38, x35)
    x40 = apply(x13, x39)
    x41 = papply(pair, x40, x36)
    O = apply(x13, x41)
    return O



def solve_68b16354_264363fd(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = argmin(x2, size)
    x4 = normalize(x3)
    x5 = height(x3)
    x6 = width(x3)
    x7 = equality(x5, FIVE)
    x8 = equality(x6, FIVE)
    x9 = astuple(x7, x8)
    x10 = add(UNITY, x9)
    x11 = invert(x10)
    x12 = center(x3)
    x13 = index(x1, x12)
    x14 = branch(x7, UP, RIGHT)
    x15 = add(x14, x12)
    x16 = index(x1, x15)
    x17 = astuple(x13, ORIGIN)
    x18 = initset(x17)
    x19 = cover(x1, x3)
    x20 = mostcolor(x19)
    x21 = ofcolor(x19, x20)
    x22 = occurrences(x19, x18)
    x23 = objects(x19, F, F, T)
    x24 = rbind(occurrences, x18)
    x25 = rbind(subgrid, x19)
    x26 = compose(x24, x25)
    x27 = lbind(mapply, vfrontier)
    x28 = lbind(mapply, hfrontier)
    x29 = compose(x27, x26)
    x30 = compose(x28, x26)
    x31 = branch(x7, x29, x30)
    x32 = branch(x8, x30, x29)
    x33 = fork(combine, x31, x32)
    x34 = lbind(recolor, x16)
    x35 = compose(x34, x33)
    x36 = fork(paint, x25, x35)
    x37 = compose(asobject, x36)
    x38 = fork(shift, x37, ulcorner)
    x39 = mapply(x38, x23)
    x40 = paint(x19, x39)
    x41 = shift(x4, x11)
    x42 = lbind(shift, x41)
    x43 = mapply(x42, x22)
    x44 = paint(x40, x43)
    O = fill(x44, x20, x21)
    return O



def solve_68b16354_7df24a62(I):
    x1 = hmirror(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = ofcolor(x1, ONE)
    x5 = ofcolor(x1, FOUR)
    x6 = ulcorner(x4)
    x7 = subgrid(x4, x1)
    x8 = rot90(x7)
    x9 = rot180(x7)
    x10 = rot270(x7)
    x11 = matcher(size, ZERO)
    x12 = rbind(ofcolor, ONE)
    x13 = compose(normalize, x12)
    x14 = rbind(ofcolor, FOUR)
    x15 = rbind(shift, x6)
    x16 = compose(x15, x14)
    x17 = lbind(subtract, x2)
    x18 = chain(increment, x17, height)
    x19 = lbind(subtract, x3)
    x20 = chain(increment, x19, width)
    x21 = rbind(interval, ONE)
    x22 = lbind(x21, ZERO)
    x23 = compose(x22, x18)
    x24 = compose(x22, x20)
    x25 = fork(product, x23, x24)
    x26 = rbind(shift, NEG_UNITY)
    x27 = lbind(lbind, shift)
    x28 = chain(x27, x26, x13)
    x29 = astuple(x7, x8)
    x30 = astuple(x9, x10)
    x31 = combine(x29, x30)
    x32 = apply(x16, x31)
    x33 = lbind(difference, x5)
    x34 = apply(x33, x32)
    x35 = apply(normalize, x32)
    x36 = apply(x25, x35)
    x37 = lbind(rbind, difference)
    x38 = apply(x27, x35)
    x39 = apply(x37, x34)
    x40 = papply(compose, x39, x38)
    x41 = lbind(compose, x11)
    x42 = apply(x41, x40)
    x43 = papply(sfilter, x36, x42)
    x44 = apply(x28, x31)
    x45 = mpapply(mapply, x44, x43)
    O = fill(x1, ONE, x45)
    return O



def solve_68b16354_f15e1fac(I):
    x1 = hmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = portrait(x2)
    x4 = branch(x3, identity, dmirror)
    x5 = x4(x1)
    x6 = leftmost(x2)
    x7 = equality(x6, ZERO)
    x8 = branch(x7, identity, vmirror)
    x9 = x8(x5)
    x10 = ofcolor(x9, EIGHT)
    x11 = uppermost(x10)
    x12 = equality(x11, ZERO)
    x13 = branch(x12, identity, hmirror)
    x14 = x13(x9)
    x15 = ofcolor(x14, EIGHT)
    x16 = ofcolor(x14, TWO)
    x17 = rbind(shoot, DOWN)
    x18 = mapply(x17, x15)
    x19 = height(x14)
    x20 = apply(first, x16)
    x21 = insert(ZERO, x20)
    x22 = insert(x19, x20)
    x23 = apply(decrement, x22)
    x24 = order(x21, identity)
    x25 = order(x23, identity)
    x26 = size(x16)
    x27 = increment(x26)
    x28 = interval(ZERO, x27, ONE)
    x29 = apply(tojvec, x28)
    x30 = pair(x24, x25)
    x31 = lbind(sfilter, x18)
    x32 = compose(first, last)
    x33 = chain(decrement, first, first)
    x34 = fork(greater, x32, x33)
    x35 = chain(increment, last, first)
    x36 = fork(greater, x35, x32)
    x37 = fork(both, x34, x36)
    x38 = lbind(lbind, astuple)
    x39 = lbind(compose, x37)
    x40 = chain(x31, x39, x38)
    x41 = apply(x40, x30)
    x42 = papply(shift, x41, x29)
    x43 = merge(x42)
    x44 = fill(x14, EIGHT, x43)
    x45 = chain(x4, x8, x13)
    O = x45(x44)
    return O



def solve_68b16354_234bbc79(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = rbind(other, FIVE)
    x4 = compose(x3, palette)
    x5 = fork(recolor, x4, identity)
    x6 = apply(x5, x2)
    x7 = order(x6, leftmost)
    x8 = compose(last, last)
    x9 = lbind(matcher, x8)
    x10 = compose(x9, leftmost)
    x11 = compose(x9, rightmost)
    x12 = fork(sfilter, identity, x10)
    x13 = fork(sfilter, identity, x11)
    x14 = compose(dneighbors, last)
    x15 = rbind(chain, x14)
    x16 = lbind(x15, size)
    x17 = lbind(rbind, intersection)
    x18 = chain(x16, x17, toindices)
    x19 = fork(argmin, x12, x18)
    x20 = fork(argmin, x13, x18)
    x21 = compose(last, x19)
    x22 = compose(last, x20)
    x23 = astuple(ZERO, DOWN_LEFT)
    x24 = initset(x23)
    x25 = lbind(add, RIGHT)
    x26 = chain(x21, first, last)
    x27 = compose(x22, first)
    x28 = fork(subtract, x27, x26)
    x29 = compose(first, last)
    x30 = compose(x25, x28)
    x31 = fork(shift, x29, x30)
    x32 = fork(combine, first, x31)
    x33 = fork(remove, x29, last)
    x34 = fork(astuple, x32, x33)
    x35 = size(x2)
    x36 = power(x34, x35)
    x37 = astuple(x24, x7)
    x38 = x36(x37)
    x39 = first(x38)
    x40 = width(x39)
    x41 = decrement(x40)
    x42 = astuple(THREE, x41)
    x43 = canvas(ZERO, x42)
    O = paint(x43, x39)
    return O



def solve_68b16354_22233c11(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = rbind(upscale, TWO)
    x4 = chain(invert, halve, shape)
    x5 = fork(combine, hfrontier, vfrontier)
    x6 = compose(x3, vmirror)
    x7 = fork(shift, x6, x4)
    x8 = compose(toindices, x7)
    x9 = lbind(mapply, x5)
    x10 = compose(x9, toindices)
    x11 = fork(difference, x8, x10)
    x12 = mapply(x11, x2)
    O = fill(x1, EIGHT, x12)
    return O



def solve_68b16354_a64e4611(I):
    x1 = hmirror(I)
    x2 = asindices(x1)
    x3 = fork(product, identity, identity)
    x4 = lbind(canvas, ZERO)
    x5 = compose(asobject, x4)
    x6 = fork(multiply, first, last)
    x7 = compose(positive, size)
    x8 = lbind(lbind, shift)
    x9 = rbind(fork, x6)
    x10 = lbind(x9, multiply)
    x11 = lbind(chain, x7)
    x12 = rbind(x11, x5)
    x13 = lbind(lbind, occurrences)
    x14 = chain(x10, x12, x13)
    x15 = compose(x3, first)
    x16 = compose(x14, last)
    x17 = fork(argmax, x15, x16)
    x18 = chain(x8, x5, x17)
    x19 = compose(x5, x17)
    x20 = fork(occurrences, last, x19)
    x21 = fork(mapply, x18, x20)
    x22 = multiply(TWO, SIX)
    x23 = interval(THREE, x22, ONE)
    x24 = astuple(x23, x1)
    x25 = x21(x24)
    x26 = fill(x1, THREE, x25)
    x27 = interval(THREE, TEN, ONE)
    x28 = astuple(x27, x26)
    x29 = x21(x28)
    x30 = fill(x26, THREE, x29)
    x31 = astuple(x27, x30)
    x32 = x21(x31)
    x33 = fill(x30, THREE, x32)
    x34 = rbind(toobject, x33)
    x35 = rbind(colorcount, THREE)
    x36 = chain(x35, x34, neighbors)
    x37 = matcher(x36, EIGHT)
    x38 = sfilter(x2, x37)
    x39 = fill(x1, THREE, x38)
    x40 = ofcolor(x39, ZERO)
    x41 = rbind(bordering, x39)
    x42 = compose(x41, initset)
    x43 = lbind(contained, THREE)
    x44 = rbind(toobject, x39)
    x45 = chain(x43, palette, x44)
    x46 = compose(x45, dneighbors)
    x47 = fork(both, x46, x42)
    x48 = sfilter(x40, x47)
    O = fill(x39, THREE, x48)
    return O



def solve_68b16354_97a05b5b(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = rbind(greater, ONE)
    x6 = compose(x5, numcolors)
    x7 = sfilter(x2, x6)
    x8 = lbind(rbind, subtract)
    x9 = switch(x4, TWO, ZERO)
    x10 = lbind(occurrences, x9)
    x11 = lbind(lbind, shift)
    x12 = compose(x8, ulcorner)
    x13 = matcher(first, TWO)
    x14 = compose(flip, x13)
    x15 = rbind(sfilter, x13)
    x16 = rbind(sfilter, x14)
    x17 = lbind(recolor, ZERO)
    x18 = compose(x17, x16)
    x19 = fork(combine, x18, x15)
    x20 = chain(x12, x19, normalize)
    x21 = objects(x9, T, T, T)
    x22 = apply(toindices, x21)
    x23 = chain(x10, x19, normalize)
    x24 = rbind(colorcount, TWO)
    x25 = lbind(sfilter, x22)
    x26 = chain(size, first, x25)
    x27 = compose(positive, size)
    x28 = lbind(lbind, contained)
    x29 = chain(x27, x25, x28)
    x30 = compose(x26, x28)
    x31 = rbind(sfilter, x29)
    x32 = compose(x31, x23)
    x33 = lbind(rbind, equality)
    x34 = rbind(compose, x30)
    x35 = chain(x34, x33, x24)
    x36 = fork(sfilter, x32, x35)
    x37 = fork(apply, x20, x36)
    x38 = compose(x11, normalize)
    x39 = fork(mapply, x38, x37)
    x40 = astuple(cmirror, dmirror)
    x41 = astuple(hmirror, vmirror)
    x42 = combine(x40, x41)
    x43 = product(x42, x42)
    x44 = fork(compose, first, last)
    x45 = apply(x44, x43)
    x46 = lbind(rapply, x45)
    x47 = mapply(x46, x7)
    x48 = mapply(x39, x47)
    x49 = paint(x4, x48)
    x50 = palette(x48)
    x51 = lbind(remove, TWO)
    x52 = x51(x50)
    x53 = chain(first, x51, palette)
    x54 = rbind(contained, x52)
    x55 = chain(flip, x54, x53)
    x56 = sfilter(x7, x55)
    x57 = fork(apply, x20, x23)
    x58 = fork(mapply, x38, x57)
    x59 = mapply(x46, x56)
    x60 = mapply(x58, x59)
    O = paint(x49, x60)
    return O



def solve_68b16354_3e980e27(I):
    x1 = hmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = astuple(TEN, TEN)
    x4 = invert(x3)
    x5 = astuple(TWO, x4)
    x6 = astuple(THREE, x4)
    x7 = initset(x5)
    x8 = insert(x6, x7)
    x9 = insert(x8, x2)
    x10 = lbind(contained, TWO)
    x11 = lbind(contained, THREE)
    x12 = compose(invert, ulcorner)
    x13 = lbind(compose, x12)
    x14 = lbind(rbind, sfilter)
    x15 = compose(x13, x14)
    x16 = rbind(compose, center)
    x17 = lbind(lbind, shift)
    x18 = x15(x10)
    x19 = x15(x11)
    x20 = fork(shift, identity, x18)
    x21 = fork(shift, identity, x19)
    x22 = compose(x10, palette)
    x23 = compose(x11, palette)
    x24 = sfilter(x9, x22)
    x25 = argmax(x24, size)
    x26 = remove(x25, x24)
    x27 = vmirror(x25)
    x28 = chain(x16, x17, x20)
    x29 = x28(x27)
    x30 = mapply(x29, x26)
    x31 = sfilter(x9, x23)
    x32 = argmax(x31, size)
    x33 = remove(x32, x31)
    x34 = chain(x16, x17, x21)
    x35 = x34(x32)
    x36 = mapply(x35, x33)
    x37 = combine(x30, x36)
    O = paint(x1, x37)
    return O



def solve_74dd1130_67a3c6ac(I):
    x1 = dmirror(I)
    O = vmirror(x1)
    return O



def solve_74dd1130_68b16354(I):
    x1 = dmirror(I)
    O = hmirror(x1)
    return O



def solve_74dd1130_3c9b0459(I):
    x1 = dmirror(I)
    O = rot180(x1)
    return O



def solve_74dd1130_6150a2bd(I):
    x1 = dmirror(I)
    O = rot180(x1)
    return O



def solve_74dd1130_9172f3a0(I):
    x1 = dmirror(I)
    O = upscale(x1, THREE)
    return O



def solve_74dd1130_9dfd6313(I):
    x1 = dmirror(I)
    O = dmirror(x1)
    return O



def solve_74dd1130_a416b8f3(I):
    x1 = dmirror(I)
    O = hconcat(x1, x1)
    return O



def solve_74dd1130_b1948b0a(I):
    x1 = dmirror(I)
    O = replace(x1, SIX, TWO)
    return O



def solve_74dd1130_c59eb873(I):
    x1 = dmirror(I)
    O = upscale(x1, TWO)
    return O



def solve_74dd1130_c8f0f002(I):
    x1 = dmirror(I)
    O = replace(x1, SEVEN, FIVE)
    return O



def solve_74dd1130_d10ecb37(I):
    x1 = dmirror(I)
    O = crop(x1, ORIGIN, TWO_BY_TWO)
    return O



def solve_74dd1130_d511f180(I):
    x1 = dmirror(I)
    O = switch(x1, FIVE, EIGHT)
    return O



def solve_74dd1130_ed36ccf7(I):
    x1 = dmirror(I)
    O = rot270(x1)
    return O



def solve_74dd1130_4c4377d9(I):
    x1 = dmirror(I)
    x2 = hmirror(x1)
    O = vconcat(x2, x1)
    return O



def solve_74dd1130_6d0aefbc(I):
    x1 = dmirror(I)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_74dd1130_6fa7a44f(I):
    x1 = dmirror(I)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_74dd1130_5614dbcf(I):
    x1 = dmirror(I)
    x2 = replace(x1, FIVE, ZERO)
    O = downscale(x2, THREE)
    return O



def solve_74dd1130_5bd6f4ac(I):
    x1 = dmirror(I)
    x2 = tojvec(SIX)
    O = crop(x1, x2, THREE_BY_THREE)
    return O



def solve_74dd1130_5582e5ca(I):
    x1 = dmirror(I)
    x2 = mostcolor(x1)
    O = canvas(x2, THREE_BY_THREE)
    return O



def solve_74dd1130_8be77c9e(I):
    x1 = dmirror(I)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_74dd1130_c9e6f938(I):
    x1 = dmirror(I)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_74dd1130_2dee498d(I):
    x1 = dmirror(I)
    x2 = hsplit(x1, THREE)
    O = first(x2)
    return O



def solve_74dd1130_1cf80156(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = subgrid(x3, x1)
    return O



def solve_74dd1130_32597951(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, EIGHT)
    x3 = delta(x2)
    O = fill(x1, THREE, x3)
    return O



def solve_74dd1130_25ff71a9(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = move(x1, x3, DOWN)
    return O



def solve_74dd1130_0b148d64(I):
    x1 = dmirror(I)
    x2 = partition(x1)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_74dd1130_1f85a75f(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_74dd1130_23b5c85d(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_74dd1130_ac0a08a4(I):
    x1 = dmirror(I)
    x2 = colorcount(x1, ZERO)
    x3 = subtract(NINE, x2)
    O = upscale(x1, x3)
    return O



def solve_74dd1130_be94b721(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_74dd1130_c909285e(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    O = subgrid(x3, x1)
    return O



def solve_74dd1130_f25ffba3(I):
    x1 = dmirror(I)
    x2 = bottomhalf(x1)
    x3 = hmirror(x2)
    O = vconcat(x3, x2)
    return O



def solve_74dd1130_c1d99e64(I):
    x1 = dmirror(I)
    x2 = frontiers(x1)
    x3 = merge(x2)
    O = fill(x1, TWO, x3)
    return O



def solve_74dd1130_b91ae062(I):
    x1 = dmirror(I)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    O = upscale(x1, x3)
    return O



def solve_74dd1130_3aa6fb7a(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = mapply(corners, x2)
    O = underfill(x1, ONE, x3)
    return O



def solve_74dd1130_7b7f7511(I):
    x1 = dmirror(I)
    x2 = portrait(x1)
    x3 = branch(x2, tophalf, lefthalf)
    O = x3(x1)
    return O



def solve_74dd1130_4258a5f9(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, FIVE)
    x3 = mapply(neighbors, x2)
    O = fill(x1, ONE, x3)
    return O



def solve_74dd1130_2dc579da(I):
    x1 = dmirror(I)
    x2 = vsplit(x1, TWO)
    x3 = rbind(hsplit, TWO)
    x4 = mapply(x3, x2)
    O = argmax(x4, numcolors)
    return O



def solve_74dd1130_28bf18c6(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = hconcat(x4, x4)
    return O



def solve_74dd1130_3af2c5a8(I):
    x1 = dmirror(I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_74dd1130_44f52bb0(I):
    x1 = dmirror(I)
    x2 = vmirror(x1)
    x3 = equality(x2, x1)
    x4 = branch(x3, ONE, SEVEN)
    O = canvas(x4, UNITY)
    return O



def solve_74dd1130_62c24649(I):
    x1 = dmirror(I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_74dd1130_67e8384a(I):
    x1 = dmirror(I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_74dd1130_7468f01a(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = vmirror(x4)
    return O



def solve_74dd1130_662c240a(I):
    x1 = dmirror(I)
    x2 = vsplit(x1, THREE)
    x3 = fork(equality, dmirror, identity)
    x4 = compose(flip, x3)
    O = extract(x2, x4)
    return O



def solve_74dd1130_42a50994(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = cover(x1, x4)
    return O



def solve_74dd1130_56ff96f3(I):
    x1 = dmirror(I)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = mapply(x3, x2)
    O = paint(x1, x4)
    return O



def solve_74dd1130_50cb2852(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = compose(backdrop, inbox)
    x4 = mapply(x3, x2)
    O = fill(x1, EIGHT, x4)
    return O



def solve_74dd1130_4347f46a(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(difference, toindices, box)
    x4 = mapply(x3, x2)
    O = fill(x1, ZERO, x4)
    return O



def solve_74dd1130_46f33fce(I):
    x1 = dmirror(I)
    x2 = rot180(x1)
    x3 = downscale(x2, TWO)
    x4 = rot180(x3)
    O = upscale(x4, FOUR)
    return O



def solve_74dd1130_a740d043(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    O = replace(x4, ONE, ZERO)
    return O



def solve_74dd1130_a79310a0(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = move(x1, x3, DOWN)
    O = replace(x4, EIGHT, TWO)
    return O



def solve_74dd1130_aabf363d(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, ZERO)
    x4 = leastcolor(x3)
    O = replace(x3, x4, x2)
    return O



def solve_74dd1130_ae4f1146(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = rbind(colorcount, ONE)
    x4 = argmax(x2, x3)
    O = subgrid(x4, x1)
    return O



def solve_74dd1130_b27ca6d3(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, THREE, x4)
    return O



def solve_74dd1130_ce22a75a(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = mapply(backdrop, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_74dd1130_dc1df850(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_74dd1130_f25fbde4(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = upscale(x4, TWO)
    return O



def solve_74dd1130_44d8ac46(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(delta, x2)
    x4 = mfilter(x3, square)
    O = fill(x1, TWO, x4)
    return O



def solve_74dd1130_1e0a9b12(I):
    x1 = dmirror(I)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = apply(x3, x2)
    O = rot90(x4)
    return O



def solve_74dd1130_0d3d703e(I):
    x1 = dmirror(I)
    x2 = switch(x1, THREE, FOUR)
    x3 = switch(x2, EIGHT, NINE)
    x4 = switch(x3, TWO, SIX)
    O = switch(x4, ONE, FIVE)
    return O



def solve_74dd1130_3618c87e(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = move(x1, x4, TWO_BY_ZERO)
    return O



def solve_74dd1130_1c786137(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, height)
    x4 = subgrid(x3, x1)
    O = trim(x4)
    return O



def solve_74dd1130_445eab21(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(multiply, height, width)
    x4 = argmax(x2, x3)
    x5 = color(x4)
    O = canvas(x5, TWO_BY_TWO)
    return O



def solve_74dd1130_6f8cd79b(I):
    x1 = dmirror(I)
    x2 = asindices(x1)
    x3 = apply(initset, x2)
    x4 = rbind(bordering, x1)
    x5 = mfilter(x3, x4)
    O = fill(x1, EIGHT, x5)
    return O



def solve_74dd1130_2013d3e2(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = lefthalf(x4)
    O = tophalf(x5)
    return O



def solve_74dd1130_41e4d17e(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = mapply(x4, x2)
    O = underfill(x1, SIX, x5)
    return O



def solve_74dd1130_9565186b(I):
    x1 = dmirror(I)
    x2 = shape(x1)
    x3 = objects(x1, T, F, F)
    x4 = argmax(x3, size)
    x5 = canvas(FIVE, x2)
    O = paint(x5, x4)
    return O



def solve_74dd1130_aedd82e4(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, TWO)
    x4 = sizefilter(x3, ONE)
    x5 = merge(x4)
    O = fill(x1, ONE, x5)
    return O



def solve_74dd1130_bb43febb(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, FIVE)
    x4 = compose(backdrop, inbox)
    x5 = mapply(x4, x3)
    O = fill(x1, TWO, x5)
    return O



def solve_74dd1130_e98196ab(I):
    x1 = dmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = objects(x2, T, F, T)
    x5 = merge(x4)
    O = paint(x3, x5)
    return O



def solve_74dd1130_f76d97a5(I):
    x1 = dmirror(I)
    x2 = palette(x1)
    x3 = first(x2)
    x4 = last(x2)
    x5 = switch(x1, x3, x4)
    O = replace(x5, FIVE, ZERO)
    return O



def solve_74dd1130_ce9e57f2(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(connect, ulcorner, centerofmass)
    x4 = mapply(x3, x2)
    x5 = fill(x1, EIGHT, x4)
    O = switch(x5, EIGHT, TWO)
    return O



def solve_74dd1130_22eb0ac0(I):
    x1 = dmirror(I)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    O = paint(x1, x5)
    return O



def solve_74dd1130_9f236235(I):
    x1 = dmirror(I)
    x2 = compress(x1)
    x3 = objects(x1, T, F, F)
    x4 = vmirror(x2)
    x5 = valmin(x3, width)
    O = downscale(x4, x5)
    return O



def solve_74dd1130_a699fb00(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, RIGHT)
    x4 = shift(x2, LEFT)
    x5 = intersection(x3, x4)
    O = fill(x1, TWO, x5)
    return O



def solve_74dd1130_46442a0e(I):
    x1 = dmirror(I)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_74dd1130_7fe24cdd(I):
    x1 = dmirror(I)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_74dd1130_0ca9ddb6(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x3)
    x6 = fill(x1, SEVEN, x4)
    O = fill(x6, FOUR, x5)
    return O



def solve_74dd1130_543a7ed5(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, SIX)
    x4 = mapply(outbox, x3)
    x5 = fill(x1, THREE, x4)
    x6 = mapply(delta, x3)
    O = fill(x5, FOUR, x6)
    return O



def solve_74dd1130_0520fde7(I):
    x1 = dmirror(I)
    x2 = vmirror(x1)
    x3 = lefthalf(x2)
    x4 = righthalf(x2)
    x5 = vmirror(x4)
    x6 = cellwise(x3, x5, ZERO)
    O = replace(x6, ONE, TWO)
    return O



def solve_74dd1130_dae9d2b5(I):
    x1 = dmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, FOUR)
    x5 = ofcolor(x3, THREE)
    x6 = combine(x4, x5)
    O = fill(x2, SIX, x6)
    return O



def solve_74dd1130_8d5021e8(I):
    x1 = dmirror(I)
    x2 = vmirror(x1)
    x3 = hconcat(x2, x1)
    x4 = hmirror(x3)
    x5 = vconcat(x3, x4)
    x6 = vconcat(x5, x3)
    O = hmirror(x6)
    return O



def solve_74dd1130_b60334d2(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, FIVE)
    x3 = replace(x1, FIVE, ZERO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x2)
    x6 = fill(x3, ONE, x4)
    O = fill(x6, FIVE, x5)
    return O



def solve_74dd1130_b94a9452(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = leastcolor(x4)
    x6 = mostcolor(x4)
    O = switch(x4, x5, x6)
    return O



def solve_74dd1130_d037b0a7(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, DOWN)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    O = paint(x1, x6)
    return O



def solve_74dd1130_d0f5fe59(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = astuple(x3, x3)
    x5 = canvas(ZERO, x4)
    x6 = shoot(ORIGIN, UNITY)
    O = fill(x5, EIGHT, x6)
    return O



def solve_74dd1130_e3497940(I):
    x1 = dmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = vmirror(x3)
    x5 = objects(x4, T, F, T)
    x6 = merge(x5)
    O = paint(x2, x6)
    return O



def solve_74dd1130_e9afcf9a(I):
    x1 = dmirror(I)
    x2 = astuple(TWO, ONE)
    x3 = crop(x1, ORIGIN, x2)
    x4 = hmirror(x3)
    x5 = hconcat(x3, x4)
    x6 = hconcat(x5, x5)
    O = hconcat(x6, x5)
    return O



def solve_74dd1130_d406998b(I):
    x1 = dmirror(I)
    x2 = vmirror(x1)
    x3 = ofcolor(x2, FIVE)
    x4 = compose(even, last)
    x5 = sfilter(x3, x4)
    x6 = fill(x2, THREE, x5)
    O = vmirror(x6)
    return O



def solve_74dd1130_5117e062(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = matcher(numcolors, TWO)
    x4 = extract(x2, x3)
    x5 = subgrid(x4, x1)
    x6 = mostcolor(x4)
    O = replace(x5, EIGHT, x6)
    return O



def solve_74dd1130_3906de3d(I):
    x1 = dmirror(I)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = switch(x2, ONE, TWO)
    x5 = apply(x3, x4)
    x6 = switch(x5, ONE, TWO)
    O = cmirror(x6)
    return O



def solve_74dd1130_00d62c1b(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, FOUR, x6)
    return O



def solve_74dd1130_7b6016b9(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = rbind(bordering, x1)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x4)
    x6 = fill(x1, TWO, x5)
    O = replace(x6, ZERO, THREE)
    return O



def solve_74dd1130_67385a82(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, THREE)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = merge(x5)
    O = fill(x1, EIGHT, x6)
    return O



def solve_74dd1130_a5313dff(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, ONE, x6)
    return O



def solve_74dd1130_ea32f347(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, FIVE, FOUR)
    x4 = argmin(x2, size)
    x5 = argmax(x2, size)
    x6 = fill(x3, ONE, x5)
    O = fill(x6, TWO, x4)
    return O



def solve_74dd1130_d631b094(I):
    x1 = dmirror(I)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = ofcolor(x1, x3)
    x5 = size(x4)
    x6 = astuple(ONE, x5)
    O = canvas(x3, x6)
    return O



def solve_74dd1130_10fcaaa3(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = vconcat(x3, x3)
    x5 = ofcolor(x4, x2)
    x6 = mapply(ineighbors, x5)
    O = underfill(x4, EIGHT, x6)
    return O



def solve_74dd1130_007bbfb7(I):
    x1 = dmirror(I)
    x2 = hupscale(x1, THREE)
    x3 = vupscale(x2, THREE)
    x4 = hconcat(x1, x1)
    x5 = hconcat(x4, x1)
    x6 = vconcat(x5, x5)
    x7 = vconcat(x6, x5)
    O = cellwise(x3, x7, ZERO)
    return O



def solve_74dd1130_496994bd(I):
    x1 = dmirror(I)
    x2 = width(x1)
    x3 = height(x1)
    x4 = halve(x3)
    x5 = astuple(x4, x2)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    O = vconcat(x6, x7)
    return O



def solve_74dd1130_1f876c06(I):
    x1 = dmirror(I)
    x2 = fgpartition(x1)
    x3 = compose(last, first)
    x4 = power(last, TWO)
    x5 = fork(connect, x3, x4)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_74dd1130_39a8645d(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = matcher(color, x5)
    x7 = extract(x2, x6)
    O = subgrid(x7, x1)
    return O



def solve_74dd1130_1b2d62fb(I):
    x1 = dmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = replace(x2, NINE, ZERO)
    O = fill(x7, EIGHT, x6)
    return O



def solve_74dd1130_90c28cc7(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = dedupe(x4)
    x6 = rot90(x5)
    x7 = dedupe(x6)
    O = rot270(x7)
    return O



def solve_74dd1130_b6afb2da(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = replace(x1, FIVE, TWO)
    x4 = colorfilter(x2, FIVE)
    x5 = mapply(box, x4)
    x6 = fill(x3, FOUR, x5)
    x7 = mapply(corners, x4)
    O = fill(x6, ONE, x7)
    return O



def solve_74dd1130_b9b7f026(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = argmin(x2, size)
    x4 = rbind(adjacent, x3)
    x5 = remove(x3, x2)
    x6 = extract(x5, x4)
    x7 = color(x6)
    O = canvas(x7, UNITY)
    return O



def solve_74dd1130_ba97ae07(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = ofcolor(x1, x5)
    x7 = backdrop(x6)
    O = fill(x1, x5, x7)
    return O



def solve_74dd1130_c9f8e694(I):
    x1 = dmirror(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = ofcolor(x1, ZERO)
    x5 = astuple(x2, ONE)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hupscale(x6, x3)
    O = fill(x7, ZERO, x4)
    return O



def solve_74dd1130_d23f8c26(I):
    x1 = dmirror(I)
    x2 = asindices(x1)
    x3 = width(x1)
    x4 = halve(x3)
    x5 = matcher(last, x4)
    x6 = compose(flip, x5)
    x7 = sfilter(x2, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_74dd1130_d5d6de2d(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sfilter(x2, square)
    x4 = difference(x2, x3)
    x5 = compose(backdrop, inbox)
    x6 = mapply(x5, x4)
    x7 = replace(x1, TWO, ZERO)
    O = fill(x7, THREE, x6)
    return O



def solve_74dd1130_dbc1a6ce(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_74dd1130_ded97339(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, EIGHT)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_74dd1130_ea786f4a(I):
    x1 = dmirror(I)
    x2 = width(x1)
    x3 = shoot(ORIGIN, UNITY)
    x4 = decrement(x2)
    x5 = tojvec(x4)
    x6 = shoot(x5, DOWN_LEFT)
    x7 = combine(x3, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_74dd1130_08ed6ac7(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = order(x2, height)
    x5 = size(x3)
    x6 = interval(x5, ZERO, NEG_ONE)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_74dd1130_40853293(I):
    x1 = dmirror(I)
    x2 = partition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    x6 = mfilter(x4, vline)
    x7 = paint(x1, x5)
    O = paint(x7, x6)
    return O



def solve_74dd1130_5521c0d9(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = cover(x1, x3)
    x5 = chain(toivec, invert, height)
    x6 = fork(shift, identity, x5)
    x7 = mapply(x6, x2)
    O = paint(x4, x7)
    return O



def solve_74dd1130_f8ff0b80(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = rbind(canvas, UNITY)
    x6 = apply(x5, x4)
    x7 = merge(x6)
    O = hmirror(x7)
    return O



def solve_74dd1130_85c4e7cd(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = compose(invert, size)
    x4 = order(x2, size)
    x5 = order(x2, x3)
    x6 = apply(color, x5)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_74dd1130_d2abd087(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = matcher(size, SIX)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x3)
    x6 = mfilter(x2, x4)
    x7 = fill(x1, TWO, x5)
    O = fill(x7, ONE, x6)
    return O



def solve_74dd1130_017c7c7b(I):
    x1 = dmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = equality(x2, x3)
    x5 = crop(x1, TWO_BY_ZERO, THREE_BY_THREE)
    x6 = branch(x4, x3, x5)
    x7 = vconcat(x1, x6)
    O = replace(x7, ONE, TWO)
    return O



def solve_74dd1130_363442ee(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = asobject(x3)
    x5 = lbind(shift, x4)
    x6 = compose(x5, decrement)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_74dd1130_5168d44c(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, THREE)
    x3 = height(x2)
    x4 = equality(x3, ONE)
    x5 = branch(x4, ZERO_BY_TWO, TWO_BY_ZERO)
    x6 = ofcolor(x1, TWO)
    x7 = recolor(TWO, x6)
    O = move(x1, x7, x5)
    return O



def solve_74dd1130_d9fac9be(I):
    x1 = dmirror(I)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = color(x4)
    x6 = remove(ZERO, x2)
    x7 = other(x6, x5)
    O = canvas(x7, UNITY)
    return O



def solve_74dd1130_e50d258f(I):
    x1 = dmirror(I)
    x2 = width(x1)
    x3 = astuple(NINE, x2)
    x4 = canvas(ZERO, x3)
    x5 = vconcat(x1, x4)
    x6 = objects(x5, F, F, T)
    x7 = rbind(colorcount, TWO)
    x8 = argmax(x6, x7)
    O = subgrid(x8, x1)
    return O



def solve_74dd1130_810b9b61(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = apply(toindices, x2)
    x4 = fork(either, vline, hline)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = fork(equality, identity, box)
    x8 = mfilter(x6, x7)
    O = fill(x1, THREE, x8)
    return O



def solve_74dd1130_54d82841(I):
    x1 = dmirror(I)
    x2 = height(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(last, center)
    x5 = apply(x4, x3)
    x6 = decrement(x2)
    x7 = lbind(astuple, x6)
    x8 = apply(x7, x5)
    O = fill(x1, FOUR, x8)
    return O



def solve_74dd1130_60b61512(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = mapply(delta, x2)
    O = fill(x1, SEVEN, x3)
    return O



def solve_74dd1130_25d8a9c8(I):
    x1 = dmirror(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, THREE)
    x5 = mfilter(x4, hline)
    x6 = toindices(x5)
    x7 = difference(x2, x6)
    x8 = fill(x1, FIVE, x6)
    O = fill(x8, ZERO, x7)
    return O



def solve_74dd1130_239be575(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = lbind(contained, TWO)
    x4 = compose(x3, palette)
    x5 = sfilter(x2, x4)
    x6 = size(x5)
    x7 = greater(x6, ONE)
    x8 = branch(x7, ZERO, EIGHT)
    O = canvas(x8, UNITY)
    return O



def solve_74dd1130_6430c8c4(I):
    x1 = dmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(FOUR, FOUR)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, THREE, x7)
    return O



def solve_74dd1130_94f9d214(I):
    x1 = dmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = astuple(FOUR, FOUR)
    x7 = canvas(ZERO, x6)
    x8 = intersection(x4, x5)
    O = fill(x7, TWO, x8)
    return O



def solve_74dd1130_ce4f8723(I):
    x1 = dmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = astuple(FOUR, FOUR)
    x8 = canvas(THREE, x7)
    O = fill(x8, ZERO, x6)
    return O



def solve_74dd1130_d13f3404(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, UNITY)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = astuple(SIX, SIX)
    x8 = canvas(ZERO, x7)
    O = paint(x8, x6)
    return O



def solve_74dd1130_f2829549(I):
    x1 = dmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = shape(x2)
    x8 = canvas(ZERO, x7)
    O = fill(x8, THREE, x6)
    return O



def solve_74dd1130_fafffa47(I):
    x1 = dmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = shape(x3)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, TWO, x7)
    return O



def solve_74dd1130_fcb5c309(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = colorfilter(x3, x2)
    x5 = difference(x3, x4)
    x6 = argmax(x5, size)
    x7 = color(x6)
    x8 = subgrid(x6, x1)
    O = replace(x8, x7, x2)
    return O



def solve_74dd1130_e76a88a6(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = remove(x3, x2)
    x6 = apply(ulcorner, x5)
    x7 = lbind(shift, x4)
    x8 = mapply(x7, x6)
    O = paint(x1, x8)
    return O



def solve_74dd1130_7f4411dc(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = rbind(difference, x3)
    x5 = rbind(greater, TWO)
    x6 = chain(x5, size, x4)
    x7 = compose(x6, dneighbors)
    x8 = sfilter(x3, x7)
    O = fill(x1, ZERO, x8)
    return O



def solve_74dd1130_b230c067(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(normalize, x3)
    x5 = leastcommon(x4)
    x6 = matcher(normalize, x5)
    x7 = extract(x2, x6)
    x8 = replace(x1, EIGHT, ONE)
    O = fill(x8, TWO, x7)
    return O



def solve_74dd1130_e8593010(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = sizefilter(x2, TWO)
    x5 = merge(x3)
    x6 = fill(x1, THREE, x5)
    x7 = merge(x4)
    x8 = fill(x6, TWO, x7)
    O = replace(x8, ZERO, ONE)
    return O



def solve_74dd1130_6d75e8bb(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = ulcorner(x3)
    x5 = subgrid(x3, x1)
    x6 = replace(x5, ZERO, TWO)
    x7 = asobject(x6)
    x8 = shift(x7, x4)
    O = paint(x1, x8)
    return O



def solve_74dd1130_1190e5a7(I):
    x1 = dmirror(I)
    x2 = mostcolor(x1)
    x3 = frontiers(x1)
    x4 = sfilter(x3, vline)
    x5 = difference(x3, x4)
    x6 = astuple(x5, x4)
    x7 = apply(size, x6)
    x8 = increment(x7)
    O = canvas(x2, x8)
    return O



def solve_74dd1130_6e02f1e3(I):
    x1 = dmirror(I)
    x2 = numcolors(x1)
    x3 = canvas(ZERO, THREE_BY_THREE)
    x4 = equality(x2, THREE)
    x5 = equality(x2, TWO)
    x6 = branch(x4, TWO_BY_ZERO, ORIGIN)
    x7 = branch(x5, TWO_BY_TWO, ZERO_BY_TWO)
    x8 = connect(x6, x7)
    O = fill(x3, FIVE, x8)
    return O



def solve_74dd1130_a61f2674(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = replace(x1, FIVE, ZERO)
    x6 = recolor(ONE, x3)
    x7 = recolor(TWO, x4)
    x8 = combine(x6, x7)
    O = paint(x5, x8)
    return O



def solve_74dd1130_fcc82909(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = rbind(add, DOWN)
    x4 = compose(x3, llcorner)
    x5 = compose(toivec, numcolors)
    x6 = fork(add, lrcorner, x5)
    x7 = fork(astuple, x4, x6)
    x8 = compose(box, x7)
    x9 = mapply(x8, x2)
    O = fill(x1, THREE, x9)
    return O



def solve_74dd1130_72ca375d(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = rbind(subgrid, x1)
    x5 = apply(x4, x3)
    x6 = apply(vmirror, x5)
    x7 = papply(equality, x5, x6)
    x8 = pair(x5, x7)
    x9 = extract(x8, last)
    O = first(x9)
    return O



def solve_74dd1130_253bf280(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, EIGHT)
    x3 = prapply(connect, x2, x2)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = fork(either, vline, hline)
    x8 = mfilter(x6, x7)
    x9 = fill(x1, THREE, x8)
    O = fill(x9, EIGHT, x2)
    return O



def solve_74dd1130_1f642eb9(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = rbind(gravitate, x5)
    x7 = compose(crement, x6)
    x8 = fork(shift, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_74dd1130_31aa019c(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = first(x3)
    x5 = neighbors(x4)
    x6 = astuple(TEN, TEN)
    x7 = canvas(ZERO, x6)
    x8 = initset(x4)
    x9 = fill(x7, x2, x8)
    O = fill(x9, TWO, x5)
    return O



def solve_74dd1130_27a28665(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = valmax(x2, size)
    x4 = equality(x3, ONE)
    x5 = equality(x3, FOUR)
    x6 = equality(x3, FIVE)
    x7 = branch(x4, TWO, ONE)
    x8 = branch(x5, THREE, x7)
    x9 = branch(x6, SIX, x8)
    O = canvas(x9, UNITY)
    return O



def solve_74dd1130_7ddcd7ec(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = color(x5)
    x7 = lbind(position, x5)
    x8 = fork(shoot, center, x7)
    x9 = mapply(x8, x3)
    O = fill(x1, x6, x9)
    return O



def solve_74dd1130_3bd67248(I):
    x1 = dmirror(I)
    x2 = height(x1)
    x3 = decrement(x2)
    x4 = decrement(x3)
    x5 = astuple(x4, ONE)
    x6 = astuple(x3, ONE)
    x7 = shoot(x5, UP_RIGHT)
    x8 = shoot(x6, RIGHT)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_74dd1130_73251a56(I):
    x1 = dmirror(I)
    x2 = dmirror(x1)
    x3 = papply(pair, x1, x2)
    x4 = lbind(apply, maximum)
    x5 = apply(x4, x3)
    x6 = mostcolor(x5)
    x7 = replace(x5, ZERO, x6)
    x8 = index(x7, ORIGIN)
    x9 = shoot(ORIGIN, UNITY)
    O = fill(x7, x8, x9)
    return O



def solve_74dd1130_25d487eb(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = ofcolor(x1, x2)
    x5 = center(x4)
    x6 = merge(x3)
    x7 = center(x6)
    x8 = subtract(x7, x5)
    x9 = shoot(x5, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_74dd1130_8f2ea7aa(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    O = cellwise(x5, x9, ZERO)
    return O



def solve_74dd1130_b8825c91(I):
    x1 = dmirror(I)
    x2 = replace(x1, FOUR, ZERO)
    x3 = dmirror(x2)
    x4 = papply(pair, x2, x3)
    x5 = lbind(apply, maximum)
    x6 = apply(x5, x4)
    x7 = cmirror(x6)
    x8 = papply(pair, x6, x7)
    x9 = apply(x5, x8)
    O = cmirror(x9)
    return O



def solve_74dd1130_cce03e0d(I):
    x1 = dmirror(I)
    x2 = upscale(x1, THREE)
    x3 = hconcat(x1, x1)
    x4 = hconcat(x3, x1)
    x5 = vconcat(x4, x4)
    x6 = vconcat(x5, x4)
    x7 = ofcolor(x2, ZERO)
    x8 = ofcolor(x2, ONE)
    x9 = combine(x7, x8)
    O = fill(x6, ZERO, x9)
    return O



def solve_74dd1130_d364b489(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, DOWN)
    x4 = fill(x1, EIGHT, x3)
    x5 = shift(x2, UP)
    x6 = fill(x4, TWO, x5)
    x7 = shift(x2, RIGHT)
    x8 = fill(x6, SIX, x7)
    x9 = shift(x2, LEFT)
    O = fill(x8, SEVEN, x9)
    return O



def solve_74dd1130_a5f85a15(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = interval(ONE, NINE, ONE)
    x4 = apply(double, x3)
    x5 = apply(decrement, x4)
    x6 = papply(astuple, x5, x5)
    x7 = apply(ulcorner, x2)
    x8 = lbind(shift, x6)
    x9 = mapply(x8, x7)
    O = fill(x1, FOUR, x9)
    return O



def solve_74dd1130_3ac3eb23(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = chain(ineighbors, last, first)
    x4 = fork(recolor, color, x3)
    x5 = mapply(x4, x2)
    x6 = paint(x1, x5)
    x7 = vsplit(x6, THREE)
    x8 = first(x7)
    x9 = vconcat(x8, x8)
    O = vconcat(x8, x9)
    return O



def solve_74dd1130_22168020(I):
    x1 = dmirror(I)
    x2 = palette(x1)
    x3 = remove(ZERO, x2)
    x4 = lbind(ofcolor, x1)
    x5 = lbind(prapply, connect)
    x6 = fork(x5, x4, x4)
    x7 = compose(merge, x6)
    x8 = fork(recolor, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_74dd1130_6e82a1ae(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sizefilter, x2)
    x4 = compose(merge, x3)
    x5 = x4(TWO)
    x6 = x4(THREE)
    x7 = x4(FOUR)
    x8 = fill(x1, THREE, x5)
    x9 = fill(x8, TWO, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_74dd1130_868de0fa(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = sfilter(x2, square)
    x4 = compose(even, height)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = merge(x5)
    x8 = merge(x6)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, SEVEN, x8)
    return O



def solve_74dd1130_681b3aeb(I):
    x1 = dmirror(I)
    x2 = rot270(x1)
    x3 = objects(x2, T, F, T)
    x4 = argmax(x3, size)
    x5 = argmin(x3, size)
    x6 = color(x5)
    x7 = canvas(x6, THREE_BY_THREE)
    x8 = normalize(x4)
    x9 = paint(x7, x8)
    O = rot90(x9)
    return O



def solve_74dd1130_8e5a5113(I):
    x1 = dmirror(I)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = rot90(x2)
    x4 = rot180(x2)
    x5 = astuple(x3, x4)
    x6 = astuple(FOUR, EIGHT)
    x7 = apply(tojvec, x6)
    x8 = apply(asobject, x5)
    x9 = mpapply(shift, x8, x7)
    O = paint(x1, x9)
    return O



def solve_74dd1130_025d127b(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(color, x2)
    x4 = merge(x2)
    x5 = lbind(colorfilter, x2)
    x6 = rbind(argmax, rightmost)
    x7 = compose(x6, x5)
    x8 = mapply(x7, x3)
    x9 = difference(x4, x8)
    O = move(x1, x9, RIGHT)
    return O



def solve_74dd1130_2281f1f4(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, FIVE)
    x3 = product(x2, x2)
    x4 = power(first, TWO)
    x5 = power(last, TWO)
    x6 = fork(astuple, x4, x5)
    x7 = apply(x6, x3)
    x8 = urcorner(x2)
    x9 = remove(x8, x7)
    O = underfill(x1, TWO, x9)
    return O



def solve_74dd1130_cf98881b(I):
    x1 = dmirror(I)
    x2 = hsplit(x1, THREE)
    x3 = first(x2)
    x4 = remove(x3, x2)
    x5 = first(x4)
    x6 = last(x4)
    x7 = ofcolor(x5, NINE)
    x8 = ofcolor(x3, FOUR)
    x9 = fill(x6, NINE, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_74dd1130_bda2d7a6(I):
    x1 = dmirror(I)
    x2 = partition(x1)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = last(x3)
    x6 = remove(x5, x3)
    x7 = repeat(x5, ONE)
    x8 = combine(x7, x6)
    x9 = mpapply(recolor, x4, x8)
    O = paint(x1, x9)
    return O



def solve_74dd1130_6455b5f5(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = argmax(x2, size)
    x5 = valmin(x2, size)
    x6 = sizefilter(x3, x5)
    x7 = recolor(ONE, x4)
    x8 = merge(x6)
    x9 = paint(x1, x7)
    O = fill(x9, EIGHT, x8)
    return O



def solve_74dd1130_b8cdaf2b(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = shift(x3, UP)
    x5 = ulcorner(x4)
    x6 = urcorner(x4)
    x7 = shoot(x5, NEG_UNITY)
    x8 = shoot(x6, UP_RIGHT)
    x9 = combine(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_74dd1130_bd4472b8(I):
    x1 = dmirror(I)
    x2 = width(x1)
    x3 = astuple(TWO, x2)
    x4 = crop(x1, ORIGIN, x3)
    x5 = tophalf(x4)
    x6 = dmirror(x5)
    x7 = hupscale(x6, x2)
    x8 = repeat(x7, TWO)
    x9 = merge(x8)
    O = vconcat(x4, x9)
    return O



def solve_74dd1130_4be741c5(I):
    x1 = dmirror(I)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = branch(x2, height, width)
    x5 = x4(x1)
    x6 = astuple(ONE, x5)
    x7 = x3(x1)
    x8 = crop(x7, ORIGIN, x6)
    x9 = apply(dedupe, x8)
    O = x3(x9)
    return O



def solve_74dd1130_bbc9ae5d(I):
    x1 = dmirror(I)
    x2 = width(x1)
    x3 = palette(x1)
    x4 = halve(x2)
    x5 = vupscale(x1, x4)
    x6 = rbind(shoot, UNITY)
    x7 = other(x3, ZERO)
    x8 = ofcolor(x5, x7)
    x9 = mapply(x6, x8)
    O = fill(x5, x7, x9)
    return O



def solve_74dd1130_d90796e8(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = lbind(contained, TWO)
    x5 = compose(x4, palette)
    x6 = mfilter(x3, x5)
    x7 = cover(x1, x6)
    x8 = matcher(first, THREE)
    x9 = sfilter(x6, x8)
    O = fill(x7, EIGHT, x9)
    return O



def solve_74dd1130_2c608aff(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = toindices(x4)
    x6 = ofcolor(x1, x2)
    x7 = prapply(connect, x5, x6)
    x8 = fork(either, vline, hline)
    x9 = mfilter(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_74dd1130_f8b3ba0a(I):
    x1 = dmirror(I)
    x2 = compress(x1)
    x3 = astuple(THREE, ONE)
    x4 = palette(x2)
    x5 = lbind(colorcount, x2)
    x6 = compose(invert, x5)
    x7 = order(x4, x6)
    x8 = rbind(canvas, UNITY)
    x9 = apply(x8, x7)
    x10 = merge(x9)
    O = crop(x10, DOWN, x3)
    return O



def solve_74dd1130_80af3007(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    x10 = cellwise(x5, x9, ZERO)
    O = downscale(x10, THREE)
    return O



def solve_74dd1130_83302e8f(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = sfilter(x3, square)
    x5 = difference(x3, x4)
    x6 = merge(x4)
    x7 = recolor(THREE, x6)
    x8 = merge(x5)
    x9 = recolor(FOUR, x8)
    x10 = paint(x1, x7)
    O = paint(x10, x9)
    return O



def solve_74dd1130_1fad071e(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, ONE)
    x4 = sizefilter(x3, FOUR)
    x5 = size(x4)
    x6 = subtract(FIVE, x5)
    x7 = astuple(ONE, x5)
    x8 = canvas(ONE, x7)
    x9 = astuple(ONE, x6)
    x10 = canvas(ZERO, x9)
    O = hconcat(x8, x10)
    return O



def solve_74dd1130_11852cab(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = hmirror(x3)
    x5 = vmirror(x3)
    x6 = dmirror(x3)
    x7 = cmirror(x3)
    x8 = paint(x1, x4)
    x9 = paint(x8, x5)
    x10 = paint(x9, x6)
    O = paint(x10, x7)
    return O



def solve_74dd1130_3428a4f5(I):
    x1 = dmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(SIX, FIVE)
    x5 = ofcolor(x2, TWO)
    x6 = ofcolor(x3, TWO)
    x7 = combine(x5, x6)
    x8 = intersection(x5, x6)
    x9 = difference(x7, x8)
    x10 = canvas(ZERO, x4)
    O = fill(x10, THREE, x9)
    return O



def solve_74dd1130_178fcbfb(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(vfrontier, x3)
    x5 = fill(x1, TWO, x4)
    x6 = colorfilter(x2, TWO)
    x7 = difference(x2, x6)
    x8 = compose(hfrontier, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x7)
    O = paint(x5, x10)
    return O



def solve_74dd1130_54d9e175(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = compose(neighbors, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x3)
    x7 = paint(x1, x6)
    x8 = replace(x7, ONE, SIX)
    x9 = replace(x8, TWO, SEVEN)
    x10 = replace(x9, THREE, EIGHT)
    O = replace(x10, FOUR, NINE)
    return O



def solve_74dd1130_623ea044(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = center(x3)
    x5 = color(x3)
    x6 = astuple(UNITY, NEG_UNITY)
    x7 = astuple(UP_RIGHT, DOWN_LEFT)
    x8 = combine(x6, x7)
    x9 = lbind(shoot, x4)
    x10 = mapply(x9, x8)
    O = fill(x1, x5, x10)
    return O



def solve_74dd1130_794b24be(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = size(x2)
    x4 = decrement(x3)
    x5 = canvas(ZERO, THREE_BY_THREE)
    x6 = tojvec(x4)
    x7 = connect(ORIGIN, x6)
    x8 = equality(x3, FOUR)
    x9 = insert(UNITY, x7)
    x10 = branch(x8, x9, x7)
    O = fill(x5, TWO, x10)
    return O



def solve_74dd1130_88a62173(I):
    x1 = dmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = tophalf(x3)
    x6 = bottomhalf(x2)
    x7 = bottomhalf(x3)
    x8 = astuple(x4, x5)
    x9 = astuple(x6, x7)
    x10 = combine(x8, x9)
    O = leastcommon(x10)
    return O



def solve_74dd1130_890034e9(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = inbox(x3)
    x5 = recolor(ZERO, x4)
    x6 = occurrences(x1, x5)
    x7 = normalize(x3)
    x8 = shift(x7, NEG_UNITY)
    x9 = lbind(shift, x8)
    x10 = mapply(x9, x6)
    O = fill(x1, x2, x10)
    return O



def solve_74dd1130_99b1bc43(I):
    x1 = dmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = combine(x4, x5)
    x7 = intersection(x4, x5)
    x8 = difference(x6, x7)
    x9 = shape(x2)
    x10 = canvas(ZERO, x9)
    O = fill(x10, THREE, x8)
    return O



def solve_74dd1130_a9f96cdd(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = shift(x2, NEG_UNITY)
    x5 = fill(x3, THREE, x4)
    x6 = shift(x2, UP_RIGHT)
    x7 = fill(x5, SIX, x6)
    x8 = shift(x2, DOWN_LEFT)
    x9 = fill(x7, EIGHT, x8)
    x10 = shift(x2, UNITY)
    O = fill(x9, SEVEN, x10)
    return O



def solve_74dd1130_af902bf9(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, FOUR)
    x3 = prapply(connect, x2, x2)
    x4 = fork(either, vline, hline)
    x5 = mfilter(x3, x4)
    x6 = underfill(x1, NEG_ONE, x5)
    x7 = objects(x6, F, F, T)
    x8 = compose(backdrop, inbox)
    x9 = mapply(x8, x7)
    x10 = fill(x6, TWO, x9)
    O = replace(x10, NEG_ONE, ZERO)
    return O



def solve_74dd1130_b548a754(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, EIGHT, ZERO)
    x4 = leastcolor(x3)
    x5 = replace(x3, x4, ZERO)
    x6 = leastcolor(x5)
    x7 = merge(x2)
    x8 = backdrop(x7)
    x9 = box(x7)
    x10 = fill(x1, x4, x8)
    O = fill(x10, x6, x9)
    return O



def solve_74dd1130_c3e719e8(I):
    x1 = dmirror(I)
    x2 = mostcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = upscale(x1, THREE)
    x5 = ofcolor(x4, x2)
    x6 = asindices(x4)
    x7 = difference(x6, x5)
    x8 = hconcat(x3, x1)
    x9 = vconcat(x8, x8)
    x10 = vconcat(x9, x8)
    O = fill(x10, ZERO, x7)
    return O



def solve_74dd1130_de1cd16c(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = rbind(subgrid, x1)
    x7 = apply(x6, x5)
    x8 = rbind(colorcount, x2)
    x9 = argmax(x7, x8)
    x10 = mostcolor(x9)
    O = canvas(x10, UNITY)
    return O



def solve_74dd1130_d8c310e9(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = hperiod(x3)
    x5 = multiply(x4, THREE)
    x6 = tojvec(x4)
    x7 = tojvec(x5)
    x8 = shift(x3, x6)
    x9 = shift(x3, x7)
    x10 = paint(x1, x8)
    O = paint(x10, x9)
    return O



def solve_74dd1130_a3325580(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = valmax(x2, size)
    x4 = sizefilter(x2, x3)
    x5 = order(x4, leftmost)
    x6 = apply(color, x5)
    x7 = astuple(ONE, x3)
    x8 = rbind(canvas, x7)
    x9 = apply(x8, x6)
    x10 = merge(x9)
    O = dmirror(x10)
    return O



def solve_74dd1130_8eb1be9a(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = interval(NEG_TWO, FOUR, ONE)
    x5 = lbind(shift, x3)
    x6 = height(x3)
    x7 = rbind(multiply, x6)
    x8 = apply(x7, x4)
    x9 = apply(toivec, x8)
    x10 = mapply(x5, x9)
    O = paint(x1, x10)
    return O



def solve_74dd1130_321b1fc6(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = colorfilter(x2, EIGHT)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = cover(x1, x5)
    x7 = normalize(x5)
    x8 = lbind(shift, x7)
    x9 = apply(ulcorner, x3)
    x10 = mapply(x8, x9)
    O = paint(x6, x10)
    return O



def solve_74dd1130_1b60fb0c(I):
    x1 = dmirror(I)
    x2 = rot90(x1)
    x3 = ofcolor(x1, ONE)
    x4 = ofcolor(x2, ONE)
    x5 = neighbors(ORIGIN)
    x6 = mapply(neighbors, x5)
    x7 = lbind(shift, x4)
    x8 = apply(x7, x6)
    x9 = lbind(intersection, x3)
    x10 = compose(size, x9)
    x11 = argmax(x8, x10)
    O = underfill(x1, TWO, x11)
    return O



def solve_74dd1130_ddf7fa4f(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = colorfilter(x2, FIVE)
    x5 = product(x3, x4)
    x6 = fork(vmatching, first, last)
    x7 = sfilter(x5, x6)
    x8 = compose(color, first)
    x9 = fork(recolor, x8, last)
    x10 = mapply(x9, x7)
    O = paint(x1, x10)
    return O



def solve_74dd1130_47c1f68c(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = vmirror(x1)
    x4 = objects(x1, T, T, T)
    x5 = merge(x4)
    x6 = mostcolor(x5)
    x7 = cellwise(x1, x3, x2)
    x8 = hmirror(x7)
    x9 = cellwise(x7, x8, x2)
    x10 = compress(x9)
    O = replace(x10, x2, x6)
    return O



def solve_74dd1130_6c434453(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, EIGHT)
    x4 = dneighbors(UNITY)
    x5 = insert(UNITY, x4)
    x6 = merge(x3)
    x7 = cover(x1, x6)
    x8 = apply(ulcorner, x3)
    x9 = lbind(shift, x5)
    x10 = mapply(x9, x8)
    O = fill(x7, TWO, x10)
    return O



def solve_74dd1130_23581191(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = paint(x1, x6)
    x8 = fork(intersection, first, last)
    x9 = apply(x4, x2)
    x10 = x8(x9)
    O = fill(x7, TWO, x10)
    return O



def solve_74dd1130_c8cbb738(I):
    x1 = dmirror(I)
    x2 = mostcolor(x1)
    x3 = fgpartition(x1)
    x4 = valmax(x3, shape)
    x5 = canvas(x2, x4)
    x6 = apply(normalize, x3)
    x7 = lbind(subtract, x4)
    x8 = chain(halve, x7, shape)
    x9 = fork(shift, identity, x8)
    x10 = mapply(x9, x6)
    O = paint(x5, x10)
    return O



def solve_74dd1130_d4469b4b(I):
    x1 = dmirror(I)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = equality(x3, ONE)
    x5 = equality(x3, TWO)
    x6 = branch(x4, UNITY, TWO_BY_TWO)
    x7 = branch(x5, RIGHT, x6)
    x8 = fork(combine, vfrontier, hfrontier)
    x9 = x8(x7)
    x10 = canvas(ZERO, THREE_BY_THREE)
    O = fill(x10, FIVE, x9)
    return O



def solve_74dd1130_6ecd11f4(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = subgrid(x3, x1)
    x6 = subgrid(x4, x1)
    x7 = width(x5)
    x8 = width(x6)
    x9 = divide(x7, x8)
    x10 = downscale(x5, x9)
    x11 = ofcolor(x10, ZERO)
    O = fill(x6, ZERO, x11)
    return O



def solve_74dd1130_eb281b96(I):
    x1 = dmirror(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = decrement(x2)
    x5 = astuple(x4, x3)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    x8 = vconcat(x1, x7)
    x9 = double(x4)
    x10 = astuple(x9, x3)
    x11 = crop(x8, DOWN, x10)
    O = vconcat(x8, x11)
    return O



def solve_74dd1130_ff28f65a(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = double(x3)
    x5 = interval(ZERO, x4, TWO)
    x6 = apply(tojvec, x5)
    x7 = astuple(ONE, NINE)
    x8 = canvas(ZERO, x7)
    x9 = fill(x8, ONE, x6)
    x10 = hsplit(x9, THREE)
    O = merge(x10)
    return O



def solve_74dd1130_7e0986d6(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = replace(x1, x2, ZERO)
    x5 = leastcolor(x4)
    x6 = rbind(colorcount, x5)
    x7 = chain(positive, decrement, x6)
    x8 = rbind(toobject, x4)
    x9 = chain(x7, x8, dneighbors)
    x10 = sfilter(x3, x9)
    O = fill(x4, x5, x10)
    return O



def solve_74dd1130_09629e4f(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = argmin(x2, numcolors)
    x4 = normalize(x3)
    x5 = upscale(x4, FOUR)
    x6 = paint(x1, x5)
    x7 = ofcolor(x1, FIVE)
    O = fill(x6, FIVE, x7)
    return O



def solve_74dd1130_a85d4709(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, FIVE)
    x3 = lbind(matcher, last)
    x4 = lbind(sfilter, x2)
    x5 = lbind(mapply, hfrontier)
    x6 = chain(x5, x4, x3)
    x7 = x6(ZERO)
    x8 = x6(TWO)
    x9 = x6(ONE)
    x10 = fill(x1, TWO, x7)
    x11 = fill(x10, THREE, x8)
    O = fill(x11, FOUR, x9)
    return O



def solve_74dd1130_feca6190(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = multiply(x3, FIVE)
    x5 = astuple(x4, x4)
    x6 = canvas(ZERO, x5)
    x7 = rbind(shoot, UNITY)
    x8 = compose(x7, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x2)
    x11 = paint(x6, x10)
    O = hmirror(x11)
    return O



def solve_74dd1130_a68b268e(I):
    x1 = dmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = lefthalf(x2)
    x5 = righthalf(x2)
    x6 = lefthalf(x3)
    x7 = righthalf(x3)
    x8 = ofcolor(x5, FOUR)
    x9 = ofcolor(x4, SEVEN)
    x10 = ofcolor(x6, EIGHT)
    x11 = fill(x7, EIGHT, x10)
    x12 = fill(x11, FOUR, x8)
    O = fill(x12, SEVEN, x9)
    return O



def solve_74dd1130_beb8660c(I):
    x1 = dmirror(I)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(invert, size)
    x5 = order(x3, x4)
    x6 = apply(normalize, x5)
    x7 = size(x6)
    x8 = interval(ZERO, x7, ONE)
    x9 = apply(toivec, x8)
    x10 = mpapply(shift, x6, x9)
    x11 = canvas(ZERO, x2)
    x12 = paint(x11, x10)
    O = rot180(x12)
    return O



def solve_74dd1130_913fb3ed(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, THREE)
    x3 = ofcolor(x1, EIGHT)
    x4 = ofcolor(x1, TWO)
    x5 = mapply(neighbors, x2)
    x6 = mapply(neighbors, x3)
    x7 = mapply(neighbors, x4)
    x8 = fill(x1, SIX, x5)
    x9 = fill(x8, FOUR, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_74dd1130_0962bcdd(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = replace(x1, ZERO, x2)
    x4 = leastcolor(x3)
    x5 = ofcolor(x1, x4)
    x6 = mapply(dneighbors, x5)
    x7 = fill(x1, x4, x6)
    x8 = objects(x7, F, T, T)
    x9 = fork(connect, ulcorner, lrcorner)
    x10 = fork(connect, llcorner, urcorner)
    x11 = fork(combine, x9, x10)
    x12 = mapply(x11, x8)
    O = fill(x7, x2, x12)
    return O



def solve_74dd1130_3631a71a(I):
    x1 = dmirror(I)
    x2 = shape(x1)
    x3 = replace(x1, NINE, ZERO)
    x4 = lbind(apply, maximum)
    x5 = dmirror(x3)
    x6 = papply(pair, x3, x5)
    x7 = apply(x4, x6)
    x8 = subtract(x2, TWO_BY_TWO)
    x9 = crop(x7, TWO_BY_TWO, x8)
    x10 = vmirror(x9)
    x11 = objects(x10, T, F, T)
    x12 = merge(x11)
    x13 = shift(x12, TWO_BY_TWO)
    O = paint(x7, x13)
    return O



def solve_74dd1130_05269061(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = neighbors(ORIGIN)
    x4 = mapply(neighbors, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = merge(x2)
    x8 = lbind(shift, x7)
    x9 = mapply(x8, x6)
    x10 = shift(x9, UP_RIGHT)
    x11 = shift(x9, DOWN_LEFT)
    x12 = paint(x1, x9)
    x13 = paint(x12, x10)
    O = paint(x13, x11)
    return O



def solve_74dd1130_95990924(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = apply(ulcorner, x3)
    x5 = apply(urcorner, x3)
    x6 = apply(llcorner, x3)
    x7 = apply(lrcorner, x3)
    x8 = fill(x1, ONE, x4)
    x9 = fill(x8, TWO, x5)
    x10 = fill(x9, THREE, x6)
    O = fill(x10, FOUR, x7)
    return O



def solve_74dd1130_e509e548(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = rbind(subgrid, x1)
    x4 = chain(palette, trim, x3)
    x5 = lbind(contained, THREE)
    x6 = compose(x5, x4)
    x7 = fork(add, height, width)
    x8 = compose(decrement, x7)
    x9 = fork(equality, size, x8)
    x10 = mfilter(x2, x6)
    x11 = mfilter(x2, x9)
    x12 = replace(x1, THREE, SIX)
    x13 = fill(x12, TWO, x10)
    O = fill(x13, ONE, x11)
    return O



def solve_74dd1130_d43fd935(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, THREE)
    x4 = sizefilter(x2, ONE)
    x5 = rbind(vmatching, x3)
    x6 = rbind(hmatching, x3)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = rbind(gravitate, x3)
    x10 = fork(add, center, x9)
    x11 = fork(connect, center, x10)
    x12 = fork(recolor, color, x11)
    x13 = mapply(x12, x8)
    O = paint(x1, x13)
    return O



def solve_74dd1130_e73095fd(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = fork(equality, toindices, backdrop)
    x5 = sfilter(x3, x4)
    x6 = lbind(mapply, dneighbors)
    x7 = chain(x6, corners, outbox)
    x8 = fork(difference, x7, outbox)
    x9 = ofcolor(x1, FIVE)
    x10 = rbind(intersection, x9)
    x11 = matcher(size, ZERO)
    x12 = chain(x11, x10, x8)
    x13 = mfilter(x5, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_74dd1130_1bfc4729(I):
    x1 = dmirror(I)
    x2 = asindices(x1)
    x3 = tophalf(x1)
    x4 = bottomhalf(x1)
    x5 = leastcolor(x3)
    x6 = leastcolor(x4)
    x7 = hfrontier(TWO_BY_ZERO)
    x8 = box(x2)
    x9 = combine(x7, x8)
    x10 = fill(x3, x5, x9)
    x11 = hmirror(x10)
    x12 = replace(x11, x5, x6)
    O = vconcat(x10, x12)
    return O



def solve_74dd1130_93b581b8(I):
    x1 = dmirror(I)
    x2 = fgpartition(x1)
    x3 = chain(cmirror, dmirror, merge)
    x4 = x3(x2)
    x5 = upscale(x4, THREE)
    x6 = astuple(NEG_TWO, NEG_TWO)
    x7 = shift(x5, x6)
    x8 = underpaint(x1, x7)
    x9 = toindices(x4)
    x10 = fork(combine, hfrontier, vfrontier)
    x11 = mapply(x10, x9)
    x12 = difference(x11, x9)
    O = fill(x8, ZERO, x12)
    return O



def solve_74dd1130_9edfc990(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = ofcolor(x1, ONE)
    x5 = rbind(adjacent, x4)
    x6 = mfilter(x3, x5)
    x7 = recolor(ONE, x6)
    O = paint(x1, x7)
    return O



def solve_74dd1130_7447852a(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = compose(last, center)
    x5 = order(x3, x4)
    x6 = size(x5)
    x7 = interval(ZERO, x6, THREE)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = interval(ZERO, x6, ONE)
    x11 = pair(x5, x10)
    x12 = sfilter(x11, x9)
    x13 = mapply(first, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_74dd1130_97999447(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(toindices, x2)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    x8 = paint(x1, x7)
    x9 = interval(ZERO, FIVE, ONE)
    x10 = apply(double, x9)
    x11 = apply(increment, x10)
    x12 = apply(tojvec, x11)
    x13 = prapply(shift, x3, x12)
    x14 = merge(x13)
    O = fill(x8, FIVE, x14)
    return O



def solve_74dd1130_91714a58(I):
    x1 = dmirror(I)
    x2 = shape(x1)
    x3 = asindices(x1)
    x4 = objects(x1, T, F, T)
    x5 = argmax(x4, size)
    x6 = mostcolor(x5)
    x7 = canvas(ZERO, x2)
    x8 = paint(x7, x5)
    x9 = rbind(toobject, x8)
    x10 = rbind(colorcount, x6)
    x11 = chain(x10, x9, neighbors)
    x12 = lbind(greater, THREE)
    x13 = compose(x12, x11)
    x14 = sfilter(x3, x13)
    O = fill(x8, ZERO, x14)
    return O



def solve_74dd1130_8e1813be(I):
    x1 = dmirror(I)
    x2 = replace(x1, FIVE, ZERO)
    x3 = objects(x2, T, T, T)
    x4 = first(x3)
    x5 = vline(x4)
    x6 = branch(x5, dmirror, identity)
    x7 = x6(x2)
    x8 = objects(x7, T, T, T)
    x9 = order(x8, uppermost)
    x10 = apply(color, x9)
    x11 = dedupe(x10)
    x12 = size(x11)
    x13 = rbind(repeat, x12)
    x14 = apply(x13, x11)
    O = x6(x14)
    return O



def solve_74dd1130_bc1d5164(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = crop(x1, TWO_BY_ZERO, THREE_BY_THREE)
    x5 = tojvec(FOUR)
    x6 = crop(x1, x5, THREE_BY_THREE)
    x7 = astuple(TWO, FOUR)
    x8 = crop(x1, x7, THREE_BY_THREE)
    x9 = canvas(ZERO, THREE_BY_THREE)
    x10 = rbind(ofcolor, x2)
    x11 = astuple(x3, x4)
    x12 = astuple(x6, x8)
    x13 = combine(x11, x12)
    x14 = mapply(x10, x13)
    O = fill(x9, x2, x14)
    return O



def solve_74dd1130_ce602527(I):
    x1 = dmirror(I)
    x2 = vmirror(x1)
    x3 = fgpartition(x2)
    x4 = order(x3, size)
    x5 = last(x4)
    x6 = remove(x5, x4)
    x7 = compose(toindices, normalize)
    x8 = rbind(upscale, TWO)
    x9 = chain(toindices, x8, normalize)
    x10 = x7(x5)
    x11 = rbind(intersection, x10)
    x12 = chain(size, x11, x9)
    x13 = argmax(x6, x12)
    x14 = subgrid(x13, x2)
    O = vmirror(x14)
    return O



def solve_74dd1130_5c2c9af4(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = center(x3)
    x5 = ulcorner(x3)
    x6 = subtract(x4, x5)
    x7 = multiply(NEG_ONE, NINE)
    x8 = interval(ZERO, NINE, ONE)
    x9 = interval(ZERO, x7, NEG_ONE)
    x10 = lbind(multiply, x6)
    x11 = apply(x10, x8)
    x12 = apply(x10, x9)
    x13 = pair(x11, x12)
    x14 = mapply(box, x13)
    x15 = shift(x14, x4)
    O = fill(x1, x2, x15)
    return O



def solve_74dd1130_75b8110e(I):
    x1 = dmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = bottomhalf(x2)
    x6 = tophalf(x3)
    x7 = bottomhalf(x3)
    x8 = rbind(ofcolor, ZERO)
    x9 = fork(difference, asindices, x8)
    x10 = fork(toobject, x9, identity)
    x11 = x10(x6)
    x12 = x10(x5)
    x13 = x10(x7)
    x14 = paint(x4, x13)
    x15 = paint(x14, x12)
    O = paint(x15, x11)
    return O



def solve_74dd1130_c3f564a4(I):
    x1 = dmirror(I)
    x2 = asindices(x1)
    x3 = dmirror(x1)
    x4 = invert(NINE)
    x5 = papply(pair, x1, x3)
    x6 = lbind(apply, maximum)
    x7 = apply(x6, x5)
    x8 = ofcolor(x7, ZERO)
    x9 = difference(x2, x8)
    x10 = toobject(x9, x7)
    x11 = interval(x4, NINE, ONE)
    x12 = interval(NINE, x4, NEG_ONE)
    x13 = pair(x11, x12)
    x14 = lbind(shift, x10)
    x15 = mapply(x14, x13)
    O = paint(x7, x15)
    return O



def solve_74dd1130_1a07d186(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = mapply(x12, x8)
    x14 = merge(x3)
    x15 = cover(x1, x14)
    O = paint(x15, x13)
    return O



def solve_74dd1130_d687bc17(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = merge(x3)
    x14 = mapply(x12, x8)
    x15 = cover(x1, x13)
    O = paint(x15, x14)
    return O



def solve_74dd1130_9af7a82c(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = order(x2, size)
    x4 = valmax(x2, size)
    x5 = rbind(astuple, ONE)
    x6 = lbind(subtract, x4)
    x7 = compose(x5, size)
    x8 = chain(x5, x6, size)
    x9 = fork(canvas, color, x7)
    x10 = lbind(canvas, ZERO)
    x11 = compose(x10, x8)
    x12 = fork(vconcat, x9, x11)
    x13 = compose(cmirror, x12)
    x14 = apply(x13, x3)
    x15 = merge(x14)
    O = cmirror(x15)
    return O



def solve_74dd1130_ef135b50(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, ZERO)
    x4 = product(x2, x2)
    x5 = power(first, TWO)
    x6 = compose(first, last)
    x7 = fork(equality, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = fork(connect, first, last)
    x10 = mapply(x9, x8)
    x11 = intersection(x10, x3)
    x12 = fill(x1, NINE, x11)
    x13 = trim(x12)
    x14 = asobject(x13)
    x15 = shift(x14, UNITY)
    O = paint(x1, x15)
    return O



def solve_74dd1130_cbded52d(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = product(x3, x3)
    x5 = fork(vmatching, first, last)
    x6 = fork(hmatching, first, last)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = compose(center, first)
    x10 = compose(center, last)
    x11 = fork(connect, x9, x10)
    x12 = chain(initset, center, x11)
    x13 = compose(color, first)
    x14 = fork(recolor, x13, x12)
    x15 = mapply(x14, x8)
    O = paint(x1, x15)
    return O



def solve_74dd1130_e26a3af2(I):
    x1 = dmirror(I)
    x2 = rot90(x1)
    x3 = apply(mostcommon, x1)
    x4 = apply(mostcommon, x2)
    x5 = repeat(x3, ONE)
    x6 = repeat(x4, ONE)
    x7 = compose(size, dedupe)
    x8 = x7(x3)
    x9 = x7(x4)
    x10 = greater(x9, x8)
    x11 = branch(x10, height, width)
    x12 = x11(x1)
    x13 = rot90(x5)
    x14 = branch(x10, x6, x13)
    x15 = branch(x10, vupscale, hupscale)
    O = x15(x14, x12)
    return O



def solve_74dd1130_6cf79266(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, ZERO)
    x3 = astuple(ZERO, ORIGIN)
    x4 = initset(x3)
    x5 = upscale(x4, THREE)
    x6 = toindices(x5)
    x7 = lbind(shift, x6)
    x8 = rbind(difference, x2)
    x9 = chain(size, x8, x7)
    x10 = matcher(x9, ZERO)
    x11 = lbind(add, NEG_UNITY)
    x12 = chain(flip, x10, x11)
    x13 = fork(both, x10, x12)
    x14 = sfilter(x2, x13)
    x15 = mapply(x7, x14)
    O = fill(x1, ONE, x15)
    return O



def solve_74dd1130_a87f7484(I):
    x1 = dmirror(I)
    x2 = numcolors(x1)
    x3 = portrait(x1)
    x4 = branch(x3, dmirror, identity)
    x5 = x4(x1)
    x6 = decrement(x2)
    x7 = hsplit(x5, x6)
    x8 = rbind(ofcolor, ZERO)
    x9 = apply(x8, x7)
    x10 = leastcommon(x9)
    x11 = matcher(x8, x10)
    x12 = extract(x7, x11)
    O = x4(x12)
    return O



def solve_74dd1130_4093f84a(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, FIVE)
    x4 = ofcolor(x1, FIVE)
    x5 = portrait(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x3)
    x8 = lefthalf(x7)
    x9 = righthalf(x7)
    x10 = rbind(order, identity)
    x11 = rbind(order, invert)
    x12 = apply(x10, x8)
    x13 = apply(x11, x9)
    x14 = hconcat(x12, x13)
    O = x6(x14)
    return O



def solve_74dd1130_ba26e723(I):
    x1 = dmirror(I)
    x2 = rbind(divide, THREE)
    x3 = rbind(multiply, THREE)
    x4 = compose(x3, x2)
    x5 = fork(equality, identity, x4)
    x6 = compose(x5, last)
    x7 = ofcolor(x1, FOUR)
    x8 = sfilter(x7, x6)
    O = fill(x1, SIX, x8)
    return O



def solve_74dd1130_29c11459(I):
    x1 = dmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = objects(x3, T, F, T)
    x5 = objects(x2, T, F, T)
    x6 = compose(hfrontier, center)
    x7 = fork(recolor, color, x6)
    x8 = mapply(x7, x5)
    x9 = paint(x2, x8)
    x10 = mapply(x7, x4)
    x11 = paint(x1, x10)
    x12 = objects(x9, T, F, T)
    x13 = apply(urcorner, x12)
    x14 = shift(x13, RIGHT)
    x15 = merge(x12)
    x16 = paint(x11, x15)
    O = fill(x16, FIVE, x14)
    return O



def solve_74dd1130_963e52fc(I):
    x1 = dmirror(I)
    x2 = width(x1)
    x3 = asobject(x1)
    x4 = hperiod(x3)
    x5 = height(x3)
    x6 = astuple(x5, x4)
    x7 = ulcorner(x3)
    x8 = crop(x1, x7, x6)
    x9 = rot90(x8)
    x10 = double(x2)
    x11 = divide(x10, x4)
    x12 = increment(x11)
    x13 = repeat(x9, x12)
    x14 = merge(x13)
    x15 = rot270(x14)
    x16 = astuple(x5, x10)
    O = crop(x15, ORIGIN, x16)
    return O



def solve_74dd1130_1f0c79e5(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = leastcolor(x3)
    x5 = ofcolor(x3, x4)
    x6 = combine(x2, x5)
    x7 = recolor(x4, x6)
    x8 = compose(decrement, double)
    x9 = ulcorner(x6)
    x10 = invert(x9)
    x11 = shift(x2, x10)
    x12 = apply(x8, x11)
    x13 = interval(ZERO, NINE, ONE)
    x14 = prapply(multiply, x12, x13)
    x15 = lbind(shift, x7)
    x16 = mapply(x15, x14)
    O = paint(x1, x16)
    return O



def solve_74dd1130_6773b310(I):
    x1 = dmirror(I)
    x2 = compress(x1)
    x3 = neighbors(ORIGIN)
    x4 = insert(ORIGIN, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = astuple(FOUR, FOUR)
    x8 = shift(x6, x7)
    x9 = fork(insert, identity, neighbors)
    x10 = apply(x9, x8)
    x11 = rbind(toobject, x2)
    x12 = apply(x11, x10)
    x13 = rbind(colorcount, SIX)
    x14 = matcher(x13, TWO)
    x15 = mfilter(x12, x14)
    x16 = fill(x2, ONE, x15)
    x17 = replace(x16, SIX, ZERO)
    O = downscale(x17, THREE)
    return O



def solve_74dd1130_780d0b14(I):
    x1 = dmirror(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, T, T)
    x4 = rbind(greater, TWO)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = totuple(x6)
    x8 = apply(color, x7)
    x9 = apply(center, x7)
    x10 = pair(x8, x9)
    x11 = fill(x1, ZERO, x2)
    x12 = paint(x11, x10)
    x13 = rbind(greater, ONE)
    x14 = compose(dedupe, totuple)
    x15 = chain(x13, size, x14)
    x16 = sfilter(x12, x15)
    x17 = rot90(x16)
    x18 = sfilter(x17, x15)
    O = rot270(x18)
    return O



def solve_74dd1130_2204b7a8(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sfilter, x2)
    x4 = compose(size, x3)
    x5 = x4(vline)
    x6 = x4(hline)
    x7 = greater(x5, x6)
    x8 = branch(x7, lefthalf, tophalf)
    x9 = branch(x7, righthalf, bottomhalf)
    x10 = branch(x7, hconcat, vconcat)
    x11 = x8(x1)
    x12 = x9(x1)
    x13 = index(x11, ORIGIN)
    x14 = shape(x12)
    x15 = decrement(x14)
    x16 = index(x12, x15)
    x17 = replace(x11, THREE, x13)
    x18 = replace(x12, THREE, x16)
    O = x10(x17, x18)
    return O



def solve_74dd1130_d9f24cd1(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, FIVE)
    x4 = prapply(connect, x2, x3)
    x5 = mfilter(x4, vline)
    x6 = underfill(x1, TWO, x5)
    x7 = matcher(numcolors, TWO)
    x8 = objects(x6, F, F, T)
    x9 = sfilter(x8, x7)
    x10 = difference(x8, x9)
    x11 = colorfilter(x10, TWO)
    x12 = mapply(toindices, x11)
    x13 = apply(urcorner, x9)
    x14 = shift(x13, UNITY)
    x15 = rbind(shoot, UP)
    x16 = mapply(x15, x14)
    x17 = fill(x6, TWO, x16)
    x18 = mapply(vfrontier, x12)
    O = fill(x17, TWO, x18)
    return O



def solve_74dd1130_b782dc8a(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = ofcolor(x1, x2)
    x5 = first(x4)
    x6 = dneighbors(x5)
    x7 = toobject(x6, x1)
    x8 = mostcolor(x7)
    x9 = ofcolor(x1, x8)
    x10 = colorfilter(x3, ZERO)
    x11 = rbind(adjacent, x9)
    x12 = mfilter(x10, x11)
    x13 = toindices(x12)
    x14 = rbind(manhattan, x4)
    x15 = chain(even, x14, initset)
    x16 = sfilter(x13, x15)
    x17 = difference(x13, x16)
    x18 = fill(x1, x2, x16)
    O = fill(x18, x8, x17)
    return O



def solve_74dd1130_673ef223(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, EIGHT)
    x4 = replace(x1, EIGHT, FOUR)
    x5 = colorfilter(x2, TWO)
    x6 = argmin(x2, uppermost)
    x7 = apply(uppermost, x5)
    x8 = fork(subtract, maximum, minimum)
    x9 = x8(x7)
    x10 = toivec(x9)
    x11 = leftmost(x6)
    x12 = equality(x11, ZERO)
    x13 = branch(x12, LEFT, RIGHT)
    x14 = rbind(shoot, x13)
    x15 = mapply(x14, x3)
    x16 = underfill(x4, EIGHT, x15)
    x17 = shift(x3, x10)
    x18 = mapply(hfrontier, x17)
    O = underfill(x16, EIGHT, x18)
    return O



def solve_74dd1130_f5b8619d(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = mapply(vfrontier, x3)
    x5 = underfill(x1, EIGHT, x4)
    x6 = hconcat(x5, x5)
    O = vconcat(x6, x6)
    return O



def solve_74dd1130_f8c80d96(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = colorfilter(x3, x2)
    x5 = argmax(x4, size)
    x6 = argmin(x3, width)
    x7 = size(x6)
    x8 = equality(x7, ONE)
    x9 = branch(x8, identity, outbox)
    x10 = chain(outbox, outbox, x9)
    x11 = power(x10, TWO)
    x12 = power(x10, THREE)
    x13 = x10(x5)
    x14 = x11(x5)
    x15 = x12(x5)
    x16 = fill(x1, x2, x13)
    x17 = fill(x16, x2, x14)
    x18 = fill(x17, x2, x15)
    O = replace(x18, ZERO, FIVE)
    return O



def solve_74dd1130_ecdecbb3(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = colorfilter(x2, EIGHT)
    x5 = product(x3, x4)
    x6 = fork(gravitate, first, last)
    x7 = compose(crement, x6)
    x8 = compose(center, first)
    x9 = fork(add, x8, x7)
    x10 = fork(connect, x8, x9)
    x11 = apply(x10, x5)
    x12 = lbind(greater, EIGHT)
    x13 = compose(x12, size)
    x14 = mfilter(x11, x13)
    x15 = fill(x1, TWO, x14)
    x16 = apply(x9, x5)
    x17 = intersection(x14, x16)
    x18 = mapply(neighbors, x17)
    O = fill(x15, EIGHT, x18)
    return O



def solve_74dd1130_e5062a87(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = recolor(ZERO, x2)
    x4 = normalize(x3)
    x5 = occurrences(x1, x3)
    x6 = lbind(shift, x4)
    x7 = apply(x6, x5)
    x8 = astuple(ONE, THREE)
    x9 = astuple(FIVE, ONE)
    x10 = astuple(TWO, SIX)
    x11 = initset(x8)
    x12 = insert(x9, x11)
    x13 = insert(x10, x12)
    x14 = rbind(contained, x13)
    x15 = chain(flip, x14, ulcorner)
    x16 = sfilter(x7, x15)
    x17 = merge(x16)
    x18 = recolor(TWO, x17)
    O = paint(x1, x18)
    return O



def solve_74dd1130_a8d7556c(I):
    x1 = dmirror(I)
    x2 = initset(ORIGIN)
    x3 = recolor(ZERO, x2)
    x4 = upscale(x3, TWO)
    x5 = occurrences(x1, x4)
    x6 = lbind(shift, x4)
    x7 = mapply(x6, x5)
    x8 = fill(x1, TWO, x7)
    x9 = add(SIX, SIX)
    x10 = astuple(EIGHT, x9)
    x11 = index(x8, x10)
    x12 = equality(x11, TWO)
    x13 = initset(x10)
    x14 = add(x10, DOWN)
    x15 = insert(x14, x13)
    x16 = toobject(x15, x8)
    x17 = toobject(x15, x1)
    x18 = branch(x12, x17, x16)
    O = paint(x8, x18)
    return O



def solve_74dd1130_834ec97d(I):
    x1 = dmirror(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = shift(x4, DOWN)
    x6 = fill(x1, ZERO, x4)
    x7 = paint(x6, x5)
    x8 = uppermost(x5)
    x9 = leftmost(x5)
    x10 = subtract(x9, TEN)
    x11 = add(x9, TEN)
    x12 = interval(x10, x11, TWO)
    x13 = lbind(greater, x8)
    x14 = compose(x13, first)
    x15 = rbind(contained, x12)
    x16 = compose(x15, last)
    x17 = sfilter(x2, x14)
    x18 = sfilter(x17, x16)
    O = fill(x7, FOUR, x18)
    return O



def solve_74dd1130_90f3ed37(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, uppermost)
    x4 = first(x3)
    x5 = remove(x4, x3)
    x6 = normalize(x4)
    x7 = lbind(shift, x6)
    x8 = compose(x7, ulcorner)
    x9 = interval(TWO, NEG_ONE, NEG_ONE)
    x10 = apply(tojvec, x9)
    x11 = rbind(apply, x10)
    x12 = lbind(compose, size)
    x13 = lbind(lbind, intersection)
    x14 = compose(x12, x13)
    x15 = lbind(lbind, shift)
    x16 = chain(x11, x15, x8)
    x17 = fork(argmax, x16, x14)
    x18 = mapply(x17, x5)
    O = underfill(x1, ONE, x18)
    return O



def solve_74dd1130_8403a5d5(I):
    x1 = dmirror(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = color(x4)
    x6 = leftmost(x4)
    x7 = interval(x6, TEN, TWO)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = sfilter(x2, x9)
    x11 = increment(x6)
    x12 = add(x6, THREE)
    x13 = interval(x11, TEN, FOUR)
    x14 = interval(x12, TEN, FOUR)
    x15 = lbind(astuple, NINE)
    x16 = apply(tojvec, x13)
    x17 = apply(x15, x14)
    x18 = fill(x1, x5, x10)
    x19 = fill(x18, FIVE, x16)
    O = fill(x19, FIVE, x17)
    return O



def solve_74dd1130_539a4f51(I):
    x1 = dmirror(I)
    x2 = shape(x1)
    x3 = index(x1, ORIGIN)
    x4 = colorcount(x1, ZERO)
    x5 = decrement(x2)
    x6 = positive(x4)
    x7 = branch(x6, x5, x2)
    x8 = crop(x1, ORIGIN, x7)
    x9 = width(x8)
    x10 = astuple(ONE, x9)
    x11 = crop(x8, ORIGIN, x10)
    x12 = vupscale(x11, x9)
    x13 = dmirror(x12)
    x14 = hconcat(x8, x12)
    x15 = hconcat(x13, x8)
    x16 = vconcat(x14, x15)
    x17 = asobject(x16)
    x18 = multiply(UNITY, TEN)
    x19 = canvas(x3, x18)
    O = paint(x19, x17)
    return O



def solve_74dd1130_3bdb4ada(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = compose(increment, ulcorner)
    x5 = compose(decrement, lrcorner)
    x6 = apply(x4, x3)
    x7 = apply(x5, x3)
    x8 = papply(connect, x6, x7)
    x9 = apply(last, x6)
    x10 = compose(last, first)
    x11 = power(last, TWO)
    x12 = fork(subtract, x10, x11)
    x13 = compose(even, x12)
    x14 = lbind(rbind, astuple)
    x15 = lbind(compose, x13)
    x16 = compose(x15, x14)
    x17 = fork(sfilter, first, x16)
    x18 = pair(x8, x9)
    x19 = mapply(x17, x18)
    O = fill(x1, ZERO, x19)
    return O



def solve_74dd1130_ec883f72(I):
    x1 = dmirror(I)
    x2 = palette(x1)
    x3 = objects(x1, T, T, T)
    x4 = fork(multiply, height, width)
    x5 = argmax(x3, x4)
    x6 = color(x5)
    x7 = remove(ZERO, x2)
    x8 = other(x7, x6)
    x9 = lrcorner(x5)
    x10 = llcorner(x5)
    x11 = urcorner(x5)
    x12 = ulcorner(x5)
    x13 = shoot(x9, UNITY)
    x14 = shoot(x10, DOWN_LEFT)
    x15 = shoot(x11, UP_RIGHT)
    x16 = shoot(x12, NEG_UNITY)
    x17 = combine(x13, x14)
    x18 = combine(x15, x16)
    x19 = combine(x17, x18)
    O = underfill(x1, x8, x19)
    return O



def solve_74dd1130_2bee17df(I):
    x1 = dmirror(I)
    x2 = height(x1)
    x3 = rot90(x1)
    x4 = subtract(x2, TWO)
    x5 = interval(ZERO, x2, ONE)
    x6 = rbind(colorcount, ZERO)
    x7 = matcher(x6, x4)
    x8 = rbind(vsplit, x2)
    x9 = lbind(apply, x7)
    x10 = compose(x9, x8)
    x11 = x10(x1)
    x12 = pair(x5, x11)
    x13 = sfilter(x12, last)
    x14 = mapply(hfrontier, x13)
    x15 = x10(x3)
    x16 = pair(x15, x5)
    x17 = sfilter(x16, first)
    x18 = mapply(vfrontier, x17)
    x19 = astuple(x14, x18)
    x20 = merge(x19)
    O = underfill(x1, THREE, x20)
    return O



def solve_74dd1130_29623171(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = interval(ZERO, NINE, FOUR)
    x4 = product(x3, x3)
    x5 = rbind(add, THREE)
    x6 = rbind(interval, ONE)
    x7 = fork(x6, identity, x5)
    x8 = compose(x7, first)
    x9 = compose(x7, last)
    x10 = fork(product, x8, x9)
    x11 = rbind(colorcount, x2)
    x12 = rbind(toobject, x1)
    x13 = compose(x11, x12)
    x14 = apply(x10, x4)
    x15 = valmax(x14, x13)
    x16 = matcher(x13, x15)
    x17 = compose(flip, x16)
    x18 = mfilter(x14, x16)
    x19 = mfilter(x14, x17)
    x20 = fill(x1, x2, x18)
    O = fill(x20, ZERO, x19)
    return O



def solve_74dd1130_b0c4d837(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, FIVE)
    x3 = ofcolor(x1, EIGHT)
    x4 = height(x2)
    x5 = decrement(x4)
    x6 = height(x3)
    x7 = subtract(x5, x6)
    x8 = astuple(ONE, x7)
    x9 = canvas(EIGHT, x8)
    x10 = subtract(SIX, x7)
    x11 = astuple(ONE, x10)
    x12 = canvas(ZERO, x11)
    x13 = hconcat(x9, x12)
    x14 = hsplit(x13, TWO)
    x15 = first(x14)
    x16 = last(x14)
    x17 = vmirror(x16)
    x18 = vconcat(x15, x17)
    x19 = astuple(ONE, THREE)
    x20 = canvas(ZERO, x19)
    O = vconcat(x18, x20)
    return O



def solve_74dd1130_8731374e(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = height(x4)
    x6 = width(x4)
    x7 = vsplit(x4, x5)
    x8 = lbind(greater, FOUR)
    x9 = compose(x8, numcolors)
    x10 = sfilter(x7, x9)
    x11 = merge(x10)
    x12 = rot90(x11)
    x13 = vsplit(x12, x6)
    x14 = sfilter(x13, x9)
    x15 = merge(x14)
    x16 = rot270(x15)
    x17 = leastcolor(x16)
    x18 = ofcolor(x16, x17)
    x19 = fork(combine, vfrontier, hfrontier)
    x20 = mapply(x19, x18)
    O = fill(x16, x17, x20)
    return O



def solve_74dd1130_db93a21d(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, NINE)
    x4 = colorfilter(x2, NINE)
    x5 = rbind(shoot, DOWN)
    x6 = mapply(x5, x3)
    x7 = underfill(x1, ONE, x6)
    x8 = compose(halve, width)
    x9 = rbind(greater, ONE)
    x10 = compose(x9, x8)
    x11 = matcher(x8, THREE)
    x12 = power(outbox, TWO)
    x13 = power(outbox, THREE)
    x14 = mapply(outbox, x4)
    x15 = sfilter(x4, x10)
    x16 = sfilter(x4, x11)
    x17 = mapply(x12, x15)
    x18 = mapply(x13, x16)
    x19 = fill(x7, THREE, x14)
    x20 = fill(x19, THREE, x17)
    O = fill(x20, THREE, x18)
    return O



def solve_74dd1130_53b68214(I):
    x1 = dmirror(I)
    x2 = width(x1)
    x3 = objects(x1, T, T, T)
    x4 = first(x3)
    x5 = vperiod(x4)
    x6 = toivec(x5)
    x7 = interval(ZERO, NINE, ONE)
    x8 = lbind(multiply, x6)
    x9 = apply(x8, x7)
    x10 = lbind(shift, x4)
    x11 = mapply(x10, x9)
    x12 = astuple(x2, x2)
    x13 = portrait(x4)
    x14 = shape(x4)
    x15 = add(DOWN, x14)
    x16 = decrement(x15)
    x17 = shift(x4, x16)
    x18 = branch(x13, x11, x17)
    x19 = canvas(ZERO, x12)
    x20 = paint(x19, x4)
    O = paint(x20, x18)
    return O



def solve_74dd1130_d6ad076f(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = argmin(x2, size)
    x4 = argmax(x2, size)
    x5 = vmatching(x3, x4)
    x6 = branch(x5, DOWN, RIGHT)
    x7 = branch(x5, uppermost, leftmost)
    x8 = valmax(x2, x7)
    x9 = x7(x3)
    x10 = equality(x8, x9)
    x11 = branch(x10, NEG_ONE, ONE)
    x12 = multiply(x6, x11)
    x13 = inbox(x3)
    x14 = rbind(shoot, x12)
    x15 = mapply(x14, x13)
    x16 = underfill(x1, EIGHT, x15)
    x17 = objects(x16, T, F, T)
    x18 = colorfilter(x17, EIGHT)
    x19 = rbind(bordering, x1)
    x20 = mfilter(x18, x19)
    O = cover(x16, x20)
    return O



def solve_74dd1130_6cdd2623(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = prapply(connect, x3, x3)
    x5 = fgpartition(x1)
    x6 = merge(x5)
    x7 = cover(x1, x6)
    x8 = fork(either, hline, vline)
    x9 = box(x6)
    x10 = rbind(difference, x9)
    x11 = chain(positive, size, x10)
    x12 = fork(both, x8, x11)
    x13 = mfilter(x4, x12)
    O = fill(x7, x2, x13)
    return O



def solve_74dd1130_cdecee7f(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = astuple(ONE, THREE)
    x4 = size(x2)
    x5 = order(x2, leftmost)
    x6 = apply(color, x5)
    x7 = rbind(canvas, UNITY)
    x8 = apply(x7, x6)
    x9 = merge(x8)
    x10 = dmirror(x9)
    x11 = subtract(NINE, x4)
    x12 = astuple(ONE, x11)
    x13 = canvas(ZERO, x12)
    x14 = hconcat(x10, x13)
    x15 = hsplit(x14, THREE)
    x16 = merge(x15)
    x17 = crop(x16, ORIGIN, x3)
    x18 = crop(x16, DOWN, x3)
    x19 = crop(x16, TWO_BY_ZERO, x3)
    x20 = vmirror(x18)
    x21 = vconcat(x17, x20)
    O = vconcat(x21, x19)
    return O



def solve_74dd1130_3345333e(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = cover(x1, x3)
    x5 = leastcolor(x4)
    x6 = ofcolor(x4, x5)
    x7 = neighbors(ORIGIN)
    x8 = mapply(neighbors, x7)
    x9 = vmirror(x6)
    x10 = lbind(shift, x9)
    x11 = apply(x10, x8)
    x12 = rbind(intersection, x6)
    x13 = compose(size, x12)
    x14 = argmax(x11, x13)
    O = fill(x4, x5, x14)
    return O



def solve_74dd1130_b190f7f5(I):
    x1 = dmirror(I)
    x2 = portrait(x1)
    x3 = branch(x2, vsplit, hsplit)
    x4 = x3(x1, TWO)
    x5 = argmin(x4, numcolors)
    x6 = argmax(x4, numcolors)
    x7 = width(x6)
    x8 = rbind(repeat, x7)
    x9 = chain(dmirror, merge, x8)
    x10 = upscale(x6, x7)
    x11 = x9(x5)
    x12 = x9(x11)
    x13 = ofcolor(x12, ZERO)
    O = fill(x10, ZERO, x13)
    return O



def solve_74dd1130_caa06a1f(I):
    x1 = dmirror(I)
    x2 = asobject(x1)
    x3 = shape(x1)
    x4 = decrement(x3)
    x5 = index(x1, x4)
    x6 = double(x3)
    x7 = canvas(x5, x6)
    x8 = paint(x7, x2)
    x9 = objects(x8, F, F, T)
    x10 = first(x9)
    x11 = shift(x10, LEFT)
    x12 = vperiod(x11)
    x13 = hperiod(x11)
    x14 = neighbors(ORIGIN)
    x15 = lbind(mapply, neighbors)
    x16 = power(x15, TWO)
    x17 = x16(x14)
    x18 = astuple(x12, x13)
    x19 = lbind(multiply, x18)
    x20 = apply(x19, x17)
    x21 = lbind(shift, x11)
    x22 = mapply(x21, x20)
    O = paint(x1, x22)
    return O



def solve_74dd1130_e21d9049(I):
    x1 = dmirror(I)
    x2 = asindices(x1)
    x3 = leastcolor(x1)
    x4 = objects(x1, T, F, T)
    x5 = ofcolor(x1, x3)
    x6 = merge(x4)
    x7 = shape(x6)
    x8 = neighbors(ORIGIN)
    x9 = lbind(mapply, neighbors)
    x10 = power(x9, TWO)
    x11 = x10(x8)
    x12 = lbind(multiply, x7)
    x13 = lbind(shift, x6)
    x14 = apply(x12, x11)
    x15 = mapply(x13, x14)
    x16 = lbind(hmatching, x5)
    x17 = lbind(vmatching, x5)
    x18 = fork(either, x16, x17)
    x19 = compose(x18, initset)
    x20 = paint(x1, x15)
    x21 = sfilter(x2, x19)
    x22 = difference(x2, x21)
    O = cover(x20, x22)
    return O



def solve_74dd1130_746b3537(I):
    x1 = dmirror(I)
    x2 = chain(size, dedupe, first)
    x3 = x2(x1)
    x4 = equality(x3, ONE)
    x5 = branch(x4, dmirror, identity)
    x6 = x5(x1)
    x7 = objects(x6, T, F, F)
    x8 = order(x7, leftmost)
    x9 = apply(color, x8)
    x10 = repeat(x9, ONE)
    O = x5(x10)
    return O



def solve_74dd1130_63613498(I):
    x1 = dmirror(I)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = ofcolor(x2, ZERO)
    x4 = asindices(x2)
    x5 = difference(x4, x3)
    x6 = normalize(x5)
    x7 = objects(x1, T, F, T)
    x8 = compose(toindices, normalize)
    x9 = matcher(x8, x6)
    x10 = mfilter(x7, x9)
    x11 = fill(x1, FIVE, x10)
    x12 = asobject(x2)
    O = paint(x11, x12)
    return O



def solve_74dd1130_06df4c85(I):
    x1 = dmirror(I)
    x2 = partition(x1)
    x3 = mostcolor(x1)
    x4 = ofcolor(x1, x3)
    x5 = colorfilter(x2, ZERO)
    x6 = argmax(x2, size)
    x7 = difference(x2, x5)
    x8 = remove(x6, x7)
    x9 = merge(x8)
    x10 = product(x9, x9)
    x11 = power(first, TWO)
    x12 = compose(first, last)
    x13 = fork(equality, x11, x12)
    x14 = sfilter(x10, x13)
    x15 = compose(last, first)
    x16 = power(last, TWO)
    x17 = fork(connect, x15, x16)
    x18 = fork(recolor, color, x17)
    x19 = apply(x18, x14)
    x20 = fork(either, vline, hline)
    x21 = mfilter(x19, x20)
    x22 = paint(x1, x21)
    O = fill(x22, x3, x4)
    return O



def solve_74dd1130_4522001f(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = toindices(x3)
    x5 = contained(ZERO_BY_TWO, x4)
    x6 = contained(TWO_BY_TWO, x4)
    x7 = contained(TWO_BY_ZERO, x4)
    x8 = astuple(NINE, NINE)
    x9 = canvas(ZERO, x8)
    x10 = astuple(THREE, ORIGIN)
    x11 = initset(x10)
    x12 = upscale(x11, TWO)
    x13 = upscale(x12, TWO)
    x14 = shape(x13)
    x15 = shift(x13, x14)
    x16 = combine(x13, x15)
    x17 = paint(x9, x16)
    x18 = rot90(x17)
    x19 = rot180(x17)
    x20 = rot270(x17)
    x21 = branch(x5, x18, x17)
    x22 = branch(x6, x19, x21)
    O = branch(x7, x20, x22)
    return O



def solve_74dd1130_eb5a1d5d(I):
    x1 = dmirror(I)
    x2 = compose(dmirror, dedupe)
    x3 = x2(x1)
    x4 = x2(x3)
    x5 = fork(remove, last, identity)
    x6 = compose(hmirror, x5)
    x7 = fork(vconcat, identity, x6)
    x8 = x7(x4)
    x9 = dmirror(x8)
    O = x7(x9)
    return O



def solve_74dd1130_995c5fa3(I):
    x1 = dmirror(I)
    x2 = hsplit(x1, THREE)
    x3 = astuple(TWO, ONE)
    x4 = rbind(ofcolor, ZERO)
    x5 = compose(ulcorner, x4)
    x6 = compose(size, x4)
    x7 = matcher(x6, ZERO)
    x8 = matcher(x5, UNITY)
    x9 = matcher(x5, DOWN)
    x10 = matcher(x5, x3)
    x11 = rbind(multiply, THREE)
    x12 = power(double, TWO)
    x13 = compose(double, x7)
    x14 = chain(x12, double, x8)
    x15 = compose(x11, x9)
    x16 = compose(x12, x10)
    x17 = fork(add, x13, x14)
    x18 = fork(add, x15, x16)
    x19 = fork(add, x17, x18)
    x20 = rbind(canvas, UNITY)
    x21 = compose(x20, x19)
    x22 = apply(x21, x2)
    x23 = merge(x22)
    O = hupscale(x23, THREE)
    return O



def solve_74dd1130_36fdfd69(I):
    x1 = dmirror(I)
    x2 = upscale(x1, TWO)
    x3 = objects(x2, T, T, T)
    x4 = colorfilter(x3, TWO)
    x5 = fork(manhattan, first, last)
    x6 = lbind(greater, FIVE)
    x7 = compose(x6, x5)
    x8 = product(x4, x4)
    x9 = sfilter(x8, x7)
    x10 = apply(merge, x9)
    x11 = mapply(delta, x10)
    x12 = fill(x2, FOUR, x11)
    x13 = merge(x4)
    x14 = paint(x12, x13)
    O = downscale(x14, TWO)
    return O



def solve_74dd1130_0a938d79(I):
    x1 = dmirror(I)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = x3(x1)
    x5 = fgpartition(x4)
    x6 = merge(x5)
    x7 = chain(double, decrement, width)
    x8 = x7(x6)
    x9 = compose(vfrontier, tojvec)
    x10 = lbind(mapply, x9)
    x11 = rbind(interval, x8)
    x12 = width(x4)
    x13 = rbind(x11, x12)
    x14 = chain(x10, x13, leftmost)
    x15 = fork(recolor, color, x14)
    x16 = mapply(x15, x5)
    x17 = paint(x4, x16)
    O = x3(x17)
    return O



def solve_74dd1130_045e512c(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = lbind(shift, x3)
    x6 = lbind(mapply, x5)
    x7 = double(TEN)
    x8 = interval(FOUR, x7, FOUR)
    x9 = rbind(apply, x8)
    x10 = lbind(position, x3)
    x11 = lbind(rbind, multiply)
    x12 = chain(x9, x11, x10)
    x13 = compose(x6, x12)
    x14 = fork(recolor, color, x13)
    x15 = mapply(x14, x4)
    O = paint(x1, x15)
    return O



def solve_74dd1130_99fa7670(I):
    x1 = dmirror(I)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x3)
    x8 = paint(x1, x7)
    x9 = add(x2, DOWN_LEFT)
    x10 = initset(x9)
    x11 = recolor(ZERO, x10)
    x12 = objects(x8, T, F, T)
    x13 = insert(x11, x12)
    x14 = order(x13, uppermost)
    x15 = first(x14)
    x16 = remove(x11, x14)
    x17 = remove(x15, x14)
    x18 = compose(lrcorner, first)
    x19 = compose(lrcorner, last)
    x20 = fork(connect, x18, x19)
    x21 = compose(color, first)
    x22 = fork(recolor, x21, x20)
    x23 = pair(x16, x17)
    x24 = mapply(x22, x23)
    O = underpaint(x8, x24)
    return O



def solve_74dd1130_72322fa7(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = matcher(numcolors, ONE)
    x4 = sfilter(x2, x3)
    x5 = difference(x2, x4)
    x6 = lbind(matcher, first)
    x7 = compose(x6, mostcolor)
    x8 = fork(sfilter, identity, x7)
    x9 = fork(difference, identity, x8)
    x10 = lbind(occurrences, x1)
    x11 = compose(x10, x8)
    x12 = compose(x10, x9)
    x13 = compose(ulcorner, x9)
    x14 = fork(subtract, ulcorner, x13)
    x15 = lbind(rbind, add)
    x16 = compose(x15, x14)
    x17 = fork(apply, x16, x12)
    x18 = lbind(lbind, shift)
    x19 = compose(x18, normalize)
    x20 = fork(mapply, x19, x11)
    x21 = fork(mapply, x19, x17)
    x22 = mapply(x20, x5)
    x23 = mapply(x21, x5)
    x24 = paint(x1, x22)
    O = paint(x24, x23)
    return O



def solve_74dd1130_855e0971(I):
    x1 = dmirror(I)
    x2 = frontiers(x1)
    x3 = sfilter(x2, hline)
    x4 = size(x3)
    x5 = positive(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x1)
    x8 = rbind(subgrid, x7)
    x9 = matcher(color, ZERO)
    x10 = compose(flip, x9)
    x11 = partition(x7)
    x12 = sfilter(x11, x10)
    x13 = rbind(ofcolor, ZERO)
    x14 = lbind(mapply, vfrontier)
    x15 = chain(x14, x13, x8)
    x16 = fork(shift, x15, ulcorner)
    x17 = fork(intersection, toindices, x16)
    x18 = mapply(x17, x12)
    x19 = fill(x7, ZERO, x18)
    O = x6(x19)
    return O



def solve_74dd1130_a78176bb(I):
    x1 = dmirror(I)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = remove(ZERO, x2)
    x5 = other(x4, FIVE)
    x6 = colorfilter(x3, FIVE)
    x7 = lbind(index, x1)
    x8 = compose(x7, urcorner)
    x9 = matcher(x8, FIVE)
    x10 = sfilter(x6, x9)
    x11 = difference(x6, x10)
    x12 = apply(urcorner, x10)
    x13 = apply(llcorner, x11)
    x14 = rbind(add, UP_RIGHT)
    x15 = rbind(add, DOWN_LEFT)
    x16 = apply(x14, x12)
    x17 = apply(x15, x13)
    x18 = rbind(shoot, UNITY)
    x19 = rbind(shoot, NEG_UNITY)
    x20 = fork(combine, x18, x19)
    x21 = mapply(x20, x16)
    x22 = mapply(x20, x17)
    x23 = combine(x21, x22)
    x24 = fill(x1, x5, x23)
    O = replace(x24, FIVE, ZERO)
    return O



def solve_74dd1130_952a094c(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = argmax(x2, size)
    x5 = outbox(x4)
    x6 = corners(x5)
    x7 = lbind(rbind, manhattan)
    x8 = lbind(argmax, x3)
    x9 = chain(x8, x7, initset)
    x10 = compose(color, x9)
    x11 = fork(astuple, x10, identity)
    x12 = apply(x11, x6)
    x13 = merge(x3)
    x14 = cover(x1, x13)
    O = paint(x14, x12)
    return O



def solve_74dd1130_6d58a25d(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = merge(x4)
    x6 = color(x5)
    x7 = uppermost(x3)
    x8 = rbind(greater, x7)
    x9 = compose(x8, uppermost)
    x10 = rbind(vmatching, x3)
    x11 = fork(both, x10, x9)
    x12 = sfilter(x4, x11)
    x13 = increment(x7)
    x14 = rbind(greater, x13)
    x15 = compose(x14, first)
    x16 = rbind(sfilter, x15)
    x17 = chain(x16, vfrontier, center)
    x18 = mapply(x17, x12)
    O = underfill(x1, x6, x18)
    return O



def solve_74dd1130_6aa20dc0(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(rbind, upscale)
    x10 = interval(ONE, FOUR, ONE)
    x11 = apply(x9, x10)
    x12 = initset(identity)
    x13 = insert(vmirror, x12)
    x14 = insert(hmirror, x13)
    x15 = insert(cmirror, x14)
    x16 = insert(dmirror, x15)
    x17 = fork(compose, first, last)
    x18 = lbind(occurrences, x1)
    x19 = lbind(lbind, shift)
    x20 = compose(x18, x8)
    x21 = product(x16, x11)
    x22 = apply(x17, x21)
    x23 = rapply(x22, x4)
    x24 = fork(mapply, x19, x20)
    x25 = mapply(x24, x23)
    O = paint(x1, x25)
    return O



def solve_74dd1130_447fd412(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(rbind, upscale)
    x10 = interval(ONE, FOUR, ONE)
    x11 = apply(x9, x10)
    x12 = lbind(recolor, ZERO)
    x13 = compose(x12, outbox)
    x14 = fork(combine, identity, x13)
    x15 = lbind(occurrences, x1)
    x16 = lbind(rbind, subtract)
    x17 = lbind(apply, increment)
    x18 = lbind(lbind, shift)
    x19 = chain(x16, ulcorner, x8)
    x20 = chain(x15, x14, x8)
    x21 = fork(apply, x19, x20)
    x22 = compose(x17, x21)
    x23 = fork(mapply, x18, x22)
    x24 = rapply(x11, x4)
    x25 = mapply(x23, x24)
    O = paint(x1, x25)
    return O



def solve_74dd1130_2bcee788(I):
    x1 = dmirror(I)
    x2 = mostcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = replace(x1, x2, THREE)
    x5 = argmax(x3, size)
    x6 = argmin(x3, size)
    x7 = position(x5, x6)
    x8 = first(x7)
    x9 = last(x7)
    x10 = subgrid(x5, x4)
    x11 = hline(x6)
    x12 = hmirror(x10)
    x13 = vmirror(x10)
    x14 = branch(x11, x12, x13)
    x15 = branch(x11, x8, ZERO)
    x16 = branch(x11, ZERO, x9)
    x17 = asobject(x14)
    x18 = matcher(first, THREE)
    x19 = compose(flip, x18)
    x20 = sfilter(x17, x19)
    x21 = ulcorner(x5)
    x22 = shape(x5)
    x23 = astuple(x15, x16)
    x24 = multiply(x22, x23)
    x25 = add(x21, x24)
    x26 = shift(x20, x25)
    O = paint(x4, x26)
    return O



def solve_74dd1130_f35d900a(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = palette(x1)
    x4 = remove(ZERO, x3)
    x5 = lbind(other, x4)
    x6 = compose(x5, color)
    x7 = fork(recolor, x6, outbox)
    x8 = mapply(x7, x2)
    x9 = mapply(toindices, x2)
    x10 = box(x9)
    x11 = difference(x10, x9)
    x12 = lbind(argmin, x9)
    x13 = rbind(compose, initset)
    x14 = lbind(rbind, manhattan)
    x15 = chain(x13, x14, initset)
    x16 = chain(initset, x12, x15)
    x17 = fork(manhattan, initset, x16)
    x18 = compose(even, x17)
    x19 = sfilter(x11, x18)
    x20 = paint(x1, x8)
    O = fill(x20, FIVE, x19)
    return O



def solve_74dd1130_0dfd9992(I):
    x1 = dmirror(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_74dd1130_29ec7d0e(I):
    x1 = dmirror(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_74dd1130_469497ad(I):
    x1 = dmirror(I)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    x4 = upscale(x1, x3)
    x5 = objects(x4, F, F, T)
    x6 = argmin(x5, size)
    x7 = ulcorner(x6)
    x8 = llcorner(x6)
    x9 = shoot(x7, NEG_UNITY)
    x10 = shoot(x7, UNITY)
    x11 = shoot(x8, DOWN_LEFT)
    x12 = shoot(x8, UP_RIGHT)
    x13 = combine(x9, x10)
    x14 = combine(x11, x12)
    x15 = combine(x13, x14)
    x16 = underfill(x4, TWO, x15)
    x17 = objects(x16, T, F, T)
    x18 = argmax(x17, lrcorner)
    O = paint(x16, x18)
    return O



def solve_74dd1130_484b58aa(I):
    x1 = dmirror(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, TWO)
    x9 = astuple(TWO, x3)
    x10 = power(decrement, TWO)
    x11 = x10(x2)
    x12 = x10(x3)
    x13 = toivec(x12)
    x14 = tojvec(x11)
    x15 = crop(x1, x13, x9)
    x16 = crop(x1, x14, x8)
    x17 = asobject(x16)
    x18 = asobject(x15)
    x19 = vperiod(x17)
    x20 = hperiod(x18)
    x21 = astuple(x19, x20)
    x22 = lbind(multiply, x21)
    x23 = neighbors(ORIGIN)
    x24 = mapply(neighbors, x23)
    x25 = apply(x22, x24)
    x26 = lbind(shift, x7)
    x27 = mapply(x26, x25)
    O = paint(x1, x27)
    return O



def solve_74dd1130_3befdf3e(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = leastcolor(x1)
    x4 = palette(x1)
    x5 = remove(ZERO, x4)
    x6 = other(x5, x3)
    x7 = switch(x1, x3, x6)
    x8 = compose(width, inbox)
    x9 = lbind(power, outbox)
    x10 = compose(x9, x8)
    x11 = initset(x10)
    x12 = lbind(rapply, x11)
    x13 = chain(initset, first, x12)
    x14 = fork(rapply, x13, identity)
    x15 = compose(first, x14)
    x16 = compose(backdrop, x15)
    x17 = lbind(chain, backdrop)
    x18 = lbind(x17, inbox)
    x19 = compose(x18, x10)
    x20 = lbind(apply, initset)
    x21 = chain(x20, corners, x16)
    x22 = fork(mapply, x19, x21)
    x23 = fork(intersection, x16, x22)
    x24 = mapply(x16, x2)
    x25 = mapply(x23, x2)
    x26 = underfill(x7, x6, x24)
    O = fill(x26, ZERO, x25)
    return O



def solve_74dd1130_49d1d64f(I):
    x1 = dmirror(I)
    x2 = shape(x1)
    x3 = add(x2, TWO)
    x4 = canvas(ZERO, x3)
    x5 = asobject(x1)
    x6 = shift(x5, UNITY)
    x7 = paint(x4, x6)
    x8 = asindices(x4)
    x9 = fork(difference, box, corners)
    x10 = x9(x8)
    x11 = lbind(lbind, manhattan)
    x12 = rbind(compose, initset)
    x13 = chain(x12, x11, initset)
    x14 = lbind(argmin, x6)
    x15 = chain(first, x14, x13)
    x16 = fork(astuple, x15, identity)
    x17 = apply(x16, x10)
    O = paint(x7, x17)
    return O



def solve_74dd1130_57aa92db(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = objects(x1, T, F, T)
    x4 = lbind(lbind, colorcount)
    x5 = fork(apply, x4, palette)
    x6 = compose(maximum, x5)
    x7 = compose(minimum, x5)
    x8 = fork(subtract, x6, x7)
    x9 = argmax(x2, x8)
    x10 = leastcolor(x9)
    x11 = normalize(x9)
    x12 = matcher(first, x10)
    x13 = sfilter(x11, x12)
    x14 = ulcorner(x13)
    x15 = colorfilter(x3, x10)
    x16 = rbind(toobject, x1)
    x17 = lbind(remove, ZERO)
    x18 = chain(first, x17, palette)
    x19 = chain(x18, x16, outbox)
    x20 = lbind(multiply, x14)
    x21 = compose(x20, width)
    x22 = fork(subtract, ulcorner, x21)
    x23 = lbind(shift, x11)
    x24 = compose(x23, x22)
    x25 = fork(upscale, x24, width)
    x26 = fork(recolor, x19, x25)
    x27 = mapply(x26, x15)
    x28 = paint(x1, x27)
    x29 = merge(x3)
    O = paint(x28, x29)
    return O



def solve_74dd1130_aba27056(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = mapply(toindices, x2)
    x4 = box(x3)
    x5 = difference(x4, x3)
    x6 = delta(x3)
    x7 = position(x6, x5)
    x8 = interval(ZERO, NINE, ONE)
    x9 = lbind(multiply, x7)
    x10 = apply(x9, x8)
    x11 = lbind(shift, x5)
    x12 = mapply(x11, x10)
    x13 = fill(x1, FOUR, x6)
    x14 = fill(x13, FOUR, x12)
    x15 = corners(x5)
    x16 = ofcolor(x14, ZERO)
    x17 = rbind(toobject, x14)
    x18 = rbind(colorcount, ZERO)
    x19 = chain(x18, x17, dneighbors)
    x20 = matcher(x19, TWO)
    x21 = rbind(adjacent, x3)
    x22 = rbind(adjacent, x12)
    x23 = fork(both, x21, x22)
    x24 = compose(x23, initset)
    x25 = sfilter(x16, x20)
    x26 = sfilter(x25, x24)
    x27 = product(x15, x26)
    x28 = fork(subtract, last, first)
    x29 = fork(shoot, first, x28)
    x30 = mapply(x29, x27)
    O = fill(x14, FOUR, x30)
    return O



def solve_74dd1130_f1cefba8(I):
    x1 = dmirror(I)
    x2 = palette(x1)
    x3 = objects(x1, F, F, T)
    x4 = ofcolor(x1, ZERO)
    x5 = first(x3)
    x6 = ulcorner(x5)
    x7 = subgrid(x5, x1)
    x8 = power(trim, TWO)
    x9 = x8(x7)
    x10 = asindices(x9)
    x11 = shift(x10, TWO_BY_TWO)
    x12 = fill(x7, ZERO, x11)
    x13 = leastcolor(x12)
    x14 = remove(ZERO, x2)
    x15 = other(x14, x13)
    x16 = ofcolor(x12, x13)
    x17 = shift(x16, x6)
    x18 = ofcolor(x1, x13)
    x19 = uppermost(x18)
    x20 = lowermost(x18)
    x21 = matcher(first, x19)
    x22 = matcher(first, x20)
    x23 = fork(either, x21, x22)
    x24 = sfilter(x17, x23)
    x25 = difference(x17, x24)
    x26 = mapply(vfrontier, x24)
    x27 = mapply(hfrontier, x25)
    x28 = combine(x26, x27)
    x29 = intersection(x4, x28)
    x30 = fill(x1, x15, x28)
    O = fill(x30, x13, x29)
    return O



def solve_74dd1130_0e206a2e(I):
    x1 = dmirror(I)
    x2 = palette(x1)
    x3 = objects(x1, F, F, T)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, numcolors)
    x6 = sfilter(x3, x5)
    x7 = remove(ZERO, x2)
    x8 = lbind(colorcount, x1)
    x9 = argmax(x7, x8)
    x10 = remove(x9, x7)
    x11 = rbind(contained, x10)
    x12 = compose(x11, first)
    x13 = rbind(sfilter, x12)
    x14 = lbind(rbind, subtract)
    x15 = lbind(occurrences, x1)
    x16 = lbind(lbind, shift)
    x17 = compose(x14, ulcorner)
    x18 = chain(x17, x13, normalize)
    x19 = chain(x15, x13, normalize)
    x20 = fork(apply, x18, x19)
    x21 = compose(x16, normalize)
    x22 = fork(mapply, x21, x20)
    x23 = astuple(cmirror, dmirror)
    x24 = astuple(hmirror, vmirror)
    x25 = combine(x23, x24)
    x26 = product(x25, x25)
    x27 = fork(compose, first, last)
    x28 = apply(x27, x26)
    x29 = totuple(x28)
    x30 = combine(x25, x29)
    x31 = lbind(rapply, x30)
    x32 = mapply(x31, x6)
    x33 = mapply(x22, x32)
    x34 = paint(x1, x33)
    x35 = merge(x6)
    O = cover(x34, x35)
    return O



def solve_74dd1130_d22278a0(I):
    x1 = dmirror(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = fork(multiply, sign, identity)
    x5 = lbind(apply, x4)
    x6 = chain(even, maximum, x5)
    x7 = lbind(sfilter, x2)
    x8 = fork(add, first, last)
    x9 = rbind(remove, x3)
    x10 = compose(center, last)
    x11 = fork(subtract, first, x10)
    x12 = compose(x6, x11)
    x13 = lbind(rbind, equality)
    x14 = lbind(argmin, x3)
    x15 = chain(x8, x5, x11)
    x16 = lbind(lbind, astuple)
    x17 = lbind(rbind, astuple)
    x18 = lbind(compose, x12)
    x19 = lbind(compose, x15)
    x20 = compose(x19, x16)
    x21 = compose(x19, x17)
    x22 = compose(x14, x20)
    x23 = rbind(compose, x22)
    x24 = lbind(lbind, valmin)
    x25 = rbind(compose, x20)
    x26 = chain(x25, x24, x9)
    x27 = lbind(fork, greater)
    x28 = fork(x27, x26, x21)
    x29 = chain(x7, x18, x17)
    x30 = chain(x7, x23, x13)
    x31 = fork(intersection, x29, x30)
    x32 = compose(x7, x28)
    x33 = fork(intersection, x31, x32)
    x34 = fork(recolor, color, x33)
    x35 = mapply(x34, x3)
    O = paint(x1, x35)
    return O



def solve_74dd1130_150deff5(I):
    x1 = dmirror(I)
    x2 = canvas(FIVE, TWO_BY_TWO)
    x3 = asobject(x2)
    x4 = occurrences(x1, x3)
    x5 = lbind(shift, x3)
    x6 = mapply(x5, x4)
    x7 = fill(x1, EIGHT, x6)
    x8 = canvas(FIVE, UNITY)
    x9 = astuple(TWO, ONE)
    x10 = canvas(EIGHT, x9)
    x11 = vconcat(x10, x8)
    x12 = asobject(x11)
    x13 = occurrences(x7, x12)
    x14 = lbind(shift, x12)
    x15 = mapply(x14, x13)
    x16 = fill(x7, TWO, x15)
    x17 = astuple(ONE, THREE)
    x18 = canvas(FIVE, x17)
    x19 = asobject(x18)
    x20 = occurrences(x16, x19)
    x21 = lbind(shift, x19)
    x22 = mapply(x21, x20)
    x23 = fill(x16, TWO, x22)
    x24 = hmirror(x11)
    x25 = asobject(x24)
    x26 = occurrences(x23, x25)
    x27 = lbind(shift, x25)
    x28 = mapply(x27, x26)
    x29 = fill(x23, TWO, x28)
    x30 = dmirror(x11)
    x31 = asobject(x30)
    x32 = occurrences(x29, x31)
    x33 = lbind(shift, x31)
    x34 = mapply(x33, x32)
    x35 = fill(x29, TWO, x34)
    x36 = vmirror(x30)
    x37 = asobject(x36)
    x38 = occurrences(x35, x37)
    x39 = lbind(shift, x37)
    x40 = mapply(x39, x38)
    O = fill(x35, TWO, x40)
    return O



def solve_74dd1130_b7249182(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = portrait(x3)
    x5 = branch(x4, identity, dmirror)
    x6 = x5(x1)
    x7 = objects(x6, T, F, T)
    x8 = order(x7, uppermost)
    x9 = first(x8)
    x10 = last(x8)
    x11 = color(x9)
    x12 = color(x10)
    x13 = compose(first, toindices)
    x14 = x13(x9)
    x15 = x13(x10)
    x16 = connect(x14, x15)
    x17 = centerofmass(x16)
    x18 = connect(x14, x17)
    x19 = fill(x6, x12, x16)
    x20 = fill(x19, x11, x18)
    x21 = add(x17, DOWN)
    x22 = initset(x17)
    x23 = insert(x21, x22)
    x24 = toobject(x23, x20)
    x25 = astuple(ZERO, NEG_TWO)
    x26 = shift(x24, ZERO_BY_TWO)
    x27 = shift(x24, x25)
    x28 = combine(x26, x27)
    x29 = ulcorner(x28)
    x30 = urcorner(x28)
    x31 = connect(x29, x30)
    x32 = shift(x31, UP)
    x33 = llcorner(x28)
    x34 = lrcorner(x28)
    x35 = connect(x33, x34)
    x36 = shift(x35, DOWN)
    x37 = paint(x20, x28)
    x38 = fill(x37, x11, x32)
    x39 = fill(x38, x12, x36)
    x40 = cover(x39, x23)
    O = x5(x40)
    return O



def solve_74dd1130_9d9215db(I):
    x1 = dmirror(I)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = initset(x1)
    x6 = chain(numcolors, lefthalf, tophalf)
    x7 = insert(x2, x5)
    x8 = insert(x3, x7)
    x9 = insert(x4, x8)
    x10 = argmax(x9, x6)
    x11 = vmirror(x10)
    x12 = papply(pair, x10, x11)
    x13 = lbind(apply, maximum)
    x14 = apply(x13, x12)
    x15 = partition(x14)
    x16 = sizefilter(x15, FOUR)
    x17 = apply(llcorner, x16)
    x18 = apply(lrcorner, x16)
    x19 = combine(x17, x18)
    x20 = cover(x14, x19)
    x21 = tojvec(NEG_TWO)
    x22 = rbind(add, ZERO_BY_TWO)
    x23 = rbind(add, x21)
    x24 = compose(x22, ulcorner)
    x25 = compose(x23, urcorner)
    x26 = fork(connect, x24, x25)
    x27 = compose(even, last)
    x28 = rbind(sfilter, x27)
    x29 = chain(normalize, x28, x26)
    x30 = fork(shift, x29, x24)
    x31 = fork(recolor, color, x30)
    x32 = mapply(x31, x16)
    x33 = paint(x20, x32)
    x34 = rot90(x33)
    x35 = rot180(x33)
    x36 = rot270(x33)
    x37 = papply(pair, x33, x34)
    x38 = apply(x13, x37)
    x39 = papply(pair, x38, x35)
    x40 = apply(x13, x39)
    x41 = papply(pair, x40, x36)
    O = apply(x13, x41)
    return O



def solve_74dd1130_264363fd(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = argmin(x2, size)
    x4 = normalize(x3)
    x5 = height(x3)
    x6 = width(x3)
    x7 = equality(x5, FIVE)
    x8 = equality(x6, FIVE)
    x9 = astuple(x7, x8)
    x10 = add(UNITY, x9)
    x11 = invert(x10)
    x12 = center(x3)
    x13 = index(x1, x12)
    x14 = branch(x7, UP, RIGHT)
    x15 = add(x14, x12)
    x16 = index(x1, x15)
    x17 = astuple(x13, ORIGIN)
    x18 = initset(x17)
    x19 = cover(x1, x3)
    x20 = mostcolor(x19)
    x21 = ofcolor(x19, x20)
    x22 = occurrences(x19, x18)
    x23 = objects(x19, F, F, T)
    x24 = rbind(occurrences, x18)
    x25 = rbind(subgrid, x19)
    x26 = compose(x24, x25)
    x27 = lbind(mapply, vfrontier)
    x28 = lbind(mapply, hfrontier)
    x29 = compose(x27, x26)
    x30 = compose(x28, x26)
    x31 = branch(x7, x29, x30)
    x32 = branch(x8, x30, x29)
    x33 = fork(combine, x31, x32)
    x34 = lbind(recolor, x16)
    x35 = compose(x34, x33)
    x36 = fork(paint, x25, x35)
    x37 = compose(asobject, x36)
    x38 = fork(shift, x37, ulcorner)
    x39 = mapply(x38, x23)
    x40 = paint(x19, x39)
    x41 = shift(x4, x11)
    x42 = lbind(shift, x41)
    x43 = mapply(x42, x22)
    x44 = paint(x40, x43)
    O = fill(x44, x20, x21)
    return O



def solve_74dd1130_22233c11(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = rbind(upscale, TWO)
    x4 = chain(invert, halve, shape)
    x5 = fork(combine, hfrontier, vfrontier)
    x6 = compose(x3, vmirror)
    x7 = fork(shift, x6, x4)
    x8 = compose(toindices, x7)
    x9 = lbind(mapply, x5)
    x10 = compose(x9, toindices)
    x11 = fork(difference, x8, x10)
    x12 = mapply(x11, x2)
    O = fill(x1, EIGHT, x12)
    return O



def solve_74dd1130_a64e4611(I):
    x1 = dmirror(I)
    x2 = asindices(x1)
    x3 = fork(product, identity, identity)
    x4 = lbind(canvas, ZERO)
    x5 = compose(asobject, x4)
    x6 = fork(multiply, first, last)
    x7 = compose(positive, size)
    x8 = lbind(lbind, shift)
    x9 = rbind(fork, x6)
    x10 = lbind(x9, multiply)
    x11 = lbind(chain, x7)
    x12 = rbind(x11, x5)
    x13 = lbind(lbind, occurrences)
    x14 = chain(x10, x12, x13)
    x15 = compose(x3, first)
    x16 = compose(x14, last)
    x17 = fork(argmax, x15, x16)
    x18 = chain(x8, x5, x17)
    x19 = compose(x5, x17)
    x20 = fork(occurrences, last, x19)
    x21 = fork(mapply, x18, x20)
    x22 = multiply(TWO, SIX)
    x23 = interval(THREE, x22, ONE)
    x24 = astuple(x23, x1)
    x25 = x21(x24)
    x26 = fill(x1, THREE, x25)
    x27 = interval(THREE, TEN, ONE)
    x28 = astuple(x27, x26)
    x29 = x21(x28)
    x30 = fill(x26, THREE, x29)
    x31 = astuple(x27, x30)
    x32 = x21(x31)
    x33 = fill(x30, THREE, x32)
    x34 = rbind(toobject, x33)
    x35 = rbind(colorcount, THREE)
    x36 = chain(x35, x34, neighbors)
    x37 = matcher(x36, EIGHT)
    x38 = sfilter(x2, x37)
    x39 = fill(x1, THREE, x38)
    x40 = ofcolor(x39, ZERO)
    x41 = rbind(bordering, x39)
    x42 = compose(x41, initset)
    x43 = lbind(contained, THREE)
    x44 = rbind(toobject, x39)
    x45 = chain(x43, palette, x44)
    x46 = compose(x45, dneighbors)
    x47 = fork(both, x46, x42)
    x48 = sfilter(x40, x47)
    O = fill(x39, THREE, x48)
    return O



def solve_74dd1130_97a05b5b(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = rbind(greater, ONE)
    x6 = compose(x5, numcolors)
    x7 = sfilter(x2, x6)
    x8 = lbind(rbind, subtract)
    x9 = switch(x4, TWO, ZERO)
    x10 = lbind(occurrences, x9)
    x11 = lbind(lbind, shift)
    x12 = compose(x8, ulcorner)
    x13 = matcher(first, TWO)
    x14 = compose(flip, x13)
    x15 = rbind(sfilter, x13)
    x16 = rbind(sfilter, x14)
    x17 = lbind(recolor, ZERO)
    x18 = compose(x17, x16)
    x19 = fork(combine, x18, x15)
    x20 = chain(x12, x19, normalize)
    x21 = objects(x9, T, T, T)
    x22 = apply(toindices, x21)
    x23 = chain(x10, x19, normalize)
    x24 = rbind(colorcount, TWO)
    x25 = lbind(sfilter, x22)
    x26 = chain(size, first, x25)
    x27 = compose(positive, size)
    x28 = lbind(lbind, contained)
    x29 = chain(x27, x25, x28)
    x30 = compose(x26, x28)
    x31 = rbind(sfilter, x29)
    x32 = compose(x31, x23)
    x33 = lbind(rbind, equality)
    x34 = rbind(compose, x30)
    x35 = chain(x34, x33, x24)
    x36 = fork(sfilter, x32, x35)
    x37 = fork(apply, x20, x36)
    x38 = compose(x11, normalize)
    x39 = fork(mapply, x38, x37)
    x40 = astuple(cmirror, dmirror)
    x41 = astuple(hmirror, vmirror)
    x42 = combine(x40, x41)
    x43 = product(x42, x42)
    x44 = fork(compose, first, last)
    x45 = apply(x44, x43)
    x46 = lbind(rapply, x45)
    x47 = mapply(x46, x7)
    x48 = mapply(x39, x47)
    x49 = paint(x4, x48)
    x50 = palette(x48)
    x51 = lbind(remove, TWO)
    x52 = x51(x50)
    x53 = chain(first, x51, palette)
    x54 = rbind(contained, x52)
    x55 = chain(flip, x54, x53)
    x56 = sfilter(x7, x55)
    x57 = fork(apply, x20, x23)
    x58 = fork(mapply, x38, x57)
    x59 = mapply(x46, x56)
    x60 = mapply(x58, x59)
    O = paint(x49, x60)
    return O



def solve_74dd1130_3e980e27(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = astuple(TEN, TEN)
    x4 = invert(x3)
    x5 = astuple(TWO, x4)
    x6 = astuple(THREE, x4)
    x7 = initset(x5)
    x8 = insert(x6, x7)
    x9 = insert(x8, x2)
    x10 = lbind(contained, TWO)
    x11 = lbind(contained, THREE)
    x12 = compose(invert, ulcorner)
    x13 = lbind(compose, x12)
    x14 = lbind(rbind, sfilter)
    x15 = compose(x13, x14)
    x16 = rbind(compose, center)
    x17 = lbind(lbind, shift)
    x18 = x15(x10)
    x19 = x15(x11)
    x20 = fork(shift, identity, x18)
    x21 = fork(shift, identity, x19)
    x22 = compose(x10, palette)
    x23 = compose(x11, palette)
    x24 = sfilter(x9, x22)
    x25 = argmax(x24, size)
    x26 = remove(x25, x24)
    x27 = vmirror(x25)
    x28 = chain(x16, x17, x20)
    x29 = x28(x27)
    x30 = mapply(x29, x26)
    x31 = sfilter(x9, x23)
    x32 = argmax(x31, size)
    x33 = remove(x32, x31)
    x34 = chain(x16, x17, x21)
    x35 = x34(x32)
    x36 = mapply(x35, x33)
    x37 = combine(x30, x36)
    O = paint(x1, x37)
    return O



def solve_3c9b0459_67a3c6ac(I):
    x1 = rot180(I)
    O = vmirror(x1)
    return O



def solve_3c9b0459_68b16354(I):
    x1 = rot180(I)
    O = hmirror(x1)
    return O



def solve_3c9b0459_74dd1130(I):
    x1 = rot180(I)
    O = dmirror(x1)
    return O



def solve_3c9b0459_6150a2bd(I):
    x1 = rot180(I)
    O = rot180(x1)
    return O



def solve_3c9b0459_9172f3a0(I):
    x1 = rot180(I)
    O = upscale(x1, THREE)
    return O



def solve_3c9b0459_9dfd6313(I):
    x1 = rot180(I)
    O = dmirror(x1)
    return O



def solve_3c9b0459_a416b8f3(I):
    x1 = rot180(I)
    O = hconcat(x1, x1)
    return O



def solve_3c9b0459_b1948b0a(I):
    x1 = rot180(I)
    O = replace(x1, SIX, TWO)
    return O



def solve_3c9b0459_c59eb873(I):
    x1 = rot180(I)
    O = upscale(x1, TWO)
    return O



def solve_3c9b0459_c8f0f002(I):
    x1 = rot180(I)
    O = replace(x1, SEVEN, FIVE)
    return O



def solve_3c9b0459_d10ecb37(I):
    x1 = rot180(I)
    O = crop(x1, ORIGIN, TWO_BY_TWO)
    return O



def solve_3c9b0459_d511f180(I):
    x1 = rot180(I)
    O = switch(x1, FIVE, EIGHT)
    return O



def solve_3c9b0459_ed36ccf7(I):
    x1 = rot180(I)
    O = rot270(x1)
    return O



def solve_3c9b0459_4c4377d9(I):
    x1 = rot180(I)
    x2 = hmirror(x1)
    O = vconcat(x2, x1)
    return O



def solve_3c9b0459_6d0aefbc(I):
    x1 = rot180(I)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_3c9b0459_6fa7a44f(I):
    x1 = rot180(I)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_3c9b0459_5614dbcf(I):
    x1 = rot180(I)
    x2 = replace(x1, FIVE, ZERO)
    O = downscale(x2, THREE)
    return O



def solve_3c9b0459_5bd6f4ac(I):
    x1 = rot180(I)
    x2 = tojvec(SIX)
    O = crop(x1, x2, THREE_BY_THREE)
    return O



def solve_3c9b0459_5582e5ca(I):
    x1 = rot180(I)
    x2 = mostcolor(x1)
    O = canvas(x2, THREE_BY_THREE)
    return O



def solve_3c9b0459_8be77c9e(I):
    x1 = rot180(I)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_3c9b0459_c9e6f938(I):
    x1 = rot180(I)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_3c9b0459_2dee498d(I):
    x1 = rot180(I)
    x2 = hsplit(x1, THREE)
    O = first(x2)
    return O



def solve_3c9b0459_1cf80156(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = subgrid(x3, x1)
    return O



def solve_3c9b0459_32597951(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, EIGHT)
    x3 = delta(x2)
    O = fill(x1, THREE, x3)
    return O



def solve_3c9b0459_25ff71a9(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = move(x1, x3, DOWN)
    return O



def solve_3c9b0459_0b148d64(I):
    x1 = rot180(I)
    x2 = partition(x1)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_3c9b0459_1f85a75f(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_3c9b0459_23b5c85d(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_3c9b0459_ac0a08a4(I):
    x1 = rot180(I)
    x2 = colorcount(x1, ZERO)
    x3 = subtract(NINE, x2)
    O = upscale(x1, x3)
    return O



def solve_3c9b0459_be94b721(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_3c9b0459_c909285e(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    O = subgrid(x3, x1)
    return O



def solve_3c9b0459_f25ffba3(I):
    x1 = rot180(I)
    x2 = bottomhalf(x1)
    x3 = hmirror(x2)
    O = vconcat(x3, x2)
    return O



def solve_3c9b0459_c1d99e64(I):
    x1 = rot180(I)
    x2 = frontiers(x1)
    x3 = merge(x2)
    O = fill(x1, TWO, x3)
    return O



def solve_3c9b0459_b91ae062(I):
    x1 = rot180(I)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    O = upscale(x1, x3)
    return O



def solve_3c9b0459_3aa6fb7a(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = mapply(corners, x2)
    O = underfill(x1, ONE, x3)
    return O



def solve_3c9b0459_7b7f7511(I):
    x1 = rot180(I)
    x2 = portrait(x1)
    x3 = branch(x2, tophalf, lefthalf)
    O = x3(x1)
    return O



def solve_3c9b0459_4258a5f9(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, FIVE)
    x3 = mapply(neighbors, x2)
    O = fill(x1, ONE, x3)
    return O



def solve_3c9b0459_2dc579da(I):
    x1 = rot180(I)
    x2 = vsplit(x1, TWO)
    x3 = rbind(hsplit, TWO)
    x4 = mapply(x3, x2)
    O = argmax(x4, numcolors)
    return O



def solve_3c9b0459_28bf18c6(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = hconcat(x4, x4)
    return O



def solve_3c9b0459_3af2c5a8(I):
    x1 = rot180(I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_3c9b0459_44f52bb0(I):
    x1 = rot180(I)
    x2 = vmirror(x1)
    x3 = equality(x2, x1)
    x4 = branch(x3, ONE, SEVEN)
    O = canvas(x4, UNITY)
    return O



def solve_3c9b0459_62c24649(I):
    x1 = rot180(I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_3c9b0459_67e8384a(I):
    x1 = rot180(I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_3c9b0459_7468f01a(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = vmirror(x4)
    return O



def solve_3c9b0459_662c240a(I):
    x1 = rot180(I)
    x2 = vsplit(x1, THREE)
    x3 = fork(equality, dmirror, identity)
    x4 = compose(flip, x3)
    O = extract(x2, x4)
    return O



def solve_3c9b0459_42a50994(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = cover(x1, x4)
    return O



def solve_3c9b0459_56ff96f3(I):
    x1 = rot180(I)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = mapply(x3, x2)
    O = paint(x1, x4)
    return O



def solve_3c9b0459_50cb2852(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = compose(backdrop, inbox)
    x4 = mapply(x3, x2)
    O = fill(x1, EIGHT, x4)
    return O



def solve_3c9b0459_4347f46a(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(difference, toindices, box)
    x4 = mapply(x3, x2)
    O = fill(x1, ZERO, x4)
    return O



def solve_3c9b0459_46f33fce(I):
    x1 = rot180(I)
    x2 = rot180(x1)
    x3 = downscale(x2, TWO)
    x4 = rot180(x3)
    O = upscale(x4, FOUR)
    return O



def solve_3c9b0459_a740d043(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    O = replace(x4, ONE, ZERO)
    return O



def solve_3c9b0459_a79310a0(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = move(x1, x3, DOWN)
    O = replace(x4, EIGHT, TWO)
    return O



def solve_3c9b0459_aabf363d(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, ZERO)
    x4 = leastcolor(x3)
    O = replace(x3, x4, x2)
    return O



def solve_3c9b0459_ae4f1146(I):
    x1 = rot180(I)
    x2 = objects(x1, F, F, T)
    x3 = rbind(colorcount, ONE)
    x4 = argmax(x2, x3)
    O = subgrid(x4, x1)
    return O



def solve_3c9b0459_b27ca6d3(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, THREE, x4)
    return O



def solve_3c9b0459_ce22a75a(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = mapply(backdrop, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_3c9b0459_dc1df850(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_3c9b0459_f25fbde4(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = upscale(x4, TWO)
    return O



def solve_3c9b0459_44d8ac46(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(delta, x2)
    x4 = mfilter(x3, square)
    O = fill(x1, TWO, x4)
    return O



def solve_3c9b0459_1e0a9b12(I):
    x1 = rot180(I)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = apply(x3, x2)
    O = rot90(x4)
    return O



def solve_3c9b0459_0d3d703e(I):
    x1 = rot180(I)
    x2 = switch(x1, THREE, FOUR)
    x3 = switch(x2, EIGHT, NINE)
    x4 = switch(x3, TWO, SIX)
    O = switch(x4, ONE, FIVE)
    return O



def solve_3c9b0459_3618c87e(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = move(x1, x4, TWO_BY_ZERO)
    return O



def solve_3c9b0459_1c786137(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, height)
    x4 = subgrid(x3, x1)
    O = trim(x4)
    return O



def solve_3c9b0459_445eab21(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(multiply, height, width)
    x4 = argmax(x2, x3)
    x5 = color(x4)
    O = canvas(x5, TWO_BY_TWO)
    return O



def solve_3c9b0459_6f8cd79b(I):
    x1 = rot180(I)
    x2 = asindices(x1)
    x3 = apply(initset, x2)
    x4 = rbind(bordering, x1)
    x5 = mfilter(x3, x4)
    O = fill(x1, EIGHT, x5)
    return O



def solve_3c9b0459_2013d3e2(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = lefthalf(x4)
    O = tophalf(x5)
    return O



def solve_3c9b0459_41e4d17e(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = mapply(x4, x2)
    O = underfill(x1, SIX, x5)
    return O



def solve_3c9b0459_9565186b(I):
    x1 = rot180(I)
    x2 = shape(x1)
    x3 = objects(x1, T, F, F)
    x4 = argmax(x3, size)
    x5 = canvas(FIVE, x2)
    O = paint(x5, x4)
    return O



def solve_3c9b0459_aedd82e4(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, TWO)
    x4 = sizefilter(x3, ONE)
    x5 = merge(x4)
    O = fill(x1, ONE, x5)
    return O



def solve_3c9b0459_bb43febb(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, FIVE)
    x4 = compose(backdrop, inbox)
    x5 = mapply(x4, x3)
    O = fill(x1, TWO, x5)
    return O



def solve_3c9b0459_e98196ab(I):
    x1 = rot180(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = objects(x2, T, F, T)
    x5 = merge(x4)
    O = paint(x3, x5)
    return O



def solve_3c9b0459_f76d97a5(I):
    x1 = rot180(I)
    x2 = palette(x1)
    x3 = first(x2)
    x4 = last(x2)
    x5 = switch(x1, x3, x4)
    O = replace(x5, FIVE, ZERO)
    return O



def solve_3c9b0459_ce9e57f2(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(connect, ulcorner, centerofmass)
    x4 = mapply(x3, x2)
    x5 = fill(x1, EIGHT, x4)
    O = switch(x5, EIGHT, TWO)
    return O



def solve_3c9b0459_22eb0ac0(I):
    x1 = rot180(I)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    O = paint(x1, x5)
    return O



def solve_3c9b0459_9f236235(I):
    x1 = rot180(I)
    x2 = compress(x1)
    x3 = objects(x1, T, F, F)
    x4 = vmirror(x2)
    x5 = valmin(x3, width)
    O = downscale(x4, x5)
    return O



def solve_3c9b0459_a699fb00(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, RIGHT)
    x4 = shift(x2, LEFT)
    x5 = intersection(x3, x4)
    O = fill(x1, TWO, x5)
    return O



def solve_3c9b0459_46442a0e(I):
    x1 = rot180(I)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_3c9b0459_7fe24cdd(I):
    x1 = rot180(I)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_3c9b0459_0ca9ddb6(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, ONE)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x3)
    x6 = fill(x1, SEVEN, x4)
    O = fill(x6, FOUR, x5)
    return O



def solve_3c9b0459_543a7ed5(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, SIX)
    x4 = mapply(outbox, x3)
    x5 = fill(x1, THREE, x4)
    x6 = mapply(delta, x3)
    O = fill(x5, FOUR, x6)
    return O



def solve_3c9b0459_0520fde7(I):
    x1 = rot180(I)
    x2 = vmirror(x1)
    x3 = lefthalf(x2)
    x4 = righthalf(x2)
    x5 = vmirror(x4)
    x6 = cellwise(x3, x5, ZERO)
    O = replace(x6, ONE, TWO)
    return O



def solve_3c9b0459_dae9d2b5(I):
    x1 = rot180(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, FOUR)
    x5 = ofcolor(x3, THREE)
    x6 = combine(x4, x5)
    O = fill(x2, SIX, x6)
    return O



def solve_3c9b0459_8d5021e8(I):
    x1 = rot180(I)
    x2 = vmirror(x1)
    x3 = hconcat(x2, x1)
    x4 = hmirror(x3)
    x5 = vconcat(x3, x4)
    x6 = vconcat(x5, x3)
    O = hmirror(x6)
    return O



def solve_3c9b0459_b60334d2(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, FIVE)
    x3 = replace(x1, FIVE, ZERO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x2)
    x6 = fill(x3, ONE, x4)
    O = fill(x6, FIVE, x5)
    return O



def solve_3c9b0459_b94a9452(I):
    x1 = rot180(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = leastcolor(x4)
    x6 = mostcolor(x4)
    O = switch(x4, x5, x6)
    return O



def solve_3c9b0459_d037b0a7(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, DOWN)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    O = paint(x1, x6)
    return O



def solve_3c9b0459_d0f5fe59(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = astuple(x3, x3)
    x5 = canvas(ZERO, x4)
    x6 = shoot(ORIGIN, UNITY)
    O = fill(x5, EIGHT, x6)
    return O



def solve_3c9b0459_e3497940(I):
    x1 = rot180(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = vmirror(x3)
    x5 = objects(x4, T, F, T)
    x6 = merge(x5)
    O = paint(x2, x6)
    return O



def solve_3c9b0459_e9afcf9a(I):
    x1 = rot180(I)
    x2 = astuple(TWO, ONE)
    x3 = crop(x1, ORIGIN, x2)
    x4 = hmirror(x3)
    x5 = hconcat(x3, x4)
    x6 = hconcat(x5, x5)
    O = hconcat(x6, x5)
    return O



def solve_3c9b0459_d406998b(I):
    x1 = rot180(I)
    x2 = vmirror(x1)
    x3 = ofcolor(x2, FIVE)
    x4 = compose(even, last)
    x5 = sfilter(x3, x4)
    x6 = fill(x2, THREE, x5)
    O = vmirror(x6)
    return O



def solve_3c9b0459_3906de3d(I):
    x1 = rot180(I)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = switch(x2, ONE, TWO)
    x5 = apply(x3, x4)
    x6 = switch(x5, ONE, TWO)
    O = cmirror(x6)
    return O



def solve_3c9b0459_00d62c1b(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, FOUR, x6)
    return O



def solve_3c9b0459_7b6016b9(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = rbind(bordering, x1)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x4)
    x6 = fill(x1, TWO, x5)
    O = replace(x6, ZERO, THREE)
    return O



def solve_3c9b0459_67385a82(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, THREE)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = merge(x5)
    O = fill(x1, EIGHT, x6)
    return O



def solve_3c9b0459_a5313dff(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, ONE, x6)
    return O



def solve_3c9b0459_ea32f347(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, FIVE, FOUR)
    x4 = argmin(x2, size)
    x5 = argmax(x2, size)
    x6 = fill(x3, ONE, x5)
    O = fill(x6, TWO, x4)
    return O



def solve_3c9b0459_d631b094(I):
    x1 = rot180(I)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = ofcolor(x1, x3)
    x5 = size(x4)
    x6 = astuple(ONE, x5)
    O = canvas(x3, x6)
    return O



def solve_3c9b0459_10fcaaa3(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = vconcat(x3, x3)
    x5 = ofcolor(x4, x2)
    x6 = mapply(ineighbors, x5)
    O = underfill(x4, EIGHT, x6)
    return O



def solve_3c9b0459_007bbfb7(I):
    x1 = rot180(I)
    x2 = hupscale(x1, THREE)
    x3 = vupscale(x2, THREE)
    x4 = hconcat(x1, x1)
    x5 = hconcat(x4, x1)
    x6 = vconcat(x5, x5)
    x7 = vconcat(x6, x5)
    O = cellwise(x3, x7, ZERO)
    return O



def solve_3c9b0459_496994bd(I):
    x1 = rot180(I)
    x2 = width(x1)
    x3 = height(x1)
    x4 = halve(x3)
    x5 = astuple(x4, x2)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    O = vconcat(x6, x7)
    return O



def solve_3c9b0459_1f876c06(I):
    x1 = rot180(I)
    x2 = fgpartition(x1)
    x3 = compose(last, first)
    x4 = power(last, TWO)
    x5 = fork(connect, x3, x4)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_3c9b0459_39a8645d(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = matcher(color, x5)
    x7 = extract(x2, x6)
    O = subgrid(x7, x1)
    return O



def solve_3c9b0459_1b2d62fb(I):
    x1 = rot180(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = replace(x2, NINE, ZERO)
    O = fill(x7, EIGHT, x6)
    return O



def solve_3c9b0459_90c28cc7(I):
    x1 = rot180(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = dedupe(x4)
    x6 = rot90(x5)
    x7 = dedupe(x6)
    O = rot270(x7)
    return O



def solve_3c9b0459_b6afb2da(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = replace(x1, FIVE, TWO)
    x4 = colorfilter(x2, FIVE)
    x5 = mapply(box, x4)
    x6 = fill(x3, FOUR, x5)
    x7 = mapply(corners, x4)
    O = fill(x6, ONE, x7)
    return O



def solve_3c9b0459_b9b7f026(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = argmin(x2, size)
    x4 = rbind(adjacent, x3)
    x5 = remove(x3, x2)
    x6 = extract(x5, x4)
    x7 = color(x6)
    O = canvas(x7, UNITY)
    return O



def solve_3c9b0459_ba97ae07(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = ofcolor(x1, x5)
    x7 = backdrop(x6)
    O = fill(x1, x5, x7)
    return O



def solve_3c9b0459_c9f8e694(I):
    x1 = rot180(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = ofcolor(x1, ZERO)
    x5 = astuple(x2, ONE)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hupscale(x6, x3)
    O = fill(x7, ZERO, x4)
    return O



def solve_3c9b0459_d23f8c26(I):
    x1 = rot180(I)
    x2 = asindices(x1)
    x3 = width(x1)
    x4 = halve(x3)
    x5 = matcher(last, x4)
    x6 = compose(flip, x5)
    x7 = sfilter(x2, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_3c9b0459_d5d6de2d(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = sfilter(x2, square)
    x4 = difference(x2, x3)
    x5 = compose(backdrop, inbox)
    x6 = mapply(x5, x4)
    x7 = replace(x1, TWO, ZERO)
    O = fill(x7, THREE, x6)
    return O



def solve_3c9b0459_dbc1a6ce(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, ONE)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_3c9b0459_ded97339(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, EIGHT)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_3c9b0459_ea786f4a(I):
    x1 = rot180(I)
    x2 = width(x1)
    x3 = shoot(ORIGIN, UNITY)
    x4 = decrement(x2)
    x5 = tojvec(x4)
    x6 = shoot(x5, DOWN_LEFT)
    x7 = combine(x3, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_3c9b0459_08ed6ac7(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = order(x2, height)
    x5 = size(x3)
    x6 = interval(x5, ZERO, NEG_ONE)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_3c9b0459_40853293(I):
    x1 = rot180(I)
    x2 = partition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    x6 = mfilter(x4, vline)
    x7 = paint(x1, x5)
    O = paint(x7, x6)
    return O



def solve_3c9b0459_5521c0d9(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = cover(x1, x3)
    x5 = chain(toivec, invert, height)
    x6 = fork(shift, identity, x5)
    x7 = mapply(x6, x2)
    O = paint(x4, x7)
    return O



def solve_3c9b0459_f8ff0b80(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = rbind(canvas, UNITY)
    x6 = apply(x5, x4)
    x7 = merge(x6)
    O = hmirror(x7)
    return O



def solve_3c9b0459_85c4e7cd(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = compose(invert, size)
    x4 = order(x2, size)
    x5 = order(x2, x3)
    x6 = apply(color, x5)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_3c9b0459_d2abd087(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = matcher(size, SIX)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x3)
    x6 = mfilter(x2, x4)
    x7 = fill(x1, TWO, x5)
    O = fill(x7, ONE, x6)
    return O



def solve_3c9b0459_017c7c7b(I):
    x1 = rot180(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = equality(x2, x3)
    x5 = crop(x1, TWO_BY_ZERO, THREE_BY_THREE)
    x6 = branch(x4, x3, x5)
    x7 = vconcat(x1, x6)
    O = replace(x7, ONE, TWO)
    return O



def solve_3c9b0459_363442ee(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, ONE)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = asobject(x3)
    x5 = lbind(shift, x4)
    x6 = compose(x5, decrement)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_3c9b0459_5168d44c(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, THREE)
    x3 = height(x2)
    x4 = equality(x3, ONE)
    x5 = branch(x4, ZERO_BY_TWO, TWO_BY_ZERO)
    x6 = ofcolor(x1, TWO)
    x7 = recolor(TWO, x6)
    O = move(x1, x7, x5)
    return O



def solve_3c9b0459_d9fac9be(I):
    x1 = rot180(I)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = color(x4)
    x6 = remove(ZERO, x2)
    x7 = other(x6, x5)
    O = canvas(x7, UNITY)
    return O



def solve_3c9b0459_e50d258f(I):
    x1 = rot180(I)
    x2 = width(x1)
    x3 = astuple(NINE, x2)
    x4 = canvas(ZERO, x3)
    x5 = vconcat(x1, x4)
    x6 = objects(x5, F, F, T)
    x7 = rbind(colorcount, TWO)
    x8 = argmax(x6, x7)
    O = subgrid(x8, x1)
    return O



def solve_3c9b0459_810b9b61(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = apply(toindices, x2)
    x4 = fork(either, vline, hline)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = fork(equality, identity, box)
    x8 = mfilter(x6, x7)
    O = fill(x1, THREE, x8)
    return O



def solve_3c9b0459_54d82841(I):
    x1 = rot180(I)
    x2 = height(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(last, center)
    x5 = apply(x4, x3)
    x6 = decrement(x2)
    x7 = lbind(astuple, x6)
    x8 = apply(x7, x5)
    O = fill(x1, FOUR, x8)
    return O



def solve_3c9b0459_60b61512(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = mapply(delta, x2)
    O = fill(x1, SEVEN, x3)
    return O



def solve_3c9b0459_25d8a9c8(I):
    x1 = rot180(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, THREE)
    x5 = mfilter(x4, hline)
    x6 = toindices(x5)
    x7 = difference(x2, x6)
    x8 = fill(x1, FIVE, x6)
    O = fill(x8, ZERO, x7)
    return O



def solve_3c9b0459_239be575(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = lbind(contained, TWO)
    x4 = compose(x3, palette)
    x5 = sfilter(x2, x4)
    x6 = size(x5)
    x7 = greater(x6, ONE)
    x8 = branch(x7, ZERO, EIGHT)
    O = canvas(x8, UNITY)
    return O



def solve_3c9b0459_6430c8c4(I):
    x1 = rot180(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(FOUR, FOUR)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, THREE, x7)
    return O



def solve_3c9b0459_94f9d214(I):
    x1 = rot180(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = astuple(FOUR, FOUR)
    x7 = canvas(ZERO, x6)
    x8 = intersection(x4, x5)
    O = fill(x7, TWO, x8)
    return O



def solve_3c9b0459_ce4f8723(I):
    x1 = rot180(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = astuple(FOUR, FOUR)
    x8 = canvas(THREE, x7)
    O = fill(x8, ZERO, x6)
    return O



def solve_3c9b0459_d13f3404(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, UNITY)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = astuple(SIX, SIX)
    x8 = canvas(ZERO, x7)
    O = paint(x8, x6)
    return O



def solve_3c9b0459_f2829549(I):
    x1 = rot180(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = shape(x2)
    x8 = canvas(ZERO, x7)
    O = fill(x8, THREE, x6)
    return O



def solve_3c9b0459_fafffa47(I):
    x1 = rot180(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = shape(x3)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, TWO, x7)
    return O



def solve_3c9b0459_e76a88a6(I):
    x1 = rot180(I)
    x2 = objects(x1, F, F, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = remove(x3, x2)
    x6 = apply(ulcorner, x5)
    x7 = lbind(shift, x4)
    x8 = mapply(x7, x6)
    O = paint(x1, x8)
    return O



def solve_3c9b0459_7f4411dc(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = rbind(difference, x3)
    x5 = rbind(greater, TWO)
    x6 = chain(x5, size, x4)
    x7 = compose(x6, dneighbors)
    x8 = sfilter(x3, x7)
    O = fill(x1, ZERO, x8)
    return O



def solve_3c9b0459_b230c067(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(normalize, x3)
    x5 = leastcommon(x4)
    x6 = matcher(normalize, x5)
    x7 = extract(x2, x6)
    x8 = replace(x1, EIGHT, ONE)
    O = fill(x8, TWO, x7)
    return O



def solve_3c9b0459_e8593010(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = sizefilter(x2, TWO)
    x5 = merge(x3)
    x6 = fill(x1, THREE, x5)
    x7 = merge(x4)
    x8 = fill(x6, TWO, x7)
    O = replace(x8, ZERO, ONE)
    return O



def solve_3c9b0459_6d75e8bb(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = ulcorner(x3)
    x5 = subgrid(x3, x1)
    x6 = replace(x5, ZERO, TWO)
    x7 = asobject(x6)
    x8 = shift(x7, x4)
    O = paint(x1, x8)
    return O



def solve_3c9b0459_1190e5a7(I):
    x1 = rot180(I)
    x2 = mostcolor(x1)
    x3 = frontiers(x1)
    x4 = sfilter(x3, vline)
    x5 = difference(x3, x4)
    x6 = astuple(x5, x4)
    x7 = apply(size, x6)
    x8 = increment(x7)
    O = canvas(x2, x8)
    return O



def solve_3c9b0459_6e02f1e3(I):
    x1 = rot180(I)
    x2 = numcolors(x1)
    x3 = canvas(ZERO, THREE_BY_THREE)
    x4 = equality(x2, THREE)
    x5 = equality(x2, TWO)
    x6 = branch(x4, TWO_BY_ZERO, ORIGIN)
    x7 = branch(x5, TWO_BY_TWO, ZERO_BY_TWO)
    x8 = connect(x6, x7)
    O = fill(x3, FIVE, x8)
    return O



def solve_3c9b0459_a61f2674(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = replace(x1, FIVE, ZERO)
    x6 = recolor(ONE, x3)
    x7 = recolor(TWO, x4)
    x8 = combine(x6, x7)
    O = paint(x5, x8)
    return O



def solve_3c9b0459_fcc82909(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = rbind(add, DOWN)
    x4 = compose(x3, llcorner)
    x5 = compose(toivec, numcolors)
    x6 = fork(add, lrcorner, x5)
    x7 = fork(astuple, x4, x6)
    x8 = compose(box, x7)
    x9 = mapply(x8, x2)
    O = fill(x1, THREE, x9)
    return O



def solve_3c9b0459_253bf280(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, EIGHT)
    x3 = prapply(connect, x2, x2)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = fork(either, vline, hline)
    x8 = mfilter(x6, x7)
    x9 = fill(x1, THREE, x8)
    O = fill(x9, EIGHT, x2)
    return O



def solve_3c9b0459_31aa019c(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = first(x3)
    x5 = neighbors(x4)
    x6 = astuple(TEN, TEN)
    x7 = canvas(ZERO, x6)
    x8 = initset(x4)
    x9 = fill(x7, x2, x8)
    O = fill(x9, TWO, x5)
    return O



def solve_3c9b0459_27a28665(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = valmax(x2, size)
    x4 = equality(x3, ONE)
    x5 = equality(x3, FOUR)
    x6 = equality(x3, FIVE)
    x7 = branch(x4, TWO, ONE)
    x8 = branch(x5, THREE, x7)
    x9 = branch(x6, SIX, x8)
    O = canvas(x9, UNITY)
    return O



def solve_3c9b0459_3bd67248(I):
    x1 = rot180(I)
    x2 = height(x1)
    x3 = decrement(x2)
    x4 = decrement(x3)
    x5 = astuple(x4, ONE)
    x6 = astuple(x3, ONE)
    x7 = shoot(x5, UP_RIGHT)
    x8 = shoot(x6, RIGHT)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_3c9b0459_73251a56(I):
    x1 = rot180(I)
    x2 = dmirror(x1)
    x3 = papply(pair, x1, x2)
    x4 = lbind(apply, maximum)
    x5 = apply(x4, x3)
    x6 = mostcolor(x5)
    x7 = replace(x5, ZERO, x6)
    x8 = index(x7, ORIGIN)
    x9 = shoot(ORIGIN, UNITY)
    O = fill(x7, x8, x9)
    return O



def solve_3c9b0459_25d487eb(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = ofcolor(x1, x2)
    x5 = center(x4)
    x6 = merge(x3)
    x7 = center(x6)
    x8 = subtract(x7, x5)
    x9 = shoot(x5, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_3c9b0459_8f2ea7aa(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    O = cellwise(x5, x9, ZERO)
    return O



def solve_3c9b0459_b8825c91(I):
    x1 = rot180(I)
    x2 = replace(x1, FOUR, ZERO)
    x3 = dmirror(x2)
    x4 = papply(pair, x2, x3)
    x5 = lbind(apply, maximum)
    x6 = apply(x5, x4)
    x7 = cmirror(x6)
    x8 = papply(pair, x6, x7)
    x9 = apply(x5, x8)
    O = cmirror(x9)
    return O



def solve_3c9b0459_cce03e0d(I):
    x1 = rot180(I)
    x2 = upscale(x1, THREE)
    x3 = hconcat(x1, x1)
    x4 = hconcat(x3, x1)
    x5 = vconcat(x4, x4)
    x6 = vconcat(x5, x4)
    x7 = ofcolor(x2, ZERO)
    x8 = ofcolor(x2, ONE)
    x9 = combine(x7, x8)
    O = fill(x6, ZERO, x9)
    return O



def solve_3c9b0459_d364b489(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, DOWN)
    x4 = fill(x1, EIGHT, x3)
    x5 = shift(x2, UP)
    x6 = fill(x4, TWO, x5)
    x7 = shift(x2, RIGHT)
    x8 = fill(x6, SIX, x7)
    x9 = shift(x2, LEFT)
    O = fill(x8, SEVEN, x9)
    return O



def solve_3c9b0459_a5f85a15(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = interval(ONE, NINE, ONE)
    x4 = apply(double, x3)
    x5 = apply(decrement, x4)
    x6 = papply(astuple, x5, x5)
    x7 = apply(ulcorner, x2)
    x8 = lbind(shift, x6)
    x9 = mapply(x8, x7)
    O = fill(x1, FOUR, x9)
    return O



def solve_3c9b0459_3ac3eb23(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = chain(ineighbors, last, first)
    x4 = fork(recolor, color, x3)
    x5 = mapply(x4, x2)
    x6 = paint(x1, x5)
    x7 = vsplit(x6, THREE)
    x8 = first(x7)
    x9 = vconcat(x8, x8)
    O = vconcat(x8, x9)
    return O



def solve_3c9b0459_22168020(I):
    x1 = rot180(I)
    x2 = palette(x1)
    x3 = remove(ZERO, x2)
    x4 = lbind(ofcolor, x1)
    x5 = lbind(prapply, connect)
    x6 = fork(x5, x4, x4)
    x7 = compose(merge, x6)
    x8 = fork(recolor, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_3c9b0459_6e82a1ae(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sizefilter, x2)
    x4 = compose(merge, x3)
    x5 = x4(TWO)
    x6 = x4(THREE)
    x7 = x4(FOUR)
    x8 = fill(x1, THREE, x5)
    x9 = fill(x8, TWO, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_3c9b0459_868de0fa(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = sfilter(x2, square)
    x4 = compose(even, height)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = merge(x5)
    x8 = merge(x6)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, SEVEN, x8)
    return O



def solve_3c9b0459_681b3aeb(I):
    x1 = rot180(I)
    x2 = rot270(x1)
    x3 = objects(x2, T, F, T)
    x4 = argmax(x3, size)
    x5 = argmin(x3, size)
    x6 = color(x5)
    x7 = canvas(x6, THREE_BY_THREE)
    x8 = normalize(x4)
    x9 = paint(x7, x8)
    O = rot90(x9)
    return O



def solve_3c9b0459_8e5a5113(I):
    x1 = rot180(I)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = rot90(x2)
    x4 = rot180(x2)
    x5 = astuple(x3, x4)
    x6 = astuple(FOUR, EIGHT)
    x7 = apply(tojvec, x6)
    x8 = apply(asobject, x5)
    x9 = mpapply(shift, x8, x7)
    O = paint(x1, x9)
    return O



def solve_3c9b0459_025d127b(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(color, x2)
    x4 = merge(x2)
    x5 = lbind(colorfilter, x2)
    x6 = rbind(argmax, rightmost)
    x7 = compose(x6, x5)
    x8 = mapply(x7, x3)
    x9 = difference(x4, x8)
    O = move(x1, x9, RIGHT)
    return O



def solve_3c9b0459_2281f1f4(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, FIVE)
    x3 = product(x2, x2)
    x4 = power(first, TWO)
    x5 = power(last, TWO)
    x6 = fork(astuple, x4, x5)
    x7 = apply(x6, x3)
    x8 = urcorner(x2)
    x9 = remove(x8, x7)
    O = underfill(x1, TWO, x9)
    return O



def solve_3c9b0459_cf98881b(I):
    x1 = rot180(I)
    x2 = hsplit(x1, THREE)
    x3 = first(x2)
    x4 = remove(x3, x2)
    x5 = first(x4)
    x6 = last(x4)
    x7 = ofcolor(x5, NINE)
    x8 = ofcolor(x3, FOUR)
    x9 = fill(x6, NINE, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_3c9b0459_bda2d7a6(I):
    x1 = rot180(I)
    x2 = partition(x1)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = last(x3)
    x6 = remove(x5, x3)
    x7 = repeat(x5, ONE)
    x8 = combine(x7, x6)
    x9 = mpapply(recolor, x4, x8)
    O = paint(x1, x9)
    return O



def solve_3c9b0459_6455b5f5(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = argmax(x2, size)
    x5 = valmin(x2, size)
    x6 = sizefilter(x3, x5)
    x7 = recolor(ONE, x4)
    x8 = merge(x6)
    x9 = paint(x1, x7)
    O = fill(x9, EIGHT, x8)
    return O



def solve_3c9b0459_b8cdaf2b(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = shift(x3, UP)
    x5 = ulcorner(x4)
    x6 = urcorner(x4)
    x7 = shoot(x5, NEG_UNITY)
    x8 = shoot(x6, UP_RIGHT)
    x9 = combine(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_3c9b0459_bd4472b8(I):
    x1 = rot180(I)
    x2 = width(x1)
    x3 = astuple(TWO, x2)
    x4 = crop(x1, ORIGIN, x3)
    x5 = tophalf(x4)
    x6 = dmirror(x5)
    x7 = hupscale(x6, x2)
    x8 = repeat(x7, TWO)
    x9 = merge(x8)
    O = vconcat(x4, x9)
    return O



def solve_3c9b0459_4be741c5(I):
    x1 = rot180(I)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = branch(x2, height, width)
    x5 = x4(x1)
    x6 = astuple(ONE, x5)
    x7 = x3(x1)
    x8 = crop(x7, ORIGIN, x6)
    x9 = apply(dedupe, x8)
    O = x3(x9)
    return O



def solve_3c9b0459_bbc9ae5d(I):
    x1 = rot180(I)
    x2 = width(x1)
    x3 = palette(x1)
    x4 = halve(x2)
    x5 = vupscale(x1, x4)
    x6 = rbind(shoot, UNITY)
    x7 = other(x3, ZERO)
    x8 = ofcolor(x5, x7)
    x9 = mapply(x6, x8)
    O = fill(x5, x7, x9)
    return O



def solve_3c9b0459_d90796e8(I):
    x1 = rot180(I)
    x2 = objects(x1, F, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = lbind(contained, TWO)
    x5 = compose(x4, palette)
    x6 = mfilter(x3, x5)
    x7 = cover(x1, x6)
    x8 = matcher(first, THREE)
    x9 = sfilter(x6, x8)
    O = fill(x7, EIGHT, x9)
    return O



def solve_3c9b0459_2c608aff(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = toindices(x4)
    x6 = ofcolor(x1, x2)
    x7 = prapply(connect, x5, x6)
    x8 = fork(either, vline, hline)
    x9 = mfilter(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_3c9b0459_f8b3ba0a(I):
    x1 = rot180(I)
    x2 = compress(x1)
    x3 = astuple(THREE, ONE)
    x4 = palette(x2)
    x5 = lbind(colorcount, x2)
    x6 = compose(invert, x5)
    x7 = order(x4, x6)
    x8 = rbind(canvas, UNITY)
    x9 = apply(x8, x7)
    x10 = merge(x9)
    O = crop(x10, DOWN, x3)
    return O



def solve_3c9b0459_80af3007(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    x10 = cellwise(x5, x9, ZERO)
    O = downscale(x10, THREE)
    return O



def solve_3c9b0459_83302e8f(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = sfilter(x3, square)
    x5 = difference(x3, x4)
    x6 = merge(x4)
    x7 = recolor(THREE, x6)
    x8 = merge(x5)
    x9 = recolor(FOUR, x8)
    x10 = paint(x1, x7)
    O = paint(x10, x9)
    return O



def solve_3c9b0459_1fad071e(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, ONE)
    x4 = sizefilter(x3, FOUR)
    x5 = size(x4)
    x6 = subtract(FIVE, x5)
    x7 = astuple(ONE, x5)
    x8 = canvas(ONE, x7)
    x9 = astuple(ONE, x6)
    x10 = canvas(ZERO, x9)
    O = hconcat(x8, x10)
    return O



def solve_3c9b0459_11852cab(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = hmirror(x3)
    x5 = vmirror(x3)
    x6 = dmirror(x3)
    x7 = cmirror(x3)
    x8 = paint(x1, x4)
    x9 = paint(x8, x5)
    x10 = paint(x9, x6)
    O = paint(x10, x7)
    return O



def solve_3c9b0459_3428a4f5(I):
    x1 = rot180(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(SIX, FIVE)
    x5 = ofcolor(x2, TWO)
    x6 = ofcolor(x3, TWO)
    x7 = combine(x5, x6)
    x8 = intersection(x5, x6)
    x9 = difference(x7, x8)
    x10 = canvas(ZERO, x4)
    O = fill(x10, THREE, x9)
    return O



def solve_3c9b0459_178fcbfb(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(vfrontier, x3)
    x5 = fill(x1, TWO, x4)
    x6 = colorfilter(x2, TWO)
    x7 = difference(x2, x6)
    x8 = compose(hfrontier, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x7)
    O = paint(x5, x10)
    return O



def solve_3c9b0459_54d9e175(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = compose(neighbors, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x3)
    x7 = paint(x1, x6)
    x8 = replace(x7, ONE, SIX)
    x9 = replace(x8, TWO, SEVEN)
    x10 = replace(x9, THREE, EIGHT)
    O = replace(x10, FOUR, NINE)
    return O



def solve_3c9b0459_623ea044(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = center(x3)
    x5 = color(x3)
    x6 = astuple(UNITY, NEG_UNITY)
    x7 = astuple(UP_RIGHT, DOWN_LEFT)
    x8 = combine(x6, x7)
    x9 = lbind(shoot, x4)
    x10 = mapply(x9, x8)
    O = fill(x1, x5, x10)
    return O



def solve_3c9b0459_794b24be(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, ONE)
    x3 = size(x2)
    x4 = decrement(x3)
    x5 = canvas(ZERO, THREE_BY_THREE)
    x6 = tojvec(x4)
    x7 = connect(ORIGIN, x6)
    x8 = equality(x3, FOUR)
    x9 = insert(UNITY, x7)
    x10 = branch(x8, x9, x7)
    O = fill(x5, TWO, x10)
    return O



def solve_3c9b0459_88a62173(I):
    x1 = rot180(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = tophalf(x3)
    x6 = bottomhalf(x2)
    x7 = bottomhalf(x3)
    x8 = astuple(x4, x5)
    x9 = astuple(x6, x7)
    x10 = combine(x8, x9)
    O = leastcommon(x10)
    return O



def solve_3c9b0459_890034e9(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = inbox(x3)
    x5 = recolor(ZERO, x4)
    x6 = occurrences(x1, x5)
    x7 = normalize(x3)
    x8 = shift(x7, NEG_UNITY)
    x9 = lbind(shift, x8)
    x10 = mapply(x9, x6)
    O = fill(x1, x2, x10)
    return O



def solve_3c9b0459_99b1bc43(I):
    x1 = rot180(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = combine(x4, x5)
    x7 = intersection(x4, x5)
    x8 = difference(x6, x7)
    x9 = shape(x2)
    x10 = canvas(ZERO, x9)
    O = fill(x10, THREE, x8)
    return O



def solve_3c9b0459_a9f96cdd(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = shift(x2, NEG_UNITY)
    x5 = fill(x3, THREE, x4)
    x6 = shift(x2, UP_RIGHT)
    x7 = fill(x5, SIX, x6)
    x8 = shift(x2, DOWN_LEFT)
    x9 = fill(x7, EIGHT, x8)
    x10 = shift(x2, UNITY)
    O = fill(x9, SEVEN, x10)
    return O



def solve_3c9b0459_af902bf9(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, FOUR)
    x3 = prapply(connect, x2, x2)
    x4 = fork(either, vline, hline)
    x5 = mfilter(x3, x4)
    x6 = underfill(x1, NEG_ONE, x5)
    x7 = objects(x6, F, F, T)
    x8 = compose(backdrop, inbox)
    x9 = mapply(x8, x7)
    x10 = fill(x6, TWO, x9)
    O = replace(x10, NEG_ONE, ZERO)
    return O



def solve_3c9b0459_b548a754(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, EIGHT, ZERO)
    x4 = leastcolor(x3)
    x5 = replace(x3, x4, ZERO)
    x6 = leastcolor(x5)
    x7 = merge(x2)
    x8 = backdrop(x7)
    x9 = box(x7)
    x10 = fill(x1, x4, x8)
    O = fill(x10, x6, x9)
    return O



def solve_3c9b0459_c3e719e8(I):
    x1 = rot180(I)
    x2 = mostcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = upscale(x1, THREE)
    x5 = ofcolor(x4, x2)
    x6 = asindices(x4)
    x7 = difference(x6, x5)
    x8 = hconcat(x3, x1)
    x9 = vconcat(x8, x8)
    x10 = vconcat(x9, x8)
    O = fill(x10, ZERO, x7)
    return O



def solve_3c9b0459_de1cd16c(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = rbind(subgrid, x1)
    x7 = apply(x6, x5)
    x8 = rbind(colorcount, x2)
    x9 = argmax(x7, x8)
    x10 = mostcolor(x9)
    O = canvas(x10, UNITY)
    return O



def solve_3c9b0459_d8c310e9(I):
    x1 = rot180(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = hperiod(x3)
    x5 = multiply(x4, THREE)
    x6 = tojvec(x4)
    x7 = tojvec(x5)
    x8 = shift(x3, x6)
    x9 = shift(x3, x7)
    x10 = paint(x1, x8)
    O = paint(x10, x9)
    return O



def solve_3c9b0459_a3325580(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = valmax(x2, size)
    x4 = sizefilter(x2, x3)
    x5 = order(x4, leftmost)
    x6 = apply(color, x5)
    x7 = astuple(ONE, x3)
    x8 = rbind(canvas, x7)
    x9 = apply(x8, x6)
    x10 = merge(x9)
    O = dmirror(x10)
    return O



def solve_3c9b0459_8eb1be9a(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = interval(NEG_TWO, FOUR, ONE)
    x5 = lbind(shift, x3)
    x6 = height(x3)
    x7 = rbind(multiply, x6)
    x8 = apply(x7, x4)
    x9 = apply(toivec, x8)
    x10 = mapply(x5, x9)
    O = paint(x1, x10)
    return O



def solve_3c9b0459_321b1fc6(I):
    x1 = rot180(I)
    x2 = objects(x1, F, F, T)
    x3 = colorfilter(x2, EIGHT)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = cover(x1, x5)
    x7 = normalize(x5)
    x8 = lbind(shift, x7)
    x9 = apply(ulcorner, x3)
    x10 = mapply(x8, x9)
    O = paint(x6, x10)
    return O



def solve_3c9b0459_1b60fb0c(I):
    x1 = rot180(I)
    x2 = rot90(x1)
    x3 = ofcolor(x1, ONE)
    x4 = ofcolor(x2, ONE)
    x5 = neighbors(ORIGIN)
    x6 = mapply(neighbors, x5)
    x7 = lbind(shift, x4)
    x8 = apply(x7, x6)
    x9 = lbind(intersection, x3)
    x10 = compose(size, x9)
    x11 = argmax(x8, x10)
    O = underfill(x1, TWO, x11)
    return O



def solve_3c9b0459_ddf7fa4f(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = colorfilter(x2, FIVE)
    x5 = product(x3, x4)
    x6 = fork(vmatching, first, last)
    x7 = sfilter(x5, x6)
    x8 = compose(color, first)
    x9 = fork(recolor, x8, last)
    x10 = mapply(x9, x7)
    O = paint(x1, x10)
    return O



def solve_3c9b0459_47c1f68c(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = vmirror(x1)
    x4 = objects(x1, T, T, T)
    x5 = merge(x4)
    x6 = mostcolor(x5)
    x7 = cellwise(x1, x3, x2)
    x8 = hmirror(x7)
    x9 = cellwise(x7, x8, x2)
    x10 = compress(x9)
    O = replace(x10, x2, x6)
    return O



def solve_3c9b0459_6c434453(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, EIGHT)
    x4 = dneighbors(UNITY)
    x5 = insert(UNITY, x4)
    x6 = merge(x3)
    x7 = cover(x1, x6)
    x8 = apply(ulcorner, x3)
    x9 = lbind(shift, x5)
    x10 = mapply(x9, x8)
    O = fill(x7, TWO, x10)
    return O



def solve_3c9b0459_23581191(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = paint(x1, x6)
    x8 = fork(intersection, first, last)
    x9 = apply(x4, x2)
    x10 = x8(x9)
    O = fill(x7, TWO, x10)
    return O



def solve_3c9b0459_c8cbb738(I):
    x1 = rot180(I)
    x2 = mostcolor(x1)
    x3 = fgpartition(x1)
    x4 = valmax(x3, shape)
    x5 = canvas(x2, x4)
    x6 = apply(normalize, x3)
    x7 = lbind(subtract, x4)
    x8 = chain(halve, x7, shape)
    x9 = fork(shift, identity, x8)
    x10 = mapply(x9, x6)
    O = paint(x5, x10)
    return O



def solve_3c9b0459_d4469b4b(I):
    x1 = rot180(I)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = equality(x3, ONE)
    x5 = equality(x3, TWO)
    x6 = branch(x4, UNITY, TWO_BY_TWO)
    x7 = branch(x5, RIGHT, x6)
    x8 = fork(combine, vfrontier, hfrontier)
    x9 = x8(x7)
    x10 = canvas(ZERO, THREE_BY_THREE)
    O = fill(x10, FIVE, x9)
    return O



def solve_3c9b0459_6ecd11f4(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = subgrid(x3, x1)
    x6 = subgrid(x4, x1)
    x7 = width(x5)
    x8 = width(x6)
    x9 = divide(x7, x8)
    x10 = downscale(x5, x9)
    x11 = ofcolor(x10, ZERO)
    O = fill(x6, ZERO, x11)
    return O



def solve_3c9b0459_eb281b96(I):
    x1 = rot180(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = decrement(x2)
    x5 = astuple(x4, x3)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    x8 = vconcat(x1, x7)
    x9 = double(x4)
    x10 = astuple(x9, x3)
    x11 = crop(x8, DOWN, x10)
    O = vconcat(x8, x11)
    return O



def solve_3c9b0459_ff28f65a(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = double(x3)
    x5 = interval(ZERO, x4, TWO)
    x6 = apply(tojvec, x5)
    x7 = astuple(ONE, NINE)
    x8 = canvas(ZERO, x7)
    x9 = fill(x8, ONE, x6)
    x10 = hsplit(x9, THREE)
    O = merge(x10)
    return O



def solve_3c9b0459_7e0986d6(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = replace(x1, x2, ZERO)
    x5 = leastcolor(x4)
    x6 = rbind(colorcount, x5)
    x7 = chain(positive, decrement, x6)
    x8 = rbind(toobject, x4)
    x9 = chain(x7, x8, dneighbors)
    x10 = sfilter(x3, x9)
    O = fill(x4, x5, x10)
    return O



def solve_3c9b0459_09629e4f(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = argmin(x2, numcolors)
    x4 = normalize(x3)
    x5 = upscale(x4, FOUR)
    x6 = paint(x1, x5)
    x7 = ofcolor(x1, FIVE)
    O = fill(x6, FIVE, x7)
    return O



def solve_3c9b0459_a85d4709(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, FIVE)
    x3 = lbind(matcher, last)
    x4 = lbind(sfilter, x2)
    x5 = lbind(mapply, hfrontier)
    x6 = chain(x5, x4, x3)
    x7 = x6(ZERO)
    x8 = x6(TWO)
    x9 = x6(ONE)
    x10 = fill(x1, TWO, x7)
    x11 = fill(x10, THREE, x8)
    O = fill(x11, FOUR, x9)
    return O



def solve_3c9b0459_feca6190(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = multiply(x3, FIVE)
    x5 = astuple(x4, x4)
    x6 = canvas(ZERO, x5)
    x7 = rbind(shoot, UNITY)
    x8 = compose(x7, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x2)
    x11 = paint(x6, x10)
    O = hmirror(x11)
    return O



def solve_3c9b0459_a68b268e(I):
    x1 = rot180(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = lefthalf(x2)
    x5 = righthalf(x2)
    x6 = lefthalf(x3)
    x7 = righthalf(x3)
    x8 = ofcolor(x5, FOUR)
    x9 = ofcolor(x4, SEVEN)
    x10 = ofcolor(x6, EIGHT)
    x11 = fill(x7, EIGHT, x10)
    x12 = fill(x11, FOUR, x8)
    O = fill(x12, SEVEN, x9)
    return O



def solve_3c9b0459_beb8660c(I):
    x1 = rot180(I)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(invert, size)
    x5 = order(x3, x4)
    x6 = apply(normalize, x5)
    x7 = size(x6)
    x8 = interval(ZERO, x7, ONE)
    x9 = apply(toivec, x8)
    x10 = mpapply(shift, x6, x9)
    x11 = canvas(ZERO, x2)
    x12 = paint(x11, x10)
    O = rot180(x12)
    return O



def solve_3c9b0459_913fb3ed(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, THREE)
    x3 = ofcolor(x1, EIGHT)
    x4 = ofcolor(x1, TWO)
    x5 = mapply(neighbors, x2)
    x6 = mapply(neighbors, x3)
    x7 = mapply(neighbors, x4)
    x8 = fill(x1, SIX, x5)
    x9 = fill(x8, FOUR, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_3c9b0459_0962bcdd(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = replace(x1, ZERO, x2)
    x4 = leastcolor(x3)
    x5 = ofcolor(x1, x4)
    x6 = mapply(dneighbors, x5)
    x7 = fill(x1, x4, x6)
    x8 = objects(x7, F, T, T)
    x9 = fork(connect, ulcorner, lrcorner)
    x10 = fork(connect, llcorner, urcorner)
    x11 = fork(combine, x9, x10)
    x12 = mapply(x11, x8)
    O = fill(x7, x2, x12)
    return O



def solve_3c9b0459_3631a71a(I):
    x1 = rot180(I)
    x2 = shape(x1)
    x3 = replace(x1, NINE, ZERO)
    x4 = lbind(apply, maximum)
    x5 = dmirror(x3)
    x6 = papply(pair, x3, x5)
    x7 = apply(x4, x6)
    x8 = subtract(x2, TWO_BY_TWO)
    x9 = crop(x7, TWO_BY_TWO, x8)
    x10 = vmirror(x9)
    x11 = objects(x10, T, F, T)
    x12 = merge(x11)
    x13 = shift(x12, TWO_BY_TWO)
    O = paint(x7, x13)
    return O



def solve_3c9b0459_05269061(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = neighbors(ORIGIN)
    x4 = mapply(neighbors, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = merge(x2)
    x8 = lbind(shift, x7)
    x9 = mapply(x8, x6)
    x10 = shift(x9, UP_RIGHT)
    x11 = shift(x9, DOWN_LEFT)
    x12 = paint(x1, x9)
    x13 = paint(x12, x10)
    O = paint(x13, x11)
    return O



def solve_3c9b0459_95990924(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = apply(ulcorner, x3)
    x5 = apply(urcorner, x3)
    x6 = apply(llcorner, x3)
    x7 = apply(lrcorner, x3)
    x8 = fill(x1, ONE, x4)
    x9 = fill(x8, TWO, x5)
    x10 = fill(x9, THREE, x6)
    O = fill(x10, FOUR, x7)
    return O



def solve_3c9b0459_e509e548(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = rbind(subgrid, x1)
    x4 = chain(palette, trim, x3)
    x5 = lbind(contained, THREE)
    x6 = compose(x5, x4)
    x7 = fork(add, height, width)
    x8 = compose(decrement, x7)
    x9 = fork(equality, size, x8)
    x10 = mfilter(x2, x6)
    x11 = mfilter(x2, x9)
    x12 = replace(x1, THREE, SIX)
    x13 = fill(x12, TWO, x10)
    O = fill(x13, ONE, x11)
    return O



def solve_3c9b0459_d43fd935(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, THREE)
    x4 = sizefilter(x2, ONE)
    x5 = rbind(vmatching, x3)
    x6 = rbind(hmatching, x3)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = rbind(gravitate, x3)
    x10 = fork(add, center, x9)
    x11 = fork(connect, center, x10)
    x12 = fork(recolor, color, x11)
    x13 = mapply(x12, x8)
    O = paint(x1, x13)
    return O



def solve_3c9b0459_e73095fd(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = fork(equality, toindices, backdrop)
    x5 = sfilter(x3, x4)
    x6 = lbind(mapply, dneighbors)
    x7 = chain(x6, corners, outbox)
    x8 = fork(difference, x7, outbox)
    x9 = ofcolor(x1, FIVE)
    x10 = rbind(intersection, x9)
    x11 = matcher(size, ZERO)
    x12 = chain(x11, x10, x8)
    x13 = mfilter(x5, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_3c9b0459_1bfc4729(I):
    x1 = rot180(I)
    x2 = asindices(x1)
    x3 = tophalf(x1)
    x4 = bottomhalf(x1)
    x5 = leastcolor(x3)
    x6 = leastcolor(x4)
    x7 = hfrontier(TWO_BY_ZERO)
    x8 = box(x2)
    x9 = combine(x7, x8)
    x10 = fill(x3, x5, x9)
    x11 = hmirror(x10)
    x12 = replace(x11, x5, x6)
    O = vconcat(x10, x12)
    return O



def solve_3c9b0459_93b581b8(I):
    x1 = rot180(I)
    x2 = fgpartition(x1)
    x3 = chain(cmirror, dmirror, merge)
    x4 = x3(x2)
    x5 = upscale(x4, THREE)
    x6 = astuple(NEG_TWO, NEG_TWO)
    x7 = shift(x5, x6)
    x8 = underpaint(x1, x7)
    x9 = toindices(x4)
    x10 = fork(combine, hfrontier, vfrontier)
    x11 = mapply(x10, x9)
    x12 = difference(x11, x9)
    O = fill(x8, ZERO, x12)
    return O



def solve_3c9b0459_9edfc990(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = ofcolor(x1, ONE)
    x5 = rbind(adjacent, x4)
    x6 = mfilter(x3, x5)
    x7 = recolor(ONE, x6)
    O = paint(x1, x7)
    return O



def solve_3c9b0459_7447852a(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = compose(last, center)
    x5 = order(x3, x4)
    x6 = size(x5)
    x7 = interval(ZERO, x6, THREE)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = interval(ZERO, x6, ONE)
    x11 = pair(x5, x10)
    x12 = sfilter(x11, x9)
    x13 = mapply(first, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_3c9b0459_97999447(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(toindices, x2)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    x8 = paint(x1, x7)
    x9 = interval(ZERO, FIVE, ONE)
    x10 = apply(double, x9)
    x11 = apply(increment, x10)
    x12 = apply(tojvec, x11)
    x13 = prapply(shift, x3, x12)
    x14 = merge(x13)
    O = fill(x8, FIVE, x14)
    return O



def solve_3c9b0459_91714a58(I):
    x1 = rot180(I)
    x2 = shape(x1)
    x3 = asindices(x1)
    x4 = objects(x1, T, F, T)
    x5 = argmax(x4, size)
    x6 = mostcolor(x5)
    x7 = canvas(ZERO, x2)
    x8 = paint(x7, x5)
    x9 = rbind(toobject, x8)
    x10 = rbind(colorcount, x6)
    x11 = chain(x10, x9, neighbors)
    x12 = lbind(greater, THREE)
    x13 = compose(x12, x11)
    x14 = sfilter(x3, x13)
    O = fill(x8, ZERO, x14)
    return O



def solve_3c9b0459_8e1813be(I):
    x1 = rot180(I)
    x2 = replace(x1, FIVE, ZERO)
    x3 = objects(x2, T, T, T)
    x4 = first(x3)
    x5 = vline(x4)
    x6 = branch(x5, dmirror, identity)
    x7 = x6(x2)
    x8 = objects(x7, T, T, T)
    x9 = order(x8, uppermost)
    x10 = apply(color, x9)
    x11 = dedupe(x10)
    x12 = size(x11)
    x13 = rbind(repeat, x12)
    x14 = apply(x13, x11)
    O = x6(x14)
    return O



def solve_3c9b0459_bc1d5164(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = crop(x1, TWO_BY_ZERO, THREE_BY_THREE)
    x5 = tojvec(FOUR)
    x6 = crop(x1, x5, THREE_BY_THREE)
    x7 = astuple(TWO, FOUR)
    x8 = crop(x1, x7, THREE_BY_THREE)
    x9 = canvas(ZERO, THREE_BY_THREE)
    x10 = rbind(ofcolor, x2)
    x11 = astuple(x3, x4)
    x12 = astuple(x6, x8)
    x13 = combine(x11, x12)
    x14 = mapply(x10, x13)
    O = fill(x9, x2, x14)
    return O



def solve_3c9b0459_5c2c9af4(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = center(x3)
    x5 = ulcorner(x3)
    x6 = subtract(x4, x5)
    x7 = multiply(NEG_ONE, NINE)
    x8 = interval(ZERO, NINE, ONE)
    x9 = interval(ZERO, x7, NEG_ONE)
    x10 = lbind(multiply, x6)
    x11 = apply(x10, x8)
    x12 = apply(x10, x9)
    x13 = pair(x11, x12)
    x14 = mapply(box, x13)
    x15 = shift(x14, x4)
    O = fill(x1, x2, x15)
    return O



def solve_3c9b0459_75b8110e(I):
    x1 = rot180(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = bottomhalf(x2)
    x6 = tophalf(x3)
    x7 = bottomhalf(x3)
    x8 = rbind(ofcolor, ZERO)
    x9 = fork(difference, asindices, x8)
    x10 = fork(toobject, x9, identity)
    x11 = x10(x6)
    x12 = x10(x5)
    x13 = x10(x7)
    x14 = paint(x4, x13)
    x15 = paint(x14, x12)
    O = paint(x15, x11)
    return O



def solve_3c9b0459_c3f564a4(I):
    x1 = rot180(I)
    x2 = asindices(x1)
    x3 = dmirror(x1)
    x4 = invert(NINE)
    x5 = papply(pair, x1, x3)
    x6 = lbind(apply, maximum)
    x7 = apply(x6, x5)
    x8 = ofcolor(x7, ZERO)
    x9 = difference(x2, x8)
    x10 = toobject(x9, x7)
    x11 = interval(x4, NINE, ONE)
    x12 = interval(NINE, x4, NEG_ONE)
    x13 = pair(x11, x12)
    x14 = lbind(shift, x10)
    x15 = mapply(x14, x13)
    O = paint(x7, x15)
    return O



def solve_3c9b0459_1a07d186(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = mapply(x12, x8)
    x14 = merge(x3)
    x15 = cover(x1, x14)
    O = paint(x15, x13)
    return O



def solve_3c9b0459_d687bc17(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = merge(x3)
    x14 = mapply(x12, x8)
    x15 = cover(x1, x13)
    O = paint(x15, x14)
    return O



def solve_3c9b0459_9af7a82c(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = order(x2, size)
    x4 = valmax(x2, size)
    x5 = rbind(astuple, ONE)
    x6 = lbind(subtract, x4)
    x7 = compose(x5, size)
    x8 = chain(x5, x6, size)
    x9 = fork(canvas, color, x7)
    x10 = lbind(canvas, ZERO)
    x11 = compose(x10, x8)
    x12 = fork(vconcat, x9, x11)
    x13 = compose(cmirror, x12)
    x14 = apply(x13, x3)
    x15 = merge(x14)
    O = cmirror(x15)
    return O



def solve_3c9b0459_ef135b50(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, ZERO)
    x4 = product(x2, x2)
    x5 = power(first, TWO)
    x6 = compose(first, last)
    x7 = fork(equality, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = fork(connect, first, last)
    x10 = mapply(x9, x8)
    x11 = intersection(x10, x3)
    x12 = fill(x1, NINE, x11)
    x13 = trim(x12)
    x14 = asobject(x13)
    x15 = shift(x14, UNITY)
    O = paint(x1, x15)
    return O



def solve_3c9b0459_cbded52d(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = product(x3, x3)
    x5 = fork(vmatching, first, last)
    x6 = fork(hmatching, first, last)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = compose(center, first)
    x10 = compose(center, last)
    x11 = fork(connect, x9, x10)
    x12 = chain(initset, center, x11)
    x13 = compose(color, first)
    x14 = fork(recolor, x13, x12)
    x15 = mapply(x14, x8)
    O = paint(x1, x15)
    return O



def solve_3c9b0459_e26a3af2(I):
    x1 = rot180(I)
    x2 = rot90(x1)
    x3 = apply(mostcommon, x1)
    x4 = apply(mostcommon, x2)
    x5 = repeat(x3, ONE)
    x6 = repeat(x4, ONE)
    x7 = compose(size, dedupe)
    x8 = x7(x3)
    x9 = x7(x4)
    x10 = greater(x9, x8)
    x11 = branch(x10, height, width)
    x12 = x11(x1)
    x13 = rot90(x5)
    x14 = branch(x10, x6, x13)
    x15 = branch(x10, vupscale, hupscale)
    O = x15(x14, x12)
    return O



def solve_3c9b0459_6cf79266(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, ZERO)
    x3 = astuple(ZERO, ORIGIN)
    x4 = initset(x3)
    x5 = upscale(x4, THREE)
    x6 = toindices(x5)
    x7 = lbind(shift, x6)
    x8 = rbind(difference, x2)
    x9 = chain(size, x8, x7)
    x10 = matcher(x9, ZERO)
    x11 = lbind(add, NEG_UNITY)
    x12 = chain(flip, x10, x11)
    x13 = fork(both, x10, x12)
    x14 = sfilter(x2, x13)
    x15 = mapply(x7, x14)
    O = fill(x1, ONE, x15)
    return O



def solve_3c9b0459_a87f7484(I):
    x1 = rot180(I)
    x2 = numcolors(x1)
    x3 = portrait(x1)
    x4 = branch(x3, dmirror, identity)
    x5 = x4(x1)
    x6 = decrement(x2)
    x7 = hsplit(x5, x6)
    x8 = rbind(ofcolor, ZERO)
    x9 = apply(x8, x7)
    x10 = leastcommon(x9)
    x11 = matcher(x8, x10)
    x12 = extract(x7, x11)
    O = x4(x12)
    return O



def solve_3c9b0459_4093f84a(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, FIVE)
    x4 = ofcolor(x1, FIVE)
    x5 = portrait(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x3)
    x8 = lefthalf(x7)
    x9 = righthalf(x7)
    x10 = rbind(order, identity)
    x11 = rbind(order, invert)
    x12 = apply(x10, x8)
    x13 = apply(x11, x9)
    x14 = hconcat(x12, x13)
    O = x6(x14)
    return O



def solve_3c9b0459_ba26e723(I):
    x1 = rot180(I)
    x2 = rbind(divide, THREE)
    x3 = rbind(multiply, THREE)
    x4 = compose(x3, x2)
    x5 = fork(equality, identity, x4)
    x6 = compose(x5, last)
    x7 = ofcolor(x1, FOUR)
    x8 = sfilter(x7, x6)
    O = fill(x1, SIX, x8)
    return O



def solve_3c9b0459_29c11459(I):
    x1 = rot180(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = objects(x3, T, F, T)
    x5 = objects(x2, T, F, T)
    x6 = compose(hfrontier, center)
    x7 = fork(recolor, color, x6)
    x8 = mapply(x7, x5)
    x9 = paint(x2, x8)
    x10 = mapply(x7, x4)
    x11 = paint(x1, x10)
    x12 = objects(x9, T, F, T)
    x13 = apply(urcorner, x12)
    x14 = shift(x13, RIGHT)
    x15 = merge(x12)
    x16 = paint(x11, x15)
    O = fill(x16, FIVE, x14)
    return O



def solve_3c9b0459_963e52fc(I):
    x1 = rot180(I)
    x2 = width(x1)
    x3 = asobject(x1)
    x4 = hperiod(x3)
    x5 = height(x3)
    x6 = astuple(x5, x4)
    x7 = ulcorner(x3)
    x8 = crop(x1, x7, x6)
    x9 = rot90(x8)
    x10 = double(x2)
    x11 = divide(x10, x4)
    x12 = increment(x11)
    x13 = repeat(x9, x12)
    x14 = merge(x13)
    x15 = rot270(x14)
    x16 = astuple(x5, x10)
    O = crop(x15, ORIGIN, x16)
    return O



def solve_3c9b0459_1f0c79e5(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = leastcolor(x3)
    x5 = ofcolor(x3, x4)
    x6 = combine(x2, x5)
    x7 = recolor(x4, x6)
    x8 = compose(decrement, double)
    x9 = ulcorner(x6)
    x10 = invert(x9)
    x11 = shift(x2, x10)
    x12 = apply(x8, x11)
    x13 = interval(ZERO, NINE, ONE)
    x14 = prapply(multiply, x12, x13)
    x15 = lbind(shift, x7)
    x16 = mapply(x15, x14)
    O = paint(x1, x16)
    return O



def solve_3c9b0459_6773b310(I):
    x1 = rot180(I)
    x2 = compress(x1)
    x3 = neighbors(ORIGIN)
    x4 = insert(ORIGIN, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = astuple(FOUR, FOUR)
    x8 = shift(x6, x7)
    x9 = fork(insert, identity, neighbors)
    x10 = apply(x9, x8)
    x11 = rbind(toobject, x2)
    x12 = apply(x11, x10)
    x13 = rbind(colorcount, SIX)
    x14 = matcher(x13, TWO)
    x15 = mfilter(x12, x14)
    x16 = fill(x2, ONE, x15)
    x17 = replace(x16, SIX, ZERO)
    O = downscale(x17, THREE)
    return O



def solve_3c9b0459_780d0b14(I):
    x1 = rot180(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, T, T)
    x4 = rbind(greater, TWO)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = totuple(x6)
    x8 = apply(color, x7)
    x9 = apply(center, x7)
    x10 = pair(x8, x9)
    x11 = fill(x1, ZERO, x2)
    x12 = paint(x11, x10)
    x13 = rbind(greater, ONE)
    x14 = compose(dedupe, totuple)
    x15 = chain(x13, size, x14)
    x16 = sfilter(x12, x15)
    x17 = rot90(x16)
    x18 = sfilter(x17, x15)
    O = rot270(x18)
    return O



def solve_3c9b0459_2204b7a8(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sfilter, x2)
    x4 = compose(size, x3)
    x5 = x4(vline)
    x6 = x4(hline)
    x7 = greater(x5, x6)
    x8 = branch(x7, lefthalf, tophalf)
    x9 = branch(x7, righthalf, bottomhalf)
    x10 = branch(x7, hconcat, vconcat)
    x11 = x8(x1)
    x12 = x9(x1)
    x13 = index(x11, ORIGIN)
    x14 = shape(x12)
    x15 = decrement(x14)
    x16 = index(x12, x15)
    x17 = replace(x11, THREE, x13)
    x18 = replace(x12, THREE, x16)
    O = x10(x17, x18)
    return O



def solve_3c9b0459_d9f24cd1(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, FIVE)
    x4 = prapply(connect, x2, x3)
    x5 = mfilter(x4, vline)
    x6 = underfill(x1, TWO, x5)
    x7 = matcher(numcolors, TWO)
    x8 = objects(x6, F, F, T)
    x9 = sfilter(x8, x7)
    x10 = difference(x8, x9)
    x11 = colorfilter(x10, TWO)
    x12 = mapply(toindices, x11)
    x13 = apply(urcorner, x9)
    x14 = shift(x13, UNITY)
    x15 = rbind(shoot, UP)
    x16 = mapply(x15, x14)
    x17 = fill(x6, TWO, x16)
    x18 = mapply(vfrontier, x12)
    O = fill(x17, TWO, x18)
    return O



def solve_3c9b0459_b782dc8a(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = ofcolor(x1, x2)
    x5 = first(x4)
    x6 = dneighbors(x5)
    x7 = toobject(x6, x1)
    x8 = mostcolor(x7)
    x9 = ofcolor(x1, x8)
    x10 = colorfilter(x3, ZERO)
    x11 = rbind(adjacent, x9)
    x12 = mfilter(x10, x11)
    x13 = toindices(x12)
    x14 = rbind(manhattan, x4)
    x15 = chain(even, x14, initset)
    x16 = sfilter(x13, x15)
    x17 = difference(x13, x16)
    x18 = fill(x1, x2, x16)
    O = fill(x18, x8, x17)
    return O



def solve_3c9b0459_673ef223(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, EIGHT)
    x4 = replace(x1, EIGHT, FOUR)
    x5 = colorfilter(x2, TWO)
    x6 = argmin(x2, uppermost)
    x7 = apply(uppermost, x5)
    x8 = fork(subtract, maximum, minimum)
    x9 = x8(x7)
    x10 = toivec(x9)
    x11 = leftmost(x6)
    x12 = equality(x11, ZERO)
    x13 = branch(x12, LEFT, RIGHT)
    x14 = rbind(shoot, x13)
    x15 = mapply(x14, x3)
    x16 = underfill(x4, EIGHT, x15)
    x17 = shift(x3, x10)
    x18 = mapply(hfrontier, x17)
    O = underfill(x16, EIGHT, x18)
    return O



def solve_3c9b0459_f5b8619d(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = mapply(vfrontier, x3)
    x5 = underfill(x1, EIGHT, x4)
    x6 = hconcat(x5, x5)
    O = vconcat(x6, x6)
    return O



def solve_3c9b0459_f8c80d96(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = colorfilter(x3, x2)
    x5 = argmax(x4, size)
    x6 = argmin(x3, width)
    x7 = size(x6)
    x8 = equality(x7, ONE)
    x9 = branch(x8, identity, outbox)
    x10 = chain(outbox, outbox, x9)
    x11 = power(x10, TWO)
    x12 = power(x10, THREE)
    x13 = x10(x5)
    x14 = x11(x5)
    x15 = x12(x5)
    x16 = fill(x1, x2, x13)
    x17 = fill(x16, x2, x14)
    x18 = fill(x17, x2, x15)
    O = replace(x18, ZERO, FIVE)
    return O



def solve_3c9b0459_ecdecbb3(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = colorfilter(x2, EIGHT)
    x5 = product(x3, x4)
    x6 = fork(gravitate, first, last)
    x7 = compose(crement, x6)
    x8 = compose(center, first)
    x9 = fork(add, x8, x7)
    x10 = fork(connect, x8, x9)
    x11 = apply(x10, x5)
    x12 = lbind(greater, EIGHT)
    x13 = compose(x12, size)
    x14 = mfilter(x11, x13)
    x15 = fill(x1, TWO, x14)
    x16 = apply(x9, x5)
    x17 = intersection(x14, x16)
    x18 = mapply(neighbors, x17)
    O = fill(x15, EIGHT, x18)
    return O



def solve_3c9b0459_e5062a87(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, TWO)
    x3 = recolor(ZERO, x2)
    x4 = normalize(x3)
    x5 = occurrences(x1, x3)
    x6 = lbind(shift, x4)
    x7 = apply(x6, x5)
    x8 = astuple(ONE, THREE)
    x9 = astuple(FIVE, ONE)
    x10 = astuple(TWO, SIX)
    x11 = initset(x8)
    x12 = insert(x9, x11)
    x13 = insert(x10, x12)
    x14 = rbind(contained, x13)
    x15 = chain(flip, x14, ulcorner)
    x16 = sfilter(x7, x15)
    x17 = merge(x16)
    x18 = recolor(TWO, x17)
    O = paint(x1, x18)
    return O



def solve_3c9b0459_a8d7556c(I):
    x1 = rot180(I)
    x2 = initset(ORIGIN)
    x3 = recolor(ZERO, x2)
    x4 = upscale(x3, TWO)
    x5 = occurrences(x1, x4)
    x6 = lbind(shift, x4)
    x7 = mapply(x6, x5)
    x8 = fill(x1, TWO, x7)
    x9 = add(SIX, SIX)
    x10 = astuple(EIGHT, x9)
    x11 = index(x8, x10)
    x12 = equality(x11, TWO)
    x13 = initset(x10)
    x14 = add(x10, DOWN)
    x15 = insert(x14, x13)
    x16 = toobject(x15, x8)
    x17 = toobject(x15, x1)
    x18 = branch(x12, x17, x16)
    O = paint(x8, x18)
    return O



def solve_3c9b0459_834ec97d(I):
    x1 = rot180(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = shift(x4, DOWN)
    x6 = fill(x1, ZERO, x4)
    x7 = paint(x6, x5)
    x8 = uppermost(x5)
    x9 = leftmost(x5)
    x10 = subtract(x9, TEN)
    x11 = add(x9, TEN)
    x12 = interval(x10, x11, TWO)
    x13 = lbind(greater, x8)
    x14 = compose(x13, first)
    x15 = rbind(contained, x12)
    x16 = compose(x15, last)
    x17 = sfilter(x2, x14)
    x18 = sfilter(x17, x16)
    O = fill(x7, FOUR, x18)
    return O



def solve_3c9b0459_90f3ed37(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, uppermost)
    x4 = first(x3)
    x5 = remove(x4, x3)
    x6 = normalize(x4)
    x7 = lbind(shift, x6)
    x8 = compose(x7, ulcorner)
    x9 = interval(TWO, NEG_ONE, NEG_ONE)
    x10 = apply(tojvec, x9)
    x11 = rbind(apply, x10)
    x12 = lbind(compose, size)
    x13 = lbind(lbind, intersection)
    x14 = compose(x12, x13)
    x15 = lbind(lbind, shift)
    x16 = chain(x11, x15, x8)
    x17 = fork(argmax, x16, x14)
    x18 = mapply(x17, x5)
    O = underfill(x1, ONE, x18)
    return O



def solve_3c9b0459_8403a5d5(I):
    x1 = rot180(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = color(x4)
    x6 = leftmost(x4)
    x7 = interval(x6, TEN, TWO)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = sfilter(x2, x9)
    x11 = increment(x6)
    x12 = add(x6, THREE)
    x13 = interval(x11, TEN, FOUR)
    x14 = interval(x12, TEN, FOUR)
    x15 = lbind(astuple, NINE)
    x16 = apply(tojvec, x13)
    x17 = apply(x15, x14)
    x18 = fill(x1, x5, x10)
    x19 = fill(x18, FIVE, x16)
    O = fill(x19, FIVE, x17)
    return O



def solve_3c9b0459_539a4f51(I):
    x1 = rot180(I)
    x2 = shape(x1)
    x3 = index(x1, ORIGIN)
    x4 = colorcount(x1, ZERO)
    x5 = decrement(x2)
    x6 = positive(x4)
    x7 = branch(x6, x5, x2)
    x8 = crop(x1, ORIGIN, x7)
    x9 = width(x8)
    x10 = astuple(ONE, x9)
    x11 = crop(x8, ORIGIN, x10)
    x12 = vupscale(x11, x9)
    x13 = dmirror(x12)
    x14 = hconcat(x8, x12)
    x15 = hconcat(x13, x8)
    x16 = vconcat(x14, x15)
    x17 = asobject(x16)
    x18 = multiply(UNITY, TEN)
    x19 = canvas(x3, x18)
    O = paint(x19, x17)
    return O



def solve_3c9b0459_3bdb4ada(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = compose(increment, ulcorner)
    x5 = compose(decrement, lrcorner)
    x6 = apply(x4, x3)
    x7 = apply(x5, x3)
    x8 = papply(connect, x6, x7)
    x9 = apply(last, x6)
    x10 = compose(last, first)
    x11 = power(last, TWO)
    x12 = fork(subtract, x10, x11)
    x13 = compose(even, x12)
    x14 = lbind(rbind, astuple)
    x15 = lbind(compose, x13)
    x16 = compose(x15, x14)
    x17 = fork(sfilter, first, x16)
    x18 = pair(x8, x9)
    x19 = mapply(x17, x18)
    O = fill(x1, ZERO, x19)
    return O



def solve_3c9b0459_ec883f72(I):
    x1 = rot180(I)
    x2 = palette(x1)
    x3 = objects(x1, T, T, T)
    x4 = fork(multiply, height, width)
    x5 = argmax(x3, x4)
    x6 = color(x5)
    x7 = remove(ZERO, x2)
    x8 = other(x7, x6)
    x9 = lrcorner(x5)
    x10 = llcorner(x5)
    x11 = urcorner(x5)
    x12 = ulcorner(x5)
    x13 = shoot(x9, UNITY)
    x14 = shoot(x10, DOWN_LEFT)
    x15 = shoot(x11, UP_RIGHT)
    x16 = shoot(x12, NEG_UNITY)
    x17 = combine(x13, x14)
    x18 = combine(x15, x16)
    x19 = combine(x17, x18)
    O = underfill(x1, x8, x19)
    return O



def solve_3c9b0459_2bee17df(I):
    x1 = rot180(I)
    x2 = height(x1)
    x3 = rot90(x1)
    x4 = subtract(x2, TWO)
    x5 = interval(ZERO, x2, ONE)
    x6 = rbind(colorcount, ZERO)
    x7 = matcher(x6, x4)
    x8 = rbind(vsplit, x2)
    x9 = lbind(apply, x7)
    x10 = compose(x9, x8)
    x11 = x10(x1)
    x12 = pair(x5, x11)
    x13 = sfilter(x12, last)
    x14 = mapply(hfrontier, x13)
    x15 = x10(x3)
    x16 = pair(x15, x5)
    x17 = sfilter(x16, first)
    x18 = mapply(vfrontier, x17)
    x19 = astuple(x14, x18)
    x20 = merge(x19)
    O = underfill(x1, THREE, x20)
    return O



def solve_3c9b0459_29623171(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = interval(ZERO, NINE, FOUR)
    x4 = product(x3, x3)
    x5 = rbind(add, THREE)
    x6 = rbind(interval, ONE)
    x7 = fork(x6, identity, x5)
    x8 = compose(x7, first)
    x9 = compose(x7, last)
    x10 = fork(product, x8, x9)
    x11 = rbind(colorcount, x2)
    x12 = rbind(toobject, x1)
    x13 = compose(x11, x12)
    x14 = apply(x10, x4)
    x15 = valmax(x14, x13)
    x16 = matcher(x13, x15)
    x17 = compose(flip, x16)
    x18 = mfilter(x14, x16)
    x19 = mfilter(x14, x17)
    x20 = fill(x1, x2, x18)
    O = fill(x20, ZERO, x19)
    return O



def solve_3c9b0459_8731374e(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = height(x4)
    x6 = width(x4)
    x7 = vsplit(x4, x5)
    x8 = lbind(greater, FOUR)
    x9 = compose(x8, numcolors)
    x10 = sfilter(x7, x9)
    x11 = merge(x10)
    x12 = rot90(x11)
    x13 = vsplit(x12, x6)
    x14 = sfilter(x13, x9)
    x15 = merge(x14)
    x16 = rot270(x15)
    x17 = leastcolor(x16)
    x18 = ofcolor(x16, x17)
    x19 = fork(combine, vfrontier, hfrontier)
    x20 = mapply(x19, x18)
    O = fill(x16, x17, x20)
    return O



def solve_3c9b0459_db93a21d(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, NINE)
    x4 = colorfilter(x2, NINE)
    x5 = rbind(shoot, DOWN)
    x6 = mapply(x5, x3)
    x7 = underfill(x1, ONE, x6)
    x8 = compose(halve, width)
    x9 = rbind(greater, ONE)
    x10 = compose(x9, x8)
    x11 = matcher(x8, THREE)
    x12 = power(outbox, TWO)
    x13 = power(outbox, THREE)
    x14 = mapply(outbox, x4)
    x15 = sfilter(x4, x10)
    x16 = sfilter(x4, x11)
    x17 = mapply(x12, x15)
    x18 = mapply(x13, x16)
    x19 = fill(x7, THREE, x14)
    x20 = fill(x19, THREE, x17)
    O = fill(x20, THREE, x18)
    return O



def solve_3c9b0459_53b68214(I):
    x1 = rot180(I)
    x2 = width(x1)
    x3 = objects(x1, T, T, T)
    x4 = first(x3)
    x5 = vperiod(x4)
    x6 = toivec(x5)
    x7 = interval(ZERO, NINE, ONE)
    x8 = lbind(multiply, x6)
    x9 = apply(x8, x7)
    x10 = lbind(shift, x4)
    x11 = mapply(x10, x9)
    x12 = astuple(x2, x2)
    x13 = portrait(x4)
    x14 = shape(x4)
    x15 = add(DOWN, x14)
    x16 = decrement(x15)
    x17 = shift(x4, x16)
    x18 = branch(x13, x11, x17)
    x19 = canvas(ZERO, x12)
    x20 = paint(x19, x4)
    O = paint(x20, x18)
    return O



def solve_3c9b0459_d6ad076f(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = argmin(x2, size)
    x4 = argmax(x2, size)
    x5 = vmatching(x3, x4)
    x6 = branch(x5, DOWN, RIGHT)
    x7 = branch(x5, uppermost, leftmost)
    x8 = valmax(x2, x7)
    x9 = x7(x3)
    x10 = equality(x8, x9)
    x11 = branch(x10, NEG_ONE, ONE)
    x12 = multiply(x6, x11)
    x13 = inbox(x3)
    x14 = rbind(shoot, x12)
    x15 = mapply(x14, x13)
    x16 = underfill(x1, EIGHT, x15)
    x17 = objects(x16, T, F, T)
    x18 = colorfilter(x17, EIGHT)
    x19 = rbind(bordering, x1)
    x20 = mfilter(x18, x19)
    O = cover(x16, x20)
    return O



def solve_3c9b0459_6cdd2623(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = prapply(connect, x3, x3)
    x5 = fgpartition(x1)
    x6 = merge(x5)
    x7 = cover(x1, x6)
    x8 = fork(either, hline, vline)
    x9 = box(x6)
    x10 = rbind(difference, x9)
    x11 = chain(positive, size, x10)
    x12 = fork(both, x8, x11)
    x13 = mfilter(x4, x12)
    O = fill(x7, x2, x13)
    return O



def solve_3c9b0459_cdecee7f(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = astuple(ONE, THREE)
    x4 = size(x2)
    x5 = order(x2, leftmost)
    x6 = apply(color, x5)
    x7 = rbind(canvas, UNITY)
    x8 = apply(x7, x6)
    x9 = merge(x8)
    x10 = dmirror(x9)
    x11 = subtract(NINE, x4)
    x12 = astuple(ONE, x11)
    x13 = canvas(ZERO, x12)
    x14 = hconcat(x10, x13)
    x15 = hsplit(x14, THREE)
    x16 = merge(x15)
    x17 = crop(x16, ORIGIN, x3)
    x18 = crop(x16, DOWN, x3)
    x19 = crop(x16, TWO_BY_ZERO, x3)
    x20 = vmirror(x18)
    x21 = vconcat(x17, x20)
    O = vconcat(x21, x19)
    return O



def solve_3c9b0459_3345333e(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = cover(x1, x3)
    x5 = leastcolor(x4)
    x6 = ofcolor(x4, x5)
    x7 = neighbors(ORIGIN)
    x8 = mapply(neighbors, x7)
    x9 = vmirror(x6)
    x10 = lbind(shift, x9)
    x11 = apply(x10, x8)
    x12 = rbind(intersection, x6)
    x13 = compose(size, x12)
    x14 = argmax(x11, x13)
    O = fill(x4, x5, x14)
    return O



def solve_3c9b0459_b190f7f5(I):
    x1 = rot180(I)
    x2 = portrait(x1)
    x3 = branch(x2, vsplit, hsplit)
    x4 = x3(x1, TWO)
    x5 = argmin(x4, numcolors)
    x6 = argmax(x4, numcolors)
    x7 = width(x6)
    x8 = rbind(repeat, x7)
    x9 = chain(dmirror, merge, x8)
    x10 = upscale(x6, x7)
    x11 = x9(x5)
    x12 = x9(x11)
    x13 = ofcolor(x12, ZERO)
    O = fill(x10, ZERO, x13)
    return O



def solve_3c9b0459_caa06a1f(I):
    x1 = rot180(I)
    x2 = asobject(x1)
    x3 = shape(x1)
    x4 = decrement(x3)
    x5 = index(x1, x4)
    x6 = double(x3)
    x7 = canvas(x5, x6)
    x8 = paint(x7, x2)
    x9 = objects(x8, F, F, T)
    x10 = first(x9)
    x11 = shift(x10, LEFT)
    x12 = vperiod(x11)
    x13 = hperiod(x11)
    x14 = neighbors(ORIGIN)
    x15 = lbind(mapply, neighbors)
    x16 = power(x15, TWO)
    x17 = x16(x14)
    x18 = astuple(x12, x13)
    x19 = lbind(multiply, x18)
    x20 = apply(x19, x17)
    x21 = lbind(shift, x11)
    x22 = mapply(x21, x20)
    O = paint(x1, x22)
    return O



def solve_3c9b0459_e21d9049(I):
    x1 = rot180(I)
    x2 = asindices(x1)
    x3 = leastcolor(x1)
    x4 = objects(x1, T, F, T)
    x5 = ofcolor(x1, x3)
    x6 = merge(x4)
    x7 = shape(x6)
    x8 = neighbors(ORIGIN)
    x9 = lbind(mapply, neighbors)
    x10 = power(x9, TWO)
    x11 = x10(x8)
    x12 = lbind(multiply, x7)
    x13 = lbind(shift, x6)
    x14 = apply(x12, x11)
    x15 = mapply(x13, x14)
    x16 = lbind(hmatching, x5)
    x17 = lbind(vmatching, x5)
    x18 = fork(either, x16, x17)
    x19 = compose(x18, initset)
    x20 = paint(x1, x15)
    x21 = sfilter(x2, x19)
    x22 = difference(x2, x21)
    O = cover(x20, x22)
    return O



def solve_3c9b0459_746b3537(I):
    x1 = rot180(I)
    x2 = chain(size, dedupe, first)
    x3 = x2(x1)
    x4 = equality(x3, ONE)
    x5 = branch(x4, dmirror, identity)
    x6 = x5(x1)
    x7 = objects(x6, T, F, F)
    x8 = order(x7, leftmost)
    x9 = apply(color, x8)
    x10 = repeat(x9, ONE)
    O = x5(x10)
    return O



def solve_3c9b0459_63613498(I):
    x1 = rot180(I)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = ofcolor(x2, ZERO)
    x4 = asindices(x2)
    x5 = difference(x4, x3)
    x6 = normalize(x5)
    x7 = objects(x1, T, F, T)
    x8 = compose(toindices, normalize)
    x9 = matcher(x8, x6)
    x10 = mfilter(x7, x9)
    x11 = fill(x1, FIVE, x10)
    x12 = asobject(x2)
    O = paint(x11, x12)
    return O



def solve_3c9b0459_06df4c85(I):
    x1 = rot180(I)
    x2 = partition(x1)
    x3 = mostcolor(x1)
    x4 = ofcolor(x1, x3)
    x5 = colorfilter(x2, ZERO)
    x6 = argmax(x2, size)
    x7 = difference(x2, x5)
    x8 = remove(x6, x7)
    x9 = merge(x8)
    x10 = product(x9, x9)
    x11 = power(first, TWO)
    x12 = compose(first, last)
    x13 = fork(equality, x11, x12)
    x14 = sfilter(x10, x13)
    x15 = compose(last, first)
    x16 = power(last, TWO)
    x17 = fork(connect, x15, x16)
    x18 = fork(recolor, color, x17)
    x19 = apply(x18, x14)
    x20 = fork(either, vline, hline)
    x21 = mfilter(x19, x20)
    x22 = paint(x1, x21)
    O = fill(x22, x3, x4)
    return O



def solve_3c9b0459_4522001f(I):
    x1 = rot180(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = toindices(x3)
    x5 = contained(ZERO_BY_TWO, x4)
    x6 = contained(TWO_BY_TWO, x4)
    x7 = contained(TWO_BY_ZERO, x4)
    x8 = astuple(NINE, NINE)
    x9 = canvas(ZERO, x8)
    x10 = astuple(THREE, ORIGIN)
    x11 = initset(x10)
    x12 = upscale(x11, TWO)
    x13 = upscale(x12, TWO)
    x14 = shape(x13)
    x15 = shift(x13, x14)
    x16 = combine(x13, x15)
    x17 = paint(x9, x16)
    x18 = rot90(x17)
    x19 = rot180(x17)
    x20 = rot270(x17)
    x21 = branch(x5, x18, x17)
    x22 = branch(x6, x19, x21)
    O = branch(x7, x20, x22)
    return O



def solve_3c9b0459_eb5a1d5d(I):
    x1 = rot180(I)
    x2 = compose(dmirror, dedupe)
    x3 = x2(x1)
    x4 = x2(x3)
    x5 = fork(remove, last, identity)
    x6 = compose(hmirror, x5)
    x7 = fork(vconcat, identity, x6)
    x8 = x7(x4)
    x9 = dmirror(x8)
    O = x7(x9)
    return O



def solve_3c9b0459_995c5fa3(I):
    x1 = rot180(I)
    x2 = hsplit(x1, THREE)
    x3 = astuple(TWO, ONE)
    x4 = rbind(ofcolor, ZERO)
    x5 = compose(ulcorner, x4)
    x6 = compose(size, x4)
    x7 = matcher(x6, ZERO)
    x8 = matcher(x5, UNITY)
    x9 = matcher(x5, DOWN)
    x10 = matcher(x5, x3)
    x11 = rbind(multiply, THREE)
    x12 = power(double, TWO)
    x13 = compose(double, x7)
    x14 = chain(x12, double, x8)
    x15 = compose(x11, x9)
    x16 = compose(x12, x10)
    x17 = fork(add, x13, x14)
    x18 = fork(add, x15, x16)
    x19 = fork(add, x17, x18)
    x20 = rbind(canvas, UNITY)
    x21 = compose(x20, x19)
    x22 = apply(x21, x2)
    x23 = merge(x22)
    O = hupscale(x23, THREE)
    return O



def solve_3c9b0459_36fdfd69(I):
    x1 = rot180(I)
    x2 = upscale(x1, TWO)
    x3 = objects(x2, T, T, T)
    x4 = colorfilter(x3, TWO)
    x5 = fork(manhattan, first, last)
    x6 = lbind(greater, FIVE)
    x7 = compose(x6, x5)
    x8 = product(x4, x4)
    x9 = sfilter(x8, x7)
    x10 = apply(merge, x9)
    x11 = mapply(delta, x10)
    x12 = fill(x2, FOUR, x11)
    x13 = merge(x4)
    x14 = paint(x12, x13)
    O = downscale(x14, TWO)
    return O



def solve_3c9b0459_0a938d79(I):
    x1 = rot180(I)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = x3(x1)
    x5 = fgpartition(x4)
    x6 = merge(x5)
    x7 = chain(double, decrement, width)
    x8 = x7(x6)
    x9 = compose(vfrontier, tojvec)
    x10 = lbind(mapply, x9)
    x11 = rbind(interval, x8)
    x12 = width(x4)
    x13 = rbind(x11, x12)
    x14 = chain(x10, x13, leftmost)
    x15 = fork(recolor, color, x14)
    x16 = mapply(x15, x5)
    x17 = paint(x4, x16)
    O = x3(x17)
    return O



def solve_3c9b0459_045e512c(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = lbind(shift, x3)
    x6 = lbind(mapply, x5)
    x7 = double(TEN)
    x8 = interval(FOUR, x7, FOUR)
    x9 = rbind(apply, x8)
    x10 = lbind(position, x3)
    x11 = lbind(rbind, multiply)
    x12 = chain(x9, x11, x10)
    x13 = compose(x6, x12)
    x14 = fork(recolor, color, x13)
    x15 = mapply(x14, x4)
    O = paint(x1, x15)
    return O



def solve_3c9b0459_82819916(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = normalize(x3)
    x6 = compose(last, last)
    x7 = rbind(argmin, x6)
    x8 = compose(first, x7)
    x9 = fork(other, palette, x8)
    x10 = x8(x5)
    x11 = matcher(first, x10)
    x12 = sfilter(x5, x11)
    x13 = difference(x5, x12)
    x14 = compose(toivec, uppermost)
    x15 = lbind(shift, x12)
    x16 = lbind(shift, x13)
    x17 = compose(x15, x14)
    x18 = compose(x16, x14)
    x19 = fork(recolor, x8, x17)
    x20 = fork(recolor, x9, x18)
    x21 = fork(combine, x19, x20)
    x22 = mapply(x21, x4)
    O = paint(x1, x22)
    return O



def solve_3c9b0459_99fa7670(I):
    x1 = rot180(I)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x3)
    x8 = paint(x1, x7)
    x9 = add(x2, DOWN_LEFT)
    x10 = initset(x9)
    x11 = recolor(ZERO, x10)
    x12 = objects(x8, T, F, T)
    x13 = insert(x11, x12)
    x14 = order(x13, uppermost)
    x15 = first(x14)
    x16 = remove(x11, x14)
    x17 = remove(x15, x14)
    x18 = compose(lrcorner, first)
    x19 = compose(lrcorner, last)
    x20 = fork(connect, x18, x19)
    x21 = compose(color, first)
    x22 = fork(recolor, x21, x20)
    x23 = pair(x16, x17)
    x24 = mapply(x22, x23)
    O = underpaint(x8, x24)
    return O



def solve_3c9b0459_72322fa7(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = matcher(numcolors, ONE)
    x4 = sfilter(x2, x3)
    x5 = difference(x2, x4)
    x6 = lbind(matcher, first)
    x7 = compose(x6, mostcolor)
    x8 = fork(sfilter, identity, x7)
    x9 = fork(difference, identity, x8)
    x10 = lbind(occurrences, x1)
    x11 = compose(x10, x8)
    x12 = compose(x10, x9)
    x13 = compose(ulcorner, x9)
    x14 = fork(subtract, ulcorner, x13)
    x15 = lbind(rbind, add)
    x16 = compose(x15, x14)
    x17 = fork(apply, x16, x12)
    x18 = lbind(lbind, shift)
    x19 = compose(x18, normalize)
    x20 = fork(mapply, x19, x11)
    x21 = fork(mapply, x19, x17)
    x22 = mapply(x20, x5)
    x23 = mapply(x21, x5)
    x24 = paint(x1, x22)
    O = paint(x24, x23)
    return O



def solve_3c9b0459_855e0971(I):
    x1 = rot180(I)
    x2 = frontiers(x1)
    x3 = sfilter(x2, hline)
    x4 = size(x3)
    x5 = positive(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x1)
    x8 = rbind(subgrid, x7)
    x9 = matcher(color, ZERO)
    x10 = compose(flip, x9)
    x11 = partition(x7)
    x12 = sfilter(x11, x10)
    x13 = rbind(ofcolor, ZERO)
    x14 = lbind(mapply, vfrontier)
    x15 = chain(x14, x13, x8)
    x16 = fork(shift, x15, ulcorner)
    x17 = fork(intersection, toindices, x16)
    x18 = mapply(x17, x12)
    x19 = fill(x7, ZERO, x18)
    O = x6(x19)
    return O



def solve_3c9b0459_a78176bb(I):
    x1 = rot180(I)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = remove(ZERO, x2)
    x5 = other(x4, FIVE)
    x6 = colorfilter(x3, FIVE)
    x7 = lbind(index, x1)
    x8 = compose(x7, urcorner)
    x9 = matcher(x8, FIVE)
    x10 = sfilter(x6, x9)
    x11 = difference(x6, x10)
    x12 = apply(urcorner, x10)
    x13 = apply(llcorner, x11)
    x14 = rbind(add, UP_RIGHT)
    x15 = rbind(add, DOWN_LEFT)
    x16 = apply(x14, x12)
    x17 = apply(x15, x13)
    x18 = rbind(shoot, UNITY)
    x19 = rbind(shoot, NEG_UNITY)
    x20 = fork(combine, x18, x19)
    x21 = mapply(x20, x16)
    x22 = mapply(x20, x17)
    x23 = combine(x21, x22)
    x24 = fill(x1, x5, x23)
    O = replace(x24, FIVE, ZERO)
    return O



def solve_3c9b0459_6aa20dc0(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(rbind, upscale)
    x10 = interval(ONE, FOUR, ONE)
    x11 = apply(x9, x10)
    x12 = initset(identity)
    x13 = insert(vmirror, x12)
    x14 = insert(hmirror, x13)
    x15 = insert(cmirror, x14)
    x16 = insert(dmirror, x15)
    x17 = fork(compose, first, last)
    x18 = lbind(occurrences, x1)
    x19 = lbind(lbind, shift)
    x20 = compose(x18, x8)
    x21 = product(x16, x11)
    x22 = apply(x17, x21)
    x23 = rapply(x22, x4)
    x24 = fork(mapply, x19, x20)
    x25 = mapply(x24, x23)
    O = paint(x1, x25)
    return O



def solve_3c9b0459_2bcee788(I):
    x1 = rot180(I)
    x2 = mostcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = replace(x1, x2, THREE)
    x5 = argmax(x3, size)
    x6 = argmin(x3, size)
    x7 = position(x5, x6)
    x8 = first(x7)
    x9 = last(x7)
    x10 = subgrid(x5, x4)
    x11 = hline(x6)
    x12 = hmirror(x10)
    x13 = vmirror(x10)
    x14 = branch(x11, x12, x13)
    x15 = branch(x11, x8, ZERO)
    x16 = branch(x11, ZERO, x9)
    x17 = asobject(x14)
    x18 = matcher(first, THREE)
    x19 = compose(flip, x18)
    x20 = sfilter(x17, x19)
    x21 = ulcorner(x5)
    x22 = shape(x5)
    x23 = astuple(x15, x16)
    x24 = multiply(x22, x23)
    x25 = add(x21, x24)
    x26 = shift(x20, x25)
    O = paint(x4, x26)
    return O



def solve_3c9b0459_f35d900a(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = palette(x1)
    x4 = remove(ZERO, x3)
    x5 = lbind(other, x4)
    x6 = compose(x5, color)
    x7 = fork(recolor, x6, outbox)
    x8 = mapply(x7, x2)
    x9 = mapply(toindices, x2)
    x10 = box(x9)
    x11 = difference(x10, x9)
    x12 = lbind(argmin, x9)
    x13 = rbind(compose, initset)
    x14 = lbind(rbind, manhattan)
    x15 = chain(x13, x14, initset)
    x16 = chain(initset, x12, x15)
    x17 = fork(manhattan, initset, x16)
    x18 = compose(even, x17)
    x19 = sfilter(x11, x18)
    x20 = paint(x1, x8)
    O = fill(x20, FIVE, x19)
    return O



def solve_3c9b0459_0dfd9992(I):
    x1 = rot180(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_3c9b0459_29ec7d0e(I):
    x1 = rot180(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_3c9b0459_469497ad(I):
    x1 = rot180(I)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    x4 = upscale(x1, x3)
    x5 = objects(x4, F, F, T)
    x6 = argmin(x5, size)
    x7 = ulcorner(x6)
    x8 = llcorner(x6)
    x9 = shoot(x7, NEG_UNITY)
    x10 = shoot(x7, UNITY)
    x11 = shoot(x8, DOWN_LEFT)
    x12 = shoot(x8, UP_RIGHT)
    x13 = combine(x9, x10)
    x14 = combine(x11, x12)
    x15 = combine(x13, x14)
    x16 = underfill(x4, TWO, x15)
    x17 = objects(x16, T, F, T)
    x18 = argmax(x17, lrcorner)
    O = paint(x16, x18)
    return O



def solve_3c9b0459_484b58aa(I):
    x1 = rot180(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, TWO)
    x9 = astuple(TWO, x3)
    x10 = power(decrement, TWO)
    x11 = x10(x2)
    x12 = x10(x3)
    x13 = toivec(x12)
    x14 = tojvec(x11)
    x15 = crop(x1, x13, x9)
    x16 = crop(x1, x14, x8)
    x17 = asobject(x16)
    x18 = asobject(x15)
    x19 = vperiod(x17)
    x20 = hperiod(x18)
    x21 = astuple(x19, x20)
    x22 = lbind(multiply, x21)
    x23 = neighbors(ORIGIN)
    x24 = mapply(neighbors, x23)
    x25 = apply(x22, x24)
    x26 = lbind(shift, x7)
    x27 = mapply(x26, x25)
    O = paint(x1, x27)
    return O



def solve_3c9b0459_3befdf3e(I):
    x1 = rot180(I)
    x2 = objects(x1, F, F, T)
    x3 = leastcolor(x1)
    x4 = palette(x1)
    x5 = remove(ZERO, x4)
    x6 = other(x5, x3)
    x7 = switch(x1, x3, x6)
    x8 = compose(width, inbox)
    x9 = lbind(power, outbox)
    x10 = compose(x9, x8)
    x11 = initset(x10)
    x12 = lbind(rapply, x11)
    x13 = chain(initset, first, x12)
    x14 = fork(rapply, x13, identity)
    x15 = compose(first, x14)
    x16 = compose(backdrop, x15)
    x17 = lbind(chain, backdrop)
    x18 = lbind(x17, inbox)
    x19 = compose(x18, x10)
    x20 = lbind(apply, initset)
    x21 = chain(x20, corners, x16)
    x22 = fork(mapply, x19, x21)
    x23 = fork(intersection, x16, x22)
    x24 = mapply(x16, x2)
    x25 = mapply(x23, x2)
    x26 = underfill(x7, x6, x24)
    O = fill(x26, ZERO, x25)
    return O



def solve_3c9b0459_49d1d64f(I):
    x1 = rot180(I)
    x2 = shape(x1)
    x3 = add(x2, TWO)
    x4 = canvas(ZERO, x3)
    x5 = asobject(x1)
    x6 = shift(x5, UNITY)
    x7 = paint(x4, x6)
    x8 = asindices(x4)
    x9 = fork(difference, box, corners)
    x10 = x9(x8)
    x11 = lbind(lbind, manhattan)
    x12 = rbind(compose, initset)
    x13 = chain(x12, x11, initset)
    x14 = lbind(argmin, x6)
    x15 = chain(first, x14, x13)
    x16 = fork(astuple, x15, identity)
    x17 = apply(x16, x10)
    O = paint(x7, x17)
    return O



def solve_3c9b0459_57aa92db(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = objects(x1, T, F, T)
    x4 = lbind(lbind, colorcount)
    x5 = fork(apply, x4, palette)
    x6 = compose(maximum, x5)
    x7 = compose(minimum, x5)
    x8 = fork(subtract, x6, x7)
    x9 = argmax(x2, x8)
    x10 = leastcolor(x9)
    x11 = normalize(x9)
    x12 = matcher(first, x10)
    x13 = sfilter(x11, x12)
    x14 = ulcorner(x13)
    x15 = colorfilter(x3, x10)
    x16 = rbind(toobject, x1)
    x17 = lbind(remove, ZERO)
    x18 = chain(first, x17, palette)
    x19 = chain(x18, x16, outbox)
    x20 = lbind(multiply, x14)
    x21 = compose(x20, width)
    x22 = fork(subtract, ulcorner, x21)
    x23 = lbind(shift, x11)
    x24 = compose(x23, x22)
    x25 = fork(upscale, x24, width)
    x26 = fork(recolor, x19, x25)
    x27 = mapply(x26, x15)
    x28 = paint(x1, x27)
    x29 = merge(x3)
    O = paint(x28, x29)
    return O



def solve_3c9b0459_aba27056(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = mapply(toindices, x2)
    x4 = box(x3)
    x5 = difference(x4, x3)
    x6 = delta(x3)
    x7 = position(x6, x5)
    x8 = interval(ZERO, NINE, ONE)
    x9 = lbind(multiply, x7)
    x10 = apply(x9, x8)
    x11 = lbind(shift, x5)
    x12 = mapply(x11, x10)
    x13 = fill(x1, FOUR, x6)
    x14 = fill(x13, FOUR, x12)
    x15 = corners(x5)
    x16 = ofcolor(x14, ZERO)
    x17 = rbind(toobject, x14)
    x18 = rbind(colorcount, ZERO)
    x19 = chain(x18, x17, dneighbors)
    x20 = matcher(x19, TWO)
    x21 = rbind(adjacent, x3)
    x22 = rbind(adjacent, x12)
    x23 = fork(both, x21, x22)
    x24 = compose(x23, initset)
    x25 = sfilter(x16, x20)
    x26 = sfilter(x25, x24)
    x27 = product(x15, x26)
    x28 = fork(subtract, last, first)
    x29 = fork(shoot, first, x28)
    x30 = mapply(x29, x27)
    O = fill(x14, FOUR, x30)
    return O



def solve_3c9b0459_f1cefba8(I):
    x1 = rot180(I)
    x2 = palette(x1)
    x3 = objects(x1, F, F, T)
    x4 = ofcolor(x1, ZERO)
    x5 = first(x3)
    x6 = ulcorner(x5)
    x7 = subgrid(x5, x1)
    x8 = power(trim, TWO)
    x9 = x8(x7)
    x10 = asindices(x9)
    x11 = shift(x10, TWO_BY_TWO)
    x12 = fill(x7, ZERO, x11)
    x13 = leastcolor(x12)
    x14 = remove(ZERO, x2)
    x15 = other(x14, x13)
    x16 = ofcolor(x12, x13)
    x17 = shift(x16, x6)
    x18 = ofcolor(x1, x13)
    x19 = uppermost(x18)
    x20 = lowermost(x18)
    x21 = matcher(first, x19)
    x22 = matcher(first, x20)
    x23 = fork(either, x21, x22)
    x24 = sfilter(x17, x23)
    x25 = difference(x17, x24)
    x26 = mapply(vfrontier, x24)
    x27 = mapply(hfrontier, x25)
    x28 = combine(x26, x27)
    x29 = intersection(x4, x28)
    x30 = fill(x1, x15, x28)
    O = fill(x30, x13, x29)
    return O



def solve_3c9b0459_508bd3b6(I):
    x1 = rot180(I)
    x2 = width(x1)
    x3 = objects(x1, T, T, T)
    x4 = argmin(x3, size)
    x5 = argmax(x3, size)
    x6 = ulcorner(x4)
    x7 = urcorner(x4)
    x8 = index(x1, x6)
    x9 = equality(x8, EIGHT)
    x10 = branch(x9, x6, x7)
    x11 = branch(x9, UNITY, DOWN_LEFT)
    x12 = multiply(x11, x2)
    x13 = double(x12)
    x14 = add(x10, x13)
    x15 = subtract(x10, x13)
    x16 = connect(x14, x15)
    x17 = fill(x1, THREE, x16)
    x18 = paint(x17, x5)
    x19 = objects(x18, T, F, T)
    x20 = rbind(adjacent, x5)
    x21 = extract(x19, x20)
    x22 = first(x21)
    x23 = last(x22)
    x24 = flip(x9)
    x25 = branch(x24, UNITY, DOWN_LEFT)
    x26 = multiply(x25, x2)
    x27 = double(x26)
    x28 = add(x23, x27)
    x29 = subtract(x23, x27)
    x30 = connect(x28, x29)
    x31 = fill(x18, THREE, x30)
    x32 = paint(x31, x4)
    O = paint(x32, x5)
    return O



def solve_3c9b0459_0e206a2e(I):
    x1 = rot180(I)
    x2 = palette(x1)
    x3 = objects(x1, F, F, T)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, numcolors)
    x6 = sfilter(x3, x5)
    x7 = remove(ZERO, x2)
    x8 = lbind(colorcount, x1)
    x9 = argmax(x7, x8)
    x10 = remove(x9, x7)
    x11 = rbind(contained, x10)
    x12 = compose(x11, first)
    x13 = rbind(sfilter, x12)
    x14 = lbind(rbind, subtract)
    x15 = lbind(occurrences, x1)
    x16 = lbind(lbind, shift)
    x17 = compose(x14, ulcorner)
    x18 = chain(x17, x13, normalize)
    x19 = chain(x15, x13, normalize)
    x20 = fork(apply, x18, x19)
    x21 = compose(x16, normalize)
    x22 = fork(mapply, x21, x20)
    x23 = astuple(cmirror, dmirror)
    x24 = astuple(hmirror, vmirror)
    x25 = combine(x23, x24)
    x26 = product(x25, x25)
    x27 = fork(compose, first, last)
    x28 = apply(x27, x26)
    x29 = totuple(x28)
    x30 = combine(x25, x29)
    x31 = lbind(rapply, x30)
    x32 = mapply(x31, x6)
    x33 = mapply(x22, x32)
    x34 = paint(x1, x33)
    x35 = merge(x6)
    O = cover(x34, x35)
    return O



def solve_3c9b0459_150deff5(I):
    x1 = rot180(I)
    x2 = canvas(FIVE, TWO_BY_TWO)
    x3 = asobject(x2)
    x4 = occurrences(x1, x3)
    x5 = lbind(shift, x3)
    x6 = mapply(x5, x4)
    x7 = fill(x1, EIGHT, x6)
    x8 = canvas(FIVE, UNITY)
    x9 = astuple(TWO, ONE)
    x10 = canvas(EIGHT, x9)
    x11 = vconcat(x10, x8)
    x12 = asobject(x11)
    x13 = occurrences(x7, x12)
    x14 = lbind(shift, x12)
    x15 = mapply(x14, x13)
    x16 = fill(x7, TWO, x15)
    x17 = astuple(ONE, THREE)
    x18 = canvas(FIVE, x17)
    x19 = asobject(x18)
    x20 = occurrences(x16, x19)
    x21 = lbind(shift, x19)
    x22 = mapply(x21, x20)
    x23 = fill(x16, TWO, x22)
    x24 = hmirror(x11)
    x25 = asobject(x24)
    x26 = occurrences(x23, x25)
    x27 = lbind(shift, x25)
    x28 = mapply(x27, x26)
    x29 = fill(x23, TWO, x28)
    x30 = dmirror(x11)
    x31 = asobject(x30)
    x32 = occurrences(x29, x31)
    x33 = lbind(shift, x31)
    x34 = mapply(x33, x32)
    x35 = fill(x29, TWO, x34)
    x36 = vmirror(x30)
    x37 = asobject(x36)
    x38 = occurrences(x35, x37)
    x39 = lbind(shift, x37)
    x40 = mapply(x39, x38)
    O = fill(x35, TWO, x40)
    return O



def solve_3c9b0459_9d9215db(I):
    x1 = rot180(I)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = initset(x1)
    x6 = chain(numcolors, lefthalf, tophalf)
    x7 = insert(x2, x5)
    x8 = insert(x3, x7)
    x9 = insert(x4, x8)
    x10 = argmax(x9, x6)
    x11 = vmirror(x10)
    x12 = papply(pair, x10, x11)
    x13 = lbind(apply, maximum)
    x14 = apply(x13, x12)
    x15 = partition(x14)
    x16 = sizefilter(x15, FOUR)
    x17 = apply(llcorner, x16)
    x18 = apply(lrcorner, x16)
    x19 = combine(x17, x18)
    x20 = cover(x14, x19)
    x21 = tojvec(NEG_TWO)
    x22 = rbind(add, ZERO_BY_TWO)
    x23 = rbind(add, x21)
    x24 = compose(x22, ulcorner)
    x25 = compose(x23, urcorner)
    x26 = fork(connect, x24, x25)
    x27 = compose(even, last)
    x28 = rbind(sfilter, x27)
    x29 = chain(normalize, x28, x26)
    x30 = fork(shift, x29, x24)
    x31 = fork(recolor, color, x30)
    x32 = mapply(x31, x16)
    x33 = paint(x20, x32)
    x34 = rot90(x33)
    x35 = rot180(x33)
    x36 = rot270(x33)
    x37 = papply(pair, x33, x34)
    x38 = apply(x13, x37)
    x39 = papply(pair, x38, x35)
    x40 = apply(x13, x39)
    x41 = papply(pair, x40, x36)
    O = apply(x13, x41)
    return O



def solve_3c9b0459_264363fd(I):
    x1 = rot180(I)
    x2 = objects(x1, F, F, T)
    x3 = argmin(x2, size)
    x4 = normalize(x3)
    x5 = height(x3)
    x6 = width(x3)
    x7 = equality(x5, FIVE)
    x8 = equality(x6, FIVE)
    x9 = astuple(x7, x8)
    x10 = add(UNITY, x9)
    x11 = invert(x10)
    x12 = center(x3)
    x13 = index(x1, x12)
    x14 = branch(x7, UP, RIGHT)
    x15 = add(x14, x12)
    x16 = index(x1, x15)
    x17 = astuple(x13, ORIGIN)
    x18 = initset(x17)
    x19 = cover(x1, x3)
    x20 = mostcolor(x19)
    x21 = ofcolor(x19, x20)
    x22 = occurrences(x19, x18)
    x23 = objects(x19, F, F, T)
    x24 = rbind(occurrences, x18)
    x25 = rbind(subgrid, x19)
    x26 = compose(x24, x25)
    x27 = lbind(mapply, vfrontier)
    x28 = lbind(mapply, hfrontier)
    x29 = compose(x27, x26)
    x30 = compose(x28, x26)
    x31 = branch(x7, x29, x30)
    x32 = branch(x8, x30, x29)
    x33 = fork(combine, x31, x32)
    x34 = lbind(recolor, x16)
    x35 = compose(x34, x33)
    x36 = fork(paint, x25, x35)
    x37 = compose(asobject, x36)
    x38 = fork(shift, x37, ulcorner)
    x39 = mapply(x38, x23)
    x40 = paint(x19, x39)
    x41 = shift(x4, x11)
    x42 = lbind(shift, x41)
    x43 = mapply(x42, x22)
    x44 = paint(x40, x43)
    O = fill(x44, x20, x21)
    return O



def solve_3c9b0459_22233c11(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = rbind(upscale, TWO)
    x4 = chain(invert, halve, shape)
    x5 = fork(combine, hfrontier, vfrontier)
    x6 = compose(x3, vmirror)
    x7 = fork(shift, x6, x4)
    x8 = compose(toindices, x7)
    x9 = lbind(mapply, x5)
    x10 = compose(x9, toindices)
    x11 = fork(difference, x8, x10)
    x12 = mapply(x11, x2)
    O = fill(x1, EIGHT, x12)
    return O



def solve_3c9b0459_a64e4611(I):
    x1 = rot180(I)
    x2 = asindices(x1)
    x3 = fork(product, identity, identity)
    x4 = lbind(canvas, ZERO)
    x5 = compose(asobject, x4)
    x6 = fork(multiply, first, last)
    x7 = compose(positive, size)
    x8 = lbind(lbind, shift)
    x9 = rbind(fork, x6)
    x10 = lbind(x9, multiply)
    x11 = lbind(chain, x7)
    x12 = rbind(x11, x5)
    x13 = lbind(lbind, occurrences)
    x14 = chain(x10, x12, x13)
    x15 = compose(x3, first)
    x16 = compose(x14, last)
    x17 = fork(argmax, x15, x16)
    x18 = chain(x8, x5, x17)
    x19 = compose(x5, x17)
    x20 = fork(occurrences, last, x19)
    x21 = fork(mapply, x18, x20)
    x22 = multiply(TWO, SIX)
    x23 = interval(THREE, x22, ONE)
    x24 = astuple(x23, x1)
    x25 = x21(x24)
    x26 = fill(x1, THREE, x25)
    x27 = interval(THREE, TEN, ONE)
    x28 = astuple(x27, x26)
    x29 = x21(x28)
    x30 = fill(x26, THREE, x29)
    x31 = astuple(x27, x30)
    x32 = x21(x31)
    x33 = fill(x30, THREE, x32)
    x34 = rbind(toobject, x33)
    x35 = rbind(colorcount, THREE)
    x36 = chain(x35, x34, neighbors)
    x37 = matcher(x36, EIGHT)
    x38 = sfilter(x2, x37)
    x39 = fill(x1, THREE, x38)
    x40 = ofcolor(x39, ZERO)
    x41 = rbind(bordering, x39)
    x42 = compose(x41, initset)
    x43 = lbind(contained, THREE)
    x44 = rbind(toobject, x39)
    x45 = chain(x43, palette, x44)
    x46 = compose(x45, dneighbors)
    x47 = fork(both, x46, x42)
    x48 = sfilter(x40, x47)
    O = fill(x39, THREE, x48)
    return O



def solve_3c9b0459_97a05b5b(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = rbind(greater, ONE)
    x6 = compose(x5, numcolors)
    x7 = sfilter(x2, x6)
    x8 = lbind(rbind, subtract)
    x9 = switch(x4, TWO, ZERO)
    x10 = lbind(occurrences, x9)
    x11 = lbind(lbind, shift)
    x12 = compose(x8, ulcorner)
    x13 = matcher(first, TWO)
    x14 = compose(flip, x13)
    x15 = rbind(sfilter, x13)
    x16 = rbind(sfilter, x14)
    x17 = lbind(recolor, ZERO)
    x18 = compose(x17, x16)
    x19 = fork(combine, x18, x15)
    x20 = chain(x12, x19, normalize)
    x21 = objects(x9, T, T, T)
    x22 = apply(toindices, x21)
    x23 = chain(x10, x19, normalize)
    x24 = rbind(colorcount, TWO)
    x25 = lbind(sfilter, x22)
    x26 = chain(size, first, x25)
    x27 = compose(positive, size)
    x28 = lbind(lbind, contained)
    x29 = chain(x27, x25, x28)
    x30 = compose(x26, x28)
    x31 = rbind(sfilter, x29)
    x32 = compose(x31, x23)
    x33 = lbind(rbind, equality)
    x34 = rbind(compose, x30)
    x35 = chain(x34, x33, x24)
    x36 = fork(sfilter, x32, x35)
    x37 = fork(apply, x20, x36)
    x38 = compose(x11, normalize)
    x39 = fork(mapply, x38, x37)
    x40 = astuple(cmirror, dmirror)
    x41 = astuple(hmirror, vmirror)
    x42 = combine(x40, x41)
    x43 = product(x42, x42)
    x44 = fork(compose, first, last)
    x45 = apply(x44, x43)
    x46 = lbind(rapply, x45)
    x47 = mapply(x46, x7)
    x48 = mapply(x39, x47)
    x49 = paint(x4, x48)
    x50 = palette(x48)
    x51 = lbind(remove, TWO)
    x52 = x51(x50)
    x53 = chain(first, x51, palette)
    x54 = rbind(contained, x52)
    x55 = chain(flip, x54, x53)
    x56 = sfilter(x7, x55)
    x57 = fork(apply, x20, x23)
    x58 = fork(mapply, x38, x57)
    x59 = mapply(x46, x56)
    x60 = mapply(x58, x59)
    O = paint(x49, x60)
    return O



def solve_3c9b0459_3e980e27(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = astuple(TEN, TEN)
    x4 = invert(x3)
    x5 = astuple(TWO, x4)
    x6 = astuple(THREE, x4)
    x7 = initset(x5)
    x8 = insert(x6, x7)
    x9 = insert(x8, x2)
    x10 = lbind(contained, TWO)
    x11 = lbind(contained, THREE)
    x12 = compose(invert, ulcorner)
    x13 = lbind(compose, x12)
    x14 = lbind(rbind, sfilter)
    x15 = compose(x13, x14)
    x16 = rbind(compose, center)
    x17 = lbind(lbind, shift)
    x18 = x15(x10)
    x19 = x15(x11)
    x20 = fork(shift, identity, x18)
    x21 = fork(shift, identity, x19)
    x22 = compose(x10, palette)
    x23 = compose(x11, palette)
    x24 = sfilter(x9, x22)
    x25 = argmax(x24, size)
    x26 = remove(x25, x24)
    x27 = vmirror(x25)
    x28 = chain(x16, x17, x20)
    x29 = x28(x27)
    x30 = mapply(x29, x26)
    x31 = sfilter(x9, x23)
    x32 = argmax(x31, size)
    x33 = remove(x32, x31)
    x34 = chain(x16, x17, x21)
    x35 = x34(x32)
    x36 = mapply(x35, x33)
    x37 = combine(x30, x36)
    O = paint(x1, x37)
    return O



def solve_6150a2bd_67a3c6ac(I):
    x1 = rot180(I)
    O = vmirror(x1)
    return O



def solve_6150a2bd_68b16354(I):
    x1 = rot180(I)
    O = hmirror(x1)
    return O



def solve_6150a2bd_74dd1130(I):
    x1 = rot180(I)
    O = dmirror(x1)
    return O



def solve_6150a2bd_3c9b0459(I):
    x1 = rot180(I)
    O = rot180(x1)
    return O



def solve_6150a2bd_9172f3a0(I):
    x1 = rot180(I)
    O = upscale(x1, THREE)
    return O



def solve_6150a2bd_9dfd6313(I):
    x1 = rot180(I)
    O = dmirror(x1)
    return O



def solve_6150a2bd_a416b8f3(I):
    x1 = rot180(I)
    O = hconcat(x1, x1)
    return O



def solve_6150a2bd_b1948b0a(I):
    x1 = rot180(I)
    O = replace(x1, SIX, TWO)
    return O



def solve_6150a2bd_c59eb873(I):
    x1 = rot180(I)
    O = upscale(x1, TWO)
    return O



def solve_6150a2bd_c8f0f002(I):
    x1 = rot180(I)
    O = replace(x1, SEVEN, FIVE)
    return O



def solve_6150a2bd_d10ecb37(I):
    x1 = rot180(I)
    O = crop(x1, ORIGIN, TWO_BY_TWO)
    return O



def solve_6150a2bd_d511f180(I):
    x1 = rot180(I)
    O = switch(x1, FIVE, EIGHT)
    return O



def solve_6150a2bd_ed36ccf7(I):
    x1 = rot180(I)
    O = rot270(x1)
    return O



def solve_6150a2bd_4c4377d9(I):
    x1 = rot180(I)
    x2 = hmirror(x1)
    O = vconcat(x2, x1)
    return O



def solve_6150a2bd_6d0aefbc(I):
    x1 = rot180(I)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_6150a2bd_6fa7a44f(I):
    x1 = rot180(I)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_6150a2bd_5614dbcf(I):
    x1 = rot180(I)
    x2 = replace(x1, FIVE, ZERO)
    O = downscale(x2, THREE)
    return O



def solve_6150a2bd_5bd6f4ac(I):
    x1 = rot180(I)
    x2 = tojvec(SIX)
    O = crop(x1, x2, THREE_BY_THREE)
    return O



def solve_6150a2bd_5582e5ca(I):
    x1 = rot180(I)
    x2 = mostcolor(x1)
    O = canvas(x2, THREE_BY_THREE)
    return O



def solve_6150a2bd_8be77c9e(I):
    x1 = rot180(I)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_6150a2bd_c9e6f938(I):
    x1 = rot180(I)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_6150a2bd_2dee498d(I):
    x1 = rot180(I)
    x2 = hsplit(x1, THREE)
    O = first(x2)
    return O



def solve_6150a2bd_1cf80156(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = subgrid(x3, x1)
    return O



def solve_6150a2bd_32597951(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, EIGHT)
    x3 = delta(x2)
    O = fill(x1, THREE, x3)
    return O



def solve_6150a2bd_25ff71a9(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = move(x1, x3, DOWN)
    return O



def solve_6150a2bd_0b148d64(I):
    x1 = rot180(I)
    x2 = partition(x1)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_6150a2bd_1f85a75f(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_6150a2bd_23b5c85d(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_6150a2bd_9ecd008a(I):
    x1 = rot180(I)
    x2 = vmirror(x1)
    x3 = ofcolor(x1, ZERO)
    O = subgrid(x3, x2)
    return O



def solve_6150a2bd_ac0a08a4(I):
    x1 = rot180(I)
    x2 = colorcount(x1, ZERO)
    x3 = subtract(NINE, x2)
    O = upscale(x1, x3)
    return O



def solve_6150a2bd_be94b721(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_6150a2bd_c909285e(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    O = subgrid(x3, x1)
    return O



def solve_6150a2bd_f25ffba3(I):
    x1 = rot180(I)
    x2 = bottomhalf(x1)
    x3 = hmirror(x2)
    O = vconcat(x3, x2)
    return O



def solve_6150a2bd_c1d99e64(I):
    x1 = rot180(I)
    x2 = frontiers(x1)
    x3 = merge(x2)
    O = fill(x1, TWO, x3)
    return O



def solve_6150a2bd_b91ae062(I):
    x1 = rot180(I)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    O = upscale(x1, x3)
    return O



def solve_6150a2bd_3aa6fb7a(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = mapply(corners, x2)
    O = underfill(x1, ONE, x3)
    return O



def solve_6150a2bd_7b7f7511(I):
    x1 = rot180(I)
    x2 = portrait(x1)
    x3 = branch(x2, tophalf, lefthalf)
    O = x3(x1)
    return O



def solve_6150a2bd_4258a5f9(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, FIVE)
    x3 = mapply(neighbors, x2)
    O = fill(x1, ONE, x3)
    return O



def solve_6150a2bd_2dc579da(I):
    x1 = rot180(I)
    x2 = vsplit(x1, TWO)
    x3 = rbind(hsplit, TWO)
    x4 = mapply(x3, x2)
    O = argmax(x4, numcolors)
    return O



def solve_6150a2bd_28bf18c6(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = hconcat(x4, x4)
    return O



def solve_6150a2bd_3af2c5a8(I):
    x1 = rot180(I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_6150a2bd_44f52bb0(I):
    x1 = rot180(I)
    x2 = vmirror(x1)
    x3 = equality(x2, x1)
    x4 = branch(x3, ONE, SEVEN)
    O = canvas(x4, UNITY)
    return O



def solve_6150a2bd_62c24649(I):
    x1 = rot180(I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_6150a2bd_67e8384a(I):
    x1 = rot180(I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_6150a2bd_7468f01a(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = vmirror(x4)
    return O



def solve_6150a2bd_662c240a(I):
    x1 = rot180(I)
    x2 = vsplit(x1, THREE)
    x3 = fork(equality, dmirror, identity)
    x4 = compose(flip, x3)
    O = extract(x2, x4)
    return O



def solve_6150a2bd_42a50994(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = cover(x1, x4)
    return O



def solve_6150a2bd_56ff96f3(I):
    x1 = rot180(I)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = mapply(x3, x2)
    O = paint(x1, x4)
    return O



def solve_6150a2bd_50cb2852(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = compose(backdrop, inbox)
    x4 = mapply(x3, x2)
    O = fill(x1, EIGHT, x4)
    return O



def solve_6150a2bd_4347f46a(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(difference, toindices, box)
    x4 = mapply(x3, x2)
    O = fill(x1, ZERO, x4)
    return O



def solve_6150a2bd_46f33fce(I):
    x1 = rot180(I)
    x2 = rot180(x1)
    x3 = downscale(x2, TWO)
    x4 = rot180(x3)
    O = upscale(x4, FOUR)
    return O



def solve_6150a2bd_a740d043(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    O = replace(x4, ONE, ZERO)
    return O



def solve_6150a2bd_a79310a0(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = move(x1, x3, DOWN)
    O = replace(x4, EIGHT, TWO)
    return O



def solve_6150a2bd_aabf363d(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, ZERO)
    x4 = leastcolor(x3)
    O = replace(x3, x4, x2)
    return O



def solve_6150a2bd_ae4f1146(I):
    x1 = rot180(I)
    x2 = objects(x1, F, F, T)
    x3 = rbind(colorcount, ONE)
    x4 = argmax(x2, x3)
    O = subgrid(x4, x1)
    return O



def solve_6150a2bd_b27ca6d3(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, THREE, x4)
    return O



def solve_6150a2bd_ce22a75a(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = mapply(backdrop, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_6150a2bd_dc1df850(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_6150a2bd_f25fbde4(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = upscale(x4, TWO)
    return O



def solve_6150a2bd_44d8ac46(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(delta, x2)
    x4 = mfilter(x3, square)
    O = fill(x1, TWO, x4)
    return O



def solve_6150a2bd_1e0a9b12(I):
    x1 = rot180(I)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = apply(x3, x2)
    O = rot90(x4)
    return O



def solve_6150a2bd_0d3d703e(I):
    x1 = rot180(I)
    x2 = switch(x1, THREE, FOUR)
    x3 = switch(x2, EIGHT, NINE)
    x4 = switch(x3, TWO, SIX)
    O = switch(x4, ONE, FIVE)
    return O



def solve_6150a2bd_3618c87e(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = move(x1, x4, TWO_BY_ZERO)
    return O



def solve_6150a2bd_1c786137(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, height)
    x4 = subgrid(x3, x1)
    O = trim(x4)
    return O



def solve_6150a2bd_445eab21(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(multiply, height, width)
    x4 = argmax(x2, x3)
    x5 = color(x4)
    O = canvas(x5, TWO_BY_TWO)
    return O



def solve_6150a2bd_6f8cd79b(I):
    x1 = rot180(I)
    x2 = asindices(x1)
    x3 = apply(initset, x2)
    x4 = rbind(bordering, x1)
    x5 = mfilter(x3, x4)
    O = fill(x1, EIGHT, x5)
    return O



def solve_6150a2bd_2013d3e2(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = lefthalf(x4)
    O = tophalf(x5)
    return O



def solve_6150a2bd_41e4d17e(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = mapply(x4, x2)
    O = underfill(x1, SIX, x5)
    return O



def solve_6150a2bd_9565186b(I):
    x1 = rot180(I)
    x2 = shape(x1)
    x3 = objects(x1, T, F, F)
    x4 = argmax(x3, size)
    x5 = canvas(FIVE, x2)
    O = paint(x5, x4)
    return O



def solve_6150a2bd_aedd82e4(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, TWO)
    x4 = sizefilter(x3, ONE)
    x5 = merge(x4)
    O = fill(x1, ONE, x5)
    return O



def solve_6150a2bd_bb43febb(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, FIVE)
    x4 = compose(backdrop, inbox)
    x5 = mapply(x4, x3)
    O = fill(x1, TWO, x5)
    return O



def solve_6150a2bd_e98196ab(I):
    x1 = rot180(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = objects(x2, T, F, T)
    x5 = merge(x4)
    O = paint(x3, x5)
    return O



def solve_6150a2bd_f76d97a5(I):
    x1 = rot180(I)
    x2 = palette(x1)
    x3 = first(x2)
    x4 = last(x2)
    x5 = switch(x1, x3, x4)
    O = replace(x5, FIVE, ZERO)
    return O



def solve_6150a2bd_ce9e57f2(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(connect, ulcorner, centerofmass)
    x4 = mapply(x3, x2)
    x5 = fill(x1, EIGHT, x4)
    O = switch(x5, EIGHT, TWO)
    return O



def solve_6150a2bd_22eb0ac0(I):
    x1 = rot180(I)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    O = paint(x1, x5)
    return O



def solve_6150a2bd_9f236235(I):
    x1 = rot180(I)
    x2 = compress(x1)
    x3 = objects(x1, T, F, F)
    x4 = vmirror(x2)
    x5 = valmin(x3, width)
    O = downscale(x4, x5)
    return O



def solve_6150a2bd_a699fb00(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, RIGHT)
    x4 = shift(x2, LEFT)
    x5 = intersection(x3, x4)
    O = fill(x1, TWO, x5)
    return O



def solve_6150a2bd_46442a0e(I):
    x1 = rot180(I)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_6150a2bd_7fe24cdd(I):
    x1 = rot180(I)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_6150a2bd_0ca9ddb6(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, ONE)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x3)
    x6 = fill(x1, SEVEN, x4)
    O = fill(x6, FOUR, x5)
    return O



def solve_6150a2bd_543a7ed5(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, SIX)
    x4 = mapply(outbox, x3)
    x5 = fill(x1, THREE, x4)
    x6 = mapply(delta, x3)
    O = fill(x5, FOUR, x6)
    return O



def solve_6150a2bd_0520fde7(I):
    x1 = rot180(I)
    x2 = vmirror(x1)
    x3 = lefthalf(x2)
    x4 = righthalf(x2)
    x5 = vmirror(x4)
    x6 = cellwise(x3, x5, ZERO)
    O = replace(x6, ONE, TWO)
    return O



def solve_6150a2bd_dae9d2b5(I):
    x1 = rot180(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, FOUR)
    x5 = ofcolor(x3, THREE)
    x6 = combine(x4, x5)
    O = fill(x2, SIX, x6)
    return O



def solve_6150a2bd_8d5021e8(I):
    x1 = rot180(I)
    x2 = vmirror(x1)
    x3 = hconcat(x2, x1)
    x4 = hmirror(x3)
    x5 = vconcat(x3, x4)
    x6 = vconcat(x5, x3)
    O = hmirror(x6)
    return O



def solve_6150a2bd_b60334d2(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, FIVE)
    x3 = replace(x1, FIVE, ZERO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x2)
    x6 = fill(x3, ONE, x4)
    O = fill(x6, FIVE, x5)
    return O



def solve_6150a2bd_b94a9452(I):
    x1 = rot180(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = leastcolor(x4)
    x6 = mostcolor(x4)
    O = switch(x4, x5, x6)
    return O



def solve_6150a2bd_d037b0a7(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, DOWN)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    O = paint(x1, x6)
    return O



def solve_6150a2bd_d0f5fe59(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = astuple(x3, x3)
    x5 = canvas(ZERO, x4)
    x6 = shoot(ORIGIN, UNITY)
    O = fill(x5, EIGHT, x6)
    return O



def solve_6150a2bd_e3497940(I):
    x1 = rot180(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = vmirror(x3)
    x5 = objects(x4, T, F, T)
    x6 = merge(x5)
    O = paint(x2, x6)
    return O



def solve_6150a2bd_e9afcf9a(I):
    x1 = rot180(I)
    x2 = astuple(TWO, ONE)
    x3 = crop(x1, ORIGIN, x2)
    x4 = hmirror(x3)
    x5 = hconcat(x3, x4)
    x6 = hconcat(x5, x5)
    O = hconcat(x6, x5)
    return O



def solve_6150a2bd_48d8fb45(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = matcher(size, ONE)
    x4 = extract(x2, x3)
    x5 = lbind(adjacent, x4)
    x6 = extract(x2, x5)
    O = subgrid(x6, x1)
    return O



def solve_6150a2bd_d406998b(I):
    x1 = rot180(I)
    x2 = vmirror(x1)
    x3 = ofcolor(x2, FIVE)
    x4 = compose(even, last)
    x5 = sfilter(x3, x4)
    x6 = fill(x2, THREE, x5)
    O = vmirror(x6)
    return O



def solve_6150a2bd_3906de3d(I):
    x1 = rot180(I)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = switch(x2, ONE, TWO)
    x5 = apply(x3, x4)
    x6 = switch(x5, ONE, TWO)
    O = cmirror(x6)
    return O



def solve_6150a2bd_00d62c1b(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, FOUR, x6)
    return O



def solve_6150a2bd_7b6016b9(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = rbind(bordering, x1)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x4)
    x6 = fill(x1, TWO, x5)
    O = replace(x6, ZERO, THREE)
    return O



def solve_6150a2bd_67385a82(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, THREE)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = merge(x5)
    O = fill(x1, EIGHT, x6)
    return O



def solve_6150a2bd_a5313dff(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, ONE, x6)
    return O



def solve_6150a2bd_ea32f347(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, FIVE, FOUR)
    x4 = argmin(x2, size)
    x5 = argmax(x2, size)
    x6 = fill(x3, ONE, x5)
    O = fill(x6, TWO, x4)
    return O



def solve_6150a2bd_d631b094(I):
    x1 = rot180(I)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = ofcolor(x1, x3)
    x5 = size(x4)
    x6 = astuple(ONE, x5)
    O = canvas(x3, x6)
    return O



def solve_6150a2bd_10fcaaa3(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = vconcat(x3, x3)
    x5 = ofcolor(x4, x2)
    x6 = mapply(ineighbors, x5)
    O = underfill(x4, EIGHT, x6)
    return O



def solve_6150a2bd_007bbfb7(I):
    x1 = rot180(I)
    x2 = hupscale(x1, THREE)
    x3 = vupscale(x2, THREE)
    x4 = hconcat(x1, x1)
    x5 = hconcat(x4, x1)
    x6 = vconcat(x5, x5)
    x7 = vconcat(x6, x5)
    O = cellwise(x3, x7, ZERO)
    return O



def solve_6150a2bd_496994bd(I):
    x1 = rot180(I)
    x2 = width(x1)
    x3 = height(x1)
    x4 = halve(x3)
    x5 = astuple(x4, x2)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    O = vconcat(x6, x7)
    return O



def solve_6150a2bd_1f876c06(I):
    x1 = rot180(I)
    x2 = fgpartition(x1)
    x3 = compose(last, first)
    x4 = power(last, TWO)
    x5 = fork(connect, x3, x4)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_6150a2bd_39a8645d(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = matcher(color, x5)
    x7 = extract(x2, x6)
    O = subgrid(x7, x1)
    return O



def solve_6150a2bd_1b2d62fb(I):
    x1 = rot180(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = replace(x2, NINE, ZERO)
    O = fill(x7, EIGHT, x6)
    return O



def solve_6150a2bd_90c28cc7(I):
    x1 = rot180(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = dedupe(x4)
    x6 = rot90(x5)
    x7 = dedupe(x6)
    O = rot270(x7)
    return O



def solve_6150a2bd_b6afb2da(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = replace(x1, FIVE, TWO)
    x4 = colorfilter(x2, FIVE)
    x5 = mapply(box, x4)
    x6 = fill(x3, FOUR, x5)
    x7 = mapply(corners, x4)
    O = fill(x6, ONE, x7)
    return O



def solve_6150a2bd_b9b7f026(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = argmin(x2, size)
    x4 = rbind(adjacent, x3)
    x5 = remove(x3, x2)
    x6 = extract(x5, x4)
    x7 = color(x6)
    O = canvas(x7, UNITY)
    return O



def solve_6150a2bd_ba97ae07(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = ofcolor(x1, x5)
    x7 = backdrop(x6)
    O = fill(x1, x5, x7)
    return O



def solve_6150a2bd_c9f8e694(I):
    x1 = rot180(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = ofcolor(x1, ZERO)
    x5 = astuple(x2, ONE)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hupscale(x6, x3)
    O = fill(x7, ZERO, x4)
    return O



def solve_6150a2bd_d23f8c26(I):
    x1 = rot180(I)
    x2 = asindices(x1)
    x3 = width(x1)
    x4 = halve(x3)
    x5 = matcher(last, x4)
    x6 = compose(flip, x5)
    x7 = sfilter(x2, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_6150a2bd_d5d6de2d(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = sfilter(x2, square)
    x4 = difference(x2, x3)
    x5 = compose(backdrop, inbox)
    x6 = mapply(x5, x4)
    x7 = replace(x1, TWO, ZERO)
    O = fill(x7, THREE, x6)
    return O



def solve_6150a2bd_dbc1a6ce(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, ONE)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_6150a2bd_ded97339(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, EIGHT)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_6150a2bd_ea786f4a(I):
    x1 = rot180(I)
    x2 = width(x1)
    x3 = shoot(ORIGIN, UNITY)
    x4 = decrement(x2)
    x5 = tojvec(x4)
    x6 = shoot(x5, DOWN_LEFT)
    x7 = combine(x3, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_6150a2bd_08ed6ac7(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = order(x2, height)
    x5 = size(x3)
    x6 = interval(x5, ZERO, NEG_ONE)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_6150a2bd_40853293(I):
    x1 = rot180(I)
    x2 = partition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    x6 = mfilter(x4, vline)
    x7 = paint(x1, x5)
    O = paint(x7, x6)
    return O



def solve_6150a2bd_5521c0d9(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = cover(x1, x3)
    x5 = chain(toivec, invert, height)
    x6 = fork(shift, identity, x5)
    x7 = mapply(x6, x2)
    O = paint(x4, x7)
    return O



def solve_6150a2bd_f8ff0b80(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = rbind(canvas, UNITY)
    x6 = apply(x5, x4)
    x7 = merge(x6)
    O = hmirror(x7)
    return O



def solve_6150a2bd_85c4e7cd(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = compose(invert, size)
    x4 = order(x2, size)
    x5 = order(x2, x3)
    x6 = apply(color, x5)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_6150a2bd_d2abd087(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = matcher(size, SIX)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x3)
    x6 = mfilter(x2, x4)
    x7 = fill(x1, TWO, x5)
    O = fill(x7, ONE, x6)
    return O



def solve_6150a2bd_017c7c7b(I):
    x1 = rot180(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = equality(x2, x3)
    x5 = crop(x1, TWO_BY_ZERO, THREE_BY_THREE)
    x6 = branch(x4, x3, x5)
    x7 = vconcat(x1, x6)
    O = replace(x7, ONE, TWO)
    return O



def solve_6150a2bd_363442ee(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, ONE)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = asobject(x3)
    x5 = lbind(shift, x4)
    x6 = compose(x5, decrement)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_6150a2bd_5168d44c(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, THREE)
    x3 = height(x2)
    x4 = equality(x3, ONE)
    x5 = branch(x4, ZERO_BY_TWO, TWO_BY_ZERO)
    x6 = ofcolor(x1, TWO)
    x7 = recolor(TWO, x6)
    O = move(x1, x7, x5)
    return O



def solve_6150a2bd_d9fac9be(I):
    x1 = rot180(I)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = color(x4)
    x6 = remove(ZERO, x2)
    x7 = other(x6, x5)
    O = canvas(x7, UNITY)
    return O



def solve_6150a2bd_e50d258f(I):
    x1 = rot180(I)
    x2 = width(x1)
    x3 = astuple(NINE, x2)
    x4 = canvas(ZERO, x3)
    x5 = vconcat(x1, x4)
    x6 = objects(x5, F, F, T)
    x7 = rbind(colorcount, TWO)
    x8 = argmax(x6, x7)
    O = subgrid(x8, x1)
    return O



def solve_6150a2bd_810b9b61(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = apply(toindices, x2)
    x4 = fork(either, vline, hline)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = fork(equality, identity, box)
    x8 = mfilter(x6, x7)
    O = fill(x1, THREE, x8)
    return O



def solve_6150a2bd_54d82841(I):
    x1 = rot180(I)
    x2 = height(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(last, center)
    x5 = apply(x4, x3)
    x6 = decrement(x2)
    x7 = lbind(astuple, x6)
    x8 = apply(x7, x5)
    O = fill(x1, FOUR, x8)
    return O



def solve_6150a2bd_60b61512(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = mapply(delta, x2)
    O = fill(x1, SEVEN, x3)
    return O



def solve_6150a2bd_25d8a9c8(I):
    x1 = rot180(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, THREE)
    x5 = mfilter(x4, hline)
    x6 = toindices(x5)
    x7 = difference(x2, x6)
    x8 = fill(x1, FIVE, x6)
    O = fill(x8, ZERO, x7)
    return O



def solve_6150a2bd_239be575(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = lbind(contained, TWO)
    x4 = compose(x3, palette)
    x5 = sfilter(x2, x4)
    x6 = size(x5)
    x7 = greater(x6, ONE)
    x8 = branch(x7, ZERO, EIGHT)
    O = canvas(x8, UNITY)
    return O



def solve_6150a2bd_6430c8c4(I):
    x1 = rot180(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(FOUR, FOUR)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, THREE, x7)
    return O



def solve_6150a2bd_94f9d214(I):
    x1 = rot180(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = astuple(FOUR, FOUR)
    x7 = canvas(ZERO, x6)
    x8 = intersection(x4, x5)
    O = fill(x7, TWO, x8)
    return O



def solve_6150a2bd_ce4f8723(I):
    x1 = rot180(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = astuple(FOUR, FOUR)
    x8 = canvas(THREE, x7)
    O = fill(x8, ZERO, x6)
    return O



def solve_6150a2bd_d13f3404(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, UNITY)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = astuple(SIX, SIX)
    x8 = canvas(ZERO, x7)
    O = paint(x8, x6)
    return O



def solve_6150a2bd_f2829549(I):
    x1 = rot180(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = shape(x2)
    x8 = canvas(ZERO, x7)
    O = fill(x8, THREE, x6)
    return O



def solve_6150a2bd_fafffa47(I):
    x1 = rot180(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = shape(x3)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, TWO, x7)
    return O



def solve_6150a2bd_fcb5c309(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = colorfilter(x3, x2)
    x5 = difference(x3, x4)
    x6 = argmax(x5, size)
    x7 = color(x6)
    x8 = subgrid(x6, x1)
    O = replace(x8, x7, x2)
    return O



def solve_6150a2bd_e76a88a6(I):
    x1 = rot180(I)
    x2 = objects(x1, F, F, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = remove(x3, x2)
    x6 = apply(ulcorner, x5)
    x7 = lbind(shift, x4)
    x8 = mapply(x7, x6)
    O = paint(x1, x8)
    return O



def solve_6150a2bd_7f4411dc(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = rbind(difference, x3)
    x5 = rbind(greater, TWO)
    x6 = chain(x5, size, x4)
    x7 = compose(x6, dneighbors)
    x8 = sfilter(x3, x7)
    O = fill(x1, ZERO, x8)
    return O



def solve_6150a2bd_b230c067(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(normalize, x3)
    x5 = leastcommon(x4)
    x6 = matcher(normalize, x5)
    x7 = extract(x2, x6)
    x8 = replace(x1, EIGHT, ONE)
    O = fill(x8, TWO, x7)
    return O



def solve_6150a2bd_e8593010(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = sizefilter(x2, TWO)
    x5 = merge(x3)
    x6 = fill(x1, THREE, x5)
    x7 = merge(x4)
    x8 = fill(x6, TWO, x7)
    O = replace(x8, ZERO, ONE)
    return O



def solve_6150a2bd_6d75e8bb(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = ulcorner(x3)
    x5 = subgrid(x3, x1)
    x6 = replace(x5, ZERO, TWO)
    x7 = asobject(x6)
    x8 = shift(x7, x4)
    O = paint(x1, x8)
    return O



def solve_6150a2bd_3f7978a0(I):
    x1 = rot180(I)
    x2 = fgpartition(x1)
    x3 = matcher(color, FIVE)
    x4 = extract(x2, x3)
    x5 = ulcorner(x4)
    x6 = subtract(x5, DOWN)
    x7 = shape(x4)
    x8 = add(x7, TWO_BY_ZERO)
    O = crop(x1, x6, x8)
    return O



def solve_6150a2bd_1190e5a7(I):
    x1 = rot180(I)
    x2 = mostcolor(x1)
    x3 = frontiers(x1)
    x4 = sfilter(x3, vline)
    x5 = difference(x3, x4)
    x6 = astuple(x5, x4)
    x7 = apply(size, x6)
    x8 = increment(x7)
    O = canvas(x2, x8)
    return O



def solve_6150a2bd_6e02f1e3(I):
    x1 = rot180(I)
    x2 = numcolors(x1)
    x3 = canvas(ZERO, THREE_BY_THREE)
    x4 = equality(x2, THREE)
    x5 = equality(x2, TWO)
    x6 = branch(x4, TWO_BY_ZERO, ORIGIN)
    x7 = branch(x5, TWO_BY_TWO, ZERO_BY_TWO)
    x8 = connect(x6, x7)
    O = fill(x3, FIVE, x8)
    return O



def solve_6150a2bd_a61f2674(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = replace(x1, FIVE, ZERO)
    x6 = recolor(ONE, x3)
    x7 = recolor(TWO, x4)
    x8 = combine(x6, x7)
    O = paint(x5, x8)
    return O



def solve_6150a2bd_fcc82909(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = rbind(add, DOWN)
    x4 = compose(x3, llcorner)
    x5 = compose(toivec, numcolors)
    x6 = fork(add, lrcorner, x5)
    x7 = fork(astuple, x4, x6)
    x8 = compose(box, x7)
    x9 = mapply(x8, x2)
    O = fill(x1, THREE, x9)
    return O



def solve_6150a2bd_72ca375d(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = rbind(subgrid, x1)
    x5 = apply(x4, x3)
    x6 = apply(vmirror, x5)
    x7 = papply(equality, x5, x6)
    x8 = pair(x5, x7)
    x9 = extract(x8, last)
    O = first(x9)
    return O



def solve_6150a2bd_253bf280(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, EIGHT)
    x3 = prapply(connect, x2, x2)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = fork(either, vline, hline)
    x8 = mfilter(x6, x7)
    x9 = fill(x1, THREE, x8)
    O = fill(x9, EIGHT, x2)
    return O



def solve_6150a2bd_1f642eb9(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = rbind(gravitate, x5)
    x7 = compose(crement, x6)
    x8 = fork(shift, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_6150a2bd_31aa019c(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = first(x3)
    x5 = neighbors(x4)
    x6 = astuple(TEN, TEN)
    x7 = canvas(ZERO, x6)
    x8 = initset(x4)
    x9 = fill(x7, x2, x8)
    O = fill(x9, TWO, x5)
    return O



def solve_6150a2bd_27a28665(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = valmax(x2, size)
    x4 = equality(x3, ONE)
    x5 = equality(x3, FOUR)
    x6 = equality(x3, FIVE)
    x7 = branch(x4, TWO, ONE)
    x8 = branch(x5, THREE, x7)
    x9 = branch(x6, SIX, x8)
    O = canvas(x9, UNITY)
    return O



def solve_6150a2bd_7ddcd7ec(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = color(x5)
    x7 = lbind(position, x5)
    x8 = fork(shoot, center, x7)
    x9 = mapply(x8, x3)
    O = fill(x1, x6, x9)
    return O



def solve_6150a2bd_3bd67248(I):
    x1 = rot180(I)
    x2 = height(x1)
    x3 = decrement(x2)
    x4 = decrement(x3)
    x5 = astuple(x4, ONE)
    x6 = astuple(x3, ONE)
    x7 = shoot(x5, UP_RIGHT)
    x8 = shoot(x6, RIGHT)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_6150a2bd_73251a56(I):
    x1 = rot180(I)
    x2 = dmirror(x1)
    x3 = papply(pair, x1, x2)
    x4 = lbind(apply, maximum)
    x5 = apply(x4, x3)
    x6 = mostcolor(x5)
    x7 = replace(x5, ZERO, x6)
    x8 = index(x7, ORIGIN)
    x9 = shoot(ORIGIN, UNITY)
    O = fill(x7, x8, x9)
    return O



def solve_6150a2bd_25d487eb(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = ofcolor(x1, x2)
    x5 = center(x4)
    x6 = merge(x3)
    x7 = center(x6)
    x8 = subtract(x7, x5)
    x9 = shoot(x5, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_6150a2bd_8f2ea7aa(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    O = cellwise(x5, x9, ZERO)
    return O



def solve_6150a2bd_b8825c91(I):
    x1 = rot180(I)
    x2 = replace(x1, FOUR, ZERO)
    x3 = dmirror(x2)
    x4 = papply(pair, x2, x3)
    x5 = lbind(apply, maximum)
    x6 = apply(x5, x4)
    x7 = cmirror(x6)
    x8 = papply(pair, x6, x7)
    x9 = apply(x5, x8)
    O = cmirror(x9)
    return O



def solve_6150a2bd_cce03e0d(I):
    x1 = rot180(I)
    x2 = upscale(x1, THREE)
    x3 = hconcat(x1, x1)
    x4 = hconcat(x3, x1)
    x5 = vconcat(x4, x4)
    x6 = vconcat(x5, x4)
    x7 = ofcolor(x2, ZERO)
    x8 = ofcolor(x2, ONE)
    x9 = combine(x7, x8)
    O = fill(x6, ZERO, x9)
    return O



def solve_6150a2bd_d364b489(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, DOWN)
    x4 = fill(x1, EIGHT, x3)
    x5 = shift(x2, UP)
    x6 = fill(x4, TWO, x5)
    x7 = shift(x2, RIGHT)
    x8 = fill(x6, SIX, x7)
    x9 = shift(x2, LEFT)
    O = fill(x8, SEVEN, x9)
    return O



def solve_6150a2bd_a5f85a15(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = interval(ONE, NINE, ONE)
    x4 = apply(double, x3)
    x5 = apply(decrement, x4)
    x6 = papply(astuple, x5, x5)
    x7 = apply(ulcorner, x2)
    x8 = lbind(shift, x6)
    x9 = mapply(x8, x7)
    O = fill(x1, FOUR, x9)
    return O



def solve_6150a2bd_3ac3eb23(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = chain(ineighbors, last, first)
    x4 = fork(recolor, color, x3)
    x5 = mapply(x4, x2)
    x6 = paint(x1, x5)
    x7 = vsplit(x6, THREE)
    x8 = first(x7)
    x9 = vconcat(x8, x8)
    O = vconcat(x8, x9)
    return O



def solve_6150a2bd_22168020(I):
    x1 = rot180(I)
    x2 = palette(x1)
    x3 = remove(ZERO, x2)
    x4 = lbind(ofcolor, x1)
    x5 = lbind(prapply, connect)
    x6 = fork(x5, x4, x4)
    x7 = compose(merge, x6)
    x8 = fork(recolor, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_6150a2bd_6e82a1ae(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sizefilter, x2)
    x4 = compose(merge, x3)
    x5 = x4(TWO)
    x6 = x4(THREE)
    x7 = x4(FOUR)
    x8 = fill(x1, THREE, x5)
    x9 = fill(x8, TWO, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_6150a2bd_868de0fa(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = sfilter(x2, square)
    x4 = compose(even, height)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = merge(x5)
    x8 = merge(x6)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, SEVEN, x8)
    return O



def solve_6150a2bd_681b3aeb(I):
    x1 = rot180(I)
    x2 = rot270(x1)
    x3 = objects(x2, T, F, T)
    x4 = argmax(x3, size)
    x5 = argmin(x3, size)
    x6 = color(x5)
    x7 = canvas(x6, THREE_BY_THREE)
    x8 = normalize(x4)
    x9 = paint(x7, x8)
    O = rot90(x9)
    return O



def solve_6150a2bd_8e5a5113(I):
    x1 = rot180(I)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = rot90(x2)
    x4 = rot180(x2)
    x5 = astuple(x3, x4)
    x6 = astuple(FOUR, EIGHT)
    x7 = apply(tojvec, x6)
    x8 = apply(asobject, x5)
    x9 = mpapply(shift, x8, x7)
    O = paint(x1, x9)
    return O



def solve_6150a2bd_025d127b(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(color, x2)
    x4 = merge(x2)
    x5 = lbind(colorfilter, x2)
    x6 = rbind(argmax, rightmost)
    x7 = compose(x6, x5)
    x8 = mapply(x7, x3)
    x9 = difference(x4, x8)
    O = move(x1, x9, RIGHT)
    return O



def solve_6150a2bd_2281f1f4(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, FIVE)
    x3 = product(x2, x2)
    x4 = power(first, TWO)
    x5 = power(last, TWO)
    x6 = fork(astuple, x4, x5)
    x7 = apply(x6, x3)
    x8 = urcorner(x2)
    x9 = remove(x8, x7)
    O = underfill(x1, TWO, x9)
    return O



def solve_6150a2bd_cf98881b(I):
    x1 = rot180(I)
    x2 = hsplit(x1, THREE)
    x3 = first(x2)
    x4 = remove(x3, x2)
    x5 = first(x4)
    x6 = last(x4)
    x7 = ofcolor(x5, NINE)
    x8 = ofcolor(x3, FOUR)
    x9 = fill(x6, NINE, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_6150a2bd_bda2d7a6(I):
    x1 = rot180(I)
    x2 = partition(x1)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = last(x3)
    x6 = remove(x5, x3)
    x7 = repeat(x5, ONE)
    x8 = combine(x7, x6)
    x9 = mpapply(recolor, x4, x8)
    O = paint(x1, x9)
    return O



def solve_6150a2bd_137eaa0f(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = matcher(first, FIVE)
    x4 = rbind(sfilter, x3)
    x5 = chain(invert, center, x4)
    x6 = fork(shift, identity, x5)
    x7 = canvas(ZERO, THREE_BY_THREE)
    x8 = mapply(x6, x2)
    x9 = shift(x8, UNITY)
    O = paint(x7, x9)
    return O



def solve_6150a2bd_6455b5f5(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = argmax(x2, size)
    x5 = valmin(x2, size)
    x6 = sizefilter(x3, x5)
    x7 = recolor(ONE, x4)
    x8 = merge(x6)
    x9 = paint(x1, x7)
    O = fill(x9, EIGHT, x8)
    return O



def solve_6150a2bd_b8cdaf2b(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = shift(x3, UP)
    x5 = ulcorner(x4)
    x6 = urcorner(x4)
    x7 = shoot(x5, NEG_UNITY)
    x8 = shoot(x6, UP_RIGHT)
    x9 = combine(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_6150a2bd_bd4472b8(I):
    x1 = rot180(I)
    x2 = width(x1)
    x3 = astuple(TWO, x2)
    x4 = crop(x1, ORIGIN, x3)
    x5 = tophalf(x4)
    x6 = dmirror(x5)
    x7 = hupscale(x6, x2)
    x8 = repeat(x7, TWO)
    x9 = merge(x8)
    O = vconcat(x4, x9)
    return O



def solve_6150a2bd_4be741c5(I):
    x1 = rot180(I)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = branch(x2, height, width)
    x5 = x4(x1)
    x6 = astuple(ONE, x5)
    x7 = x3(x1)
    x8 = crop(x7, ORIGIN, x6)
    x9 = apply(dedupe, x8)
    O = x3(x9)
    return O



def solve_6150a2bd_bbc9ae5d(I):
    x1 = rot180(I)
    x2 = width(x1)
    x3 = palette(x1)
    x4 = halve(x2)
    x5 = vupscale(x1, x4)
    x6 = rbind(shoot, UNITY)
    x7 = other(x3, ZERO)
    x8 = ofcolor(x5, x7)
    x9 = mapply(x6, x8)
    O = fill(x5, x7, x9)
    return O



def solve_6150a2bd_d90796e8(I):
    x1 = rot180(I)
    x2 = objects(x1, F, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = lbind(contained, TWO)
    x5 = compose(x4, palette)
    x6 = mfilter(x3, x5)
    x7 = cover(x1, x6)
    x8 = matcher(first, THREE)
    x9 = sfilter(x6, x8)
    O = fill(x7, EIGHT, x9)
    return O



def solve_6150a2bd_2c608aff(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = toindices(x4)
    x6 = ofcolor(x1, x2)
    x7 = prapply(connect, x5, x6)
    x8 = fork(either, vline, hline)
    x9 = mfilter(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_6150a2bd_f8b3ba0a(I):
    x1 = rot180(I)
    x2 = compress(x1)
    x3 = astuple(THREE, ONE)
    x4 = palette(x2)
    x5 = lbind(colorcount, x2)
    x6 = compose(invert, x5)
    x7 = order(x4, x6)
    x8 = rbind(canvas, UNITY)
    x9 = apply(x8, x7)
    x10 = merge(x9)
    O = crop(x10, DOWN, x3)
    return O



def solve_6150a2bd_80af3007(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    x10 = cellwise(x5, x9, ZERO)
    O = downscale(x10, THREE)
    return O



def solve_6150a2bd_83302e8f(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = sfilter(x3, square)
    x5 = difference(x3, x4)
    x6 = merge(x4)
    x7 = recolor(THREE, x6)
    x8 = merge(x5)
    x9 = recolor(FOUR, x8)
    x10 = paint(x1, x7)
    O = paint(x10, x9)
    return O



def solve_6150a2bd_1fad071e(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, ONE)
    x4 = sizefilter(x3, FOUR)
    x5 = size(x4)
    x6 = subtract(FIVE, x5)
    x7 = astuple(ONE, x5)
    x8 = canvas(ONE, x7)
    x9 = astuple(ONE, x6)
    x10 = canvas(ZERO, x9)
    O = hconcat(x8, x10)
    return O



def solve_6150a2bd_11852cab(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = hmirror(x3)
    x5 = vmirror(x3)
    x6 = dmirror(x3)
    x7 = cmirror(x3)
    x8 = paint(x1, x4)
    x9 = paint(x8, x5)
    x10 = paint(x9, x6)
    O = paint(x10, x7)
    return O



def solve_6150a2bd_3428a4f5(I):
    x1 = rot180(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(SIX, FIVE)
    x5 = ofcolor(x2, TWO)
    x6 = ofcolor(x3, TWO)
    x7 = combine(x5, x6)
    x8 = intersection(x5, x6)
    x9 = difference(x7, x8)
    x10 = canvas(ZERO, x4)
    O = fill(x10, THREE, x9)
    return O



def solve_6150a2bd_178fcbfb(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(vfrontier, x3)
    x5 = fill(x1, TWO, x4)
    x6 = colorfilter(x2, TWO)
    x7 = difference(x2, x6)
    x8 = compose(hfrontier, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x7)
    O = paint(x5, x10)
    return O



def solve_6150a2bd_54d9e175(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = compose(neighbors, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x3)
    x7 = paint(x1, x6)
    x8 = replace(x7, ONE, SIX)
    x9 = replace(x8, TWO, SEVEN)
    x10 = replace(x9, THREE, EIGHT)
    O = replace(x10, FOUR, NINE)
    return O



def solve_6150a2bd_623ea044(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = center(x3)
    x5 = color(x3)
    x6 = astuple(UNITY, NEG_UNITY)
    x7 = astuple(UP_RIGHT, DOWN_LEFT)
    x8 = combine(x6, x7)
    x9 = lbind(shoot, x4)
    x10 = mapply(x9, x8)
    O = fill(x1, x5, x10)
    return O



def solve_6150a2bd_794b24be(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, ONE)
    x3 = size(x2)
    x4 = decrement(x3)
    x5 = canvas(ZERO, THREE_BY_THREE)
    x6 = tojvec(x4)
    x7 = connect(ORIGIN, x6)
    x8 = equality(x3, FOUR)
    x9 = insert(UNITY, x7)
    x10 = branch(x8, x9, x7)
    O = fill(x5, TWO, x10)
    return O



def solve_6150a2bd_88a62173(I):
    x1 = rot180(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = tophalf(x3)
    x6 = bottomhalf(x2)
    x7 = bottomhalf(x3)
    x8 = astuple(x4, x5)
    x9 = astuple(x6, x7)
    x10 = combine(x8, x9)
    O = leastcommon(x10)
    return O



def solve_6150a2bd_890034e9(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = inbox(x3)
    x5 = recolor(ZERO, x4)
    x6 = occurrences(x1, x5)
    x7 = normalize(x3)
    x8 = shift(x7, NEG_UNITY)
    x9 = lbind(shift, x8)
    x10 = mapply(x9, x6)
    O = fill(x1, x2, x10)
    return O



def solve_6150a2bd_99b1bc43(I):
    x1 = rot180(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = combine(x4, x5)
    x7 = intersection(x4, x5)
    x8 = difference(x6, x7)
    x9 = shape(x2)
    x10 = canvas(ZERO, x9)
    O = fill(x10, THREE, x8)
    return O



def solve_6150a2bd_a9f96cdd(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = shift(x2, NEG_UNITY)
    x5 = fill(x3, THREE, x4)
    x6 = shift(x2, UP_RIGHT)
    x7 = fill(x5, SIX, x6)
    x8 = shift(x2, DOWN_LEFT)
    x9 = fill(x7, EIGHT, x8)
    x10 = shift(x2, UNITY)
    O = fill(x9, SEVEN, x10)
    return O



def solve_6150a2bd_af902bf9(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, FOUR)
    x3 = prapply(connect, x2, x2)
    x4 = fork(either, vline, hline)
    x5 = mfilter(x3, x4)
    x6 = underfill(x1, NEG_ONE, x5)
    x7 = objects(x6, F, F, T)
    x8 = compose(backdrop, inbox)
    x9 = mapply(x8, x7)
    x10 = fill(x6, TWO, x9)
    O = replace(x10, NEG_ONE, ZERO)
    return O



def solve_6150a2bd_b548a754(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, EIGHT, ZERO)
    x4 = leastcolor(x3)
    x5 = replace(x3, x4, ZERO)
    x6 = leastcolor(x5)
    x7 = merge(x2)
    x8 = backdrop(x7)
    x9 = box(x7)
    x10 = fill(x1, x4, x8)
    O = fill(x10, x6, x9)
    return O



def solve_6150a2bd_c3e719e8(I):
    x1 = rot180(I)
    x2 = mostcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = upscale(x1, THREE)
    x5 = ofcolor(x4, x2)
    x6 = asindices(x4)
    x7 = difference(x6, x5)
    x8 = hconcat(x3, x1)
    x9 = vconcat(x8, x8)
    x10 = vconcat(x9, x8)
    O = fill(x10, ZERO, x7)
    return O



def solve_6150a2bd_de1cd16c(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = rbind(subgrid, x1)
    x7 = apply(x6, x5)
    x8 = rbind(colorcount, x2)
    x9 = argmax(x7, x8)
    x10 = mostcolor(x9)
    O = canvas(x10, UNITY)
    return O



def solve_6150a2bd_d8c310e9(I):
    x1 = rot180(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = hperiod(x3)
    x5 = multiply(x4, THREE)
    x6 = tojvec(x4)
    x7 = tojvec(x5)
    x8 = shift(x3, x6)
    x9 = shift(x3, x7)
    x10 = paint(x1, x8)
    O = paint(x10, x9)
    return O



def solve_6150a2bd_a3325580(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = valmax(x2, size)
    x4 = sizefilter(x2, x3)
    x5 = order(x4, leftmost)
    x6 = apply(color, x5)
    x7 = astuple(ONE, x3)
    x8 = rbind(canvas, x7)
    x9 = apply(x8, x6)
    x10 = merge(x9)
    O = dmirror(x10)
    return O



def solve_6150a2bd_8eb1be9a(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = interval(NEG_TWO, FOUR, ONE)
    x5 = lbind(shift, x3)
    x6 = height(x3)
    x7 = rbind(multiply, x6)
    x8 = apply(x7, x4)
    x9 = apply(toivec, x8)
    x10 = mapply(x5, x9)
    O = paint(x1, x10)
    return O



def solve_6150a2bd_1b60fb0c(I):
    x1 = rot180(I)
    x2 = rot90(x1)
    x3 = ofcolor(x1, ONE)
    x4 = ofcolor(x2, ONE)
    x5 = neighbors(ORIGIN)
    x6 = mapply(neighbors, x5)
    x7 = lbind(shift, x4)
    x8 = apply(x7, x6)
    x9 = lbind(intersection, x3)
    x10 = compose(size, x9)
    x11 = argmax(x8, x10)
    O = underfill(x1, TWO, x11)
    return O



def solve_6150a2bd_ddf7fa4f(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = colorfilter(x2, FIVE)
    x5 = product(x3, x4)
    x6 = fork(vmatching, first, last)
    x7 = sfilter(x5, x6)
    x8 = compose(color, first)
    x9 = fork(recolor, x8, last)
    x10 = mapply(x9, x7)
    O = paint(x1, x10)
    return O



def solve_6150a2bd_47c1f68c(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = vmirror(x1)
    x4 = objects(x1, T, T, T)
    x5 = merge(x4)
    x6 = mostcolor(x5)
    x7 = cellwise(x1, x3, x2)
    x8 = hmirror(x7)
    x9 = cellwise(x7, x8, x2)
    x10 = compress(x9)
    O = replace(x10, x2, x6)
    return O



def solve_6150a2bd_6c434453(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, EIGHT)
    x4 = dneighbors(UNITY)
    x5 = insert(UNITY, x4)
    x6 = merge(x3)
    x7 = cover(x1, x6)
    x8 = apply(ulcorner, x3)
    x9 = lbind(shift, x5)
    x10 = mapply(x9, x8)
    O = fill(x7, TWO, x10)
    return O



def solve_6150a2bd_23581191(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = paint(x1, x6)
    x8 = fork(intersection, first, last)
    x9 = apply(x4, x2)
    x10 = x8(x9)
    O = fill(x7, TWO, x10)
    return O



def solve_6150a2bd_c8cbb738(I):
    x1 = rot180(I)
    x2 = mostcolor(x1)
    x3 = fgpartition(x1)
    x4 = valmax(x3, shape)
    x5 = canvas(x2, x4)
    x6 = apply(normalize, x3)
    x7 = lbind(subtract, x4)
    x8 = chain(halve, x7, shape)
    x9 = fork(shift, identity, x8)
    x10 = mapply(x9, x6)
    O = paint(x5, x10)
    return O



def solve_6150a2bd_d4469b4b(I):
    x1 = rot180(I)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = equality(x3, ONE)
    x5 = equality(x3, TWO)
    x6 = branch(x4, UNITY, TWO_BY_TWO)
    x7 = branch(x5, RIGHT, x6)
    x8 = fork(combine, vfrontier, hfrontier)
    x9 = x8(x7)
    x10 = canvas(ZERO, THREE_BY_THREE)
    O = fill(x10, FIVE, x9)
    return O



def solve_6150a2bd_6ecd11f4(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = subgrid(x3, x1)
    x6 = subgrid(x4, x1)
    x7 = width(x5)
    x8 = width(x6)
    x9 = divide(x7, x8)
    x10 = downscale(x5, x9)
    x11 = ofcolor(x10, ZERO)
    O = fill(x6, ZERO, x11)
    return O



def solve_6150a2bd_c444b776(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = argmin(x3, size)
    x5 = backdrop(x4)
    x6 = toobject(x5, x1)
    x7 = normalize(x6)
    x8 = lbind(shift, x7)
    x9 = compose(x8, ulcorner)
    x10 = mapply(x9, x3)
    O = paint(x1, x10)
    return O



def solve_6150a2bd_eb281b96(I):
    x1 = rot180(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = decrement(x2)
    x5 = astuple(x4, x3)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    x8 = vconcat(x1, x7)
    x9 = double(x4)
    x10 = astuple(x9, x3)
    x11 = crop(x8, DOWN, x10)
    O = vconcat(x8, x11)
    return O



def solve_6150a2bd_ff28f65a(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = double(x3)
    x5 = interval(ZERO, x4, TWO)
    x6 = apply(tojvec, x5)
    x7 = astuple(ONE, NINE)
    x8 = canvas(ZERO, x7)
    x9 = fill(x8, ONE, x6)
    x10 = hsplit(x9, THREE)
    O = merge(x10)
    return O



def solve_6150a2bd_7e0986d6(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = replace(x1, x2, ZERO)
    x5 = leastcolor(x4)
    x6 = rbind(colorcount, x5)
    x7 = chain(positive, decrement, x6)
    x8 = rbind(toobject, x4)
    x9 = chain(x7, x8, dneighbors)
    x10 = sfilter(x3, x9)
    O = fill(x4, x5, x10)
    return O



def solve_6150a2bd_09629e4f(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = argmin(x2, numcolors)
    x4 = normalize(x3)
    x5 = upscale(x4, FOUR)
    x6 = paint(x1, x5)
    x7 = ofcolor(x1, FIVE)
    O = fill(x6, FIVE, x7)
    return O



def solve_6150a2bd_a85d4709(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, FIVE)
    x3 = lbind(matcher, last)
    x4 = lbind(sfilter, x2)
    x5 = lbind(mapply, hfrontier)
    x6 = chain(x5, x4, x3)
    x7 = x6(ZERO)
    x8 = x6(TWO)
    x9 = x6(ONE)
    x10 = fill(x1, TWO, x7)
    x11 = fill(x10, THREE, x8)
    O = fill(x11, FOUR, x9)
    return O



def solve_6150a2bd_feca6190(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = multiply(x3, FIVE)
    x5 = astuple(x4, x4)
    x6 = canvas(ZERO, x5)
    x7 = rbind(shoot, UNITY)
    x8 = compose(x7, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x2)
    x11 = paint(x6, x10)
    O = hmirror(x11)
    return O



def solve_6150a2bd_a68b268e(I):
    x1 = rot180(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = lefthalf(x2)
    x5 = righthalf(x2)
    x6 = lefthalf(x3)
    x7 = righthalf(x3)
    x8 = ofcolor(x5, FOUR)
    x9 = ofcolor(x4, SEVEN)
    x10 = ofcolor(x6, EIGHT)
    x11 = fill(x7, EIGHT, x10)
    x12 = fill(x11, FOUR, x8)
    O = fill(x12, SEVEN, x9)
    return O



def solve_6150a2bd_beb8660c(I):
    x1 = rot180(I)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(invert, size)
    x5 = order(x3, x4)
    x6 = apply(normalize, x5)
    x7 = size(x6)
    x8 = interval(ZERO, x7, ONE)
    x9 = apply(toivec, x8)
    x10 = mpapply(shift, x6, x9)
    x11 = canvas(ZERO, x2)
    x12 = paint(x11, x10)
    O = rot180(x12)
    return O



def solve_6150a2bd_913fb3ed(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, THREE)
    x3 = ofcolor(x1, EIGHT)
    x4 = ofcolor(x1, TWO)
    x5 = mapply(neighbors, x2)
    x6 = mapply(neighbors, x3)
    x7 = mapply(neighbors, x4)
    x8 = fill(x1, SIX, x5)
    x9 = fill(x8, FOUR, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_6150a2bd_0962bcdd(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = replace(x1, ZERO, x2)
    x4 = leastcolor(x3)
    x5 = ofcolor(x1, x4)
    x6 = mapply(dneighbors, x5)
    x7 = fill(x1, x4, x6)
    x8 = objects(x7, F, T, T)
    x9 = fork(connect, ulcorner, lrcorner)
    x10 = fork(connect, llcorner, urcorner)
    x11 = fork(combine, x9, x10)
    x12 = mapply(x11, x8)
    O = fill(x7, x2, x12)
    return O



def solve_6150a2bd_3631a71a(I):
    x1 = rot180(I)
    x2 = shape(x1)
    x3 = replace(x1, NINE, ZERO)
    x4 = lbind(apply, maximum)
    x5 = dmirror(x3)
    x6 = papply(pair, x3, x5)
    x7 = apply(x4, x6)
    x8 = subtract(x2, TWO_BY_TWO)
    x9 = crop(x7, TWO_BY_TWO, x8)
    x10 = vmirror(x9)
    x11 = objects(x10, T, F, T)
    x12 = merge(x11)
    x13 = shift(x12, TWO_BY_TWO)
    O = paint(x7, x13)
    return O



def solve_6150a2bd_05269061(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = neighbors(ORIGIN)
    x4 = mapply(neighbors, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = merge(x2)
    x8 = lbind(shift, x7)
    x9 = mapply(x8, x6)
    x10 = shift(x9, UP_RIGHT)
    x11 = shift(x9, DOWN_LEFT)
    x12 = paint(x1, x9)
    x13 = paint(x12, x10)
    O = paint(x13, x11)
    return O



def solve_6150a2bd_95990924(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = apply(ulcorner, x3)
    x5 = apply(urcorner, x3)
    x6 = apply(llcorner, x3)
    x7 = apply(lrcorner, x3)
    x8 = fill(x1, ONE, x4)
    x9 = fill(x8, TWO, x5)
    x10 = fill(x9, THREE, x6)
    O = fill(x10, FOUR, x7)
    return O



def solve_6150a2bd_e509e548(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = rbind(subgrid, x1)
    x4 = chain(palette, trim, x3)
    x5 = lbind(contained, THREE)
    x6 = compose(x5, x4)
    x7 = fork(add, height, width)
    x8 = compose(decrement, x7)
    x9 = fork(equality, size, x8)
    x10 = mfilter(x2, x6)
    x11 = mfilter(x2, x9)
    x12 = replace(x1, THREE, SIX)
    x13 = fill(x12, TWO, x10)
    O = fill(x13, ONE, x11)
    return O



def solve_6150a2bd_d43fd935(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, THREE)
    x4 = sizefilter(x2, ONE)
    x5 = rbind(vmatching, x3)
    x6 = rbind(hmatching, x3)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = rbind(gravitate, x3)
    x10 = fork(add, center, x9)
    x11 = fork(connect, center, x10)
    x12 = fork(recolor, color, x11)
    x13 = mapply(x12, x8)
    O = paint(x1, x13)
    return O



def solve_6150a2bd_e73095fd(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = fork(equality, toindices, backdrop)
    x5 = sfilter(x3, x4)
    x6 = lbind(mapply, dneighbors)
    x7 = chain(x6, corners, outbox)
    x8 = fork(difference, x7, outbox)
    x9 = ofcolor(x1, FIVE)
    x10 = rbind(intersection, x9)
    x11 = matcher(size, ZERO)
    x12 = chain(x11, x10, x8)
    x13 = mfilter(x5, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_6150a2bd_1bfc4729(I):
    x1 = rot180(I)
    x2 = asindices(x1)
    x3 = tophalf(x1)
    x4 = bottomhalf(x1)
    x5 = leastcolor(x3)
    x6 = leastcolor(x4)
    x7 = hfrontier(TWO_BY_ZERO)
    x8 = box(x2)
    x9 = combine(x7, x8)
    x10 = fill(x3, x5, x9)
    x11 = hmirror(x10)
    x12 = replace(x11, x5, x6)
    O = vconcat(x10, x12)
    return O



def solve_6150a2bd_93b581b8(I):
    x1 = rot180(I)
    x2 = fgpartition(x1)
    x3 = chain(cmirror, dmirror, merge)
    x4 = x3(x2)
    x5 = upscale(x4, THREE)
    x6 = astuple(NEG_TWO, NEG_TWO)
    x7 = shift(x5, x6)
    x8 = underpaint(x1, x7)
    x9 = toindices(x4)
    x10 = fork(combine, hfrontier, vfrontier)
    x11 = mapply(x10, x9)
    x12 = difference(x11, x9)
    O = fill(x8, ZERO, x12)
    return O



def solve_6150a2bd_7447852a(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = compose(last, center)
    x5 = order(x3, x4)
    x6 = size(x5)
    x7 = interval(ZERO, x6, THREE)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = interval(ZERO, x6, ONE)
    x11 = pair(x5, x10)
    x12 = sfilter(x11, x9)
    x13 = mapply(first, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_6150a2bd_97999447(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(toindices, x2)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    x8 = paint(x1, x7)
    x9 = interval(ZERO, FIVE, ONE)
    x10 = apply(double, x9)
    x11 = apply(increment, x10)
    x12 = apply(tojvec, x11)
    x13 = prapply(shift, x3, x12)
    x14 = merge(x13)
    O = fill(x8, FIVE, x14)
    return O



def solve_6150a2bd_91714a58(I):
    x1 = rot180(I)
    x2 = shape(x1)
    x3 = asindices(x1)
    x4 = objects(x1, T, F, T)
    x5 = argmax(x4, size)
    x6 = mostcolor(x5)
    x7 = canvas(ZERO, x2)
    x8 = paint(x7, x5)
    x9 = rbind(toobject, x8)
    x10 = rbind(colorcount, x6)
    x11 = chain(x10, x9, neighbors)
    x12 = lbind(greater, THREE)
    x13 = compose(x12, x11)
    x14 = sfilter(x3, x13)
    O = fill(x8, ZERO, x14)
    return O



def solve_6150a2bd_8e1813be(I):
    x1 = rot180(I)
    x2 = replace(x1, FIVE, ZERO)
    x3 = objects(x2, T, T, T)
    x4 = first(x3)
    x5 = vline(x4)
    x6 = branch(x5, dmirror, identity)
    x7 = x6(x2)
    x8 = objects(x7, T, T, T)
    x9 = order(x8, uppermost)
    x10 = apply(color, x9)
    x11 = dedupe(x10)
    x12 = size(x11)
    x13 = rbind(repeat, x12)
    x14 = apply(x13, x11)
    O = x6(x14)
    return O



def solve_6150a2bd_bc1d5164(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = crop(x1, TWO_BY_ZERO, THREE_BY_THREE)
    x5 = tojvec(FOUR)
    x6 = crop(x1, x5, THREE_BY_THREE)
    x7 = astuple(TWO, FOUR)
    x8 = crop(x1, x7, THREE_BY_THREE)
    x9 = canvas(ZERO, THREE_BY_THREE)
    x10 = rbind(ofcolor, x2)
    x11 = astuple(x3, x4)
    x12 = astuple(x6, x8)
    x13 = combine(x11, x12)
    x14 = mapply(x10, x13)
    O = fill(x9, x2, x14)
    return O



def solve_6150a2bd_ce602527(I):
    x1 = rot180(I)
    x2 = vmirror(x1)
    x3 = fgpartition(x2)
    x4 = order(x3, size)
    x5 = last(x4)
    x6 = remove(x5, x4)
    x7 = compose(toindices, normalize)
    x8 = rbind(upscale, TWO)
    x9 = chain(toindices, x8, normalize)
    x10 = x7(x5)
    x11 = rbind(intersection, x10)
    x12 = chain(size, x11, x9)
    x13 = argmax(x6, x12)
    x14 = subgrid(x13, x2)
    O = vmirror(x14)
    return O



def solve_6150a2bd_5c2c9af4(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = center(x3)
    x5 = ulcorner(x3)
    x6 = subtract(x4, x5)
    x7 = multiply(NEG_ONE, NINE)
    x8 = interval(ZERO, NINE, ONE)
    x9 = interval(ZERO, x7, NEG_ONE)
    x10 = lbind(multiply, x6)
    x11 = apply(x10, x8)
    x12 = apply(x10, x9)
    x13 = pair(x11, x12)
    x14 = mapply(box, x13)
    x15 = shift(x14, x4)
    O = fill(x1, x2, x15)
    return O



def solve_6150a2bd_75b8110e(I):
    x1 = rot180(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = bottomhalf(x2)
    x6 = tophalf(x3)
    x7 = bottomhalf(x3)
    x8 = rbind(ofcolor, ZERO)
    x9 = fork(difference, asindices, x8)
    x10 = fork(toobject, x9, identity)
    x11 = x10(x6)
    x12 = x10(x5)
    x13 = x10(x7)
    x14 = paint(x4, x13)
    x15 = paint(x14, x12)
    O = paint(x15, x11)
    return O



def solve_6150a2bd_c3f564a4(I):
    x1 = rot180(I)
    x2 = asindices(x1)
    x3 = dmirror(x1)
    x4 = invert(NINE)
    x5 = papply(pair, x1, x3)
    x6 = lbind(apply, maximum)
    x7 = apply(x6, x5)
    x8 = ofcolor(x7, ZERO)
    x9 = difference(x2, x8)
    x10 = toobject(x9, x7)
    x11 = interval(x4, NINE, ONE)
    x12 = interval(NINE, x4, NEG_ONE)
    x13 = pair(x11, x12)
    x14 = lbind(shift, x10)
    x15 = mapply(x14, x13)
    O = paint(x7, x15)
    return O



def solve_6150a2bd_1a07d186(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = mapply(x12, x8)
    x14 = merge(x3)
    x15 = cover(x1, x14)
    O = paint(x15, x13)
    return O



def solve_6150a2bd_d687bc17(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = merge(x3)
    x14 = mapply(x12, x8)
    x15 = cover(x1, x13)
    O = paint(x15, x14)
    return O



def solve_6150a2bd_9af7a82c(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = order(x2, size)
    x4 = valmax(x2, size)
    x5 = rbind(astuple, ONE)
    x6 = lbind(subtract, x4)
    x7 = compose(x5, size)
    x8 = chain(x5, x6, size)
    x9 = fork(canvas, color, x7)
    x10 = lbind(canvas, ZERO)
    x11 = compose(x10, x8)
    x12 = fork(vconcat, x9, x11)
    x13 = compose(cmirror, x12)
    x14 = apply(x13, x3)
    x15 = merge(x14)
    O = cmirror(x15)
    return O



def solve_6150a2bd_ef135b50(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, ZERO)
    x4 = product(x2, x2)
    x5 = power(first, TWO)
    x6 = compose(first, last)
    x7 = fork(equality, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = fork(connect, first, last)
    x10 = mapply(x9, x8)
    x11 = intersection(x10, x3)
    x12 = fill(x1, NINE, x11)
    x13 = trim(x12)
    x14 = asobject(x13)
    x15 = shift(x14, UNITY)
    O = paint(x1, x15)
    return O



def solve_6150a2bd_cbded52d(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = product(x3, x3)
    x5 = fork(vmatching, first, last)
    x6 = fork(hmatching, first, last)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = compose(center, first)
    x10 = compose(center, last)
    x11 = fork(connect, x9, x10)
    x12 = chain(initset, center, x11)
    x13 = compose(color, first)
    x14 = fork(recolor, x13, x12)
    x15 = mapply(x14, x8)
    O = paint(x1, x15)
    return O



def solve_6150a2bd_e26a3af2(I):
    x1 = rot180(I)
    x2 = rot90(x1)
    x3 = apply(mostcommon, x1)
    x4 = apply(mostcommon, x2)
    x5 = repeat(x3, ONE)
    x6 = repeat(x4, ONE)
    x7 = compose(size, dedupe)
    x8 = x7(x3)
    x9 = x7(x4)
    x10 = greater(x9, x8)
    x11 = branch(x10, height, width)
    x12 = x11(x1)
    x13 = rot90(x5)
    x14 = branch(x10, x6, x13)
    x15 = branch(x10, vupscale, hupscale)
    O = x15(x14, x12)
    return O



def solve_6150a2bd_6cf79266(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, ZERO)
    x3 = astuple(ZERO, ORIGIN)
    x4 = initset(x3)
    x5 = upscale(x4, THREE)
    x6 = toindices(x5)
    x7 = lbind(shift, x6)
    x8 = rbind(difference, x2)
    x9 = chain(size, x8, x7)
    x10 = matcher(x9, ZERO)
    x11 = lbind(add, NEG_UNITY)
    x12 = chain(flip, x10, x11)
    x13 = fork(both, x10, x12)
    x14 = sfilter(x2, x13)
    x15 = mapply(x7, x14)
    O = fill(x1, ONE, x15)
    return O



def solve_6150a2bd_a87f7484(I):
    x1 = rot180(I)
    x2 = numcolors(x1)
    x3 = portrait(x1)
    x4 = branch(x3, dmirror, identity)
    x5 = x4(x1)
    x6 = decrement(x2)
    x7 = hsplit(x5, x6)
    x8 = rbind(ofcolor, ZERO)
    x9 = apply(x8, x7)
    x10 = leastcommon(x9)
    x11 = matcher(x8, x10)
    x12 = extract(x7, x11)
    O = x4(x12)
    return O



def solve_6150a2bd_4093f84a(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, FIVE)
    x4 = ofcolor(x1, FIVE)
    x5 = portrait(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x3)
    x8 = lefthalf(x7)
    x9 = righthalf(x7)
    x10 = rbind(order, identity)
    x11 = rbind(order, invert)
    x12 = apply(x10, x8)
    x13 = apply(x11, x9)
    x14 = hconcat(x12, x13)
    O = x6(x14)
    return O



def solve_6150a2bd_ba26e723(I):
    x1 = rot180(I)
    x2 = rbind(divide, THREE)
    x3 = rbind(multiply, THREE)
    x4 = compose(x3, x2)
    x5 = fork(equality, identity, x4)
    x6 = compose(x5, last)
    x7 = ofcolor(x1, FOUR)
    x8 = sfilter(x7, x6)
    O = fill(x1, SIX, x8)
    return O



def solve_6150a2bd_29c11459(I):
    x1 = rot180(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = objects(x3, T, F, T)
    x5 = objects(x2, T, F, T)
    x6 = compose(hfrontier, center)
    x7 = fork(recolor, color, x6)
    x8 = mapply(x7, x5)
    x9 = paint(x2, x8)
    x10 = mapply(x7, x4)
    x11 = paint(x1, x10)
    x12 = objects(x9, T, F, T)
    x13 = apply(urcorner, x12)
    x14 = shift(x13, RIGHT)
    x15 = merge(x12)
    x16 = paint(x11, x15)
    O = fill(x16, FIVE, x14)
    return O



def solve_6150a2bd_963e52fc(I):
    x1 = rot180(I)
    x2 = width(x1)
    x3 = asobject(x1)
    x4 = hperiod(x3)
    x5 = height(x3)
    x6 = astuple(x5, x4)
    x7 = ulcorner(x3)
    x8 = crop(x1, x7, x6)
    x9 = rot90(x8)
    x10 = double(x2)
    x11 = divide(x10, x4)
    x12 = increment(x11)
    x13 = repeat(x9, x12)
    x14 = merge(x13)
    x15 = rot270(x14)
    x16 = astuple(x5, x10)
    O = crop(x15, ORIGIN, x16)
    return O



def solve_6150a2bd_1f0c79e5(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = leastcolor(x3)
    x5 = ofcolor(x3, x4)
    x6 = combine(x2, x5)
    x7 = recolor(x4, x6)
    x8 = compose(decrement, double)
    x9 = ulcorner(x6)
    x10 = invert(x9)
    x11 = shift(x2, x10)
    x12 = apply(x8, x11)
    x13 = interval(ZERO, NINE, ONE)
    x14 = prapply(multiply, x12, x13)
    x15 = lbind(shift, x7)
    x16 = mapply(x15, x14)
    O = paint(x1, x16)
    return O



def solve_6150a2bd_6773b310(I):
    x1 = rot180(I)
    x2 = compress(x1)
    x3 = neighbors(ORIGIN)
    x4 = insert(ORIGIN, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = astuple(FOUR, FOUR)
    x8 = shift(x6, x7)
    x9 = fork(insert, identity, neighbors)
    x10 = apply(x9, x8)
    x11 = rbind(toobject, x2)
    x12 = apply(x11, x10)
    x13 = rbind(colorcount, SIX)
    x14 = matcher(x13, TWO)
    x15 = mfilter(x12, x14)
    x16 = fill(x2, ONE, x15)
    x17 = replace(x16, SIX, ZERO)
    O = downscale(x17, THREE)
    return O



def solve_6150a2bd_780d0b14(I):
    x1 = rot180(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, T, T)
    x4 = rbind(greater, TWO)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = totuple(x6)
    x8 = apply(color, x7)
    x9 = apply(center, x7)
    x10 = pair(x8, x9)
    x11 = fill(x1, ZERO, x2)
    x12 = paint(x11, x10)
    x13 = rbind(greater, ONE)
    x14 = compose(dedupe, totuple)
    x15 = chain(x13, size, x14)
    x16 = sfilter(x12, x15)
    x17 = rot90(x16)
    x18 = sfilter(x17, x15)
    O = rot270(x18)
    return O



def solve_6150a2bd_2204b7a8(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sfilter, x2)
    x4 = compose(size, x3)
    x5 = x4(vline)
    x6 = x4(hline)
    x7 = greater(x5, x6)
    x8 = branch(x7, lefthalf, tophalf)
    x9 = branch(x7, righthalf, bottomhalf)
    x10 = branch(x7, hconcat, vconcat)
    x11 = x8(x1)
    x12 = x9(x1)
    x13 = index(x11, ORIGIN)
    x14 = shape(x12)
    x15 = decrement(x14)
    x16 = index(x12, x15)
    x17 = replace(x11, THREE, x13)
    x18 = replace(x12, THREE, x16)
    O = x10(x17, x18)
    return O



def solve_6150a2bd_d9f24cd1(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, FIVE)
    x4 = prapply(connect, x2, x3)
    x5 = mfilter(x4, vline)
    x6 = underfill(x1, TWO, x5)
    x7 = matcher(numcolors, TWO)
    x8 = objects(x6, F, F, T)
    x9 = sfilter(x8, x7)
    x10 = difference(x8, x9)
    x11 = colorfilter(x10, TWO)
    x12 = mapply(toindices, x11)
    x13 = apply(urcorner, x9)
    x14 = shift(x13, UNITY)
    x15 = rbind(shoot, UP)
    x16 = mapply(x15, x14)
    x17 = fill(x6, TWO, x16)
    x18 = mapply(vfrontier, x12)
    O = fill(x17, TWO, x18)
    return O



def solve_6150a2bd_b782dc8a(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = ofcolor(x1, x2)
    x5 = first(x4)
    x6 = dneighbors(x5)
    x7 = toobject(x6, x1)
    x8 = mostcolor(x7)
    x9 = ofcolor(x1, x8)
    x10 = colorfilter(x3, ZERO)
    x11 = rbind(adjacent, x9)
    x12 = mfilter(x10, x11)
    x13 = toindices(x12)
    x14 = rbind(manhattan, x4)
    x15 = chain(even, x14, initset)
    x16 = sfilter(x13, x15)
    x17 = difference(x13, x16)
    x18 = fill(x1, x2, x16)
    O = fill(x18, x8, x17)
    return O



def solve_6150a2bd_673ef223(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, EIGHT)
    x4 = replace(x1, EIGHT, FOUR)
    x5 = colorfilter(x2, TWO)
    x6 = argmin(x2, uppermost)
    x7 = apply(uppermost, x5)
    x8 = fork(subtract, maximum, minimum)
    x9 = x8(x7)
    x10 = toivec(x9)
    x11 = leftmost(x6)
    x12 = equality(x11, ZERO)
    x13 = branch(x12, LEFT, RIGHT)
    x14 = rbind(shoot, x13)
    x15 = mapply(x14, x3)
    x16 = underfill(x4, EIGHT, x15)
    x17 = shift(x3, x10)
    x18 = mapply(hfrontier, x17)
    O = underfill(x16, EIGHT, x18)
    return O



def solve_6150a2bd_f5b8619d(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = mapply(vfrontier, x3)
    x5 = underfill(x1, EIGHT, x4)
    x6 = hconcat(x5, x5)
    O = vconcat(x6, x6)
    return O



def solve_6150a2bd_f8c80d96(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = colorfilter(x3, x2)
    x5 = argmax(x4, size)
    x6 = argmin(x3, width)
    x7 = size(x6)
    x8 = equality(x7, ONE)
    x9 = branch(x8, identity, outbox)
    x10 = chain(outbox, outbox, x9)
    x11 = power(x10, TWO)
    x12 = power(x10, THREE)
    x13 = x10(x5)
    x14 = x11(x5)
    x15 = x12(x5)
    x16 = fill(x1, x2, x13)
    x17 = fill(x16, x2, x14)
    x18 = fill(x17, x2, x15)
    O = replace(x18, ZERO, FIVE)
    return O



def solve_6150a2bd_ecdecbb3(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = colorfilter(x2, EIGHT)
    x5 = product(x3, x4)
    x6 = fork(gravitate, first, last)
    x7 = compose(crement, x6)
    x8 = compose(center, first)
    x9 = fork(add, x8, x7)
    x10 = fork(connect, x8, x9)
    x11 = apply(x10, x5)
    x12 = lbind(greater, EIGHT)
    x13 = compose(x12, size)
    x14 = mfilter(x11, x13)
    x15 = fill(x1, TWO, x14)
    x16 = apply(x9, x5)
    x17 = intersection(x14, x16)
    x18 = mapply(neighbors, x17)
    O = fill(x15, EIGHT, x18)
    return O



def solve_6150a2bd_e5062a87(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, TWO)
    x3 = recolor(ZERO, x2)
    x4 = normalize(x3)
    x5 = occurrences(x1, x3)
    x6 = lbind(shift, x4)
    x7 = apply(x6, x5)
    x8 = astuple(ONE, THREE)
    x9 = astuple(FIVE, ONE)
    x10 = astuple(TWO, SIX)
    x11 = initset(x8)
    x12 = insert(x9, x11)
    x13 = insert(x10, x12)
    x14 = rbind(contained, x13)
    x15 = chain(flip, x14, ulcorner)
    x16 = sfilter(x7, x15)
    x17 = merge(x16)
    x18 = recolor(TWO, x17)
    O = paint(x1, x18)
    return O



def solve_6150a2bd_a8d7556c(I):
    x1 = rot180(I)
    x2 = initset(ORIGIN)
    x3 = recolor(ZERO, x2)
    x4 = upscale(x3, TWO)
    x5 = occurrences(x1, x4)
    x6 = lbind(shift, x4)
    x7 = mapply(x6, x5)
    x8 = fill(x1, TWO, x7)
    x9 = add(SIX, SIX)
    x10 = astuple(EIGHT, x9)
    x11 = index(x8, x10)
    x12 = equality(x11, TWO)
    x13 = initset(x10)
    x14 = add(x10, DOWN)
    x15 = insert(x14, x13)
    x16 = toobject(x15, x8)
    x17 = toobject(x15, x1)
    x18 = branch(x12, x17, x16)
    O = paint(x8, x18)
    return O



def solve_6150a2bd_834ec97d(I):
    x1 = rot180(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = shift(x4, DOWN)
    x6 = fill(x1, ZERO, x4)
    x7 = paint(x6, x5)
    x8 = uppermost(x5)
    x9 = leftmost(x5)
    x10 = subtract(x9, TEN)
    x11 = add(x9, TEN)
    x12 = interval(x10, x11, TWO)
    x13 = lbind(greater, x8)
    x14 = compose(x13, first)
    x15 = rbind(contained, x12)
    x16 = compose(x15, last)
    x17 = sfilter(x2, x14)
    x18 = sfilter(x17, x16)
    O = fill(x7, FOUR, x18)
    return O



def solve_6150a2bd_90f3ed37(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, uppermost)
    x4 = first(x3)
    x5 = remove(x4, x3)
    x6 = normalize(x4)
    x7 = lbind(shift, x6)
    x8 = compose(x7, ulcorner)
    x9 = interval(TWO, NEG_ONE, NEG_ONE)
    x10 = apply(tojvec, x9)
    x11 = rbind(apply, x10)
    x12 = lbind(compose, size)
    x13 = lbind(lbind, intersection)
    x14 = compose(x12, x13)
    x15 = lbind(lbind, shift)
    x16 = chain(x11, x15, x8)
    x17 = fork(argmax, x16, x14)
    x18 = mapply(x17, x5)
    O = underfill(x1, ONE, x18)
    return O



def solve_6150a2bd_8403a5d5(I):
    x1 = rot180(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = color(x4)
    x6 = leftmost(x4)
    x7 = interval(x6, TEN, TWO)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = sfilter(x2, x9)
    x11 = increment(x6)
    x12 = add(x6, THREE)
    x13 = interval(x11, TEN, FOUR)
    x14 = interval(x12, TEN, FOUR)
    x15 = lbind(astuple, NINE)
    x16 = apply(tojvec, x13)
    x17 = apply(x15, x14)
    x18 = fill(x1, x5, x10)
    x19 = fill(x18, FIVE, x16)
    O = fill(x19, FIVE, x17)
    return O



def solve_6150a2bd_91413438(I):
    x1 = rot180(I)
    x2 = colorcount(x1, ZERO)
    x3 = subtract(NINE, x2)
    x4 = multiply(x2, THREE)
    x5 = multiply(x4, x2)
    x6 = subtract(x5, THREE)
    x7 = astuple(THREE, x6)
    x8 = canvas(ZERO, x7)
    x9 = hconcat(x1, x8)
    x10 = objects(x9, T, T, T)
    x11 = first(x10)
    x12 = lbind(shift, x11)
    x13 = compose(x12, tojvec)
    x14 = interval(ZERO, x3, ONE)
    x15 = rbind(multiply, THREE)
    x16 = apply(x15, x14)
    x17 = mapply(x13, x16)
    x18 = paint(x9, x17)
    x19 = hsplit(x18, x2)
    O = merge(x19)
    return O



def solve_6150a2bd_539a4f51(I):
    x1 = rot180(I)
    x2 = shape(x1)
    x3 = index(x1, ORIGIN)
    x4 = colorcount(x1, ZERO)
    x5 = decrement(x2)
    x6 = positive(x4)
    x7 = branch(x6, x5, x2)
    x8 = crop(x1, ORIGIN, x7)
    x9 = width(x8)
    x10 = astuple(ONE, x9)
    x11 = crop(x8, ORIGIN, x10)
    x12 = vupscale(x11, x9)
    x13 = dmirror(x12)
    x14 = hconcat(x8, x12)
    x15 = hconcat(x13, x8)
    x16 = vconcat(x14, x15)
    x17 = asobject(x16)
    x18 = multiply(UNITY, TEN)
    x19 = canvas(x3, x18)
    O = paint(x19, x17)
    return O



def solve_6150a2bd_3bdb4ada(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = compose(increment, ulcorner)
    x5 = compose(decrement, lrcorner)
    x6 = apply(x4, x3)
    x7 = apply(x5, x3)
    x8 = papply(connect, x6, x7)
    x9 = apply(last, x6)
    x10 = compose(last, first)
    x11 = power(last, TWO)
    x12 = fork(subtract, x10, x11)
    x13 = compose(even, x12)
    x14 = lbind(rbind, astuple)
    x15 = lbind(compose, x13)
    x16 = compose(x15, x14)
    x17 = fork(sfilter, first, x16)
    x18 = pair(x8, x9)
    x19 = mapply(x17, x18)
    O = fill(x1, ZERO, x19)
    return O



def solve_6150a2bd_ec883f72(I):
    x1 = rot180(I)
    x2 = palette(x1)
    x3 = objects(x1, T, T, T)
    x4 = fork(multiply, height, width)
    x5 = argmax(x3, x4)
    x6 = color(x5)
    x7 = remove(ZERO, x2)
    x8 = other(x7, x6)
    x9 = lrcorner(x5)
    x10 = llcorner(x5)
    x11 = urcorner(x5)
    x12 = ulcorner(x5)
    x13 = shoot(x9, UNITY)
    x14 = shoot(x10, DOWN_LEFT)
    x15 = shoot(x11, UP_RIGHT)
    x16 = shoot(x12, NEG_UNITY)
    x17 = combine(x13, x14)
    x18 = combine(x15, x16)
    x19 = combine(x17, x18)
    O = underfill(x1, x8, x19)
    return O



def solve_6150a2bd_2bee17df(I):
    x1 = rot180(I)
    x2 = height(x1)
    x3 = rot90(x1)
    x4 = subtract(x2, TWO)
    x5 = interval(ZERO, x2, ONE)
    x6 = rbind(colorcount, ZERO)
    x7 = matcher(x6, x4)
    x8 = rbind(vsplit, x2)
    x9 = lbind(apply, x7)
    x10 = compose(x9, x8)
    x11 = x10(x1)
    x12 = pair(x5, x11)
    x13 = sfilter(x12, last)
    x14 = mapply(hfrontier, x13)
    x15 = x10(x3)
    x16 = pair(x15, x5)
    x17 = sfilter(x16, first)
    x18 = mapply(vfrontier, x17)
    x19 = astuple(x14, x18)
    x20 = merge(x19)
    O = underfill(x1, THREE, x20)
    return O



def solve_6150a2bd_e8dc4411(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, ZERO)
    x4 = ofcolor(x1, x2)
    x5 = position(x3, x4)
    x6 = fork(connect, ulcorner, lrcorner)
    x7 = x6(x3)
    x8 = intersection(x3, x7)
    x9 = equality(x7, x8)
    x10 = fork(subtract, identity, crement)
    x11 = fork(add, identity, x10)
    x12 = branch(x9, identity, x11)
    x13 = shape(x3)
    x14 = multiply(x13, x5)
    x15 = apply(x12, x14)
    x16 = interval(ONE, FIVE, ONE)
    x17 = lbind(multiply, x15)
    x18 = apply(x17, x16)
    x19 = lbind(shift, x3)
    x20 = mapply(x19, x18)
    O = fill(x1, x2, x20)
    return O



def solve_6150a2bd_29623171(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = interval(ZERO, NINE, FOUR)
    x4 = product(x3, x3)
    x5 = rbind(add, THREE)
    x6 = rbind(interval, ONE)
    x7 = fork(x6, identity, x5)
    x8 = compose(x7, first)
    x9 = compose(x7, last)
    x10 = fork(product, x8, x9)
    x11 = rbind(colorcount, x2)
    x12 = rbind(toobject, x1)
    x13 = compose(x11, x12)
    x14 = apply(x10, x4)
    x15 = valmax(x14, x13)
    x16 = matcher(x13, x15)
    x17 = compose(flip, x16)
    x18 = mfilter(x14, x16)
    x19 = mfilter(x14, x17)
    x20 = fill(x1, x2, x18)
    O = fill(x20, ZERO, x19)
    return O



def solve_6150a2bd_b0c4d837(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, FIVE)
    x3 = ofcolor(x1, EIGHT)
    x4 = height(x2)
    x5 = decrement(x4)
    x6 = height(x3)
    x7 = subtract(x5, x6)
    x8 = astuple(ONE, x7)
    x9 = canvas(EIGHT, x8)
    x10 = subtract(SIX, x7)
    x11 = astuple(ONE, x10)
    x12 = canvas(ZERO, x11)
    x13 = hconcat(x9, x12)
    x14 = hsplit(x13, TWO)
    x15 = first(x14)
    x16 = last(x14)
    x17 = vmirror(x16)
    x18 = vconcat(x15, x17)
    x19 = astuple(ONE, THREE)
    x20 = canvas(ZERO, x19)
    O = vconcat(x18, x20)
    return O



def solve_6150a2bd_8731374e(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = height(x4)
    x6 = width(x4)
    x7 = vsplit(x4, x5)
    x8 = lbind(greater, FOUR)
    x9 = compose(x8, numcolors)
    x10 = sfilter(x7, x9)
    x11 = merge(x10)
    x12 = rot90(x11)
    x13 = vsplit(x12, x6)
    x14 = sfilter(x13, x9)
    x15 = merge(x14)
    x16 = rot270(x15)
    x17 = leastcolor(x16)
    x18 = ofcolor(x16, x17)
    x19 = fork(combine, vfrontier, hfrontier)
    x20 = mapply(x19, x18)
    O = fill(x16, x17, x20)
    return O



def solve_6150a2bd_db93a21d(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, NINE)
    x4 = colorfilter(x2, NINE)
    x5 = rbind(shoot, DOWN)
    x6 = mapply(x5, x3)
    x7 = underfill(x1, ONE, x6)
    x8 = compose(halve, width)
    x9 = rbind(greater, ONE)
    x10 = compose(x9, x8)
    x11 = matcher(x8, THREE)
    x12 = power(outbox, TWO)
    x13 = power(outbox, THREE)
    x14 = mapply(outbox, x4)
    x15 = sfilter(x4, x10)
    x16 = sfilter(x4, x11)
    x17 = mapply(x12, x15)
    x18 = mapply(x13, x16)
    x19 = fill(x7, THREE, x14)
    x20 = fill(x19, THREE, x17)
    O = fill(x20, THREE, x18)
    return O



def solve_6150a2bd_53b68214(I):
    x1 = rot180(I)
    x2 = width(x1)
    x3 = objects(x1, T, T, T)
    x4 = first(x3)
    x5 = vperiod(x4)
    x6 = toivec(x5)
    x7 = interval(ZERO, NINE, ONE)
    x8 = lbind(multiply, x6)
    x9 = apply(x8, x7)
    x10 = lbind(shift, x4)
    x11 = mapply(x10, x9)
    x12 = astuple(x2, x2)
    x13 = portrait(x4)
    x14 = shape(x4)
    x15 = add(DOWN, x14)
    x16 = decrement(x15)
    x17 = shift(x4, x16)
    x18 = branch(x13, x11, x17)
    x19 = canvas(ZERO, x12)
    x20 = paint(x19, x4)
    O = paint(x20, x18)
    return O



def solve_6150a2bd_d6ad076f(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = argmin(x2, size)
    x4 = argmax(x2, size)
    x5 = vmatching(x3, x4)
    x6 = branch(x5, DOWN, RIGHT)
    x7 = branch(x5, uppermost, leftmost)
    x8 = valmax(x2, x7)
    x9 = x7(x3)
    x10 = equality(x8, x9)
    x11 = branch(x10, NEG_ONE, ONE)
    x12 = multiply(x6, x11)
    x13 = inbox(x3)
    x14 = rbind(shoot, x12)
    x15 = mapply(x14, x13)
    x16 = underfill(x1, EIGHT, x15)
    x17 = objects(x16, T, F, T)
    x18 = colorfilter(x17, EIGHT)
    x19 = rbind(bordering, x1)
    x20 = mfilter(x18, x19)
    O = cover(x16, x20)
    return O



def solve_6150a2bd_6cdd2623(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = prapply(connect, x3, x3)
    x5 = fgpartition(x1)
    x6 = merge(x5)
    x7 = cover(x1, x6)
    x8 = fork(either, hline, vline)
    x9 = box(x6)
    x10 = rbind(difference, x9)
    x11 = chain(positive, size, x10)
    x12 = fork(both, x8, x11)
    x13 = mfilter(x4, x12)
    O = fill(x7, x2, x13)
    return O



def solve_6150a2bd_8d510a79(I):
    x1 = rot180(I)
    x2 = ofcolor(x1, ONE)
    x3 = ofcolor(x1, TWO)
    x4 = ofcolor(x1, FIVE)
    x5 = uppermost(x4)
    x6 = chain(toivec, decrement, double)
    x7 = lbind(greater, x5)
    x8 = compose(x7, first)
    x9 = chain(invert, x6, x8)
    x10 = fork(shoot, identity, x9)
    x11 = compose(x6, x8)
    x12 = fork(shoot, identity, x11)
    x13 = lbind(matcher, x8)
    x14 = compose(x13, x8)
    x15 = fork(sfilter, x12, x14)
    x16 = mapply(x10, x2)
    x17 = mapply(x15, x3)
    x18 = underfill(x1, TWO, x17)
    O = fill(x18, ONE, x16)
    return O



def solve_6150a2bd_cdecee7f(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = astuple(ONE, THREE)
    x4 = size(x2)
    x5 = order(x2, leftmost)
    x6 = apply(color, x5)
    x7 = rbind(canvas, UNITY)
    x8 = apply(x7, x6)
    x9 = merge(x8)
    x10 = dmirror(x9)
    x11 = subtract(NINE, x4)
    x12 = astuple(ONE, x11)
    x13 = canvas(ZERO, x12)
    x14 = hconcat(x10, x13)
    x15 = hsplit(x14, THREE)
    x16 = merge(x15)
    x17 = crop(x16, ORIGIN, x3)
    x18 = crop(x16, DOWN, x3)
    x19 = crop(x16, TWO_BY_ZERO, x3)
    x20 = vmirror(x18)
    x21 = vconcat(x17, x20)
    O = vconcat(x21, x19)
    return O



def solve_6150a2bd_3345333e(I):
    x1 = rot180(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = cover(x1, x3)
    x5 = leastcolor(x4)
    x6 = ofcolor(x4, x5)
    x7 = neighbors(ORIGIN)
    x8 = mapply(neighbors, x7)
    x9 = vmirror(x6)
    x10 = lbind(shift, x9)
    x11 = apply(x10, x8)
    x12 = rbind(intersection, x6)
    x13 = compose(size, x12)
    x14 = argmax(x11, x13)
    O = fill(x4, x5, x14)
    return O



def solve_6150a2bd_b190f7f5(I):
    x1 = rot180(I)
    x2 = portrait(x1)
    x3 = branch(x2, vsplit, hsplit)
    x4 = x3(x1, TWO)
    x5 = argmin(x4, numcolors)
    x6 = argmax(x4, numcolors)
    x7 = width(x6)
    x8 = rbind(repeat, x7)
    x9 = chain(dmirror, merge, x8)
    x10 = upscale(x6, x7)
    x11 = x9(x5)
    x12 = x9(x11)
    x13 = ofcolor(x12, ZERO)
    O = fill(x10, ZERO, x13)
    return O



def solve_6150a2bd_caa06a1f(I):
    x1 = rot180(I)
    x2 = asobject(x1)
    x3 = shape(x1)
    x4 = decrement(x3)
    x5 = index(x1, x4)
    x6 = double(x3)
    x7 = canvas(x5, x6)
    x8 = paint(x7, x2)
    x9 = objects(x8, F, F, T)
    x10 = first(x9)
    x11 = shift(x10, LEFT)
    x12 = vperiod(x11)
    x13 = hperiod(x11)
    x14 = neighbors(ORIGIN)
    x15 = lbind(mapply, neighbors)
    x16 = power(x15, TWO)
    x17 = x16(x14)
    x18 = astuple(x12, x13)
    x19 = lbind(multiply, x18)
    x20 = apply(x19, x17)
    x21 = lbind(shift, x11)
    x22 = mapply(x21, x20)
    O = paint(x1, x22)
    return O



def solve_6150a2bd_e21d9049(I):
    x1 = rot180(I)
    x2 = asindices(x1)
    x3 = leastcolor(x1)
    x4 = objects(x1, T, F, T)
    x5 = ofcolor(x1, x3)
    x6 = merge(x4)
    x7 = shape(x6)
    x8 = neighbors(ORIGIN)
    x9 = lbind(mapply, neighbors)
    x10 = power(x9, TWO)
    x11 = x10(x8)
    x12 = lbind(multiply, x7)
    x13 = lbind(shift, x6)
    x14 = apply(x12, x11)
    x15 = mapply(x13, x14)
    x16 = lbind(hmatching, x5)
    x17 = lbind(vmatching, x5)
    x18 = fork(either, x16, x17)
    x19 = compose(x18, initset)
    x20 = paint(x1, x15)
    x21 = sfilter(x2, x19)
    x22 = difference(x2, x21)
    O = cover(x20, x22)
    return O



def solve_6150a2bd_746b3537(I):
    x1 = rot180(I)
    x2 = chain(size, dedupe, first)
    x3 = x2(x1)
    x4 = equality(x3, ONE)
    x5 = branch(x4, dmirror, identity)
    x6 = x5(x1)
    x7 = objects(x6, T, F, F)
    x8 = order(x7, leftmost)
    x9 = apply(color, x8)
    x10 = repeat(x9, ONE)
    O = x5(x10)
    return O



def solve_6150a2bd_63613498(I):
    x1 = rot180(I)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = ofcolor(x2, ZERO)
    x4 = asindices(x2)
    x5 = difference(x4, x3)
    x6 = normalize(x5)
    x7 = objects(x1, T, F, T)
    x8 = compose(toindices, normalize)
    x9 = matcher(x8, x6)
    x10 = mfilter(x7, x9)
    x11 = fill(x1, FIVE, x10)
    x12 = asobject(x2)
    O = paint(x11, x12)
    return O



def solve_6150a2bd_06df4c85(I):
    x1 = rot180(I)
    x2 = partition(x1)
    x3 = mostcolor(x1)
    x4 = ofcolor(x1, x3)
    x5 = colorfilter(x2, ZERO)
    x6 = argmax(x2, size)
    x7 = difference(x2, x5)
    x8 = remove(x6, x7)
    x9 = merge(x8)
    x10 = product(x9, x9)
    x11 = power(first, TWO)
    x12 = compose(first, last)
    x13 = fork(equality, x11, x12)
    x14 = sfilter(x10, x13)
    x15 = compose(last, first)
    x16 = power(last, TWO)
    x17 = fork(connect, x15, x16)
    x18 = fork(recolor, color, x17)
    x19 = apply(x18, x14)
    x20 = fork(either, vline, hline)
    x21 = mfilter(x19, x20)
    x22 = paint(x1, x21)
    O = fill(x22, x3, x4)
    return O



def solve_6150a2bd_4522001f(I):
    x1 = rot180(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = toindices(x3)
    x5 = contained(ZERO_BY_TWO, x4)
    x6 = contained(TWO_BY_TWO, x4)
    x7 = contained(TWO_BY_ZERO, x4)
    x8 = astuple(NINE, NINE)
    x9 = canvas(ZERO, x8)
    x10 = astuple(THREE, ORIGIN)
    x11 = initset(x10)
    x12 = upscale(x11, TWO)
    x13 = upscale(x12, TWO)
    x14 = shape(x13)
    x15 = shift(x13, x14)
    x16 = combine(x13, x15)
    x17 = paint(x9, x16)
    x18 = rot90(x17)
    x19 = rot180(x17)
    x20 = rot270(x17)
    x21 = branch(x5, x18, x17)
    x22 = branch(x6, x19, x21)
    O = branch(x7, x20, x22)
    return O



def solve_6150a2bd_eb5a1d5d(I):
    x1 = rot180(I)
    x2 = compose(dmirror, dedupe)
    x3 = x2(x1)
    x4 = x2(x3)
    x5 = fork(remove, last, identity)
    x6 = compose(hmirror, x5)
    x7 = fork(vconcat, identity, x6)
    x8 = x7(x4)
    x9 = dmirror(x8)
    O = x7(x9)
    return O



def solve_6150a2bd_995c5fa3(I):
    x1 = rot180(I)
    x2 = hsplit(x1, THREE)
    x3 = astuple(TWO, ONE)
    x4 = rbind(ofcolor, ZERO)
    x5 = compose(ulcorner, x4)
    x6 = compose(size, x4)
    x7 = matcher(x6, ZERO)
    x8 = matcher(x5, UNITY)
    x9 = matcher(x5, DOWN)
    x10 = matcher(x5, x3)
    x11 = rbind(multiply, THREE)
    x12 = power(double, TWO)
    x13 = compose(double, x7)
    x14 = chain(x12, double, x8)
    x15 = compose(x11, x9)
    x16 = compose(x12, x10)
    x17 = fork(add, x13, x14)
    x18 = fork(add, x15, x16)
    x19 = fork(add, x17, x18)
    x20 = rbind(canvas, UNITY)
    x21 = compose(x20, x19)
    x22 = apply(x21, x2)
    x23 = merge(x22)
    O = hupscale(x23, THREE)
    return O



def solve_6150a2bd_36fdfd69(I):
    x1 = rot180(I)
    x2 = upscale(x1, TWO)
    x3 = objects(x2, T, T, T)
    x4 = colorfilter(x3, TWO)
    x5 = fork(manhattan, first, last)
    x6 = lbind(greater, FIVE)
    x7 = compose(x6, x5)
    x8 = product(x4, x4)
    x9 = sfilter(x8, x7)
    x10 = apply(merge, x9)
    x11 = mapply(delta, x10)
    x12 = fill(x2, FOUR, x11)
    x13 = merge(x4)
    x14 = paint(x12, x13)
    O = downscale(x14, TWO)
    return O



def solve_6150a2bd_0a938d79(I):
    x1 = rot180(I)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = x3(x1)
    x5 = fgpartition(x4)
    x6 = merge(x5)
    x7 = chain(double, decrement, width)
    x8 = x7(x6)
    x9 = compose(vfrontier, tojvec)
    x10 = lbind(mapply, x9)
    x11 = rbind(interval, x8)
    x12 = width(x4)
    x13 = rbind(x11, x12)
    x14 = chain(x10, x13, leftmost)
    x15 = fork(recolor, color, x14)
    x16 = mapply(x15, x5)
    x17 = paint(x4, x16)
    O = x3(x17)
    return O



def solve_6150a2bd_045e512c(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = lbind(shift, x3)
    x6 = lbind(mapply, x5)
    x7 = double(TEN)
    x8 = interval(FOUR, x7, FOUR)
    x9 = rbind(apply, x8)
    x10 = lbind(position, x3)
    x11 = lbind(rbind, multiply)
    x12 = chain(x9, x11, x10)
    x13 = compose(x6, x12)
    x14 = fork(recolor, color, x13)
    x15 = mapply(x14, x4)
    O = paint(x1, x15)
    return O



def solve_6150a2bd_82819916(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = normalize(x3)
    x6 = compose(last, last)
    x7 = rbind(argmin, x6)
    x8 = compose(first, x7)
    x9 = fork(other, palette, x8)
    x10 = x8(x5)
    x11 = matcher(first, x10)
    x12 = sfilter(x5, x11)
    x13 = difference(x5, x12)
    x14 = compose(toivec, uppermost)
    x15 = lbind(shift, x12)
    x16 = lbind(shift, x13)
    x17 = compose(x15, x14)
    x18 = compose(x16, x14)
    x19 = fork(recolor, x8, x17)
    x20 = fork(recolor, x9, x18)
    x21 = fork(combine, x19, x20)
    x22 = mapply(x21, x4)
    O = paint(x1, x22)
    return O



def solve_6150a2bd_99fa7670(I):
    x1 = rot180(I)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x3)
    x8 = paint(x1, x7)
    x9 = add(x2, DOWN_LEFT)
    x10 = initset(x9)
    x11 = recolor(ZERO, x10)
    x12 = objects(x8, T, F, T)
    x13 = insert(x11, x12)
    x14 = order(x13, uppermost)
    x15 = first(x14)
    x16 = remove(x11, x14)
    x17 = remove(x15, x14)
    x18 = compose(lrcorner, first)
    x19 = compose(lrcorner, last)
    x20 = fork(connect, x18, x19)
    x21 = compose(color, first)
    x22 = fork(recolor, x21, x20)
    x23 = pair(x16, x17)
    x24 = mapply(x22, x23)
    O = underpaint(x8, x24)
    return O



def solve_6150a2bd_72322fa7(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = matcher(numcolors, ONE)
    x4 = sfilter(x2, x3)
    x5 = difference(x2, x4)
    x6 = lbind(matcher, first)
    x7 = compose(x6, mostcolor)
    x8 = fork(sfilter, identity, x7)
    x9 = fork(difference, identity, x8)
    x10 = lbind(occurrences, x1)
    x11 = compose(x10, x8)
    x12 = compose(x10, x9)
    x13 = compose(ulcorner, x9)
    x14 = fork(subtract, ulcorner, x13)
    x15 = lbind(rbind, add)
    x16 = compose(x15, x14)
    x17 = fork(apply, x16, x12)
    x18 = lbind(lbind, shift)
    x19 = compose(x18, normalize)
    x20 = fork(mapply, x19, x11)
    x21 = fork(mapply, x19, x17)
    x22 = mapply(x20, x5)
    x23 = mapply(x21, x5)
    x24 = paint(x1, x22)
    O = paint(x24, x23)
    return O



def solve_6150a2bd_855e0971(I):
    x1 = rot180(I)
    x2 = frontiers(x1)
    x3 = sfilter(x2, hline)
    x4 = size(x3)
    x5 = positive(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x1)
    x8 = rbind(subgrid, x7)
    x9 = matcher(color, ZERO)
    x10 = compose(flip, x9)
    x11 = partition(x7)
    x12 = sfilter(x11, x10)
    x13 = rbind(ofcolor, ZERO)
    x14 = lbind(mapply, vfrontier)
    x15 = chain(x14, x13, x8)
    x16 = fork(shift, x15, ulcorner)
    x17 = fork(intersection, toindices, x16)
    x18 = mapply(x17, x12)
    x19 = fill(x7, ZERO, x18)
    O = x6(x19)
    return O



def solve_6150a2bd_a78176bb(I):
    x1 = rot180(I)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = remove(ZERO, x2)
    x5 = other(x4, FIVE)
    x6 = colorfilter(x3, FIVE)
    x7 = lbind(index, x1)
    x8 = compose(x7, urcorner)
    x9 = matcher(x8, FIVE)
    x10 = sfilter(x6, x9)
    x11 = difference(x6, x10)
    x12 = apply(urcorner, x10)
    x13 = apply(llcorner, x11)
    x14 = rbind(add, UP_RIGHT)
    x15 = rbind(add, DOWN_LEFT)
    x16 = apply(x14, x12)
    x17 = apply(x15, x13)
    x18 = rbind(shoot, UNITY)
    x19 = rbind(shoot, NEG_UNITY)
    x20 = fork(combine, x18, x19)
    x21 = mapply(x20, x16)
    x22 = mapply(x20, x17)
    x23 = combine(x21, x22)
    x24 = fill(x1, x5, x23)
    O = replace(x24, FIVE, ZERO)
    return O



def solve_6150a2bd_952a094c(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = argmax(x2, size)
    x5 = outbox(x4)
    x6 = corners(x5)
    x7 = lbind(rbind, manhattan)
    x8 = lbind(argmax, x3)
    x9 = chain(x8, x7, initset)
    x10 = compose(color, x9)
    x11 = fork(astuple, x10, identity)
    x12 = apply(x11, x6)
    x13 = merge(x3)
    x14 = cover(x1, x13)
    O = paint(x14, x12)
    return O



def solve_6150a2bd_6d58a25d(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = merge(x4)
    x6 = color(x5)
    x7 = uppermost(x3)
    x8 = rbind(greater, x7)
    x9 = compose(x8, uppermost)
    x10 = rbind(vmatching, x3)
    x11 = fork(both, x10, x9)
    x12 = sfilter(x4, x11)
    x13 = increment(x7)
    x14 = rbind(greater, x13)
    x15 = compose(x14, first)
    x16 = rbind(sfilter, x15)
    x17 = chain(x16, vfrontier, center)
    x18 = mapply(x17, x12)
    O = underfill(x1, x6, x18)
    return O



def solve_6150a2bd_6aa20dc0(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(rbind, upscale)
    x10 = interval(ONE, FOUR, ONE)
    x11 = apply(x9, x10)
    x12 = initset(identity)
    x13 = insert(vmirror, x12)
    x14 = insert(hmirror, x13)
    x15 = insert(cmirror, x14)
    x16 = insert(dmirror, x15)
    x17 = fork(compose, first, last)
    x18 = lbind(occurrences, x1)
    x19 = lbind(lbind, shift)
    x20 = compose(x18, x8)
    x21 = product(x16, x11)
    x22 = apply(x17, x21)
    x23 = rapply(x22, x4)
    x24 = fork(mapply, x19, x20)
    x25 = mapply(x24, x23)
    O = paint(x1, x25)
    return O



def solve_6150a2bd_447fd412(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(rbind, upscale)
    x10 = interval(ONE, FOUR, ONE)
    x11 = apply(x9, x10)
    x12 = lbind(recolor, ZERO)
    x13 = compose(x12, outbox)
    x14 = fork(combine, identity, x13)
    x15 = lbind(occurrences, x1)
    x16 = lbind(rbind, subtract)
    x17 = lbind(apply, increment)
    x18 = lbind(lbind, shift)
    x19 = chain(x16, ulcorner, x8)
    x20 = chain(x15, x14, x8)
    x21 = fork(apply, x19, x20)
    x22 = compose(x17, x21)
    x23 = fork(mapply, x18, x22)
    x24 = rapply(x11, x4)
    x25 = mapply(x23, x24)
    O = paint(x1, x25)
    return O



def solve_6150a2bd_2bcee788(I):
    x1 = rot180(I)
    x2 = mostcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = replace(x1, x2, THREE)
    x5 = argmax(x3, size)
    x6 = argmin(x3, size)
    x7 = position(x5, x6)
    x8 = first(x7)
    x9 = last(x7)
    x10 = subgrid(x5, x4)
    x11 = hline(x6)
    x12 = hmirror(x10)
    x13 = vmirror(x10)
    x14 = branch(x11, x12, x13)
    x15 = branch(x11, x8, ZERO)
    x16 = branch(x11, ZERO, x9)
    x17 = asobject(x14)
    x18 = matcher(first, THREE)
    x19 = compose(flip, x18)
    x20 = sfilter(x17, x19)
    x21 = ulcorner(x5)
    x22 = shape(x5)
    x23 = astuple(x15, x16)
    x24 = multiply(x22, x23)
    x25 = add(x21, x24)
    x26 = shift(x20, x25)
    O = paint(x4, x26)
    return O



def solve_6150a2bd_f35d900a(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = palette(x1)
    x4 = remove(ZERO, x3)
    x5 = lbind(other, x4)
    x6 = compose(x5, color)
    x7 = fork(recolor, x6, outbox)
    x8 = mapply(x7, x2)
    x9 = mapply(toindices, x2)
    x10 = box(x9)
    x11 = difference(x10, x9)
    x12 = lbind(argmin, x9)
    x13 = rbind(compose, initset)
    x14 = lbind(rbind, manhattan)
    x15 = chain(x13, x14, initset)
    x16 = chain(initset, x12, x15)
    x17 = fork(manhattan, initset, x16)
    x18 = compose(even, x17)
    x19 = sfilter(x11, x18)
    x20 = paint(x1, x8)
    O = fill(x20, FIVE, x19)
    return O



def solve_6150a2bd_0dfd9992(I):
    x1 = rot180(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_6150a2bd_29ec7d0e(I):
    x1 = rot180(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_6150a2bd_469497ad(I):
    x1 = rot180(I)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    x4 = upscale(x1, x3)
    x5 = objects(x4, F, F, T)
    x6 = argmin(x5, size)
    x7 = ulcorner(x6)
    x8 = llcorner(x6)
    x9 = shoot(x7, NEG_UNITY)
    x10 = shoot(x7, UNITY)
    x11 = shoot(x8, DOWN_LEFT)
    x12 = shoot(x8, UP_RIGHT)
    x13 = combine(x9, x10)
    x14 = combine(x11, x12)
    x15 = combine(x13, x14)
    x16 = underfill(x4, TWO, x15)
    x17 = objects(x16, T, F, T)
    x18 = argmax(x17, lrcorner)
    O = paint(x16, x18)
    return O



def solve_6150a2bd_484b58aa(I):
    x1 = rot180(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, TWO)
    x9 = astuple(TWO, x3)
    x10 = power(decrement, TWO)
    x11 = x10(x2)
    x12 = x10(x3)
    x13 = toivec(x12)
    x14 = tojvec(x11)
    x15 = crop(x1, x13, x9)
    x16 = crop(x1, x14, x8)
    x17 = asobject(x16)
    x18 = asobject(x15)
    x19 = vperiod(x17)
    x20 = hperiod(x18)
    x21 = astuple(x19, x20)
    x22 = lbind(multiply, x21)
    x23 = neighbors(ORIGIN)
    x24 = mapply(neighbors, x23)
    x25 = apply(x22, x24)
    x26 = lbind(shift, x7)
    x27 = mapply(x26, x25)
    O = paint(x1, x27)
    return O



def solve_6150a2bd_3befdf3e(I):
    x1 = rot180(I)
    x2 = objects(x1, F, F, T)
    x3 = leastcolor(x1)
    x4 = palette(x1)
    x5 = remove(ZERO, x4)
    x6 = other(x5, x3)
    x7 = switch(x1, x3, x6)
    x8 = compose(width, inbox)
    x9 = lbind(power, outbox)
    x10 = compose(x9, x8)
    x11 = initset(x10)
    x12 = lbind(rapply, x11)
    x13 = chain(initset, first, x12)
    x14 = fork(rapply, x13, identity)
    x15 = compose(first, x14)
    x16 = compose(backdrop, x15)
    x17 = lbind(chain, backdrop)
    x18 = lbind(x17, inbox)
    x19 = compose(x18, x10)
    x20 = lbind(apply, initset)
    x21 = chain(x20, corners, x16)
    x22 = fork(mapply, x19, x21)
    x23 = fork(intersection, x16, x22)
    x24 = mapply(x16, x2)
    x25 = mapply(x23, x2)
    x26 = underfill(x7, x6, x24)
    O = fill(x26, ZERO, x25)
    return O



def solve_6150a2bd_49d1d64f(I):
    x1 = rot180(I)
    x2 = shape(x1)
    x3 = add(x2, TWO)
    x4 = canvas(ZERO, x3)
    x5 = asobject(x1)
    x6 = shift(x5, UNITY)
    x7 = paint(x4, x6)
    x8 = asindices(x4)
    x9 = fork(difference, box, corners)
    x10 = x9(x8)
    x11 = lbind(lbind, manhattan)
    x12 = rbind(compose, initset)
    x13 = chain(x12, x11, initset)
    x14 = lbind(argmin, x6)
    x15 = chain(first, x14, x13)
    x16 = fork(astuple, x15, identity)
    x17 = apply(x16, x10)
    O = paint(x7, x17)
    return O



def solve_6150a2bd_57aa92db(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = objects(x1, T, F, T)
    x4 = lbind(lbind, colorcount)
    x5 = fork(apply, x4, palette)
    x6 = compose(maximum, x5)
    x7 = compose(minimum, x5)
    x8 = fork(subtract, x6, x7)
    x9 = argmax(x2, x8)
    x10 = leastcolor(x9)
    x11 = normalize(x9)
    x12 = matcher(first, x10)
    x13 = sfilter(x11, x12)
    x14 = ulcorner(x13)
    x15 = colorfilter(x3, x10)
    x16 = rbind(toobject, x1)
    x17 = lbind(remove, ZERO)
    x18 = chain(first, x17, palette)
    x19 = chain(x18, x16, outbox)
    x20 = lbind(multiply, x14)
    x21 = compose(x20, width)
    x22 = fork(subtract, ulcorner, x21)
    x23 = lbind(shift, x11)
    x24 = compose(x23, x22)
    x25 = fork(upscale, x24, width)
    x26 = fork(recolor, x19, x25)
    x27 = mapply(x26, x15)
    x28 = paint(x1, x27)
    x29 = merge(x3)
    O = paint(x28, x29)
    return O



def solve_6150a2bd_aba27056(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, T)
    x3 = mapply(toindices, x2)
    x4 = box(x3)
    x5 = difference(x4, x3)
    x6 = delta(x3)
    x7 = position(x6, x5)
    x8 = interval(ZERO, NINE, ONE)
    x9 = lbind(multiply, x7)
    x10 = apply(x9, x8)
    x11 = lbind(shift, x5)
    x12 = mapply(x11, x10)
    x13 = fill(x1, FOUR, x6)
    x14 = fill(x13, FOUR, x12)
    x15 = corners(x5)
    x16 = ofcolor(x14, ZERO)
    x17 = rbind(toobject, x14)
    x18 = rbind(colorcount, ZERO)
    x19 = chain(x18, x17, dneighbors)
    x20 = matcher(x19, TWO)
    x21 = rbind(adjacent, x3)
    x22 = rbind(adjacent, x12)
    x23 = fork(both, x21, x22)
    x24 = compose(x23, initset)
    x25 = sfilter(x16, x20)
    x26 = sfilter(x25, x24)
    x27 = product(x15, x26)
    x28 = fork(subtract, last, first)
    x29 = fork(shoot, first, x28)
    x30 = mapply(x29, x27)
    O = fill(x14, FOUR, x30)
    return O



def solve_6150a2bd_f1cefba8(I):
    x1 = rot180(I)
    x2 = palette(x1)
    x3 = objects(x1, F, F, T)
    x4 = ofcolor(x1, ZERO)
    x5 = first(x3)
    x6 = ulcorner(x5)
    x7 = subgrid(x5, x1)
    x8 = power(trim, TWO)
    x9 = x8(x7)
    x10 = asindices(x9)
    x11 = shift(x10, TWO_BY_TWO)
    x12 = fill(x7, ZERO, x11)
    x13 = leastcolor(x12)
    x14 = remove(ZERO, x2)
    x15 = other(x14, x13)
    x16 = ofcolor(x12, x13)
    x17 = shift(x16, x6)
    x18 = ofcolor(x1, x13)
    x19 = uppermost(x18)
    x20 = lowermost(x18)
    x21 = matcher(first, x19)
    x22 = matcher(first, x20)
    x23 = fork(either, x21, x22)
    x24 = sfilter(x17, x23)
    x25 = difference(x17, x24)
    x26 = mapply(vfrontier, x24)
    x27 = mapply(hfrontier, x25)
    x28 = combine(x26, x27)
    x29 = intersection(x4, x28)
    x30 = fill(x1, x15, x28)
    O = fill(x30, x13, x29)
    return O



def solve_6150a2bd_d07ae81c(I):
    x1 = rot180(I)
    x2 = objects(x1, T, F, F)
    x3 = sizefilter(x2, ONE)
    x4 = apply(color, x3)
    x5 = difference(x2, x3)
    x6 = apply(color, x5)
    x7 = first(x6)
    x8 = last(x6)
    x9 = ofcolor(x1, x7)
    x10 = ofcolor(x1, x8)
    x11 = rbind(shoot, UNITY)
    x12 = rbind(shoot, NEG_UNITY)
    x13 = rbind(shoot, DOWN_LEFT)
    x14 = rbind(shoot, UP_RIGHT)
    x15 = fork(combine, x11, x12)
    x16 = fork(combine, x13, x14)
    x17 = fork(combine, x15, x16)
    x18 = compose(x17, center)
    x19 = mapply(x18, x3)
    x20 = intersection(x9, x19)
    x21 = intersection(x10, x19)
    x22 = first(x3)
    x23 = color(x22)
    x24 = center(x22)
    x25 = neighbors(x24)
    x26 = toobject(x25, x1)
    x27 = mostcolor(x26)
    x28 = other(x4, x23)
    x29 = equality(x27, x7)
    x30 = branch(x29, x23, x28)
    x31 = branch(x29, x28, x23)
    x32 = fill(x1, x30, x20)
    O = fill(x32, x31, x21)
    return O



def solve_6150a2bd_0e206a2e(I):
    x1 = rot180(I)
    x2 = palette(x1)
    x3 = objects(x1, F, F, T)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, numcolors)
    x6 = sfilter(x3, x5)
    x7 = remove(ZERO, x2)
    x8 = lbind(colorcount, x1)
    x9 = argmax(x7, x8)
    x10 = remove(x9, x7)
    x11 = rbind(contained, x10)
    x12 = compose(x11, first)
    x13 = rbind(sfilter, x12)
    x14 = lbind(rbind, subtract)
    x15 = lbind(occurrences, x1)
    x16 = lbind(lbind, shift)
    x17 = compose(x14, ulcorner)
    x18 = chain(x17, x13, normalize)
    x19 = chain(x15, x13, normalize)
    x20 = fork(apply, x18, x19)
    x21 = compose(x16, normalize)
    x22 = fork(mapply, x21, x20)
    x23 = astuple(cmirror, dmirror)
    x24 = astuple(hmirror, vmirror)
    x25 = combine(x23, x24)
    x26 = product(x25, x25)
    x27 = fork(compose, first, last)
    x28 = apply(x27, x26)
    x29 = totuple(x28)
    x30 = combine(x25, x29)
    x31 = lbind(rapply, x30)
    x32 = mapply(x31, x6)
    x33 = mapply(x22, x32)
    x34 = paint(x1, x33)
    x35 = merge(x6)
    O = cover(x34, x35)
    return O



def solve_6150a2bd_d22278a0(I):
    x1 = rot180(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = fork(multiply, sign, identity)
    x5 = lbind(apply, x4)
    x6 = chain(even, maximum, x5)
    x7 = lbind(sfilter, x2)
    x8 = fork(add, first, last)
    x9 = rbind(remove, x3)
    x10 = compose(center, last)
    x11 = fork(subtract, first, x10)
    x12 = compose(x6, x11)
    x13 = lbind(rbind, equality)
    x14 = lbind(argmin, x3)
    x15 = chain(x8, x5, x11)
    x16 = lbind(lbind, astuple)
    x17 = lbind(rbind, astuple)
    x18 = lbind(compose, x12)
    x19 = lbind(compose, x15)
    x20 = compose(x19, x16)
    x21 = compose(x19, x17)
    x22 = compose(x14, x20)
    x23 = rbind(compose, x22)
    x24 = lbind(lbind, valmin)
    x25 = rbind(compose, x20)
    x26 = chain(x25, x24, x9)
    x27 = lbind(fork, greater)
    x28 = fork(x27, x26, x21)
    x29 = chain(x7, x18, x17)
    x30 = chain(x7, x23, x13)
    x31 = fork(intersection, x29, x30)
    x32 = compose(x7, x28)
    x33 = fork(intersection, x31, x32)
    x34 = fork(recolor, color, x33)
    x35 = mapply(x34, x3)
    O = paint(x1, x35)
    return O



def solve_6150a2bd_150deff5(I):
    x1 = rot180(I)
    x2 = canvas(FIVE, TWO_BY_TWO)
    x3 = asobject(x2)
    x4 = occurrences(x1, x3)
    x5 = lbind(shift, x3)
    x6 = mapply(x5, x4)
    x7 = fill(x1, EIGHT, x6)
    x8 = canvas(FIVE, UNITY)
    x9 = astuple(TWO, ONE)
    x10 = canvas(EIGHT, x9)
    x11 = vconcat(x10, x8)
    x12 = asobject(x11)
    x13 = occurrences(x7, x12)
    x14 = lbind(shift, x12)
    x15 = mapply(x14, x13)
    x16 = fill(x7, TWO, x15)
    x17 = astuple(ONE, THREE)
    x18 = canvas(FIVE, x17)
    x19 = asobject(x18)
    x20 = occurrences(x16, x19)
    x21 = lbind(shift, x19)
    x22 = mapply(x21, x20)
    x23 = fill(x16, TWO, x22)
    x24 = hmirror(x11)
    x25 = asobject(x24)
    x26 = occurrences(x23, x25)
    x27 = lbind(shift, x25)
    x28 = mapply(x27, x26)
    x29 = fill(x23, TWO, x28)
    x30 = dmirror(x11)
    x31 = asobject(x30)
    x32 = occurrences(x29, x31)
    x33 = lbind(shift, x31)
    x34 = mapply(x33, x32)
    x35 = fill(x29, TWO, x34)
    x36 = vmirror(x30)
    x37 = asobject(x36)
    x38 = occurrences(x35, x37)
    x39 = lbind(shift, x37)
    x40 = mapply(x39, x38)
    O = fill(x35, TWO, x40)
    return O



def solve_6150a2bd_9d9215db(I):
    x1 = rot180(I)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = initset(x1)
    x6 = chain(numcolors, lefthalf, tophalf)
    x7 = insert(x2, x5)
    x8 = insert(x3, x7)
    x9 = insert(x4, x8)
    x10 = argmax(x9, x6)
    x11 = vmirror(x10)
    x12 = papply(pair, x10, x11)
    x13 = lbind(apply, maximum)
    x14 = apply(x13, x12)
    x15 = partition(x14)
    x16 = sizefilter(x15, FOUR)
    x17 = apply(llcorner, x16)
    x18 = apply(lrcorner, x16)
    x19 = combine(x17, x18)
    x20 = cover(x14, x19)
    x21 = tojvec(NEG_TWO)
    x22 = rbind(add, ZERO_BY_TWO)
    x23 = rbind(add, x21)
    x24 = compose(x22, ulcorner)
    x25 = compose(x23, urcorner)
    x26 = fork(connect, x24, x25)
    x27 = compose(even, last)
    x28 = rbind(sfilter, x27)
    x29 = chain(normalize, x28, x26)
    x30 = fork(shift, x29, x24)
    x31 = fork(recolor, color, x30)
    x32 = mapply(x31, x16)
    x33 = paint(x20, x32)
    x34 = rot90(x33)
    x35 = rot180(x33)
    x36 = rot270(x33)
    x37 = papply(pair, x33, x34)
    x38 = apply(x13, x37)
    x39 = papply(pair, x38, x35)
    x40 = apply(x13, x39)
    x41 = papply(pair, x40, x36)
    O = apply(x13, x41)
    return O



def solve_6150a2bd_264363fd(I):
    x1 = rot180(I)
    x2 = objects(x1, F, F, T)
    x3 = argmin(x2, size)
    x4 = normalize(x3)
    x5 = height(x3)
    x6 = width(x3)
    x7 = equality(x5, FIVE)
    x8 = equality(x6, FIVE)
    x9 = astuple(x7, x8)
    x10 = add(UNITY, x9)
    x11 = invert(x10)
    x12 = center(x3)
    x13 = index(x1, x12)
    x14 = branch(x7, UP, RIGHT)
    x15 = add(x14, x12)
    x16 = index(x1, x15)
    x17 = astuple(x13, ORIGIN)
    x18 = initset(x17)
    x19 = cover(x1, x3)
    x20 = mostcolor(x19)
    x21 = ofcolor(x19, x20)
    x22 = occurrences(x19, x18)
    x23 = objects(x19, F, F, T)
    x24 = rbind(occurrences, x18)
    x25 = rbind(subgrid, x19)
    x26 = compose(x24, x25)
    x27 = lbind(mapply, vfrontier)
    x28 = lbind(mapply, hfrontier)
    x29 = compose(x27, x26)
    x30 = compose(x28, x26)
    x31 = branch(x7, x29, x30)
    x32 = branch(x8, x30, x29)
    x33 = fork(combine, x31, x32)
    x34 = lbind(recolor, x16)
    x35 = compose(x34, x33)
    x36 = fork(paint, x25, x35)
    x37 = compose(asobject, x36)
    x38 = fork(shift, x37, ulcorner)
    x39 = mapply(x38, x23)
    x40 = paint(x19, x39)
    x41 = shift(x4, x11)
    x42 = lbind(shift, x41)
    x43 = mapply(x42, x22)
    x44 = paint(x40, x43)
    O = fill(x44, x20, x21)
    return O



def solve_6150a2bd_234bbc79(I):
    x1 = rot180(I)
    x2 = objects(x1, F, F, T)
    x3 = rbind(other, FIVE)
    x4 = compose(x3, palette)
    x5 = fork(recolor, x4, identity)
    x6 = apply(x5, x2)
    x7 = order(x6, leftmost)
    x8 = compose(last, last)
    x9 = lbind(matcher, x8)
    x10 = compose(x9, leftmost)
    x11 = compose(x9, rightmost)
    x12 = fork(sfilter, identity, x10)
    x13 = fork(sfilter, identity, x11)
    x14 = compose(dneighbors, last)
    x15 = rbind(chain, x14)
    x16 = lbind(x15, size)
    x17 = lbind(rbind, intersection)
    x18 = chain(x16, x17, toindices)
    x19 = fork(argmin, x12, x18)
    x20 = fork(argmin, x13, x18)
    x21 = compose(last, x19)
    x22 = compose(last, x20)
    x23 = astuple(ZERO, DOWN_LEFT)
    x24 = initset(x23)
    x25 = lbind(add, RIGHT)
    x26 = chain(x21, first, last)
    x27 = compose(x22, first)
    x28 = fork(subtract, x27, x26)
    x29 = compose(first, last)
    x30 = compose(x25, x28)
    x31 = fork(shift, x29, x30)
    x32 = fork(combine, first, x31)
    x33 = fork(remove, x29, last)
    x34 = fork(astuple, x32, x33)
    x35 = size(x2)
    x36 = power(x34, x35)
    x37 = astuple(x24, x7)
    x38 = x36(x37)
    x39 = first(x38)
    x40 = width(x39)
    x41 = decrement(x40)
    x42 = astuple(THREE, x41)
    x43 = canvas(ZERO, x42)
    O = paint(x43, x39)
    return O



def solve_6150a2bd_22233c11(I):
    x1 = rot180(I)
    x2 = objects(x1, T, T, T)
    x3 = rbind(upscale, TWO)
    x4 = chain(invert, halve, shape)
    x5 = fork(combine, hfrontier, vfrontier)
    x6 = compose(x3, vmirror)
    x7 = fork(shift, x6, x4)
    x8 = compose(toindices, x7)
    x9 = lbind(mapply, x5)
    x10 = compose(x9, toindices)
    x11 = fork(difference, x8, x10)
    x12 = mapply(x11, x2)
    O = fill(x1, EIGHT, x12)
    return O



def solve_6150a2bd_a64e4611(I):
    x1 = rot180(I)
    x2 = asindices(x1)
    x3 = fork(product, identity, identity)
    x4 = lbind(canvas, ZERO)
    x5 = compose(asobject, x4)
    x6 = fork(multiply, first, last)
    x7 = compose(positive, size)
    x8 = lbind(lbind, shift)
    x9 = rbind(fork, x6)
    x10 = lbind(x9, multiply)
    x11 = lbind(chain, x7)
    x12 = rbind(x11, x5)
    x13 = lbind(lbind, occurrences)
    x14 = chain(x10, x12, x13)
    x15 = compose(x3, first)
    x16 = compose(x14, last)
    x17 = fork(argmax, x15, x16)
    x18 = chain(x8, x5, x17)
    x19 = compose(x5, x17)
    x20 = fork(occurrences, last, x19)
    x21 = fork(mapply, x18, x20)
    x22 = multiply(TWO, SIX)
    x23 = interval(THREE, x22, ONE)
    x24 = astuple(x23, x1)
    x25 = x21(x24)
    x26 = fill(x1, THREE, x25)
    x27 = interval(THREE, TEN, ONE)
    x28 = astuple(x27, x26)
    x29 = x21(x28)
    x30 = fill(x26, THREE, x29)
    x31 = astuple(x27, x30)
    x32 = x21(x31)
    x33 = fill(x30, THREE, x32)
    x34 = rbind(toobject, x33)
    x35 = rbind(colorcount, THREE)
    x36 = chain(x35, x34, neighbors)
    x37 = matcher(x36, EIGHT)
    x38 = sfilter(x2, x37)
    x39 = fill(x1, THREE, x38)
    x40 = ofcolor(x39, ZERO)
    x41 = rbind(bordering, x39)
    x42 = compose(x41, initset)
    x43 = lbind(contained, THREE)
    x44 = rbind(toobject, x39)
    x45 = chain(x43, palette, x44)
    x46 = compose(x45, dneighbors)
    x47 = fork(both, x46, x42)
    x48 = sfilter(x40, x47)
    O = fill(x39, THREE, x48)
    return O



def solve_6150a2bd_97a05b5b(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = rbind(greater, ONE)
    x6 = compose(x5, numcolors)
    x7 = sfilter(x2, x6)
    x8 = lbind(rbind, subtract)
    x9 = switch(x4, TWO, ZERO)
    x10 = lbind(occurrences, x9)
    x11 = lbind(lbind, shift)
    x12 = compose(x8, ulcorner)
    x13 = matcher(first, TWO)
    x14 = compose(flip, x13)
    x15 = rbind(sfilter, x13)
    x16 = rbind(sfilter, x14)
    x17 = lbind(recolor, ZERO)
    x18 = compose(x17, x16)
    x19 = fork(combine, x18, x15)
    x20 = chain(x12, x19, normalize)
    x21 = objects(x9, T, T, T)
    x22 = apply(toindices, x21)
    x23 = chain(x10, x19, normalize)
    x24 = rbind(colorcount, TWO)
    x25 = lbind(sfilter, x22)
    x26 = chain(size, first, x25)
    x27 = compose(positive, size)
    x28 = lbind(lbind, contained)
    x29 = chain(x27, x25, x28)
    x30 = compose(x26, x28)
    x31 = rbind(sfilter, x29)
    x32 = compose(x31, x23)
    x33 = lbind(rbind, equality)
    x34 = rbind(compose, x30)
    x35 = chain(x34, x33, x24)
    x36 = fork(sfilter, x32, x35)
    x37 = fork(apply, x20, x36)
    x38 = compose(x11, normalize)
    x39 = fork(mapply, x38, x37)
    x40 = astuple(cmirror, dmirror)
    x41 = astuple(hmirror, vmirror)
    x42 = combine(x40, x41)
    x43 = product(x42, x42)
    x44 = fork(compose, first, last)
    x45 = apply(x44, x43)
    x46 = lbind(rapply, x45)
    x47 = mapply(x46, x7)
    x48 = mapply(x39, x47)
    x49 = paint(x4, x48)
    x50 = palette(x48)
    x51 = lbind(remove, TWO)
    x52 = x51(x50)
    x53 = chain(first, x51, palette)
    x54 = rbind(contained, x52)
    x55 = chain(flip, x54, x53)
    x56 = sfilter(x7, x55)
    x57 = fork(apply, x20, x23)
    x58 = fork(mapply, x38, x57)
    x59 = mapply(x46, x56)
    x60 = mapply(x58, x59)
    O = paint(x49, x60)
    return O



def solve_6150a2bd_3e980e27(I):
    x1 = rot180(I)
    x2 = objects(x1, F, T, T)
    x3 = astuple(TEN, TEN)
    x4 = invert(x3)
    x5 = astuple(TWO, x4)
    x6 = astuple(THREE, x4)
    x7 = initset(x5)
    x8 = insert(x6, x7)
    x9 = insert(x8, x2)
    x10 = lbind(contained, TWO)
    x11 = lbind(contained, THREE)
    x12 = compose(invert, ulcorner)
    x13 = lbind(compose, x12)
    x14 = lbind(rbind, sfilter)
    x15 = compose(x13, x14)
    x16 = rbind(compose, center)
    x17 = lbind(lbind, shift)
    x18 = x15(x10)
    x19 = x15(x11)
    x20 = fork(shift, identity, x18)
    x21 = fork(shift, identity, x19)
    x22 = compose(x10, palette)
    x23 = compose(x11, palette)
    x24 = sfilter(x9, x22)
    x25 = argmax(x24, size)
    x26 = remove(x25, x24)
    x27 = vmirror(x25)
    x28 = chain(x16, x17, x20)
    x29 = x28(x27)
    x30 = mapply(x29, x26)
    x31 = sfilter(x9, x23)
    x32 = argmax(x31, size)
    x33 = remove(x32, x31)
    x34 = chain(x16, x17, x21)
    x35 = x34(x32)
    x36 = mapply(x35, x33)
    x37 = combine(x30, x36)
    O = paint(x1, x37)
    return O



def solve_9172f3a0_67a3c6ac(I):
    x1 = upscale(I, THREE)
    O = vmirror(x1)
    return O



def solve_9172f3a0_68b16354(I):
    x1 = upscale(I, THREE)
    O = hmirror(x1)
    return O



def solve_9172f3a0_74dd1130(I):
    x1 = upscale(I, THREE)
    O = dmirror(x1)
    return O



def solve_9172f3a0_3c9b0459(I):
    x1 = upscale(I, THREE)
    O = rot180(x1)
    return O



def solve_9172f3a0_6150a2bd(I):
    x1 = upscale(I, THREE)
    O = rot180(x1)
    return O



def solve_9172f3a0_9dfd6313(I):
    x1 = upscale(I, THREE)
    O = dmirror(x1)
    return O



def solve_9172f3a0_a416b8f3(I):
    x1 = upscale(I, THREE)
    O = hconcat(x1, x1)
    return O



def solve_9172f3a0_b1948b0a(I):
    x1 = upscale(I, THREE)
    O = replace(x1, SIX, TWO)
    return O



def solve_9172f3a0_c59eb873(I):
    x1 = upscale(I, THREE)
    O = upscale(x1, TWO)
    return O



def solve_9172f3a0_c8f0f002(I):
    x1 = upscale(I, THREE)
    O = replace(x1, SEVEN, FIVE)
    return O



def solve_9172f3a0_d10ecb37(I):
    x1 = upscale(I, THREE)
    O = crop(x1, ORIGIN, TWO_BY_TWO)
    return O



def solve_9172f3a0_d511f180(I):
    x1 = upscale(I, THREE)
    O = switch(x1, FIVE, EIGHT)
    return O



def solve_9172f3a0_ed36ccf7(I):
    x1 = upscale(I, THREE)
    O = rot270(x1)
    return O



def solve_9172f3a0_4c4377d9(I):
    x1 = upscale(I, THREE)
    x2 = hmirror(x1)
    O = vconcat(x2, x1)
    return O



def solve_9172f3a0_6d0aefbc(I):
    x1 = upscale(I, THREE)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_9172f3a0_6fa7a44f(I):
    x1 = upscale(I, THREE)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_9172f3a0_5614dbcf(I):
    x1 = upscale(I, THREE)
    x2 = replace(x1, FIVE, ZERO)
    O = downscale(x2, THREE)
    return O



def solve_9172f3a0_5bd6f4ac(I):
    x1 = upscale(I, THREE)
    x2 = tojvec(SIX)
    O = crop(x1, x2, THREE_BY_THREE)
    return O



def solve_9172f3a0_5582e5ca(I):
    x1 = upscale(I, THREE)
    x2 = mostcolor(x1)
    O = canvas(x2, THREE_BY_THREE)
    return O



def solve_9172f3a0_8be77c9e(I):
    x1 = upscale(I, THREE)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_9172f3a0_c9e6f938(I):
    x1 = upscale(I, THREE)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_9172f3a0_2dee498d(I):
    x1 = upscale(I, THREE)
    x2 = hsplit(x1, THREE)
    O = first(x2)
    return O



def solve_9172f3a0_1cf80156(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = subgrid(x3, x1)
    return O



def solve_9172f3a0_32597951(I):
    x1 = upscale(I, THREE)
    x2 = ofcolor(x1, EIGHT)
    x3 = delta(x2)
    O = fill(x1, THREE, x3)
    return O



def solve_9172f3a0_25ff71a9(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = move(x1, x3, DOWN)
    return O



def solve_9172f3a0_0b148d64(I):
    x1 = upscale(I, THREE)
    x2 = partition(x1)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_9172f3a0_1f85a75f(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_9172f3a0_23b5c85d(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_9172f3a0_9ecd008a(I):
    x1 = upscale(I, THREE)
    x2 = vmirror(x1)
    x3 = ofcolor(x1, ZERO)
    O = subgrid(x3, x2)
    return O



def solve_9172f3a0_ac0a08a4(I):
    x1 = upscale(I, THREE)
    x2 = colorcount(x1, ZERO)
    x3 = subtract(NINE, x2)
    O = upscale(x1, x3)
    return O



def solve_9172f3a0_be94b721(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_9172f3a0_c909285e(I):
    x1 = upscale(I, THREE)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    O = subgrid(x3, x1)
    return O



def solve_9172f3a0_f25ffba3(I):
    x1 = upscale(I, THREE)
    x2 = bottomhalf(x1)
    x3 = hmirror(x2)
    O = vconcat(x3, x2)
    return O



def solve_9172f3a0_c1d99e64(I):
    x1 = upscale(I, THREE)
    x2 = frontiers(x1)
    x3 = merge(x2)
    O = fill(x1, TWO, x3)
    return O



def solve_9172f3a0_b91ae062(I):
    x1 = upscale(I, THREE)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    O = upscale(x1, x3)
    return O



def solve_9172f3a0_3aa6fb7a(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = mapply(corners, x2)
    O = underfill(x1, ONE, x3)
    return O



def solve_9172f3a0_7b7f7511(I):
    x1 = upscale(I, THREE)
    x2 = portrait(x1)
    x3 = branch(x2, tophalf, lefthalf)
    O = x3(x1)
    return O



def solve_9172f3a0_4258a5f9(I):
    x1 = upscale(I, THREE)
    x2 = ofcolor(x1, FIVE)
    x3 = mapply(neighbors, x2)
    O = fill(x1, ONE, x3)
    return O



def solve_9172f3a0_2dc579da(I):
    x1 = upscale(I, THREE)
    x2 = vsplit(x1, TWO)
    x3 = rbind(hsplit, TWO)
    x4 = mapply(x3, x2)
    O = argmax(x4, numcolors)
    return O



def solve_9172f3a0_28bf18c6(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = hconcat(x4, x4)
    return O



def solve_9172f3a0_3af2c5a8(I):
    x1 = upscale(I, THREE)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_9172f3a0_44f52bb0(I):
    x1 = upscale(I, THREE)
    x2 = vmirror(x1)
    x3 = equality(x2, x1)
    x4 = branch(x3, ONE, SEVEN)
    O = canvas(x4, UNITY)
    return O



def solve_9172f3a0_62c24649(I):
    x1 = upscale(I, THREE)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_9172f3a0_67e8384a(I):
    x1 = upscale(I, THREE)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_9172f3a0_7468f01a(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = vmirror(x4)
    return O



def solve_9172f3a0_662c240a(I):
    x1 = upscale(I, THREE)
    x2 = vsplit(x1, THREE)
    x3 = fork(equality, dmirror, identity)
    x4 = compose(flip, x3)
    O = extract(x2, x4)
    return O



def solve_9172f3a0_42a50994(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = cover(x1, x4)
    return O



def solve_9172f3a0_56ff96f3(I):
    x1 = upscale(I, THREE)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = mapply(x3, x2)
    O = paint(x1, x4)
    return O



def solve_9172f3a0_50cb2852(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = compose(backdrop, inbox)
    x4 = mapply(x3, x2)
    O = fill(x1, EIGHT, x4)
    return O



def solve_9172f3a0_4347f46a(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = fork(difference, toindices, box)
    x4 = mapply(x3, x2)
    O = fill(x1, ZERO, x4)
    return O



def solve_9172f3a0_46f33fce(I):
    x1 = upscale(I, THREE)
    x2 = rot180(x1)
    x3 = downscale(x2, TWO)
    x4 = rot180(x3)
    O = upscale(x4, FOUR)
    return O



def solve_9172f3a0_a740d043(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    O = replace(x4, ONE, ZERO)
    return O



def solve_9172f3a0_a79310a0(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = move(x1, x3, DOWN)
    O = replace(x4, EIGHT, TWO)
    return O



def solve_9172f3a0_aabf363d(I):
    x1 = upscale(I, THREE)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, ZERO)
    x4 = leastcolor(x3)
    O = replace(x3, x4, x2)
    return O



def solve_9172f3a0_ae4f1146(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, F, F, T)
    x3 = rbind(colorcount, ONE)
    x4 = argmax(x2, x3)
    O = subgrid(x4, x1)
    return O



def solve_9172f3a0_b27ca6d3(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, THREE, x4)
    return O



def solve_9172f3a0_ce22a75a(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = mapply(backdrop, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_9172f3a0_dc1df850(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_9172f3a0_f25fbde4(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = upscale(x4, TWO)
    return O



def solve_9172f3a0_44d8ac46(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = apply(delta, x2)
    x4 = mfilter(x3, square)
    O = fill(x1, TWO, x4)
    return O



def solve_9172f3a0_1e0a9b12(I):
    x1 = upscale(I, THREE)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = apply(x3, x2)
    O = rot90(x4)
    return O



def solve_9172f3a0_0d3d703e(I):
    x1 = upscale(I, THREE)
    x2 = switch(x1, THREE, FOUR)
    x3 = switch(x2, EIGHT, NINE)
    x4 = switch(x3, TWO, SIX)
    O = switch(x4, ONE, FIVE)
    return O



def solve_9172f3a0_3618c87e(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = move(x1, x4, TWO_BY_ZERO)
    return O



def solve_9172f3a0_1c786137(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, height)
    x4 = subgrid(x3, x1)
    O = trim(x4)
    return O



def solve_9172f3a0_445eab21(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = fork(multiply, height, width)
    x4 = argmax(x2, x3)
    x5 = color(x4)
    O = canvas(x5, TWO_BY_TWO)
    return O



def solve_9172f3a0_6f8cd79b(I):
    x1 = upscale(I, THREE)
    x2 = asindices(x1)
    x3 = apply(initset, x2)
    x4 = rbind(bordering, x1)
    x5 = mfilter(x3, x4)
    O = fill(x1, EIGHT, x5)
    return O



def solve_9172f3a0_2013d3e2(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = lefthalf(x4)
    O = tophalf(x5)
    return O



def solve_9172f3a0_41e4d17e(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = mapply(x4, x2)
    O = underfill(x1, SIX, x5)
    return O



def solve_9172f3a0_9565186b(I):
    x1 = upscale(I, THREE)
    x2 = shape(x1)
    x3 = objects(x1, T, F, F)
    x4 = argmax(x3, size)
    x5 = canvas(FIVE, x2)
    O = paint(x5, x4)
    return O



def solve_9172f3a0_aedd82e4(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, TWO)
    x4 = sizefilter(x3, ONE)
    x5 = merge(x4)
    O = fill(x1, ONE, x5)
    return O



def solve_9172f3a0_bb43febb(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, FIVE)
    x4 = compose(backdrop, inbox)
    x5 = mapply(x4, x3)
    O = fill(x1, TWO, x5)
    return O



def solve_9172f3a0_e98196ab(I):
    x1 = upscale(I, THREE)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = objects(x2, T, F, T)
    x5 = merge(x4)
    O = paint(x3, x5)
    return O



def solve_9172f3a0_f76d97a5(I):
    x1 = upscale(I, THREE)
    x2 = palette(x1)
    x3 = first(x2)
    x4 = last(x2)
    x5 = switch(x1, x3, x4)
    O = replace(x5, FIVE, ZERO)
    return O



def solve_9172f3a0_ce9e57f2(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = fork(connect, ulcorner, centerofmass)
    x4 = mapply(x3, x2)
    x5 = fill(x1, EIGHT, x4)
    O = switch(x5, EIGHT, TWO)
    return O



def solve_9172f3a0_22eb0ac0(I):
    x1 = upscale(I, THREE)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    O = paint(x1, x5)
    return O



def solve_9172f3a0_9f236235(I):
    x1 = upscale(I, THREE)
    x2 = compress(x1)
    x3 = objects(x1, T, F, F)
    x4 = vmirror(x2)
    x5 = valmin(x3, width)
    O = downscale(x4, x5)
    return O



def solve_9172f3a0_a699fb00(I):
    x1 = upscale(I, THREE)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, RIGHT)
    x4 = shift(x2, LEFT)
    x5 = intersection(x3, x4)
    O = fill(x1, TWO, x5)
    return O



def solve_9172f3a0_46442a0e(I):
    x1 = upscale(I, THREE)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_9172f3a0_7fe24cdd(I):
    x1 = upscale(I, THREE)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_9172f3a0_0ca9ddb6(I):
    x1 = upscale(I, THREE)
    x2 = ofcolor(x1, ONE)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x3)
    x6 = fill(x1, SEVEN, x4)
    O = fill(x6, FOUR, x5)
    return O



def solve_9172f3a0_543a7ed5(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, SIX)
    x4 = mapply(outbox, x3)
    x5 = fill(x1, THREE, x4)
    x6 = mapply(delta, x3)
    O = fill(x5, FOUR, x6)
    return O



def solve_9172f3a0_0520fde7(I):
    x1 = upscale(I, THREE)
    x2 = vmirror(x1)
    x3 = lefthalf(x2)
    x4 = righthalf(x2)
    x5 = vmirror(x4)
    x6 = cellwise(x3, x5, ZERO)
    O = replace(x6, ONE, TWO)
    return O



def solve_9172f3a0_dae9d2b5(I):
    x1 = upscale(I, THREE)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, FOUR)
    x5 = ofcolor(x3, THREE)
    x6 = combine(x4, x5)
    O = fill(x2, SIX, x6)
    return O



def solve_9172f3a0_8d5021e8(I):
    x1 = upscale(I, THREE)
    x2 = vmirror(x1)
    x3 = hconcat(x2, x1)
    x4 = hmirror(x3)
    x5 = vconcat(x3, x4)
    x6 = vconcat(x5, x3)
    O = hmirror(x6)
    return O



def solve_9172f3a0_b60334d2(I):
    x1 = upscale(I, THREE)
    x2 = ofcolor(x1, FIVE)
    x3 = replace(x1, FIVE, ZERO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x2)
    x6 = fill(x3, ONE, x4)
    O = fill(x6, FIVE, x5)
    return O



def solve_9172f3a0_b94a9452(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = leastcolor(x4)
    x6 = mostcolor(x4)
    O = switch(x4, x5, x6)
    return O



def solve_9172f3a0_d037b0a7(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, DOWN)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    O = paint(x1, x6)
    return O



def solve_9172f3a0_d0f5fe59(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = astuple(x3, x3)
    x5 = canvas(ZERO, x4)
    x6 = shoot(ORIGIN, UNITY)
    O = fill(x5, EIGHT, x6)
    return O



def solve_9172f3a0_e3497940(I):
    x1 = upscale(I, THREE)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = vmirror(x3)
    x5 = objects(x4, T, F, T)
    x6 = merge(x5)
    O = paint(x2, x6)
    return O



def solve_9172f3a0_e9afcf9a(I):
    x1 = upscale(I, THREE)
    x2 = astuple(TWO, ONE)
    x3 = crop(x1, ORIGIN, x2)
    x4 = hmirror(x3)
    x5 = hconcat(x3, x4)
    x6 = hconcat(x5, x5)
    O = hconcat(x6, x5)
    return O



def solve_9172f3a0_d406998b(I):
    x1 = upscale(I, THREE)
    x2 = vmirror(x1)
    x3 = ofcolor(x2, FIVE)
    x4 = compose(even, last)
    x5 = sfilter(x3, x4)
    x6 = fill(x2, THREE, x5)
    O = vmirror(x6)
    return O



def solve_9172f3a0_3906de3d(I):
    x1 = upscale(I, THREE)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = switch(x2, ONE, TWO)
    x5 = apply(x3, x4)
    x6 = switch(x5, ONE, TWO)
    O = cmirror(x6)
    return O



def solve_9172f3a0_00d62c1b(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, FOUR, x6)
    return O



def solve_9172f3a0_7b6016b9(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, F)
    x3 = rbind(bordering, x1)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x4)
    x6 = fill(x1, TWO, x5)
    O = replace(x6, ZERO, THREE)
    return O



def solve_9172f3a0_67385a82(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, THREE)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = merge(x5)
    O = fill(x1, EIGHT, x6)
    return O



def solve_9172f3a0_a5313dff(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, ONE, x6)
    return O



def solve_9172f3a0_ea32f347(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, FIVE, FOUR)
    x4 = argmin(x2, size)
    x5 = argmax(x2, size)
    x6 = fill(x3, ONE, x5)
    O = fill(x6, TWO, x4)
    return O



def solve_9172f3a0_d631b094(I):
    x1 = upscale(I, THREE)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = ofcolor(x1, x3)
    x5 = size(x4)
    x6 = astuple(ONE, x5)
    O = canvas(x3, x6)
    return O



def solve_9172f3a0_10fcaaa3(I):
    x1 = upscale(I, THREE)
    x2 = leastcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = vconcat(x3, x3)
    x5 = ofcolor(x4, x2)
    x6 = mapply(ineighbors, x5)
    O = underfill(x4, EIGHT, x6)
    return O



def solve_9172f3a0_007bbfb7(I):
    x1 = upscale(I, THREE)
    x2 = hupscale(x1, THREE)
    x3 = vupscale(x2, THREE)
    x4 = hconcat(x1, x1)
    x5 = hconcat(x4, x1)
    x6 = vconcat(x5, x5)
    x7 = vconcat(x6, x5)
    O = cellwise(x3, x7, ZERO)
    return O



def solve_9172f3a0_496994bd(I):
    x1 = upscale(I, THREE)
    x2 = width(x1)
    x3 = height(x1)
    x4 = halve(x3)
    x5 = astuple(x4, x2)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    O = vconcat(x6, x7)
    return O



def solve_9172f3a0_1f876c06(I):
    x1 = upscale(I, THREE)
    x2 = fgpartition(x1)
    x3 = compose(last, first)
    x4 = power(last, TWO)
    x5 = fork(connect, x3, x4)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_9172f3a0_39a8645d(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = matcher(color, x5)
    x7 = extract(x2, x6)
    O = subgrid(x7, x1)
    return O



def solve_9172f3a0_1b2d62fb(I):
    x1 = upscale(I, THREE)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = replace(x2, NINE, ZERO)
    O = fill(x7, EIGHT, x6)
    return O



def solve_9172f3a0_90c28cc7(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = dedupe(x4)
    x6 = rot90(x5)
    x7 = dedupe(x6)
    O = rot270(x7)
    return O



def solve_9172f3a0_b6afb2da(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, F)
    x3 = replace(x1, FIVE, TWO)
    x4 = colorfilter(x2, FIVE)
    x5 = mapply(box, x4)
    x6 = fill(x3, FOUR, x5)
    x7 = mapply(corners, x4)
    O = fill(x6, ONE, x7)
    return O



def solve_9172f3a0_b9b7f026(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, F)
    x3 = argmin(x2, size)
    x4 = rbind(adjacent, x3)
    x5 = remove(x3, x2)
    x6 = extract(x5, x4)
    x7 = color(x6)
    O = canvas(x7, UNITY)
    return O



def solve_9172f3a0_ba97ae07(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = ofcolor(x1, x5)
    x7 = backdrop(x6)
    O = fill(x1, x5, x7)
    return O



def solve_9172f3a0_c9f8e694(I):
    x1 = upscale(I, THREE)
    x2 = height(x1)
    x3 = width(x1)
    x4 = ofcolor(x1, ZERO)
    x5 = astuple(x2, ONE)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hupscale(x6, x3)
    O = fill(x7, ZERO, x4)
    return O



def solve_9172f3a0_d23f8c26(I):
    x1 = upscale(I, THREE)
    x2 = asindices(x1)
    x3 = width(x1)
    x4 = halve(x3)
    x5 = matcher(last, x4)
    x6 = compose(flip, x5)
    x7 = sfilter(x2, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_9172f3a0_d5d6de2d(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = sfilter(x2, square)
    x4 = difference(x2, x3)
    x5 = compose(backdrop, inbox)
    x6 = mapply(x5, x4)
    x7 = replace(x1, TWO, ZERO)
    O = fill(x7, THREE, x6)
    return O



def solve_9172f3a0_dbc1a6ce(I):
    x1 = upscale(I, THREE)
    x2 = ofcolor(x1, ONE)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_9172f3a0_ded97339(I):
    x1 = upscale(I, THREE)
    x2 = ofcolor(x1, EIGHT)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_9172f3a0_ea786f4a(I):
    x1 = upscale(I, THREE)
    x2 = width(x1)
    x3 = shoot(ORIGIN, UNITY)
    x4 = decrement(x2)
    x5 = tojvec(x4)
    x6 = shoot(x5, DOWN_LEFT)
    x7 = combine(x3, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_9172f3a0_08ed6ac7(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = order(x2, height)
    x5 = size(x3)
    x6 = interval(x5, ZERO, NEG_ONE)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_9172f3a0_40853293(I):
    x1 = upscale(I, THREE)
    x2 = partition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    x6 = mfilter(x4, vline)
    x7 = paint(x1, x5)
    O = paint(x7, x6)
    return O



def solve_9172f3a0_5521c0d9(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = cover(x1, x3)
    x5 = chain(toivec, invert, height)
    x6 = fork(shift, identity, x5)
    x7 = mapply(x6, x2)
    O = paint(x4, x7)
    return O



def solve_9172f3a0_f8ff0b80(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = rbind(canvas, UNITY)
    x6 = apply(x5, x4)
    x7 = merge(x6)
    O = hmirror(x7)
    return O



def solve_9172f3a0_85c4e7cd(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, F)
    x3 = compose(invert, size)
    x4 = order(x2, size)
    x5 = order(x2, x3)
    x6 = apply(color, x5)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_9172f3a0_d2abd087(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = matcher(size, SIX)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x3)
    x6 = mfilter(x2, x4)
    x7 = fill(x1, TWO, x5)
    O = fill(x7, ONE, x6)
    return O



def solve_9172f3a0_363442ee(I):
    x1 = upscale(I, THREE)
    x2 = ofcolor(x1, ONE)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = asobject(x3)
    x5 = lbind(shift, x4)
    x6 = compose(x5, decrement)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_9172f3a0_5168d44c(I):
    x1 = upscale(I, THREE)
    x2 = ofcolor(x1, THREE)
    x3 = height(x2)
    x4 = equality(x3, ONE)
    x5 = branch(x4, ZERO_BY_TWO, TWO_BY_ZERO)
    x6 = ofcolor(x1, TWO)
    x7 = recolor(TWO, x6)
    O = move(x1, x7, x5)
    return O



def solve_9172f3a0_d9fac9be(I):
    x1 = upscale(I, THREE)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = color(x4)
    x6 = remove(ZERO, x2)
    x7 = other(x6, x5)
    O = canvas(x7, UNITY)
    return O



def solve_9172f3a0_e50d258f(I):
    x1 = upscale(I, THREE)
    x2 = width(x1)
    x3 = astuple(NINE, x2)
    x4 = canvas(ZERO, x3)
    x5 = vconcat(x1, x4)
    x6 = objects(x5, F, F, T)
    x7 = rbind(colorcount, TWO)
    x8 = argmax(x6, x7)
    O = subgrid(x8, x1)
    return O



def solve_9172f3a0_810b9b61(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = apply(toindices, x2)
    x4 = fork(either, vline, hline)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = fork(equality, identity, box)
    x8 = mfilter(x6, x7)
    O = fill(x1, THREE, x8)
    return O



def solve_9172f3a0_54d82841(I):
    x1 = upscale(I, THREE)
    x2 = height(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(last, center)
    x5 = apply(x4, x3)
    x6 = decrement(x2)
    x7 = lbind(astuple, x6)
    x8 = apply(x7, x5)
    O = fill(x1, FOUR, x8)
    return O



def solve_9172f3a0_60b61512(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = mapply(delta, x2)
    O = fill(x1, SEVEN, x3)
    return O



def solve_9172f3a0_25d8a9c8(I):
    x1 = upscale(I, THREE)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, THREE)
    x5 = mfilter(x4, hline)
    x6 = toindices(x5)
    x7 = difference(x2, x6)
    x8 = fill(x1, FIVE, x6)
    O = fill(x8, ZERO, x7)
    return O



def solve_9172f3a0_239be575(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, F, T, T)
    x3 = lbind(contained, TWO)
    x4 = compose(x3, palette)
    x5 = sfilter(x2, x4)
    x6 = size(x5)
    x7 = greater(x6, ONE)
    x8 = branch(x7, ZERO, EIGHT)
    O = canvas(x8, UNITY)
    return O



def solve_9172f3a0_6430c8c4(I):
    x1 = upscale(I, THREE)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(FOUR, FOUR)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, THREE, x7)
    return O



def solve_9172f3a0_94f9d214(I):
    x1 = upscale(I, THREE)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = astuple(FOUR, FOUR)
    x7 = canvas(ZERO, x6)
    x8 = intersection(x4, x5)
    O = fill(x7, TWO, x8)
    return O



def solve_9172f3a0_ce4f8723(I):
    x1 = upscale(I, THREE)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = astuple(FOUR, FOUR)
    x8 = canvas(THREE, x7)
    O = fill(x8, ZERO, x6)
    return O



def solve_9172f3a0_d13f3404(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, UNITY)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = astuple(SIX, SIX)
    x8 = canvas(ZERO, x7)
    O = paint(x8, x6)
    return O



def solve_9172f3a0_f2829549(I):
    x1 = upscale(I, THREE)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = shape(x2)
    x8 = canvas(ZERO, x7)
    O = fill(x8, THREE, x6)
    return O



def solve_9172f3a0_fafffa47(I):
    x1 = upscale(I, THREE)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = shape(x3)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, TWO, x7)
    return O



def solve_9172f3a0_fcb5c309(I):
    x1 = upscale(I, THREE)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = colorfilter(x3, x2)
    x5 = difference(x3, x4)
    x6 = argmax(x5, size)
    x7 = color(x6)
    x8 = subgrid(x6, x1)
    O = replace(x8, x7, x2)
    return O



def solve_9172f3a0_e76a88a6(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, F, F, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = remove(x3, x2)
    x6 = apply(ulcorner, x5)
    x7 = lbind(shift, x4)
    x8 = mapply(x7, x6)
    O = paint(x1, x8)
    return O



def solve_9172f3a0_7f4411dc(I):
    x1 = upscale(I, THREE)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = rbind(difference, x3)
    x5 = rbind(greater, TWO)
    x6 = chain(x5, size, x4)
    x7 = compose(x6, dneighbors)
    x8 = sfilter(x3, x7)
    O = fill(x1, ZERO, x8)
    return O



def solve_9172f3a0_b230c067(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(normalize, x3)
    x5 = leastcommon(x4)
    x6 = matcher(normalize, x5)
    x7 = extract(x2, x6)
    x8 = replace(x1, EIGHT, ONE)
    O = fill(x8, TWO, x7)
    return O



def solve_9172f3a0_e8593010(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = sizefilter(x2, TWO)
    x5 = merge(x3)
    x6 = fill(x1, THREE, x5)
    x7 = merge(x4)
    x8 = fill(x6, TWO, x7)
    O = replace(x8, ZERO, ONE)
    return O



def solve_9172f3a0_6d75e8bb(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = ulcorner(x3)
    x5 = subgrid(x3, x1)
    x6 = replace(x5, ZERO, TWO)
    x7 = asobject(x6)
    x8 = shift(x7, x4)
    O = paint(x1, x8)
    return O



def solve_9172f3a0_1190e5a7(I):
    x1 = upscale(I, THREE)
    x2 = mostcolor(x1)
    x3 = frontiers(x1)
    x4 = sfilter(x3, vline)
    x5 = difference(x3, x4)
    x6 = astuple(x5, x4)
    x7 = apply(size, x6)
    x8 = increment(x7)
    O = canvas(x2, x8)
    return O



def solve_9172f3a0_6e02f1e3(I):
    x1 = upscale(I, THREE)
    x2 = numcolors(x1)
    x3 = canvas(ZERO, THREE_BY_THREE)
    x4 = equality(x2, THREE)
    x5 = equality(x2, TWO)
    x6 = branch(x4, TWO_BY_ZERO, ORIGIN)
    x7 = branch(x5, TWO_BY_TWO, ZERO_BY_TWO)
    x8 = connect(x6, x7)
    O = fill(x3, FIVE, x8)
    return O



def solve_9172f3a0_a61f2674(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = replace(x1, FIVE, ZERO)
    x6 = recolor(ONE, x3)
    x7 = recolor(TWO, x4)
    x8 = combine(x6, x7)
    O = paint(x5, x8)
    return O



def solve_9172f3a0_fcc82909(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, F, T, T)
    x3 = rbind(add, DOWN)
    x4 = compose(x3, llcorner)
    x5 = compose(toivec, numcolors)
    x6 = fork(add, lrcorner, x5)
    x7 = fork(astuple, x4, x6)
    x8 = compose(box, x7)
    x9 = mapply(x8, x2)
    O = fill(x1, THREE, x9)
    return O



def solve_9172f3a0_72ca375d(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = rbind(subgrid, x1)
    x5 = apply(x4, x3)
    x6 = apply(vmirror, x5)
    x7 = papply(equality, x5, x6)
    x8 = pair(x5, x7)
    x9 = extract(x8, last)
    O = first(x9)
    return O



def solve_9172f3a0_253bf280(I):
    x1 = upscale(I, THREE)
    x2 = ofcolor(x1, EIGHT)
    x3 = prapply(connect, x2, x2)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = fork(either, vline, hline)
    x8 = mfilter(x6, x7)
    x9 = fill(x1, THREE, x8)
    O = fill(x9, EIGHT, x2)
    return O



def solve_9172f3a0_1f642eb9(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = rbind(gravitate, x5)
    x7 = compose(crement, x6)
    x8 = fork(shift, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_9172f3a0_31aa019c(I):
    x1 = upscale(I, THREE)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = first(x3)
    x5 = neighbors(x4)
    x6 = astuple(TEN, TEN)
    x7 = canvas(ZERO, x6)
    x8 = initset(x4)
    x9 = fill(x7, x2, x8)
    O = fill(x9, TWO, x5)
    return O



def solve_9172f3a0_27a28665(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, F)
    x3 = valmax(x2, size)
    x4 = equality(x3, ONE)
    x5 = equality(x3, FOUR)
    x6 = equality(x3, FIVE)
    x7 = branch(x4, TWO, ONE)
    x8 = branch(x5, THREE, x7)
    x9 = branch(x6, SIX, x8)
    O = canvas(x9, UNITY)
    return O



def solve_9172f3a0_7ddcd7ec(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = color(x5)
    x7 = lbind(position, x5)
    x8 = fork(shoot, center, x7)
    x9 = mapply(x8, x3)
    O = fill(x1, x6, x9)
    return O



def solve_9172f3a0_3bd67248(I):
    x1 = upscale(I, THREE)
    x2 = height(x1)
    x3 = decrement(x2)
    x4 = decrement(x3)
    x5 = astuple(x4, ONE)
    x6 = astuple(x3, ONE)
    x7 = shoot(x5, UP_RIGHT)
    x8 = shoot(x6, RIGHT)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_9172f3a0_73251a56(I):
    x1 = upscale(I, THREE)
    x2 = dmirror(x1)
    x3 = papply(pair, x1, x2)
    x4 = lbind(apply, maximum)
    x5 = apply(x4, x3)
    x6 = mostcolor(x5)
    x7 = replace(x5, ZERO, x6)
    x8 = index(x7, ORIGIN)
    x9 = shoot(ORIGIN, UNITY)
    O = fill(x7, x8, x9)
    return O



def solve_9172f3a0_25d487eb(I):
    x1 = upscale(I, THREE)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = ofcolor(x1, x2)
    x5 = center(x4)
    x6 = merge(x3)
    x7 = center(x6)
    x8 = subtract(x7, x5)
    x9 = shoot(x5, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_9172f3a0_8f2ea7aa(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    O = cellwise(x5, x9, ZERO)
    return O



def solve_9172f3a0_b8825c91(I):
    x1 = upscale(I, THREE)
    x2 = replace(x1, FOUR, ZERO)
    x3 = dmirror(x2)
    x4 = papply(pair, x2, x3)
    x5 = lbind(apply, maximum)
    x6 = apply(x5, x4)
    x7 = cmirror(x6)
    x8 = papply(pair, x6, x7)
    x9 = apply(x5, x8)
    O = cmirror(x9)
    return O



def solve_9172f3a0_cce03e0d(I):
    x1 = upscale(I, THREE)
    x2 = upscale(x1, THREE)
    x3 = hconcat(x1, x1)
    x4 = hconcat(x3, x1)
    x5 = vconcat(x4, x4)
    x6 = vconcat(x5, x4)
    x7 = ofcolor(x2, ZERO)
    x8 = ofcolor(x2, ONE)
    x9 = combine(x7, x8)
    O = fill(x6, ZERO, x9)
    return O



def solve_9172f3a0_d364b489(I):
    x1 = upscale(I, THREE)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, DOWN)
    x4 = fill(x1, EIGHT, x3)
    x5 = shift(x2, UP)
    x6 = fill(x4, TWO, x5)
    x7 = shift(x2, RIGHT)
    x8 = fill(x6, SIX, x7)
    x9 = shift(x2, LEFT)
    O = fill(x8, SEVEN, x9)
    return O



def solve_9172f3a0_a5f85a15(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = interval(ONE, NINE, ONE)
    x4 = apply(double, x3)
    x5 = apply(decrement, x4)
    x6 = papply(astuple, x5, x5)
    x7 = apply(ulcorner, x2)
    x8 = lbind(shift, x6)
    x9 = mapply(x8, x7)
    O = fill(x1, FOUR, x9)
    return O



def solve_9172f3a0_3ac3eb23(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = chain(ineighbors, last, first)
    x4 = fork(recolor, color, x3)
    x5 = mapply(x4, x2)
    x6 = paint(x1, x5)
    x7 = vsplit(x6, THREE)
    x8 = first(x7)
    x9 = vconcat(x8, x8)
    O = vconcat(x8, x9)
    return O



def solve_9172f3a0_22168020(I):
    x1 = upscale(I, THREE)
    x2 = palette(x1)
    x3 = remove(ZERO, x2)
    x4 = lbind(ofcolor, x1)
    x5 = lbind(prapply, connect)
    x6 = fork(x5, x4, x4)
    x7 = compose(merge, x6)
    x8 = fork(recolor, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_9172f3a0_6e82a1ae(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sizefilter, x2)
    x4 = compose(merge, x3)
    x5 = x4(TWO)
    x6 = x4(THREE)
    x7 = x4(FOUR)
    x8 = fill(x1, THREE, x5)
    x9 = fill(x8, TWO, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_9172f3a0_868de0fa(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, F)
    x3 = sfilter(x2, square)
    x4 = compose(even, height)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = merge(x5)
    x8 = merge(x6)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, SEVEN, x8)
    return O



def solve_9172f3a0_681b3aeb(I):
    x1 = upscale(I, THREE)
    x2 = rot270(x1)
    x3 = objects(x2, T, F, T)
    x4 = argmax(x3, size)
    x5 = argmin(x3, size)
    x6 = color(x5)
    x7 = canvas(x6, THREE_BY_THREE)
    x8 = normalize(x4)
    x9 = paint(x7, x8)
    O = rot90(x9)
    return O



def solve_9172f3a0_8e5a5113(I):
    x1 = upscale(I, THREE)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = rot90(x2)
    x4 = rot180(x2)
    x5 = astuple(x3, x4)
    x6 = astuple(FOUR, EIGHT)
    x7 = apply(tojvec, x6)
    x8 = apply(asobject, x5)
    x9 = mpapply(shift, x8, x7)
    O = paint(x1, x9)
    return O



def solve_9172f3a0_025d127b(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = apply(color, x2)
    x4 = merge(x2)
    x5 = lbind(colorfilter, x2)
    x6 = rbind(argmax, rightmost)
    x7 = compose(x6, x5)
    x8 = mapply(x7, x3)
    x9 = difference(x4, x8)
    O = move(x1, x9, RIGHT)
    return O



def solve_9172f3a0_2281f1f4(I):
    x1 = upscale(I, THREE)
    x2 = ofcolor(x1, FIVE)
    x3 = product(x2, x2)
    x4 = power(first, TWO)
    x5 = power(last, TWO)
    x6 = fork(astuple, x4, x5)
    x7 = apply(x6, x3)
    x8 = urcorner(x2)
    x9 = remove(x8, x7)
    O = underfill(x1, TWO, x9)
    return O



def solve_9172f3a0_cf98881b(I):
    x1 = upscale(I, THREE)
    x2 = hsplit(x1, THREE)
    x3 = first(x2)
    x4 = remove(x3, x2)
    x5 = first(x4)
    x6 = last(x4)
    x7 = ofcolor(x5, NINE)
    x8 = ofcolor(x3, FOUR)
    x9 = fill(x6, NINE, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_9172f3a0_bda2d7a6(I):
    x1 = upscale(I, THREE)
    x2 = partition(x1)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = last(x3)
    x6 = remove(x5, x3)
    x7 = repeat(x5, ONE)
    x8 = combine(x7, x6)
    x9 = mpapply(recolor, x4, x8)
    O = paint(x1, x9)
    return O



def solve_9172f3a0_6455b5f5(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = argmax(x2, size)
    x5 = valmin(x2, size)
    x6 = sizefilter(x3, x5)
    x7 = recolor(ONE, x4)
    x8 = merge(x6)
    x9 = paint(x1, x7)
    O = fill(x9, EIGHT, x8)
    return O



def solve_9172f3a0_b8cdaf2b(I):
    x1 = upscale(I, THREE)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = shift(x3, UP)
    x5 = ulcorner(x4)
    x6 = urcorner(x4)
    x7 = shoot(x5, NEG_UNITY)
    x8 = shoot(x6, UP_RIGHT)
    x9 = combine(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_9172f3a0_bd4472b8(I):
    x1 = upscale(I, THREE)
    x2 = width(x1)
    x3 = astuple(TWO, x2)
    x4 = crop(x1, ORIGIN, x3)
    x5 = tophalf(x4)
    x6 = dmirror(x5)
    x7 = hupscale(x6, x2)
    x8 = repeat(x7, TWO)
    x9 = merge(x8)
    O = vconcat(x4, x9)
    return O



def solve_9172f3a0_4be741c5(I):
    x1 = upscale(I, THREE)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = branch(x2, height, width)
    x5 = x4(x1)
    x6 = astuple(ONE, x5)
    x7 = x3(x1)
    x8 = crop(x7, ORIGIN, x6)
    x9 = apply(dedupe, x8)
    O = x3(x9)
    return O



def solve_9172f3a0_bbc9ae5d(I):
    x1 = upscale(I, THREE)
    x2 = width(x1)
    x3 = palette(x1)
    x4 = halve(x2)
    x5 = vupscale(x1, x4)
    x6 = rbind(shoot, UNITY)
    x7 = other(x3, ZERO)
    x8 = ofcolor(x5, x7)
    x9 = mapply(x6, x8)
    O = fill(x5, x7, x9)
    return O



def solve_9172f3a0_d90796e8(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, F, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = lbind(contained, TWO)
    x5 = compose(x4, palette)
    x6 = mfilter(x3, x5)
    x7 = cover(x1, x6)
    x8 = matcher(first, THREE)
    x9 = sfilter(x6, x8)
    O = fill(x7, EIGHT, x9)
    return O



def solve_9172f3a0_2c608aff(I):
    x1 = upscale(I, THREE)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = toindices(x4)
    x6 = ofcolor(x1, x2)
    x7 = prapply(connect, x5, x6)
    x8 = fork(either, vline, hline)
    x9 = mfilter(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_9172f3a0_f8b3ba0a(I):
    x1 = upscale(I, THREE)
    x2 = compress(x1)
    x3 = astuple(THREE, ONE)
    x4 = palette(x2)
    x5 = lbind(colorcount, x2)
    x6 = compose(invert, x5)
    x7 = order(x4, x6)
    x8 = rbind(canvas, UNITY)
    x9 = apply(x8, x7)
    x10 = merge(x9)
    O = crop(x10, DOWN, x3)
    return O



def solve_9172f3a0_80af3007(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    x10 = cellwise(x5, x9, ZERO)
    O = downscale(x10, THREE)
    return O



def solve_9172f3a0_83302e8f(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = sfilter(x3, square)
    x5 = difference(x3, x4)
    x6 = merge(x4)
    x7 = recolor(THREE, x6)
    x8 = merge(x5)
    x9 = recolor(FOUR, x8)
    x10 = paint(x1, x7)
    O = paint(x10, x9)
    return O



def solve_9172f3a0_1fad071e(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, ONE)
    x4 = sizefilter(x3, FOUR)
    x5 = size(x4)
    x6 = subtract(FIVE, x5)
    x7 = astuple(ONE, x5)
    x8 = canvas(ONE, x7)
    x9 = astuple(ONE, x6)
    x10 = canvas(ZERO, x9)
    O = hconcat(x8, x10)
    return O



def solve_9172f3a0_11852cab(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = hmirror(x3)
    x5 = vmirror(x3)
    x6 = dmirror(x3)
    x7 = cmirror(x3)
    x8 = paint(x1, x4)
    x9 = paint(x8, x5)
    x10 = paint(x9, x6)
    O = paint(x10, x7)
    return O



def solve_9172f3a0_3428a4f5(I):
    x1 = upscale(I, THREE)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(SIX, FIVE)
    x5 = ofcolor(x2, TWO)
    x6 = ofcolor(x3, TWO)
    x7 = combine(x5, x6)
    x8 = intersection(x5, x6)
    x9 = difference(x7, x8)
    x10 = canvas(ZERO, x4)
    O = fill(x10, THREE, x9)
    return O



def solve_9172f3a0_178fcbfb(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(vfrontier, x3)
    x5 = fill(x1, TWO, x4)
    x6 = colorfilter(x2, TWO)
    x7 = difference(x2, x6)
    x8 = compose(hfrontier, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x7)
    O = paint(x5, x10)
    return O



def solve_9172f3a0_54d9e175(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = compose(neighbors, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x3)
    x7 = paint(x1, x6)
    x8 = replace(x7, ONE, SIX)
    x9 = replace(x8, TWO, SEVEN)
    x10 = replace(x9, THREE, EIGHT)
    O = replace(x10, FOUR, NINE)
    return O



def solve_9172f3a0_5ad4f10b(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = color(x3)
    x5 = subgrid(x3, x1)
    x6 = leastcolor(x5)
    x7 = replace(x5, x6, ZERO)
    x8 = replace(x7, x4, x6)
    x9 = height(x8)
    x10 = divide(x9, THREE)
    O = downscale(x8, x10)
    return O



def solve_9172f3a0_623ea044(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = center(x3)
    x5 = color(x3)
    x6 = astuple(UNITY, NEG_UNITY)
    x7 = astuple(UP_RIGHT, DOWN_LEFT)
    x8 = combine(x6, x7)
    x9 = lbind(shoot, x4)
    x10 = mapply(x9, x8)
    O = fill(x1, x5, x10)
    return O



def solve_9172f3a0_794b24be(I):
    x1 = upscale(I, THREE)
    x2 = ofcolor(x1, ONE)
    x3 = size(x2)
    x4 = decrement(x3)
    x5 = canvas(ZERO, THREE_BY_THREE)
    x6 = tojvec(x4)
    x7 = connect(ORIGIN, x6)
    x8 = equality(x3, FOUR)
    x9 = insert(UNITY, x7)
    x10 = branch(x8, x9, x7)
    O = fill(x5, TWO, x10)
    return O



def solve_9172f3a0_88a62173(I):
    x1 = upscale(I, THREE)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = tophalf(x3)
    x6 = bottomhalf(x2)
    x7 = bottomhalf(x3)
    x8 = astuple(x4, x5)
    x9 = astuple(x6, x7)
    x10 = combine(x8, x9)
    O = leastcommon(x10)
    return O



def solve_9172f3a0_890034e9(I):
    x1 = upscale(I, THREE)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = inbox(x3)
    x5 = recolor(ZERO, x4)
    x6 = occurrences(x1, x5)
    x7 = normalize(x3)
    x8 = shift(x7, NEG_UNITY)
    x9 = lbind(shift, x8)
    x10 = mapply(x9, x6)
    O = fill(x1, x2, x10)
    return O



def solve_9172f3a0_99b1bc43(I):
    x1 = upscale(I, THREE)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = combine(x4, x5)
    x7 = intersection(x4, x5)
    x8 = difference(x6, x7)
    x9 = shape(x2)
    x10 = canvas(ZERO, x9)
    O = fill(x10, THREE, x8)
    return O



def solve_9172f3a0_a9f96cdd(I):
    x1 = upscale(I, THREE)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = shift(x2, NEG_UNITY)
    x5 = fill(x3, THREE, x4)
    x6 = shift(x2, UP_RIGHT)
    x7 = fill(x5, SIX, x6)
    x8 = shift(x2, DOWN_LEFT)
    x9 = fill(x7, EIGHT, x8)
    x10 = shift(x2, UNITY)
    O = fill(x9, SEVEN, x10)
    return O



def solve_9172f3a0_af902bf9(I):
    x1 = upscale(I, THREE)
    x2 = ofcolor(x1, FOUR)
    x3 = prapply(connect, x2, x2)
    x4 = fork(either, vline, hline)
    x5 = mfilter(x3, x4)
    x6 = underfill(x1, NEG_ONE, x5)
    x7 = objects(x6, F, F, T)
    x8 = compose(backdrop, inbox)
    x9 = mapply(x8, x7)
    x10 = fill(x6, TWO, x9)
    O = replace(x10, NEG_ONE, ZERO)
    return O



def solve_9172f3a0_b548a754(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, EIGHT, ZERO)
    x4 = leastcolor(x3)
    x5 = replace(x3, x4, ZERO)
    x6 = leastcolor(x5)
    x7 = merge(x2)
    x8 = backdrop(x7)
    x9 = box(x7)
    x10 = fill(x1, x4, x8)
    O = fill(x10, x6, x9)
    return O



def solve_9172f3a0_c3e719e8(I):
    x1 = upscale(I, THREE)
    x2 = mostcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = upscale(x1, THREE)
    x5 = ofcolor(x4, x2)
    x6 = asindices(x4)
    x7 = difference(x6, x5)
    x8 = hconcat(x3, x1)
    x9 = vconcat(x8, x8)
    x10 = vconcat(x9, x8)
    O = fill(x10, ZERO, x7)
    return O



def solve_9172f3a0_de1cd16c(I):
    x1 = upscale(I, THREE)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = rbind(subgrid, x1)
    x7 = apply(x6, x5)
    x8 = rbind(colorcount, x2)
    x9 = argmax(x7, x8)
    x10 = mostcolor(x9)
    O = canvas(x10, UNITY)
    return O



def solve_9172f3a0_d8c310e9(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = hperiod(x3)
    x5 = multiply(x4, THREE)
    x6 = tojvec(x4)
    x7 = tojvec(x5)
    x8 = shift(x3, x6)
    x9 = shift(x3, x7)
    x10 = paint(x1, x8)
    O = paint(x10, x9)
    return O



def solve_9172f3a0_a3325580(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = valmax(x2, size)
    x4 = sizefilter(x2, x3)
    x5 = order(x4, leftmost)
    x6 = apply(color, x5)
    x7 = astuple(ONE, x3)
    x8 = rbind(canvas, x7)
    x9 = apply(x8, x6)
    x10 = merge(x9)
    O = dmirror(x10)
    return O



def solve_9172f3a0_8eb1be9a(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = interval(NEG_TWO, FOUR, ONE)
    x5 = lbind(shift, x3)
    x6 = height(x3)
    x7 = rbind(multiply, x6)
    x8 = apply(x7, x4)
    x9 = apply(toivec, x8)
    x10 = mapply(x5, x9)
    O = paint(x1, x10)
    return O



def solve_9172f3a0_321b1fc6(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, F, F, T)
    x3 = colorfilter(x2, EIGHT)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = cover(x1, x5)
    x7 = normalize(x5)
    x8 = lbind(shift, x7)
    x9 = apply(ulcorner, x3)
    x10 = mapply(x8, x9)
    O = paint(x6, x10)
    return O



def solve_9172f3a0_1b60fb0c(I):
    x1 = upscale(I, THREE)
    x2 = rot90(x1)
    x3 = ofcolor(x1, ONE)
    x4 = ofcolor(x2, ONE)
    x5 = neighbors(ORIGIN)
    x6 = mapply(neighbors, x5)
    x7 = lbind(shift, x4)
    x8 = apply(x7, x6)
    x9 = lbind(intersection, x3)
    x10 = compose(size, x9)
    x11 = argmax(x8, x10)
    O = underfill(x1, TWO, x11)
    return O



def solve_9172f3a0_ddf7fa4f(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = colorfilter(x2, FIVE)
    x5 = product(x3, x4)
    x6 = fork(vmatching, first, last)
    x7 = sfilter(x5, x6)
    x8 = compose(color, first)
    x9 = fork(recolor, x8, last)
    x10 = mapply(x9, x7)
    O = paint(x1, x10)
    return O



def solve_9172f3a0_47c1f68c(I):
    x1 = upscale(I, THREE)
    x2 = leastcolor(x1)
    x3 = vmirror(x1)
    x4 = objects(x1, T, T, T)
    x5 = merge(x4)
    x6 = mostcolor(x5)
    x7 = cellwise(x1, x3, x2)
    x8 = hmirror(x7)
    x9 = cellwise(x7, x8, x2)
    x10 = compress(x9)
    O = replace(x10, x2, x6)
    return O



def solve_9172f3a0_6c434453(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, EIGHT)
    x4 = dneighbors(UNITY)
    x5 = insert(UNITY, x4)
    x6 = merge(x3)
    x7 = cover(x1, x6)
    x8 = apply(ulcorner, x3)
    x9 = lbind(shift, x5)
    x10 = mapply(x9, x8)
    O = fill(x7, TWO, x10)
    return O



def solve_9172f3a0_23581191(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = paint(x1, x6)
    x8 = fork(intersection, first, last)
    x9 = apply(x4, x2)
    x10 = x8(x9)
    O = fill(x7, TWO, x10)
    return O



def solve_9172f3a0_c8cbb738(I):
    x1 = upscale(I, THREE)
    x2 = mostcolor(x1)
    x3 = fgpartition(x1)
    x4 = valmax(x3, shape)
    x5 = canvas(x2, x4)
    x6 = apply(normalize, x3)
    x7 = lbind(subtract, x4)
    x8 = chain(halve, x7, shape)
    x9 = fork(shift, identity, x8)
    x10 = mapply(x9, x6)
    O = paint(x5, x10)
    return O



def solve_9172f3a0_3eda0437(I):
    x1 = upscale(I, THREE)
    x2 = interval(TWO, TEN, ONE)
    x3 = prapply(astuple, x2, x2)
    x4 = lbind(canvas, ZERO)
    x5 = lbind(occurrences, x1)
    x6 = lbind(lbind, shift)
    x7 = fork(apply, x6, x5)
    x8 = chain(x7, asobject, x4)
    x9 = mapply(x8, x3)
    x10 = argmax(x9, size)
    O = fill(x1, SIX, x10)
    return O



def solve_9172f3a0_d4469b4b(I):
    x1 = upscale(I, THREE)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = equality(x3, ONE)
    x5 = equality(x3, TWO)
    x6 = branch(x4, UNITY, TWO_BY_TWO)
    x7 = branch(x5, RIGHT, x6)
    x8 = fork(combine, vfrontier, hfrontier)
    x9 = x8(x7)
    x10 = canvas(ZERO, THREE_BY_THREE)
    O = fill(x10, FIVE, x9)
    return O



def solve_9172f3a0_6ecd11f4(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = subgrid(x3, x1)
    x6 = subgrid(x4, x1)
    x7 = width(x5)
    x8 = width(x6)
    x9 = divide(x7, x8)
    x10 = downscale(x5, x9)
    x11 = ofcolor(x10, ZERO)
    O = fill(x6, ZERO, x11)
    return O



def solve_9172f3a0_c444b776(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = argmin(x3, size)
    x5 = backdrop(x4)
    x6 = toobject(x5, x1)
    x7 = normalize(x6)
    x8 = lbind(shift, x7)
    x9 = compose(x8, ulcorner)
    x10 = mapply(x9, x3)
    O = paint(x1, x10)
    return O



def solve_9172f3a0_eb281b96(I):
    x1 = upscale(I, THREE)
    x2 = height(x1)
    x3 = width(x1)
    x4 = decrement(x2)
    x5 = astuple(x4, x3)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    x8 = vconcat(x1, x7)
    x9 = double(x4)
    x10 = astuple(x9, x3)
    x11 = crop(x8, DOWN, x10)
    O = vconcat(x8, x11)
    return O



def solve_9172f3a0_ff28f65a(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = double(x3)
    x5 = interval(ZERO, x4, TWO)
    x6 = apply(tojvec, x5)
    x7 = astuple(ONE, NINE)
    x8 = canvas(ZERO, x7)
    x9 = fill(x8, ONE, x6)
    x10 = hsplit(x9, THREE)
    O = merge(x10)
    return O



def solve_9172f3a0_7e0986d6(I):
    x1 = upscale(I, THREE)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = replace(x1, x2, ZERO)
    x5 = leastcolor(x4)
    x6 = rbind(colorcount, x5)
    x7 = chain(positive, decrement, x6)
    x8 = rbind(toobject, x4)
    x9 = chain(x7, x8, dneighbors)
    x10 = sfilter(x3, x9)
    O = fill(x4, x5, x10)
    return O



def solve_9172f3a0_09629e4f(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, F, T, T)
    x3 = argmin(x2, numcolors)
    x4 = normalize(x3)
    x5 = upscale(x4, FOUR)
    x6 = paint(x1, x5)
    x7 = ofcolor(x1, FIVE)
    O = fill(x6, FIVE, x7)
    return O



def solve_9172f3a0_a85d4709(I):
    x1 = upscale(I, THREE)
    x2 = ofcolor(x1, FIVE)
    x3 = lbind(matcher, last)
    x4 = lbind(sfilter, x2)
    x5 = lbind(mapply, hfrontier)
    x6 = chain(x5, x4, x3)
    x7 = x6(ZERO)
    x8 = x6(TWO)
    x9 = x6(ONE)
    x10 = fill(x1, TWO, x7)
    x11 = fill(x10, THREE, x8)
    O = fill(x11, FOUR, x9)
    return O



def solve_9172f3a0_feca6190(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = multiply(x3, FIVE)
    x5 = astuple(x4, x4)
    x6 = canvas(ZERO, x5)
    x7 = rbind(shoot, UNITY)
    x8 = compose(x7, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x2)
    x11 = paint(x6, x10)
    O = hmirror(x11)
    return O



def solve_9172f3a0_a68b268e(I):
    x1 = upscale(I, THREE)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = lefthalf(x2)
    x5 = righthalf(x2)
    x6 = lefthalf(x3)
    x7 = righthalf(x3)
    x8 = ofcolor(x5, FOUR)
    x9 = ofcolor(x4, SEVEN)
    x10 = ofcolor(x6, EIGHT)
    x11 = fill(x7, EIGHT, x10)
    x12 = fill(x11, FOUR, x8)
    O = fill(x12, SEVEN, x9)
    return O



def solve_9172f3a0_beb8660c(I):
    x1 = upscale(I, THREE)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(invert, size)
    x5 = order(x3, x4)
    x6 = apply(normalize, x5)
    x7 = size(x6)
    x8 = interval(ZERO, x7, ONE)
    x9 = apply(toivec, x8)
    x10 = mpapply(shift, x6, x9)
    x11 = canvas(ZERO, x2)
    x12 = paint(x11, x10)
    O = rot180(x12)
    return O



def solve_9172f3a0_913fb3ed(I):
    x1 = upscale(I, THREE)
    x2 = ofcolor(x1, THREE)
    x3 = ofcolor(x1, EIGHT)
    x4 = ofcolor(x1, TWO)
    x5 = mapply(neighbors, x2)
    x6 = mapply(neighbors, x3)
    x7 = mapply(neighbors, x4)
    x8 = fill(x1, SIX, x5)
    x9 = fill(x8, FOUR, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_9172f3a0_0962bcdd(I):
    x1 = upscale(I, THREE)
    x2 = leastcolor(x1)
    x3 = replace(x1, ZERO, x2)
    x4 = leastcolor(x3)
    x5 = ofcolor(x1, x4)
    x6 = mapply(dneighbors, x5)
    x7 = fill(x1, x4, x6)
    x8 = objects(x7, F, T, T)
    x9 = fork(connect, ulcorner, lrcorner)
    x10 = fork(connect, llcorner, urcorner)
    x11 = fork(combine, x9, x10)
    x12 = mapply(x11, x8)
    O = fill(x7, x2, x12)
    return O



def solve_9172f3a0_3631a71a(I):
    x1 = upscale(I, THREE)
    x2 = shape(x1)
    x3 = replace(x1, NINE, ZERO)
    x4 = lbind(apply, maximum)
    x5 = dmirror(x3)
    x6 = papply(pair, x3, x5)
    x7 = apply(x4, x6)
    x8 = subtract(x2, TWO_BY_TWO)
    x9 = crop(x7, TWO_BY_TWO, x8)
    x10 = vmirror(x9)
    x11 = objects(x10, T, F, T)
    x12 = merge(x11)
    x13 = shift(x12, TWO_BY_TWO)
    O = paint(x7, x13)
    return O



def solve_9172f3a0_05269061(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = neighbors(ORIGIN)
    x4 = mapply(neighbors, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = merge(x2)
    x8 = lbind(shift, x7)
    x9 = mapply(x8, x6)
    x10 = shift(x9, UP_RIGHT)
    x11 = shift(x9, DOWN_LEFT)
    x12 = paint(x1, x9)
    x13 = paint(x12, x10)
    O = paint(x13, x11)
    return O



def solve_9172f3a0_95990924(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = apply(ulcorner, x3)
    x5 = apply(urcorner, x3)
    x6 = apply(llcorner, x3)
    x7 = apply(lrcorner, x3)
    x8 = fill(x1, ONE, x4)
    x9 = fill(x8, TWO, x5)
    x10 = fill(x9, THREE, x6)
    O = fill(x10, FOUR, x7)
    return O



def solve_9172f3a0_e509e548(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = rbind(subgrid, x1)
    x4 = chain(palette, trim, x3)
    x5 = lbind(contained, THREE)
    x6 = compose(x5, x4)
    x7 = fork(add, height, width)
    x8 = compose(decrement, x7)
    x9 = fork(equality, size, x8)
    x10 = mfilter(x2, x6)
    x11 = mfilter(x2, x9)
    x12 = replace(x1, THREE, SIX)
    x13 = fill(x12, TWO, x10)
    O = fill(x13, ONE, x11)
    return O



def solve_9172f3a0_d43fd935(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, THREE)
    x4 = sizefilter(x2, ONE)
    x5 = rbind(vmatching, x3)
    x6 = rbind(hmatching, x3)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = rbind(gravitate, x3)
    x10 = fork(add, center, x9)
    x11 = fork(connect, center, x10)
    x12 = fork(recolor, color, x11)
    x13 = mapply(x12, x8)
    O = paint(x1, x13)
    return O



def solve_9172f3a0_e73095fd(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = fork(equality, toindices, backdrop)
    x5 = sfilter(x3, x4)
    x6 = lbind(mapply, dneighbors)
    x7 = chain(x6, corners, outbox)
    x8 = fork(difference, x7, outbox)
    x9 = ofcolor(x1, FIVE)
    x10 = rbind(intersection, x9)
    x11 = matcher(size, ZERO)
    x12 = chain(x11, x10, x8)
    x13 = mfilter(x5, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_9172f3a0_1bfc4729(I):
    x1 = upscale(I, THREE)
    x2 = asindices(x1)
    x3 = tophalf(x1)
    x4 = bottomhalf(x1)
    x5 = leastcolor(x3)
    x6 = leastcolor(x4)
    x7 = hfrontier(TWO_BY_ZERO)
    x8 = box(x2)
    x9 = combine(x7, x8)
    x10 = fill(x3, x5, x9)
    x11 = hmirror(x10)
    x12 = replace(x11, x5, x6)
    O = vconcat(x10, x12)
    return O



def solve_9172f3a0_93b581b8(I):
    x1 = upscale(I, THREE)
    x2 = fgpartition(x1)
    x3 = chain(cmirror, dmirror, merge)
    x4 = x3(x2)
    x5 = upscale(x4, THREE)
    x6 = astuple(NEG_TWO, NEG_TWO)
    x7 = shift(x5, x6)
    x8 = underpaint(x1, x7)
    x9 = toindices(x4)
    x10 = fork(combine, hfrontier, vfrontier)
    x11 = mapply(x10, x9)
    x12 = difference(x11, x9)
    O = fill(x8, ZERO, x12)
    return O



def solve_9172f3a0_7447852a(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = compose(last, center)
    x5 = order(x3, x4)
    x6 = size(x5)
    x7 = interval(ZERO, x6, THREE)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = interval(ZERO, x6, ONE)
    x11 = pair(x5, x10)
    x12 = sfilter(x11, x9)
    x13 = mapply(first, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_9172f3a0_97999447(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = apply(toindices, x2)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    x8 = paint(x1, x7)
    x9 = interval(ZERO, FIVE, ONE)
    x10 = apply(double, x9)
    x11 = apply(increment, x10)
    x12 = apply(tojvec, x11)
    x13 = prapply(shift, x3, x12)
    x14 = merge(x13)
    O = fill(x8, FIVE, x14)
    return O



def solve_9172f3a0_91714a58(I):
    x1 = upscale(I, THREE)
    x2 = shape(x1)
    x3 = asindices(x1)
    x4 = objects(x1, T, F, T)
    x5 = argmax(x4, size)
    x6 = mostcolor(x5)
    x7 = canvas(ZERO, x2)
    x8 = paint(x7, x5)
    x9 = rbind(toobject, x8)
    x10 = rbind(colorcount, x6)
    x11 = chain(x10, x9, neighbors)
    x12 = lbind(greater, THREE)
    x13 = compose(x12, x11)
    x14 = sfilter(x3, x13)
    O = fill(x8, ZERO, x14)
    return O



def solve_9172f3a0_8e1813be(I):
    x1 = upscale(I, THREE)
    x2 = replace(x1, FIVE, ZERO)
    x3 = objects(x2, T, T, T)
    x4 = first(x3)
    x5 = vline(x4)
    x6 = branch(x5, dmirror, identity)
    x7 = x6(x2)
    x8 = objects(x7, T, T, T)
    x9 = order(x8, uppermost)
    x10 = apply(color, x9)
    x11 = dedupe(x10)
    x12 = size(x11)
    x13 = rbind(repeat, x12)
    x14 = apply(x13, x11)
    O = x6(x14)
    return O



def solve_9172f3a0_bc1d5164(I):
    x1 = upscale(I, THREE)
    x2 = leastcolor(x1)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = crop(x1, TWO_BY_ZERO, THREE_BY_THREE)
    x5 = tojvec(FOUR)
    x6 = crop(x1, x5, THREE_BY_THREE)
    x7 = astuple(TWO, FOUR)
    x8 = crop(x1, x7, THREE_BY_THREE)
    x9 = canvas(ZERO, THREE_BY_THREE)
    x10 = rbind(ofcolor, x2)
    x11 = astuple(x3, x4)
    x12 = astuple(x6, x8)
    x13 = combine(x11, x12)
    x14 = mapply(x10, x13)
    O = fill(x9, x2, x14)
    return O



def solve_9172f3a0_ce602527(I):
    x1 = upscale(I, THREE)
    x2 = vmirror(x1)
    x3 = fgpartition(x2)
    x4 = order(x3, size)
    x5 = last(x4)
    x6 = remove(x5, x4)
    x7 = compose(toindices, normalize)
    x8 = rbind(upscale, TWO)
    x9 = chain(toindices, x8, normalize)
    x10 = x7(x5)
    x11 = rbind(intersection, x10)
    x12 = chain(size, x11, x9)
    x13 = argmax(x6, x12)
    x14 = subgrid(x13, x2)
    O = vmirror(x14)
    return O



def solve_9172f3a0_5c2c9af4(I):
    x1 = upscale(I, THREE)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = center(x3)
    x5 = ulcorner(x3)
    x6 = subtract(x4, x5)
    x7 = multiply(NEG_ONE, NINE)
    x8 = interval(ZERO, NINE, ONE)
    x9 = interval(ZERO, x7, NEG_ONE)
    x10 = lbind(multiply, x6)
    x11 = apply(x10, x8)
    x12 = apply(x10, x9)
    x13 = pair(x11, x12)
    x14 = mapply(box, x13)
    x15 = shift(x14, x4)
    O = fill(x1, x2, x15)
    return O



def solve_9172f3a0_75b8110e(I):
    x1 = upscale(I, THREE)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = bottomhalf(x2)
    x6 = tophalf(x3)
    x7 = bottomhalf(x3)
    x8 = rbind(ofcolor, ZERO)
    x9 = fork(difference, asindices, x8)
    x10 = fork(toobject, x9, identity)
    x11 = x10(x6)
    x12 = x10(x5)
    x13 = x10(x7)
    x14 = paint(x4, x13)
    x15 = paint(x14, x12)
    O = paint(x15, x11)
    return O



def solve_9172f3a0_c3f564a4(I):
    x1 = upscale(I, THREE)
    x2 = asindices(x1)
    x3 = dmirror(x1)
    x4 = invert(NINE)
    x5 = papply(pair, x1, x3)
    x6 = lbind(apply, maximum)
    x7 = apply(x6, x5)
    x8 = ofcolor(x7, ZERO)
    x9 = difference(x2, x8)
    x10 = toobject(x9, x7)
    x11 = interval(x4, NINE, ONE)
    x12 = interval(NINE, x4, NEG_ONE)
    x13 = pair(x11, x12)
    x14 = lbind(shift, x10)
    x15 = mapply(x14, x13)
    O = paint(x7, x15)
    return O



def solve_9172f3a0_1a07d186(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = mapply(x12, x8)
    x14 = merge(x3)
    x15 = cover(x1, x14)
    O = paint(x15, x13)
    return O



def solve_9172f3a0_d687bc17(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = merge(x3)
    x14 = mapply(x12, x8)
    x15 = cover(x1, x13)
    O = paint(x15, x14)
    return O



def solve_9172f3a0_9af7a82c(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, F)
    x3 = order(x2, size)
    x4 = valmax(x2, size)
    x5 = rbind(astuple, ONE)
    x6 = lbind(subtract, x4)
    x7 = compose(x5, size)
    x8 = chain(x5, x6, size)
    x9 = fork(canvas, color, x7)
    x10 = lbind(canvas, ZERO)
    x11 = compose(x10, x8)
    x12 = fork(vconcat, x9, x11)
    x13 = compose(cmirror, x12)
    x14 = apply(x13, x3)
    x15 = merge(x14)
    O = cmirror(x15)
    return O



def solve_9172f3a0_ef135b50(I):
    x1 = upscale(I, THREE)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, ZERO)
    x4 = product(x2, x2)
    x5 = power(first, TWO)
    x6 = compose(first, last)
    x7 = fork(equality, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = fork(connect, first, last)
    x10 = mapply(x9, x8)
    x11 = intersection(x10, x3)
    x12 = fill(x1, NINE, x11)
    x13 = trim(x12)
    x14 = asobject(x13)
    x15 = shift(x14, UNITY)
    O = paint(x1, x15)
    return O



def solve_9172f3a0_cbded52d(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = product(x3, x3)
    x5 = fork(vmatching, first, last)
    x6 = fork(hmatching, first, last)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = compose(center, first)
    x10 = compose(center, last)
    x11 = fork(connect, x9, x10)
    x12 = chain(initset, center, x11)
    x13 = compose(color, first)
    x14 = fork(recolor, x13, x12)
    x15 = mapply(x14, x8)
    O = paint(x1, x15)
    return O



def solve_9172f3a0_e26a3af2(I):
    x1 = upscale(I, THREE)
    x2 = rot90(x1)
    x3 = apply(mostcommon, x1)
    x4 = apply(mostcommon, x2)
    x5 = repeat(x3, ONE)
    x6 = repeat(x4, ONE)
    x7 = compose(size, dedupe)
    x8 = x7(x3)
    x9 = x7(x4)
    x10 = greater(x9, x8)
    x11 = branch(x10, height, width)
    x12 = x11(x1)
    x13 = rot90(x5)
    x14 = branch(x10, x6, x13)
    x15 = branch(x10, vupscale, hupscale)
    O = x15(x14, x12)
    return O



def solve_9172f3a0_6cf79266(I):
    x1 = upscale(I, THREE)
    x2 = ofcolor(x1, ZERO)
    x3 = astuple(ZERO, ORIGIN)
    x4 = initset(x3)
    x5 = upscale(x4, THREE)
    x6 = toindices(x5)
    x7 = lbind(shift, x6)
    x8 = rbind(difference, x2)
    x9 = chain(size, x8, x7)
    x10 = matcher(x9, ZERO)
    x11 = lbind(add, NEG_UNITY)
    x12 = chain(flip, x10, x11)
    x13 = fork(both, x10, x12)
    x14 = sfilter(x2, x13)
    x15 = mapply(x7, x14)
    O = fill(x1, ONE, x15)
    return O



def solve_9172f3a0_a87f7484(I):
    x1 = upscale(I, THREE)
    x2 = numcolors(x1)
    x3 = portrait(x1)
    x4 = branch(x3, dmirror, identity)
    x5 = x4(x1)
    x6 = decrement(x2)
    x7 = hsplit(x5, x6)
    x8 = rbind(ofcolor, ZERO)
    x9 = apply(x8, x7)
    x10 = leastcommon(x9)
    x11 = matcher(x8, x10)
    x12 = extract(x7, x11)
    O = x4(x12)
    return O



def solve_9172f3a0_4093f84a(I):
    x1 = upscale(I, THREE)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, FIVE)
    x4 = ofcolor(x1, FIVE)
    x5 = portrait(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x3)
    x8 = lefthalf(x7)
    x9 = righthalf(x7)
    x10 = rbind(order, identity)
    x11 = rbind(order, invert)
    x12 = apply(x10, x8)
    x13 = apply(x11, x9)
    x14 = hconcat(x12, x13)
    O = x6(x14)
    return O



def solve_9172f3a0_ba26e723(I):
    x1 = upscale(I, THREE)
    x2 = rbind(divide, THREE)
    x3 = rbind(multiply, THREE)
    x4 = compose(x3, x2)
    x5 = fork(equality, identity, x4)
    x6 = compose(x5, last)
    x7 = ofcolor(x1, FOUR)
    x8 = sfilter(x7, x6)
    O = fill(x1, SIX, x8)
    return O



def solve_9172f3a0_29c11459(I):
    x1 = upscale(I, THREE)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = objects(x3, T, F, T)
    x5 = objects(x2, T, F, T)
    x6 = compose(hfrontier, center)
    x7 = fork(recolor, color, x6)
    x8 = mapply(x7, x5)
    x9 = paint(x2, x8)
    x10 = mapply(x7, x4)
    x11 = paint(x1, x10)
    x12 = objects(x9, T, F, T)
    x13 = apply(urcorner, x12)
    x14 = shift(x13, RIGHT)
    x15 = merge(x12)
    x16 = paint(x11, x15)
    O = fill(x16, FIVE, x14)
    return O



def solve_9172f3a0_963e52fc(I):
    x1 = upscale(I, THREE)
    x2 = width(x1)
    x3 = asobject(x1)
    x4 = hperiod(x3)
    x5 = height(x3)
    x6 = astuple(x5, x4)
    x7 = ulcorner(x3)
    x8 = crop(x1, x7, x6)
    x9 = rot90(x8)
    x10 = double(x2)
    x11 = divide(x10, x4)
    x12 = increment(x11)
    x13 = repeat(x9, x12)
    x14 = merge(x13)
    x15 = rot270(x14)
    x16 = astuple(x5, x10)
    O = crop(x15, ORIGIN, x16)
    return O



def solve_9172f3a0_1f0c79e5(I):
    x1 = upscale(I, THREE)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = leastcolor(x3)
    x5 = ofcolor(x3, x4)
    x6 = combine(x2, x5)
    x7 = recolor(x4, x6)
    x8 = compose(decrement, double)
    x9 = ulcorner(x6)
    x10 = invert(x9)
    x11 = shift(x2, x10)
    x12 = apply(x8, x11)
    x13 = interval(ZERO, NINE, ONE)
    x14 = prapply(multiply, x12, x13)
    x15 = lbind(shift, x7)
    x16 = mapply(x15, x14)
    O = paint(x1, x16)
    return O



def solve_9172f3a0_e48d4e1a(I):
    x1 = upscale(I, THREE)
    x2 = shape(x1)
    x3 = ofcolor(x1, FIVE)
    x4 = fill(x1, ZERO, x3)
    x5 = leastcolor(x4)
    x6 = size(x3)
    x7 = ofcolor(x1, x5)
    x8 = rbind(toobject, x1)
    x9 = rbind(colorcount, x5)
    x10 = chain(x9, x8, dneighbors)
    x11 = matcher(x10, FOUR)
    x12 = extract(x7, x11)
    x13 = multiply(DOWN_LEFT, x6)
    x14 = add(x13, x12)
    x15 = canvas(ZERO, x2)
    x16 = fork(combine, vfrontier, hfrontier)
    x17 = x16(x14)
    O = fill(x15, x5, x17)
    return O



def solve_9172f3a0_6773b310(I):
    x1 = upscale(I, THREE)
    x2 = compress(x1)
    x3 = neighbors(ORIGIN)
    x4 = insert(ORIGIN, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = astuple(FOUR, FOUR)
    x8 = shift(x6, x7)
    x9 = fork(insert, identity, neighbors)
    x10 = apply(x9, x8)
    x11 = rbind(toobject, x2)
    x12 = apply(x11, x10)
    x13 = rbind(colorcount, SIX)
    x14 = matcher(x13, TWO)
    x15 = mfilter(x12, x14)
    x16 = fill(x2, ONE, x15)
    x17 = replace(x16, SIX, ZERO)
    O = downscale(x17, THREE)
    return O



def solve_9172f3a0_780d0b14(I):
    x1 = upscale(I, THREE)
    x2 = asindices(x1)
    x3 = objects(x1, T, T, T)
    x4 = rbind(greater, TWO)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = totuple(x6)
    x8 = apply(color, x7)
    x9 = apply(center, x7)
    x10 = pair(x8, x9)
    x11 = fill(x1, ZERO, x2)
    x12 = paint(x11, x10)
    x13 = rbind(greater, ONE)
    x14 = compose(dedupe, totuple)
    x15 = chain(x13, size, x14)
    x16 = sfilter(x12, x15)
    x17 = rot90(x16)
    x18 = sfilter(x17, x15)
    O = rot270(x18)
    return O



def solve_9172f3a0_2204b7a8(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sfilter, x2)
    x4 = compose(size, x3)
    x5 = x4(vline)
    x6 = x4(hline)
    x7 = greater(x5, x6)
    x8 = branch(x7, lefthalf, tophalf)
    x9 = branch(x7, righthalf, bottomhalf)
    x10 = branch(x7, hconcat, vconcat)
    x11 = x8(x1)
    x12 = x9(x1)
    x13 = index(x11, ORIGIN)
    x14 = shape(x12)
    x15 = decrement(x14)
    x16 = index(x12, x15)
    x17 = replace(x11, THREE, x13)
    x18 = replace(x12, THREE, x16)
    O = x10(x17, x18)
    return O



def solve_9172f3a0_d9f24cd1(I):
    x1 = upscale(I, THREE)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, FIVE)
    x4 = prapply(connect, x2, x3)
    x5 = mfilter(x4, vline)
    x6 = underfill(x1, TWO, x5)
    x7 = matcher(numcolors, TWO)
    x8 = objects(x6, F, F, T)
    x9 = sfilter(x8, x7)
    x10 = difference(x8, x9)
    x11 = colorfilter(x10, TWO)
    x12 = mapply(toindices, x11)
    x13 = apply(urcorner, x9)
    x14 = shift(x13, UNITY)
    x15 = rbind(shoot, UP)
    x16 = mapply(x15, x14)
    x17 = fill(x6, TWO, x16)
    x18 = mapply(vfrontier, x12)
    O = fill(x17, TWO, x18)
    return O



def solve_9172f3a0_b782dc8a(I):
    x1 = upscale(I, THREE)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = ofcolor(x1, x2)
    x5 = first(x4)
    x6 = dneighbors(x5)
    x7 = toobject(x6, x1)
    x8 = mostcolor(x7)
    x9 = ofcolor(x1, x8)
    x10 = colorfilter(x3, ZERO)
    x11 = rbind(adjacent, x9)
    x12 = mfilter(x10, x11)
    x13 = toindices(x12)
    x14 = rbind(manhattan, x4)
    x15 = chain(even, x14, initset)
    x16 = sfilter(x13, x15)
    x17 = difference(x13, x16)
    x18 = fill(x1, x2, x16)
    O = fill(x18, x8, x17)
    return O



def solve_9172f3a0_673ef223(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, EIGHT)
    x4 = replace(x1, EIGHT, FOUR)
    x5 = colorfilter(x2, TWO)
    x6 = argmin(x2, uppermost)
    x7 = apply(uppermost, x5)
    x8 = fork(subtract, maximum, minimum)
    x9 = x8(x7)
    x10 = toivec(x9)
    x11 = leftmost(x6)
    x12 = equality(x11, ZERO)
    x13 = branch(x12, LEFT, RIGHT)
    x14 = rbind(shoot, x13)
    x15 = mapply(x14, x3)
    x16 = underfill(x4, EIGHT, x15)
    x17 = shift(x3, x10)
    x18 = mapply(hfrontier, x17)
    O = underfill(x16, EIGHT, x18)
    return O



def solve_9172f3a0_f5b8619d(I):
    x1 = upscale(I, THREE)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = mapply(vfrontier, x3)
    x5 = underfill(x1, EIGHT, x4)
    x6 = hconcat(x5, x5)
    O = vconcat(x6, x6)
    return O



def solve_9172f3a0_f8c80d96(I):
    x1 = upscale(I, THREE)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = colorfilter(x3, x2)
    x5 = argmax(x4, size)
    x6 = argmin(x3, width)
    x7 = size(x6)
    x8 = equality(x7, ONE)
    x9 = branch(x8, identity, outbox)
    x10 = chain(outbox, outbox, x9)
    x11 = power(x10, TWO)
    x12 = power(x10, THREE)
    x13 = x10(x5)
    x14 = x11(x5)
    x15 = x12(x5)
    x16 = fill(x1, x2, x13)
    x17 = fill(x16, x2, x14)
    x18 = fill(x17, x2, x15)
    O = replace(x18, ZERO, FIVE)
    return O



def solve_9172f3a0_ecdecbb3(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = colorfilter(x2, EIGHT)
    x5 = product(x3, x4)
    x6 = fork(gravitate, first, last)
    x7 = compose(crement, x6)
    x8 = compose(center, first)
    x9 = fork(add, x8, x7)
    x10 = fork(connect, x8, x9)
    x11 = apply(x10, x5)
    x12 = lbind(greater, EIGHT)
    x13 = compose(x12, size)
    x14 = mfilter(x11, x13)
    x15 = fill(x1, TWO, x14)
    x16 = apply(x9, x5)
    x17 = intersection(x14, x16)
    x18 = mapply(neighbors, x17)
    O = fill(x15, EIGHT, x18)
    return O



def solve_9172f3a0_e5062a87(I):
    x1 = upscale(I, THREE)
    x2 = ofcolor(x1, TWO)
    x3 = recolor(ZERO, x2)
    x4 = normalize(x3)
    x5 = occurrences(x1, x3)
    x6 = lbind(shift, x4)
    x7 = apply(x6, x5)
    x8 = astuple(ONE, THREE)
    x9 = astuple(FIVE, ONE)
    x10 = astuple(TWO, SIX)
    x11 = initset(x8)
    x12 = insert(x9, x11)
    x13 = insert(x10, x12)
    x14 = rbind(contained, x13)
    x15 = chain(flip, x14, ulcorner)
    x16 = sfilter(x7, x15)
    x17 = merge(x16)
    x18 = recolor(TWO, x17)
    O = paint(x1, x18)
    return O



def solve_9172f3a0_a8d7556c(I):
    x1 = upscale(I, THREE)
    x2 = initset(ORIGIN)
    x3 = recolor(ZERO, x2)
    x4 = upscale(x3, TWO)
    x5 = occurrences(x1, x4)
    x6 = lbind(shift, x4)
    x7 = mapply(x6, x5)
    x8 = fill(x1, TWO, x7)
    x9 = add(SIX, SIX)
    x10 = astuple(EIGHT, x9)
    x11 = index(x8, x10)
    x12 = equality(x11, TWO)
    x13 = initset(x10)
    x14 = add(x10, DOWN)
    x15 = insert(x14, x13)
    x16 = toobject(x15, x8)
    x17 = toobject(x15, x1)
    x18 = branch(x12, x17, x16)
    O = paint(x8, x18)
    return O



def solve_9172f3a0_834ec97d(I):
    x1 = upscale(I, THREE)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = shift(x4, DOWN)
    x6 = fill(x1, ZERO, x4)
    x7 = paint(x6, x5)
    x8 = uppermost(x5)
    x9 = leftmost(x5)
    x10 = subtract(x9, TEN)
    x11 = add(x9, TEN)
    x12 = interval(x10, x11, TWO)
    x13 = lbind(greater, x8)
    x14 = compose(x13, first)
    x15 = rbind(contained, x12)
    x16 = compose(x15, last)
    x17 = sfilter(x2, x14)
    x18 = sfilter(x17, x16)
    O = fill(x7, FOUR, x18)
    return O



def solve_9172f3a0_90f3ed37(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, uppermost)
    x4 = first(x3)
    x5 = remove(x4, x3)
    x6 = normalize(x4)
    x7 = lbind(shift, x6)
    x8 = compose(x7, ulcorner)
    x9 = interval(TWO, NEG_ONE, NEG_ONE)
    x10 = apply(tojvec, x9)
    x11 = rbind(apply, x10)
    x12 = lbind(compose, size)
    x13 = lbind(lbind, intersection)
    x14 = compose(x12, x13)
    x15 = lbind(lbind, shift)
    x16 = chain(x11, x15, x8)
    x17 = fork(argmax, x16, x14)
    x18 = mapply(x17, x5)
    O = underfill(x1, ONE, x18)
    return O



def solve_9172f3a0_8403a5d5(I):
    x1 = upscale(I, THREE)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = color(x4)
    x6 = leftmost(x4)
    x7 = interval(x6, TEN, TWO)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = sfilter(x2, x9)
    x11 = increment(x6)
    x12 = add(x6, THREE)
    x13 = interval(x11, TEN, FOUR)
    x14 = interval(x12, TEN, FOUR)
    x15 = lbind(astuple, NINE)
    x16 = apply(tojvec, x13)
    x17 = apply(x15, x14)
    x18 = fill(x1, x5, x10)
    x19 = fill(x18, FIVE, x16)
    O = fill(x19, FIVE, x17)
    return O



def solve_9172f3a0_539a4f51(I):
    x1 = upscale(I, THREE)
    x2 = shape(x1)
    x3 = index(x1, ORIGIN)
    x4 = colorcount(x1, ZERO)
    x5 = decrement(x2)
    x6 = positive(x4)
    x7 = branch(x6, x5, x2)
    x8 = crop(x1, ORIGIN, x7)
    x9 = width(x8)
    x10 = astuple(ONE, x9)
    x11 = crop(x8, ORIGIN, x10)
    x12 = vupscale(x11, x9)
    x13 = dmirror(x12)
    x14 = hconcat(x8, x12)
    x15 = hconcat(x13, x8)
    x16 = vconcat(x14, x15)
    x17 = asobject(x16)
    x18 = multiply(UNITY, TEN)
    x19 = canvas(x3, x18)
    O = paint(x19, x17)
    return O



def solve_9172f3a0_3bdb4ada(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = compose(increment, ulcorner)
    x5 = compose(decrement, lrcorner)
    x6 = apply(x4, x3)
    x7 = apply(x5, x3)
    x8 = papply(connect, x6, x7)
    x9 = apply(last, x6)
    x10 = compose(last, first)
    x11 = power(last, TWO)
    x12 = fork(subtract, x10, x11)
    x13 = compose(even, x12)
    x14 = lbind(rbind, astuple)
    x15 = lbind(compose, x13)
    x16 = compose(x15, x14)
    x17 = fork(sfilter, first, x16)
    x18 = pair(x8, x9)
    x19 = mapply(x17, x18)
    O = fill(x1, ZERO, x19)
    return O



def solve_9172f3a0_ec883f72(I):
    x1 = upscale(I, THREE)
    x2 = palette(x1)
    x3 = objects(x1, T, T, T)
    x4 = fork(multiply, height, width)
    x5 = argmax(x3, x4)
    x6 = color(x5)
    x7 = remove(ZERO, x2)
    x8 = other(x7, x6)
    x9 = lrcorner(x5)
    x10 = llcorner(x5)
    x11 = urcorner(x5)
    x12 = ulcorner(x5)
    x13 = shoot(x9, UNITY)
    x14 = shoot(x10, DOWN_LEFT)
    x15 = shoot(x11, UP_RIGHT)
    x16 = shoot(x12, NEG_UNITY)
    x17 = combine(x13, x14)
    x18 = combine(x15, x16)
    x19 = combine(x17, x18)
    O = underfill(x1, x8, x19)
    return O



def solve_9172f3a0_2bee17df(I):
    x1 = upscale(I, THREE)
    x2 = height(x1)
    x3 = rot90(x1)
    x4 = subtract(x2, TWO)
    x5 = interval(ZERO, x2, ONE)
    x6 = rbind(colorcount, ZERO)
    x7 = matcher(x6, x4)
    x8 = rbind(vsplit, x2)
    x9 = lbind(apply, x7)
    x10 = compose(x9, x8)
    x11 = x10(x1)
    x12 = pair(x5, x11)
    x13 = sfilter(x12, last)
    x14 = mapply(hfrontier, x13)
    x15 = x10(x3)
    x16 = pair(x15, x5)
    x17 = sfilter(x16, first)
    x18 = mapply(vfrontier, x17)
    x19 = astuple(x14, x18)
    x20 = merge(x19)
    O = underfill(x1, THREE, x20)
    return O



def solve_9172f3a0_e8dc4411(I):
    x1 = upscale(I, THREE)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, ZERO)
    x4 = ofcolor(x1, x2)
    x5 = position(x3, x4)
    x6 = fork(connect, ulcorner, lrcorner)
    x7 = x6(x3)
    x8 = intersection(x3, x7)
    x9 = equality(x7, x8)
    x10 = fork(subtract, identity, crement)
    x11 = fork(add, identity, x10)
    x12 = branch(x9, identity, x11)
    x13 = shape(x3)
    x14 = multiply(x13, x5)
    x15 = apply(x12, x14)
    x16 = interval(ONE, FIVE, ONE)
    x17 = lbind(multiply, x15)
    x18 = apply(x17, x16)
    x19 = lbind(shift, x3)
    x20 = mapply(x19, x18)
    O = fill(x1, x2, x20)
    return O



def solve_9172f3a0_29623171(I):
    x1 = upscale(I, THREE)
    x2 = leastcolor(x1)
    x3 = interval(ZERO, NINE, FOUR)
    x4 = product(x3, x3)
    x5 = rbind(add, THREE)
    x6 = rbind(interval, ONE)
    x7 = fork(x6, identity, x5)
    x8 = compose(x7, first)
    x9 = compose(x7, last)
    x10 = fork(product, x8, x9)
    x11 = rbind(colorcount, x2)
    x12 = rbind(toobject, x1)
    x13 = compose(x11, x12)
    x14 = apply(x10, x4)
    x15 = valmax(x14, x13)
    x16 = matcher(x13, x15)
    x17 = compose(flip, x16)
    x18 = mfilter(x14, x16)
    x19 = mfilter(x14, x17)
    x20 = fill(x1, x2, x18)
    O = fill(x20, ZERO, x19)
    return O



def solve_9172f3a0_b0c4d837(I):
    x1 = upscale(I, THREE)
    x2 = ofcolor(x1, FIVE)
    x3 = ofcolor(x1, EIGHT)
    x4 = height(x2)
    x5 = decrement(x4)
    x6 = height(x3)
    x7 = subtract(x5, x6)
    x8 = astuple(ONE, x7)
    x9 = canvas(EIGHT, x8)
    x10 = subtract(SIX, x7)
    x11 = astuple(ONE, x10)
    x12 = canvas(ZERO, x11)
    x13 = hconcat(x9, x12)
    x14 = hsplit(x13, TWO)
    x15 = first(x14)
    x16 = last(x14)
    x17 = vmirror(x16)
    x18 = vconcat(x15, x17)
    x19 = astuple(ONE, THREE)
    x20 = canvas(ZERO, x19)
    O = vconcat(x18, x20)
    return O



def solve_9172f3a0_8731374e(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = height(x4)
    x6 = width(x4)
    x7 = vsplit(x4, x5)
    x8 = lbind(greater, FOUR)
    x9 = compose(x8, numcolors)
    x10 = sfilter(x7, x9)
    x11 = merge(x10)
    x12 = rot90(x11)
    x13 = vsplit(x12, x6)
    x14 = sfilter(x13, x9)
    x15 = merge(x14)
    x16 = rot270(x15)
    x17 = leastcolor(x16)
    x18 = ofcolor(x16, x17)
    x19 = fork(combine, vfrontier, hfrontier)
    x20 = mapply(x19, x18)
    O = fill(x16, x17, x20)
    return O



def solve_9172f3a0_db93a21d(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, NINE)
    x4 = colorfilter(x2, NINE)
    x5 = rbind(shoot, DOWN)
    x6 = mapply(x5, x3)
    x7 = underfill(x1, ONE, x6)
    x8 = compose(halve, width)
    x9 = rbind(greater, ONE)
    x10 = compose(x9, x8)
    x11 = matcher(x8, THREE)
    x12 = power(outbox, TWO)
    x13 = power(outbox, THREE)
    x14 = mapply(outbox, x4)
    x15 = sfilter(x4, x10)
    x16 = sfilter(x4, x11)
    x17 = mapply(x12, x15)
    x18 = mapply(x13, x16)
    x19 = fill(x7, THREE, x14)
    x20 = fill(x19, THREE, x17)
    O = fill(x20, THREE, x18)
    return O



def solve_9172f3a0_53b68214(I):
    x1 = upscale(I, THREE)
    x2 = width(x1)
    x3 = objects(x1, T, T, T)
    x4 = first(x3)
    x5 = vperiod(x4)
    x6 = toivec(x5)
    x7 = interval(ZERO, NINE, ONE)
    x8 = lbind(multiply, x6)
    x9 = apply(x8, x7)
    x10 = lbind(shift, x4)
    x11 = mapply(x10, x9)
    x12 = astuple(x2, x2)
    x13 = portrait(x4)
    x14 = shape(x4)
    x15 = add(DOWN, x14)
    x16 = decrement(x15)
    x17 = shift(x4, x16)
    x18 = branch(x13, x11, x17)
    x19 = canvas(ZERO, x12)
    x20 = paint(x19, x4)
    O = paint(x20, x18)
    return O



def solve_9172f3a0_d6ad076f(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = argmin(x2, size)
    x4 = argmax(x2, size)
    x5 = vmatching(x3, x4)
    x6 = branch(x5, DOWN, RIGHT)
    x7 = branch(x5, uppermost, leftmost)
    x8 = valmax(x2, x7)
    x9 = x7(x3)
    x10 = equality(x8, x9)
    x11 = branch(x10, NEG_ONE, ONE)
    x12 = multiply(x6, x11)
    x13 = inbox(x3)
    x14 = rbind(shoot, x12)
    x15 = mapply(x14, x13)
    x16 = underfill(x1, EIGHT, x15)
    x17 = objects(x16, T, F, T)
    x18 = colorfilter(x17, EIGHT)
    x19 = rbind(bordering, x1)
    x20 = mfilter(x18, x19)
    O = cover(x16, x20)
    return O



def solve_9172f3a0_6cdd2623(I):
    x1 = upscale(I, THREE)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = prapply(connect, x3, x3)
    x5 = fgpartition(x1)
    x6 = merge(x5)
    x7 = cover(x1, x6)
    x8 = fork(either, hline, vline)
    x9 = box(x6)
    x10 = rbind(difference, x9)
    x11 = chain(positive, size, x10)
    x12 = fork(both, x8, x11)
    x13 = mfilter(x4, x12)
    O = fill(x7, x2, x13)
    return O



def solve_9172f3a0_cdecee7f(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = astuple(ONE, THREE)
    x4 = size(x2)
    x5 = order(x2, leftmost)
    x6 = apply(color, x5)
    x7 = rbind(canvas, UNITY)
    x8 = apply(x7, x6)
    x9 = merge(x8)
    x10 = dmirror(x9)
    x11 = subtract(NINE, x4)
    x12 = astuple(ONE, x11)
    x13 = canvas(ZERO, x12)
    x14 = hconcat(x10, x13)
    x15 = hsplit(x14, THREE)
    x16 = merge(x15)
    x17 = crop(x16, ORIGIN, x3)
    x18 = crop(x16, DOWN, x3)
    x19 = crop(x16, TWO_BY_ZERO, x3)
    x20 = vmirror(x18)
    x21 = vconcat(x17, x20)
    O = vconcat(x21, x19)
    return O



def solve_9172f3a0_3345333e(I):
    x1 = upscale(I, THREE)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = cover(x1, x3)
    x5 = leastcolor(x4)
    x6 = ofcolor(x4, x5)
    x7 = neighbors(ORIGIN)
    x8 = mapply(neighbors, x7)
    x9 = vmirror(x6)
    x10 = lbind(shift, x9)
    x11 = apply(x10, x8)
    x12 = rbind(intersection, x6)
    x13 = compose(size, x12)
    x14 = argmax(x11, x13)
    O = fill(x4, x5, x14)
    return O



def solve_9172f3a0_b190f7f5(I):
    x1 = upscale(I, THREE)
    x2 = portrait(x1)
    x3 = branch(x2, vsplit, hsplit)
    x4 = x3(x1, TWO)
    x5 = argmin(x4, numcolors)
    x6 = argmax(x4, numcolors)
    x7 = width(x6)
    x8 = rbind(repeat, x7)
    x9 = chain(dmirror, merge, x8)
    x10 = upscale(x6, x7)
    x11 = x9(x5)
    x12 = x9(x11)
    x13 = ofcolor(x12, ZERO)
    O = fill(x10, ZERO, x13)
    return O



def solve_9172f3a0_caa06a1f(I):
    x1 = upscale(I, THREE)
    x2 = asobject(x1)
    x3 = shape(x1)
    x4 = decrement(x3)
    x5 = index(x1, x4)
    x6 = double(x3)
    x7 = canvas(x5, x6)
    x8 = paint(x7, x2)
    x9 = objects(x8, F, F, T)
    x10 = first(x9)
    x11 = shift(x10, LEFT)
    x12 = vperiod(x11)
    x13 = hperiod(x11)
    x14 = neighbors(ORIGIN)
    x15 = lbind(mapply, neighbors)
    x16 = power(x15, TWO)
    x17 = x16(x14)
    x18 = astuple(x12, x13)
    x19 = lbind(multiply, x18)
    x20 = apply(x19, x17)
    x21 = lbind(shift, x11)
    x22 = mapply(x21, x20)
    O = paint(x1, x22)
    return O



def solve_9172f3a0_e21d9049(I):
    x1 = upscale(I, THREE)
    x2 = asindices(x1)
    x3 = leastcolor(x1)
    x4 = objects(x1, T, F, T)
    x5 = ofcolor(x1, x3)
    x6 = merge(x4)
    x7 = shape(x6)
    x8 = neighbors(ORIGIN)
    x9 = lbind(mapply, neighbors)
    x10 = power(x9, TWO)
    x11 = x10(x8)
    x12 = lbind(multiply, x7)
    x13 = lbind(shift, x6)
    x14 = apply(x12, x11)
    x15 = mapply(x13, x14)
    x16 = lbind(hmatching, x5)
    x17 = lbind(vmatching, x5)
    x18 = fork(either, x16, x17)
    x19 = compose(x18, initset)
    x20 = paint(x1, x15)
    x21 = sfilter(x2, x19)
    x22 = difference(x2, x21)
    O = cover(x20, x22)
    return O



def solve_9172f3a0_d89b689b(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, EIGHT)
    x4 = sizefilter(x2, ONE)
    x5 = apply(initset, x3)
    x6 = lbind(argmin, x5)
    x7 = lbind(rbind, manhattan)
    x8 = compose(x6, x7)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x4)
    x11 = merge(x4)
    x12 = cover(x1, x11)
    O = paint(x12, x10)
    return O



def solve_9172f3a0_746b3537(I):
    x1 = upscale(I, THREE)
    x2 = chain(size, dedupe, first)
    x3 = x2(x1)
    x4 = equality(x3, ONE)
    x5 = branch(x4, dmirror, identity)
    x6 = x5(x1)
    x7 = objects(x6, T, F, F)
    x8 = order(x7, leftmost)
    x9 = apply(color, x8)
    x10 = repeat(x9, ONE)
    O = x5(x10)
    return O



def solve_9172f3a0_63613498(I):
    x1 = upscale(I, THREE)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = ofcolor(x2, ZERO)
    x4 = asindices(x2)
    x5 = difference(x4, x3)
    x6 = normalize(x5)
    x7 = objects(x1, T, F, T)
    x8 = compose(toindices, normalize)
    x9 = matcher(x8, x6)
    x10 = mfilter(x7, x9)
    x11 = fill(x1, FIVE, x10)
    x12 = asobject(x2)
    O = paint(x11, x12)
    return O



def solve_9172f3a0_06df4c85(I):
    x1 = upscale(I, THREE)
    x2 = partition(x1)
    x3 = mostcolor(x1)
    x4 = ofcolor(x1, x3)
    x5 = colorfilter(x2, ZERO)
    x6 = argmax(x2, size)
    x7 = difference(x2, x5)
    x8 = remove(x6, x7)
    x9 = merge(x8)
    x10 = product(x9, x9)
    x11 = power(first, TWO)
    x12 = compose(first, last)
    x13 = fork(equality, x11, x12)
    x14 = sfilter(x10, x13)
    x15 = compose(last, first)
    x16 = power(last, TWO)
    x17 = fork(connect, x15, x16)
    x18 = fork(recolor, color, x17)
    x19 = apply(x18, x14)
    x20 = fork(either, vline, hline)
    x21 = mfilter(x19, x20)
    x22 = paint(x1, x21)
    O = fill(x22, x3, x4)
    return O



def solve_9172f3a0_4522001f(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = toindices(x3)
    x5 = contained(ZERO_BY_TWO, x4)
    x6 = contained(TWO_BY_TWO, x4)
    x7 = contained(TWO_BY_ZERO, x4)
    x8 = astuple(NINE, NINE)
    x9 = canvas(ZERO, x8)
    x10 = astuple(THREE, ORIGIN)
    x11 = initset(x10)
    x12 = upscale(x11, TWO)
    x13 = upscale(x12, TWO)
    x14 = shape(x13)
    x15 = shift(x13, x14)
    x16 = combine(x13, x15)
    x17 = paint(x9, x16)
    x18 = rot90(x17)
    x19 = rot180(x17)
    x20 = rot270(x17)
    x21 = branch(x5, x18, x17)
    x22 = branch(x6, x19, x21)
    O = branch(x7, x20, x22)
    return O



def solve_9172f3a0_eb5a1d5d(I):
    x1 = upscale(I, THREE)
    x2 = compose(dmirror, dedupe)
    x3 = x2(x1)
    x4 = x2(x3)
    x5 = fork(remove, last, identity)
    x6 = compose(hmirror, x5)
    x7 = fork(vconcat, identity, x6)
    x8 = x7(x4)
    x9 = dmirror(x8)
    O = x7(x9)
    return O



def solve_9172f3a0_995c5fa3(I):
    x1 = upscale(I, THREE)
    x2 = hsplit(x1, THREE)
    x3 = astuple(TWO, ONE)
    x4 = rbind(ofcolor, ZERO)
    x5 = compose(ulcorner, x4)
    x6 = compose(size, x4)
    x7 = matcher(x6, ZERO)
    x8 = matcher(x5, UNITY)
    x9 = matcher(x5, DOWN)
    x10 = matcher(x5, x3)
    x11 = rbind(multiply, THREE)
    x12 = power(double, TWO)
    x13 = compose(double, x7)
    x14 = chain(x12, double, x8)
    x15 = compose(x11, x9)
    x16 = compose(x12, x10)
    x17 = fork(add, x13, x14)
    x18 = fork(add, x15, x16)
    x19 = fork(add, x17, x18)
    x20 = rbind(canvas, UNITY)
    x21 = compose(x20, x19)
    x22 = apply(x21, x2)
    x23 = merge(x22)
    O = hupscale(x23, THREE)
    return O



def solve_9172f3a0_36fdfd69(I):
    x1 = upscale(I, THREE)
    x2 = upscale(x1, TWO)
    x3 = objects(x2, T, T, T)
    x4 = colorfilter(x3, TWO)
    x5 = fork(manhattan, first, last)
    x6 = lbind(greater, FIVE)
    x7 = compose(x6, x5)
    x8 = product(x4, x4)
    x9 = sfilter(x8, x7)
    x10 = apply(merge, x9)
    x11 = mapply(delta, x10)
    x12 = fill(x2, FOUR, x11)
    x13 = merge(x4)
    x14 = paint(x12, x13)
    O = downscale(x14, TWO)
    return O



def solve_9172f3a0_0a938d79(I):
    x1 = upscale(I, THREE)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = x3(x1)
    x5 = fgpartition(x4)
    x6 = merge(x5)
    x7 = chain(double, decrement, width)
    x8 = x7(x6)
    x9 = compose(vfrontier, tojvec)
    x10 = lbind(mapply, x9)
    x11 = rbind(interval, x8)
    x12 = width(x4)
    x13 = rbind(x11, x12)
    x14 = chain(x10, x13, leftmost)
    x15 = fork(recolor, color, x14)
    x16 = mapply(x15, x5)
    x17 = paint(x4, x16)
    O = x3(x17)
    return O



def solve_9172f3a0_045e512c(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = lbind(shift, x3)
    x6 = lbind(mapply, x5)
    x7 = double(TEN)
    x8 = interval(FOUR, x7, FOUR)
    x9 = rbind(apply, x8)
    x10 = lbind(position, x3)
    x11 = lbind(rbind, multiply)
    x12 = chain(x9, x11, x10)
    x13 = compose(x6, x12)
    x14 = fork(recolor, color, x13)
    x15 = mapply(x14, x4)
    O = paint(x1, x15)
    return O



def solve_9172f3a0_82819916(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = normalize(x3)
    x6 = compose(last, last)
    x7 = rbind(argmin, x6)
    x8 = compose(first, x7)
    x9 = fork(other, palette, x8)
    x10 = x8(x5)
    x11 = matcher(first, x10)
    x12 = sfilter(x5, x11)
    x13 = difference(x5, x12)
    x14 = compose(toivec, uppermost)
    x15 = lbind(shift, x12)
    x16 = lbind(shift, x13)
    x17 = compose(x15, x14)
    x18 = compose(x16, x14)
    x19 = fork(recolor, x8, x17)
    x20 = fork(recolor, x9, x18)
    x21 = fork(combine, x19, x20)
    x22 = mapply(x21, x4)
    O = paint(x1, x22)
    return O



def solve_9172f3a0_99fa7670(I):
    x1 = upscale(I, THREE)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x3)
    x8 = paint(x1, x7)
    x9 = add(x2, DOWN_LEFT)
    x10 = initset(x9)
    x11 = recolor(ZERO, x10)
    x12 = objects(x8, T, F, T)
    x13 = insert(x11, x12)
    x14 = order(x13, uppermost)
    x15 = first(x14)
    x16 = remove(x11, x14)
    x17 = remove(x15, x14)
    x18 = compose(lrcorner, first)
    x19 = compose(lrcorner, last)
    x20 = fork(connect, x18, x19)
    x21 = compose(color, first)
    x22 = fork(recolor, x21, x20)
    x23 = pair(x16, x17)
    x24 = mapply(x22, x23)
    O = underpaint(x8, x24)
    return O



def solve_9172f3a0_72322fa7(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, F, T, T)
    x3 = matcher(numcolors, ONE)
    x4 = sfilter(x2, x3)
    x5 = difference(x2, x4)
    x6 = lbind(matcher, first)
    x7 = compose(x6, mostcolor)
    x8 = fork(sfilter, identity, x7)
    x9 = fork(difference, identity, x8)
    x10 = lbind(occurrences, x1)
    x11 = compose(x10, x8)
    x12 = compose(x10, x9)
    x13 = compose(ulcorner, x9)
    x14 = fork(subtract, ulcorner, x13)
    x15 = lbind(rbind, add)
    x16 = compose(x15, x14)
    x17 = fork(apply, x16, x12)
    x18 = lbind(lbind, shift)
    x19 = compose(x18, normalize)
    x20 = fork(mapply, x19, x11)
    x21 = fork(mapply, x19, x17)
    x22 = mapply(x20, x5)
    x23 = mapply(x21, x5)
    x24 = paint(x1, x22)
    O = paint(x24, x23)
    return O



def solve_9172f3a0_855e0971(I):
    x1 = upscale(I, THREE)
    x2 = frontiers(x1)
    x3 = sfilter(x2, hline)
    x4 = size(x3)
    x5 = positive(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x1)
    x8 = rbind(subgrid, x7)
    x9 = matcher(color, ZERO)
    x10 = compose(flip, x9)
    x11 = partition(x7)
    x12 = sfilter(x11, x10)
    x13 = rbind(ofcolor, ZERO)
    x14 = lbind(mapply, vfrontier)
    x15 = chain(x14, x13, x8)
    x16 = fork(shift, x15, ulcorner)
    x17 = fork(intersection, toindices, x16)
    x18 = mapply(x17, x12)
    x19 = fill(x7, ZERO, x18)
    O = x6(x19)
    return O



def solve_9172f3a0_a78176bb(I):
    x1 = upscale(I, THREE)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = remove(ZERO, x2)
    x5 = other(x4, FIVE)
    x6 = colorfilter(x3, FIVE)
    x7 = lbind(index, x1)
    x8 = compose(x7, urcorner)
    x9 = matcher(x8, FIVE)
    x10 = sfilter(x6, x9)
    x11 = difference(x6, x10)
    x12 = apply(urcorner, x10)
    x13 = apply(llcorner, x11)
    x14 = rbind(add, UP_RIGHT)
    x15 = rbind(add, DOWN_LEFT)
    x16 = apply(x14, x12)
    x17 = apply(x15, x13)
    x18 = rbind(shoot, UNITY)
    x19 = rbind(shoot, NEG_UNITY)
    x20 = fork(combine, x18, x19)
    x21 = mapply(x20, x16)
    x22 = mapply(x20, x17)
    x23 = combine(x21, x22)
    x24 = fill(x1, x5, x23)
    O = replace(x24, FIVE, ZERO)
    return O



def solve_9172f3a0_6d58a25d(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = merge(x4)
    x6 = color(x5)
    x7 = uppermost(x3)
    x8 = rbind(greater, x7)
    x9 = compose(x8, uppermost)
    x10 = rbind(vmatching, x3)
    x11 = fork(both, x10, x9)
    x12 = sfilter(x4, x11)
    x13 = increment(x7)
    x14 = rbind(greater, x13)
    x15 = compose(x14, first)
    x16 = rbind(sfilter, x15)
    x17 = chain(x16, vfrontier, center)
    x18 = mapply(x17, x12)
    O = underfill(x1, x6, x18)
    return O



def solve_9172f3a0_6aa20dc0(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(rbind, upscale)
    x10 = interval(ONE, FOUR, ONE)
    x11 = apply(x9, x10)
    x12 = initset(identity)
    x13 = insert(vmirror, x12)
    x14 = insert(hmirror, x13)
    x15 = insert(cmirror, x14)
    x16 = insert(dmirror, x15)
    x17 = fork(compose, first, last)
    x18 = lbind(occurrences, x1)
    x19 = lbind(lbind, shift)
    x20 = compose(x18, x8)
    x21 = product(x16, x11)
    x22 = apply(x17, x21)
    x23 = rapply(x22, x4)
    x24 = fork(mapply, x19, x20)
    x25 = mapply(x24, x23)
    O = paint(x1, x25)
    return O



def solve_9172f3a0_447fd412(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(rbind, upscale)
    x10 = interval(ONE, FOUR, ONE)
    x11 = apply(x9, x10)
    x12 = lbind(recolor, ZERO)
    x13 = compose(x12, outbox)
    x14 = fork(combine, identity, x13)
    x15 = lbind(occurrences, x1)
    x16 = lbind(rbind, subtract)
    x17 = lbind(apply, increment)
    x18 = lbind(lbind, shift)
    x19 = chain(x16, ulcorner, x8)
    x20 = chain(x15, x14, x8)
    x21 = fork(apply, x19, x20)
    x22 = compose(x17, x21)
    x23 = fork(mapply, x18, x22)
    x24 = rapply(x11, x4)
    x25 = mapply(x23, x24)
    O = paint(x1, x25)
    return O



def solve_9172f3a0_2bcee788(I):
    x1 = upscale(I, THREE)
    x2 = mostcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = replace(x1, x2, THREE)
    x5 = argmax(x3, size)
    x6 = argmin(x3, size)
    x7 = position(x5, x6)
    x8 = first(x7)
    x9 = last(x7)
    x10 = subgrid(x5, x4)
    x11 = hline(x6)
    x12 = hmirror(x10)
    x13 = vmirror(x10)
    x14 = branch(x11, x12, x13)
    x15 = branch(x11, x8, ZERO)
    x16 = branch(x11, ZERO, x9)
    x17 = asobject(x14)
    x18 = matcher(first, THREE)
    x19 = compose(flip, x18)
    x20 = sfilter(x17, x19)
    x21 = ulcorner(x5)
    x22 = shape(x5)
    x23 = astuple(x15, x16)
    x24 = multiply(x22, x23)
    x25 = add(x21, x24)
    x26 = shift(x20, x25)
    O = paint(x4, x26)
    return O



def solve_9172f3a0_f35d900a(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = palette(x1)
    x4 = remove(ZERO, x3)
    x5 = lbind(other, x4)
    x6 = compose(x5, color)
    x7 = fork(recolor, x6, outbox)
    x8 = mapply(x7, x2)
    x9 = mapply(toindices, x2)
    x10 = box(x9)
    x11 = difference(x10, x9)
    x12 = lbind(argmin, x9)
    x13 = rbind(compose, initset)
    x14 = lbind(rbind, manhattan)
    x15 = chain(x13, x14, initset)
    x16 = chain(initset, x12, x15)
    x17 = fork(manhattan, initset, x16)
    x18 = compose(even, x17)
    x19 = sfilter(x11, x18)
    x20 = paint(x1, x8)
    O = fill(x20, FIVE, x19)
    return O



def solve_9172f3a0_0dfd9992(I):
    x1 = upscale(I, THREE)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_9172f3a0_29ec7d0e(I):
    x1 = upscale(I, THREE)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_9172f3a0_469497ad(I):
    x1 = upscale(I, THREE)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    x4 = upscale(x1, x3)
    x5 = objects(x4, F, F, T)
    x6 = argmin(x5, size)
    x7 = ulcorner(x6)
    x8 = llcorner(x6)
    x9 = shoot(x7, NEG_UNITY)
    x10 = shoot(x7, UNITY)
    x11 = shoot(x8, DOWN_LEFT)
    x12 = shoot(x8, UP_RIGHT)
    x13 = combine(x9, x10)
    x14 = combine(x11, x12)
    x15 = combine(x13, x14)
    x16 = underfill(x4, TWO, x15)
    x17 = objects(x16, T, F, T)
    x18 = argmax(x17, lrcorner)
    O = paint(x16, x18)
    return O



def solve_9172f3a0_484b58aa(I):
    x1 = upscale(I, THREE)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, TWO)
    x9 = astuple(TWO, x3)
    x10 = power(decrement, TWO)
    x11 = x10(x2)
    x12 = x10(x3)
    x13 = toivec(x12)
    x14 = tojvec(x11)
    x15 = crop(x1, x13, x9)
    x16 = crop(x1, x14, x8)
    x17 = asobject(x16)
    x18 = asobject(x15)
    x19 = vperiod(x17)
    x20 = hperiod(x18)
    x21 = astuple(x19, x20)
    x22 = lbind(multiply, x21)
    x23 = neighbors(ORIGIN)
    x24 = mapply(neighbors, x23)
    x25 = apply(x22, x24)
    x26 = lbind(shift, x7)
    x27 = mapply(x26, x25)
    O = paint(x1, x27)
    return O



def solve_9172f3a0_3befdf3e(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, F, F, T)
    x3 = leastcolor(x1)
    x4 = palette(x1)
    x5 = remove(ZERO, x4)
    x6 = other(x5, x3)
    x7 = switch(x1, x3, x6)
    x8 = compose(width, inbox)
    x9 = lbind(power, outbox)
    x10 = compose(x9, x8)
    x11 = initset(x10)
    x12 = lbind(rapply, x11)
    x13 = chain(initset, first, x12)
    x14 = fork(rapply, x13, identity)
    x15 = compose(first, x14)
    x16 = compose(backdrop, x15)
    x17 = lbind(chain, backdrop)
    x18 = lbind(x17, inbox)
    x19 = compose(x18, x10)
    x20 = lbind(apply, initset)
    x21 = chain(x20, corners, x16)
    x22 = fork(mapply, x19, x21)
    x23 = fork(intersection, x16, x22)
    x24 = mapply(x16, x2)
    x25 = mapply(x23, x2)
    x26 = underfill(x7, x6, x24)
    O = fill(x26, ZERO, x25)
    return O



def solve_9172f3a0_49d1d64f(I):
    x1 = upscale(I, THREE)
    x2 = shape(x1)
    x3 = add(x2, TWO)
    x4 = canvas(ZERO, x3)
    x5 = asobject(x1)
    x6 = shift(x5, UNITY)
    x7 = paint(x4, x6)
    x8 = asindices(x4)
    x9 = fork(difference, box, corners)
    x10 = x9(x8)
    x11 = lbind(lbind, manhattan)
    x12 = rbind(compose, initset)
    x13 = chain(x12, x11, initset)
    x14 = lbind(argmin, x6)
    x15 = chain(first, x14, x13)
    x16 = fork(astuple, x15, identity)
    x17 = apply(x16, x10)
    O = paint(x7, x17)
    return O



def solve_9172f3a0_57aa92db(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, F, T, T)
    x3 = objects(x1, T, F, T)
    x4 = lbind(lbind, colorcount)
    x5 = fork(apply, x4, palette)
    x6 = compose(maximum, x5)
    x7 = compose(minimum, x5)
    x8 = fork(subtract, x6, x7)
    x9 = argmax(x2, x8)
    x10 = leastcolor(x9)
    x11 = normalize(x9)
    x12 = matcher(first, x10)
    x13 = sfilter(x11, x12)
    x14 = ulcorner(x13)
    x15 = colorfilter(x3, x10)
    x16 = rbind(toobject, x1)
    x17 = lbind(remove, ZERO)
    x18 = chain(first, x17, palette)
    x19 = chain(x18, x16, outbox)
    x20 = lbind(multiply, x14)
    x21 = compose(x20, width)
    x22 = fork(subtract, ulcorner, x21)
    x23 = lbind(shift, x11)
    x24 = compose(x23, x22)
    x25 = fork(upscale, x24, width)
    x26 = fork(recolor, x19, x25)
    x27 = mapply(x26, x15)
    x28 = paint(x1, x27)
    x29 = merge(x3)
    O = paint(x28, x29)
    return O



def solve_9172f3a0_aba27056(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, F, T)
    x3 = mapply(toindices, x2)
    x4 = box(x3)
    x5 = difference(x4, x3)
    x6 = delta(x3)
    x7 = position(x6, x5)
    x8 = interval(ZERO, NINE, ONE)
    x9 = lbind(multiply, x7)
    x10 = apply(x9, x8)
    x11 = lbind(shift, x5)
    x12 = mapply(x11, x10)
    x13 = fill(x1, FOUR, x6)
    x14 = fill(x13, FOUR, x12)
    x15 = corners(x5)
    x16 = ofcolor(x14, ZERO)
    x17 = rbind(toobject, x14)
    x18 = rbind(colorcount, ZERO)
    x19 = chain(x18, x17, dneighbors)
    x20 = matcher(x19, TWO)
    x21 = rbind(adjacent, x3)
    x22 = rbind(adjacent, x12)
    x23 = fork(both, x21, x22)
    x24 = compose(x23, initset)
    x25 = sfilter(x16, x20)
    x26 = sfilter(x25, x24)
    x27 = product(x15, x26)
    x28 = fork(subtract, last, first)
    x29 = fork(shoot, first, x28)
    x30 = mapply(x29, x27)
    O = fill(x14, FOUR, x30)
    return O



def solve_9172f3a0_f1cefba8(I):
    x1 = upscale(I, THREE)
    x2 = palette(x1)
    x3 = objects(x1, F, F, T)
    x4 = ofcolor(x1, ZERO)
    x5 = first(x3)
    x6 = ulcorner(x5)
    x7 = subgrid(x5, x1)
    x8 = power(trim, TWO)
    x9 = x8(x7)
    x10 = asindices(x9)
    x11 = shift(x10, TWO_BY_TWO)
    x12 = fill(x7, ZERO, x11)
    x13 = leastcolor(x12)
    x14 = remove(ZERO, x2)
    x15 = other(x14, x13)
    x16 = ofcolor(x12, x13)
    x17 = shift(x16, x6)
    x18 = ofcolor(x1, x13)
    x19 = uppermost(x18)
    x20 = lowermost(x18)
    x21 = matcher(first, x19)
    x22 = matcher(first, x20)
    x23 = fork(either, x21, x22)
    x24 = sfilter(x17, x23)
    x25 = difference(x17, x24)
    x26 = mapply(vfrontier, x24)
    x27 = mapply(hfrontier, x25)
    x28 = combine(x26, x27)
    x29 = intersection(x4, x28)
    x30 = fill(x1, x15, x28)
    O = fill(x30, x13, x29)
    return O



def solve_9172f3a0_28e73c20(I):
    x1 = upscale(I, THREE)
    x2 = width(x1)
    x3 = astuple(ONE, TWO)
    x4 = astuple(TWO, TWO)
    x5 = astuple(TWO, ONE)
    x6 = astuple(THREE, ONE)
    x7 = canvas(THREE, UNITY)
    x8 = upscale(x7, FOUR)
    x9 = initset(DOWN)
    x10 = insert(UNITY, x9)
    x11 = insert(x3, x10)
    x12 = insert(x4, x11)
    x13 = fill(x8, ZERO, x12)
    x14 = vupscale(x7, FIVE)
    x15 = hupscale(x14, THREE)
    x16 = insert(x5, x10)
    x17 = insert(x6, x16)
    x18 = fill(x15, ZERO, x17)
    x19 = even(x2)
    x20 = branch(x19, x13, x18)
    x21 = canvas(ZERO, UNITY)
    x22 = lbind(hupscale, x21)
    x23 = chain(x22, decrement, height)
    x24 = rbind(hconcat, x7)
    x25 = compose(x24, x23)
    x26 = lbind(hupscale, x7)
    x27 = compose(x26, height)
    x28 = fork(vconcat, x25, rot90)
    x29 = fork(vconcat, x27, x28)
    x30 = subtract(x2, FOUR)
    x31 = power(x29, x30)
    O = x31(x20)
    return O



def solve_9172f3a0_0e206a2e(I):
    x1 = upscale(I, THREE)
    x2 = palette(x1)
    x3 = objects(x1, F, F, T)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, numcolors)
    x6 = sfilter(x3, x5)
    x7 = remove(ZERO, x2)
    x8 = lbind(colorcount, x1)
    x9 = argmax(x7, x8)
    x10 = remove(x9, x7)
    x11 = rbind(contained, x10)
    x12 = compose(x11, first)
    x13 = rbind(sfilter, x12)
    x14 = lbind(rbind, subtract)
    x15 = lbind(occurrences, x1)
    x16 = lbind(lbind, shift)
    x17 = compose(x14, ulcorner)
    x18 = chain(x17, x13, normalize)
    x19 = chain(x15, x13, normalize)
    x20 = fork(apply, x18, x19)
    x21 = compose(x16, normalize)
    x22 = fork(mapply, x21, x20)
    x23 = astuple(cmirror, dmirror)
    x24 = astuple(hmirror, vmirror)
    x25 = combine(x23, x24)
    x26 = product(x25, x25)
    x27 = fork(compose, first, last)
    x28 = apply(x27, x26)
    x29 = totuple(x28)
    x30 = combine(x25, x29)
    x31 = lbind(rapply, x30)
    x32 = mapply(x31, x6)
    x33 = mapply(x22, x32)
    x34 = paint(x1, x33)
    x35 = merge(x6)
    O = cover(x34, x35)
    return O



def solve_9172f3a0_d22278a0(I):
    x1 = upscale(I, THREE)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = fork(multiply, sign, identity)
    x5 = lbind(apply, x4)
    x6 = chain(even, maximum, x5)
    x7 = lbind(sfilter, x2)
    x8 = fork(add, first, last)
    x9 = rbind(remove, x3)
    x10 = compose(center, last)
    x11 = fork(subtract, first, x10)
    x12 = compose(x6, x11)
    x13 = lbind(rbind, equality)
    x14 = lbind(argmin, x3)
    x15 = chain(x8, x5, x11)
    x16 = lbind(lbind, astuple)
    x17 = lbind(rbind, astuple)
    x18 = lbind(compose, x12)
    x19 = lbind(compose, x15)
    x20 = compose(x19, x16)
    x21 = compose(x19, x17)
    x22 = compose(x14, x20)
    x23 = rbind(compose, x22)
    x24 = lbind(lbind, valmin)
    x25 = rbind(compose, x20)
    x26 = chain(x25, x24, x9)
    x27 = lbind(fork, greater)
    x28 = fork(x27, x26, x21)
    x29 = chain(x7, x18, x17)
    x30 = chain(x7, x23, x13)
    x31 = fork(intersection, x29, x30)
    x32 = compose(x7, x28)
    x33 = fork(intersection, x31, x32)
    x34 = fork(recolor, color, x33)
    x35 = mapply(x34, x3)
    O = paint(x1, x35)
    return O



def solve_9172f3a0_150deff5(I):
    x1 = upscale(I, THREE)
    x2 = canvas(FIVE, TWO_BY_TWO)
    x3 = asobject(x2)
    x4 = occurrences(x1, x3)
    x5 = lbind(shift, x3)
    x6 = mapply(x5, x4)
    x7 = fill(x1, EIGHT, x6)
    x8 = canvas(FIVE, UNITY)
    x9 = astuple(TWO, ONE)
    x10 = canvas(EIGHT, x9)
    x11 = vconcat(x10, x8)
    x12 = asobject(x11)
    x13 = occurrences(x7, x12)
    x14 = lbind(shift, x12)
    x15 = mapply(x14, x13)
    x16 = fill(x7, TWO, x15)
    x17 = astuple(ONE, THREE)
    x18 = canvas(FIVE, x17)
    x19 = asobject(x18)
    x20 = occurrences(x16, x19)
    x21 = lbind(shift, x19)
    x22 = mapply(x21, x20)
    x23 = fill(x16, TWO, x22)
    x24 = hmirror(x11)
    x25 = asobject(x24)
    x26 = occurrences(x23, x25)
    x27 = lbind(shift, x25)
    x28 = mapply(x27, x26)
    x29 = fill(x23, TWO, x28)
    x30 = dmirror(x11)
    x31 = asobject(x30)
    x32 = occurrences(x29, x31)
    x33 = lbind(shift, x31)
    x34 = mapply(x33, x32)
    x35 = fill(x29, TWO, x34)
    x36 = vmirror(x30)
    x37 = asobject(x36)
    x38 = occurrences(x35, x37)
    x39 = lbind(shift, x37)
    x40 = mapply(x39, x38)
    O = fill(x35, TWO, x40)
    return O



def solve_9172f3a0_9d9215db(I):
    x1 = upscale(I, THREE)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = initset(x1)
    x6 = chain(numcolors, lefthalf, tophalf)
    x7 = insert(x2, x5)
    x8 = insert(x3, x7)
    x9 = insert(x4, x8)
    x10 = argmax(x9, x6)
    x11 = vmirror(x10)
    x12 = papply(pair, x10, x11)
    x13 = lbind(apply, maximum)
    x14 = apply(x13, x12)
    x15 = partition(x14)
    x16 = sizefilter(x15, FOUR)
    x17 = apply(llcorner, x16)
    x18 = apply(lrcorner, x16)
    x19 = combine(x17, x18)
    x20 = cover(x14, x19)
    x21 = tojvec(NEG_TWO)
    x22 = rbind(add, ZERO_BY_TWO)
    x23 = rbind(add, x21)
    x24 = compose(x22, ulcorner)
    x25 = compose(x23, urcorner)
    x26 = fork(connect, x24, x25)
    x27 = compose(even, last)
    x28 = rbind(sfilter, x27)
    x29 = chain(normalize, x28, x26)
    x30 = fork(shift, x29, x24)
    x31 = fork(recolor, color, x30)
    x32 = mapply(x31, x16)
    x33 = paint(x20, x32)
    x34 = rot90(x33)
    x35 = rot180(x33)
    x36 = rot270(x33)
    x37 = papply(pair, x33, x34)
    x38 = apply(x13, x37)
    x39 = papply(pair, x38, x35)
    x40 = apply(x13, x39)
    x41 = papply(pair, x40, x36)
    O = apply(x13, x41)
    return O



def solve_9172f3a0_264363fd(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, F, F, T)
    x3 = argmin(x2, size)
    x4 = normalize(x3)
    x5 = height(x3)
    x6 = width(x3)
    x7 = equality(x5, FIVE)
    x8 = equality(x6, FIVE)
    x9 = astuple(x7, x8)
    x10 = add(UNITY, x9)
    x11 = invert(x10)
    x12 = center(x3)
    x13 = index(x1, x12)
    x14 = branch(x7, UP, RIGHT)
    x15 = add(x14, x12)
    x16 = index(x1, x15)
    x17 = astuple(x13, ORIGIN)
    x18 = initset(x17)
    x19 = cover(x1, x3)
    x20 = mostcolor(x19)
    x21 = ofcolor(x19, x20)
    x22 = occurrences(x19, x18)
    x23 = objects(x19, F, F, T)
    x24 = rbind(occurrences, x18)
    x25 = rbind(subgrid, x19)
    x26 = compose(x24, x25)
    x27 = lbind(mapply, vfrontier)
    x28 = lbind(mapply, hfrontier)
    x29 = compose(x27, x26)
    x30 = compose(x28, x26)
    x31 = branch(x7, x29, x30)
    x32 = branch(x8, x30, x29)
    x33 = fork(combine, x31, x32)
    x34 = lbind(recolor, x16)
    x35 = compose(x34, x33)
    x36 = fork(paint, x25, x35)
    x37 = compose(asobject, x36)
    x38 = fork(shift, x37, ulcorner)
    x39 = mapply(x38, x23)
    x40 = paint(x19, x39)
    x41 = shift(x4, x11)
    x42 = lbind(shift, x41)
    x43 = mapply(x42, x22)
    x44 = paint(x40, x43)
    O = fill(x44, x20, x21)
    return O



def solve_9172f3a0_234bbc79(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, F, F, T)
    x3 = rbind(other, FIVE)
    x4 = compose(x3, palette)
    x5 = fork(recolor, x4, identity)
    x6 = apply(x5, x2)
    x7 = order(x6, leftmost)
    x8 = compose(last, last)
    x9 = lbind(matcher, x8)
    x10 = compose(x9, leftmost)
    x11 = compose(x9, rightmost)
    x12 = fork(sfilter, identity, x10)
    x13 = fork(sfilter, identity, x11)
    x14 = compose(dneighbors, last)
    x15 = rbind(chain, x14)
    x16 = lbind(x15, size)
    x17 = lbind(rbind, intersection)
    x18 = chain(x16, x17, toindices)
    x19 = fork(argmin, x12, x18)
    x20 = fork(argmin, x13, x18)
    x21 = compose(last, x19)
    x22 = compose(last, x20)
    x23 = astuple(ZERO, DOWN_LEFT)
    x24 = initset(x23)
    x25 = lbind(add, RIGHT)
    x26 = chain(x21, first, last)
    x27 = compose(x22, first)
    x28 = fork(subtract, x27, x26)
    x29 = compose(first, last)
    x30 = compose(x25, x28)
    x31 = fork(shift, x29, x30)
    x32 = fork(combine, first, x31)
    x33 = fork(remove, x29, last)
    x34 = fork(astuple, x32, x33)
    x35 = size(x2)
    x36 = power(x34, x35)
    x37 = astuple(x24, x7)
    x38 = x36(x37)
    x39 = first(x38)
    x40 = width(x39)
    x41 = decrement(x40)
    x42 = astuple(THREE, x41)
    x43 = canvas(ZERO, x42)
    O = paint(x43, x39)
    return O



def solve_9172f3a0_22233c11(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, T, T, T)
    x3 = rbind(upscale, TWO)
    x4 = chain(invert, halve, shape)
    x5 = fork(combine, hfrontier, vfrontier)
    x6 = compose(x3, vmirror)
    x7 = fork(shift, x6, x4)
    x8 = compose(toindices, x7)
    x9 = lbind(mapply, x5)
    x10 = compose(x9, toindices)
    x11 = fork(difference, x8, x10)
    x12 = mapply(x11, x2)
    O = fill(x1, EIGHT, x12)
    return O



def solve_9172f3a0_a64e4611(I):
    x1 = upscale(I, THREE)
    x2 = asindices(x1)
    x3 = fork(product, identity, identity)
    x4 = lbind(canvas, ZERO)
    x5 = compose(asobject, x4)
    x6 = fork(multiply, first, last)
    x7 = compose(positive, size)
    x8 = lbind(lbind, shift)
    x9 = rbind(fork, x6)
    x10 = lbind(x9, multiply)
    x11 = lbind(chain, x7)
    x12 = rbind(x11, x5)
    x13 = lbind(lbind, occurrences)
    x14 = chain(x10, x12, x13)
    x15 = compose(x3, first)
    x16 = compose(x14, last)
    x17 = fork(argmax, x15, x16)
    x18 = chain(x8, x5, x17)
    x19 = compose(x5, x17)
    x20 = fork(occurrences, last, x19)
    x21 = fork(mapply, x18, x20)
    x22 = multiply(TWO, SIX)
    x23 = interval(THREE, x22, ONE)
    x24 = astuple(x23, x1)
    x25 = x21(x24)
    x26 = fill(x1, THREE, x25)
    x27 = interval(THREE, TEN, ONE)
    x28 = astuple(x27, x26)
    x29 = x21(x28)
    x30 = fill(x26, THREE, x29)
    x31 = astuple(x27, x30)
    x32 = x21(x31)
    x33 = fill(x30, THREE, x32)
    x34 = rbind(toobject, x33)
    x35 = rbind(colorcount, THREE)
    x36 = chain(x35, x34, neighbors)
    x37 = matcher(x36, EIGHT)
    x38 = sfilter(x2, x37)
    x39 = fill(x1, THREE, x38)
    x40 = ofcolor(x39, ZERO)
    x41 = rbind(bordering, x39)
    x42 = compose(x41, initset)
    x43 = lbind(contained, THREE)
    x44 = rbind(toobject, x39)
    x45 = chain(x43, palette, x44)
    x46 = compose(x45, dneighbors)
    x47 = fork(both, x46, x42)
    x48 = sfilter(x40, x47)
    O = fill(x39, THREE, x48)
    return O



def solve_9172f3a0_97a05b5b(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = rbind(greater, ONE)
    x6 = compose(x5, numcolors)
    x7 = sfilter(x2, x6)
    x8 = lbind(rbind, subtract)
    x9 = switch(x4, TWO, ZERO)
    x10 = lbind(occurrences, x9)
    x11 = lbind(lbind, shift)
    x12 = compose(x8, ulcorner)
    x13 = matcher(first, TWO)
    x14 = compose(flip, x13)
    x15 = rbind(sfilter, x13)
    x16 = rbind(sfilter, x14)
    x17 = lbind(recolor, ZERO)
    x18 = compose(x17, x16)
    x19 = fork(combine, x18, x15)
    x20 = chain(x12, x19, normalize)
    x21 = objects(x9, T, T, T)
    x22 = apply(toindices, x21)
    x23 = chain(x10, x19, normalize)
    x24 = rbind(colorcount, TWO)
    x25 = lbind(sfilter, x22)
    x26 = chain(size, first, x25)
    x27 = compose(positive, size)
    x28 = lbind(lbind, contained)
    x29 = chain(x27, x25, x28)
    x30 = compose(x26, x28)
    x31 = rbind(sfilter, x29)
    x32 = compose(x31, x23)
    x33 = lbind(rbind, equality)
    x34 = rbind(compose, x30)
    x35 = chain(x34, x33, x24)
    x36 = fork(sfilter, x32, x35)
    x37 = fork(apply, x20, x36)
    x38 = compose(x11, normalize)
    x39 = fork(mapply, x38, x37)
    x40 = astuple(cmirror, dmirror)
    x41 = astuple(hmirror, vmirror)
    x42 = combine(x40, x41)
    x43 = product(x42, x42)
    x44 = fork(compose, first, last)
    x45 = apply(x44, x43)
    x46 = lbind(rapply, x45)
    x47 = mapply(x46, x7)
    x48 = mapply(x39, x47)
    x49 = paint(x4, x48)
    x50 = palette(x48)
    x51 = lbind(remove, TWO)
    x52 = x51(x50)
    x53 = chain(first, x51, palette)
    x54 = rbind(contained, x52)
    x55 = chain(flip, x54, x53)
    x56 = sfilter(x7, x55)
    x57 = fork(apply, x20, x23)
    x58 = fork(mapply, x38, x57)
    x59 = mapply(x46, x56)
    x60 = mapply(x58, x59)
    O = paint(x49, x60)
    return O



def solve_9172f3a0_3e980e27(I):
    x1 = upscale(I, THREE)
    x2 = objects(x1, F, T, T)
    x3 = astuple(TEN, TEN)
    x4 = invert(x3)
    x5 = astuple(TWO, x4)
    x6 = astuple(THREE, x4)
    x7 = initset(x5)
    x8 = insert(x6, x7)
    x9 = insert(x8, x2)
    x10 = lbind(contained, TWO)
    x11 = lbind(contained, THREE)
    x12 = compose(invert, ulcorner)
    x13 = lbind(compose, x12)
    x14 = lbind(rbind, sfilter)
    x15 = compose(x13, x14)
    x16 = rbind(compose, center)
    x17 = lbind(lbind, shift)
    x18 = x15(x10)
    x19 = x15(x11)
    x20 = fork(shift, identity, x18)
    x21 = fork(shift, identity, x19)
    x22 = compose(x10, palette)
    x23 = compose(x11, palette)
    x24 = sfilter(x9, x22)
    x25 = argmax(x24, size)
    x26 = remove(x25, x24)
    x27 = vmirror(x25)
    x28 = chain(x16, x17, x20)
    x29 = x28(x27)
    x30 = mapply(x29, x26)
    x31 = sfilter(x9, x23)
    x32 = argmax(x31, size)
    x33 = remove(x32, x31)
    x34 = chain(x16, x17, x21)
    x35 = x34(x32)
    x36 = mapply(x35, x33)
    x37 = combine(x30, x36)
    O = paint(x1, x37)
    return O



def solve_9dfd6313_67a3c6ac(I):
    x1 = dmirror(I)
    O = vmirror(x1)
    return O



def solve_9dfd6313_68b16354(I):
    x1 = dmirror(I)
    O = hmirror(x1)
    return O



def solve_9dfd6313_74dd1130(I):
    x1 = dmirror(I)
    O = dmirror(x1)
    return O



def solve_9dfd6313_3c9b0459(I):
    x1 = dmirror(I)
    O = rot180(x1)
    return O



def solve_9dfd6313_6150a2bd(I):
    x1 = dmirror(I)
    O = rot180(x1)
    return O



def solve_9dfd6313_9172f3a0(I):
    x1 = dmirror(I)
    O = upscale(x1, THREE)
    return O



def solve_9dfd6313_a416b8f3(I):
    x1 = dmirror(I)
    O = hconcat(x1, x1)
    return O



def solve_9dfd6313_b1948b0a(I):
    x1 = dmirror(I)
    O = replace(x1, SIX, TWO)
    return O



def solve_9dfd6313_c59eb873(I):
    x1 = dmirror(I)
    O = upscale(x1, TWO)
    return O



def solve_9dfd6313_c8f0f002(I):
    x1 = dmirror(I)
    O = replace(x1, SEVEN, FIVE)
    return O



def solve_9dfd6313_d10ecb37(I):
    x1 = dmirror(I)
    O = crop(x1, ORIGIN, TWO_BY_TWO)
    return O



def solve_9dfd6313_d511f180(I):
    x1 = dmirror(I)
    O = switch(x1, FIVE, EIGHT)
    return O



def solve_9dfd6313_ed36ccf7(I):
    x1 = dmirror(I)
    O = rot270(x1)
    return O



def solve_9dfd6313_4c4377d9(I):
    x1 = dmirror(I)
    x2 = hmirror(x1)
    O = vconcat(x2, x1)
    return O



def solve_9dfd6313_6d0aefbc(I):
    x1 = dmirror(I)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_9dfd6313_6fa7a44f(I):
    x1 = dmirror(I)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_9dfd6313_5614dbcf(I):
    x1 = dmirror(I)
    x2 = replace(x1, FIVE, ZERO)
    O = downscale(x2, THREE)
    return O



def solve_9dfd6313_5bd6f4ac(I):
    x1 = dmirror(I)
    x2 = tojvec(SIX)
    O = crop(x1, x2, THREE_BY_THREE)
    return O



def solve_9dfd6313_5582e5ca(I):
    x1 = dmirror(I)
    x2 = mostcolor(x1)
    O = canvas(x2, THREE_BY_THREE)
    return O



def solve_9dfd6313_8be77c9e(I):
    x1 = dmirror(I)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_9dfd6313_c9e6f938(I):
    x1 = dmirror(I)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_9dfd6313_2dee498d(I):
    x1 = dmirror(I)
    x2 = hsplit(x1, THREE)
    O = first(x2)
    return O



def solve_9dfd6313_1cf80156(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = subgrid(x3, x1)
    return O



def solve_9dfd6313_32597951(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, EIGHT)
    x3 = delta(x2)
    O = fill(x1, THREE, x3)
    return O



def solve_9dfd6313_25ff71a9(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = move(x1, x3, DOWN)
    return O



def solve_9dfd6313_0b148d64(I):
    x1 = dmirror(I)
    x2 = partition(x1)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_9dfd6313_1f85a75f(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_9dfd6313_23b5c85d(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_9dfd6313_9ecd008a(I):
    x1 = dmirror(I)
    x2 = vmirror(x1)
    x3 = ofcolor(x1, ZERO)
    O = subgrid(x3, x2)
    return O



def solve_9dfd6313_ac0a08a4(I):
    x1 = dmirror(I)
    x2 = colorcount(x1, ZERO)
    x3 = subtract(NINE, x2)
    O = upscale(x1, x3)
    return O



def solve_9dfd6313_be94b721(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_9dfd6313_c909285e(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    O = subgrid(x3, x1)
    return O



def solve_9dfd6313_f25ffba3(I):
    x1 = dmirror(I)
    x2 = bottomhalf(x1)
    x3 = hmirror(x2)
    O = vconcat(x3, x2)
    return O



def solve_9dfd6313_c1d99e64(I):
    x1 = dmirror(I)
    x2 = frontiers(x1)
    x3 = merge(x2)
    O = fill(x1, TWO, x3)
    return O



def solve_9dfd6313_b91ae062(I):
    x1 = dmirror(I)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    O = upscale(x1, x3)
    return O



def solve_9dfd6313_3aa6fb7a(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = mapply(corners, x2)
    O = underfill(x1, ONE, x3)
    return O



def solve_9dfd6313_7b7f7511(I):
    x1 = dmirror(I)
    x2 = portrait(x1)
    x3 = branch(x2, tophalf, lefthalf)
    O = x3(x1)
    return O



def solve_9dfd6313_4258a5f9(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, FIVE)
    x3 = mapply(neighbors, x2)
    O = fill(x1, ONE, x3)
    return O



def solve_9dfd6313_2dc579da(I):
    x1 = dmirror(I)
    x2 = vsplit(x1, TWO)
    x3 = rbind(hsplit, TWO)
    x4 = mapply(x3, x2)
    O = argmax(x4, numcolors)
    return O



def solve_9dfd6313_28bf18c6(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = hconcat(x4, x4)
    return O



def solve_9dfd6313_3af2c5a8(I):
    x1 = dmirror(I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_9dfd6313_44f52bb0(I):
    x1 = dmirror(I)
    x2 = vmirror(x1)
    x3 = equality(x2, x1)
    x4 = branch(x3, ONE, SEVEN)
    O = canvas(x4, UNITY)
    return O



def solve_9dfd6313_62c24649(I):
    x1 = dmirror(I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_9dfd6313_67e8384a(I):
    x1 = dmirror(I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_9dfd6313_7468f01a(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = vmirror(x4)
    return O



def solve_9dfd6313_662c240a(I):
    x1 = dmirror(I)
    x2 = vsplit(x1, THREE)
    x3 = fork(equality, dmirror, identity)
    x4 = compose(flip, x3)
    O = extract(x2, x4)
    return O



def solve_9dfd6313_42a50994(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = cover(x1, x4)
    return O



def solve_9dfd6313_56ff96f3(I):
    x1 = dmirror(I)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = mapply(x3, x2)
    O = paint(x1, x4)
    return O



def solve_9dfd6313_50cb2852(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = compose(backdrop, inbox)
    x4 = mapply(x3, x2)
    O = fill(x1, EIGHT, x4)
    return O



def solve_9dfd6313_4347f46a(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(difference, toindices, box)
    x4 = mapply(x3, x2)
    O = fill(x1, ZERO, x4)
    return O



def solve_9dfd6313_46f33fce(I):
    x1 = dmirror(I)
    x2 = rot180(x1)
    x3 = downscale(x2, TWO)
    x4 = rot180(x3)
    O = upscale(x4, FOUR)
    return O



def solve_9dfd6313_a740d043(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    O = replace(x4, ONE, ZERO)
    return O



def solve_9dfd6313_a79310a0(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = move(x1, x3, DOWN)
    O = replace(x4, EIGHT, TWO)
    return O



def solve_9dfd6313_aabf363d(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, ZERO)
    x4 = leastcolor(x3)
    O = replace(x3, x4, x2)
    return O



def solve_9dfd6313_ae4f1146(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = rbind(colorcount, ONE)
    x4 = argmax(x2, x3)
    O = subgrid(x4, x1)
    return O



def solve_9dfd6313_b27ca6d3(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, THREE, x4)
    return O



def solve_9dfd6313_ce22a75a(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = mapply(backdrop, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_9dfd6313_dc1df850(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_9dfd6313_f25fbde4(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = upscale(x4, TWO)
    return O



def solve_9dfd6313_44d8ac46(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(delta, x2)
    x4 = mfilter(x3, square)
    O = fill(x1, TWO, x4)
    return O



def solve_9dfd6313_1e0a9b12(I):
    x1 = dmirror(I)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = apply(x3, x2)
    O = rot90(x4)
    return O



def solve_9dfd6313_0d3d703e(I):
    x1 = dmirror(I)
    x2 = switch(x1, THREE, FOUR)
    x3 = switch(x2, EIGHT, NINE)
    x4 = switch(x3, TWO, SIX)
    O = switch(x4, ONE, FIVE)
    return O



def solve_9dfd6313_3618c87e(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = move(x1, x4, TWO_BY_ZERO)
    return O



def solve_9dfd6313_1c786137(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, height)
    x4 = subgrid(x3, x1)
    O = trim(x4)
    return O



def solve_9dfd6313_445eab21(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(multiply, height, width)
    x4 = argmax(x2, x3)
    x5 = color(x4)
    O = canvas(x5, TWO_BY_TWO)
    return O



def solve_9dfd6313_6f8cd79b(I):
    x1 = dmirror(I)
    x2 = asindices(x1)
    x3 = apply(initset, x2)
    x4 = rbind(bordering, x1)
    x5 = mfilter(x3, x4)
    O = fill(x1, EIGHT, x5)
    return O



def solve_9dfd6313_2013d3e2(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = lefthalf(x4)
    O = tophalf(x5)
    return O



def solve_9dfd6313_41e4d17e(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = mapply(x4, x2)
    O = underfill(x1, SIX, x5)
    return O



def solve_9dfd6313_9565186b(I):
    x1 = dmirror(I)
    x2 = shape(x1)
    x3 = objects(x1, T, F, F)
    x4 = argmax(x3, size)
    x5 = canvas(FIVE, x2)
    O = paint(x5, x4)
    return O



def solve_9dfd6313_aedd82e4(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, TWO)
    x4 = sizefilter(x3, ONE)
    x5 = merge(x4)
    O = fill(x1, ONE, x5)
    return O



def solve_9dfd6313_bb43febb(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, FIVE)
    x4 = compose(backdrop, inbox)
    x5 = mapply(x4, x3)
    O = fill(x1, TWO, x5)
    return O



def solve_9dfd6313_e98196ab(I):
    x1 = dmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = objects(x2, T, F, T)
    x5 = merge(x4)
    O = paint(x3, x5)
    return O



def solve_9dfd6313_f76d97a5(I):
    x1 = dmirror(I)
    x2 = palette(x1)
    x3 = first(x2)
    x4 = last(x2)
    x5 = switch(x1, x3, x4)
    O = replace(x5, FIVE, ZERO)
    return O



def solve_9dfd6313_ce9e57f2(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(connect, ulcorner, centerofmass)
    x4 = mapply(x3, x2)
    x5 = fill(x1, EIGHT, x4)
    O = switch(x5, EIGHT, TWO)
    return O



def solve_9dfd6313_22eb0ac0(I):
    x1 = dmirror(I)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    O = paint(x1, x5)
    return O



def solve_9dfd6313_9f236235(I):
    x1 = dmirror(I)
    x2 = compress(x1)
    x3 = objects(x1, T, F, F)
    x4 = vmirror(x2)
    x5 = valmin(x3, width)
    O = downscale(x4, x5)
    return O



def solve_9dfd6313_a699fb00(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, RIGHT)
    x4 = shift(x2, LEFT)
    x5 = intersection(x3, x4)
    O = fill(x1, TWO, x5)
    return O



def solve_9dfd6313_46442a0e(I):
    x1 = dmirror(I)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_9dfd6313_7fe24cdd(I):
    x1 = dmirror(I)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_9dfd6313_0ca9ddb6(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x3)
    x6 = fill(x1, SEVEN, x4)
    O = fill(x6, FOUR, x5)
    return O



def solve_9dfd6313_543a7ed5(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, SIX)
    x4 = mapply(outbox, x3)
    x5 = fill(x1, THREE, x4)
    x6 = mapply(delta, x3)
    O = fill(x5, FOUR, x6)
    return O



def solve_9dfd6313_0520fde7(I):
    x1 = dmirror(I)
    x2 = vmirror(x1)
    x3 = lefthalf(x2)
    x4 = righthalf(x2)
    x5 = vmirror(x4)
    x6 = cellwise(x3, x5, ZERO)
    O = replace(x6, ONE, TWO)
    return O



def solve_9dfd6313_dae9d2b5(I):
    x1 = dmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, FOUR)
    x5 = ofcolor(x3, THREE)
    x6 = combine(x4, x5)
    O = fill(x2, SIX, x6)
    return O



def solve_9dfd6313_8d5021e8(I):
    x1 = dmirror(I)
    x2 = vmirror(x1)
    x3 = hconcat(x2, x1)
    x4 = hmirror(x3)
    x5 = vconcat(x3, x4)
    x6 = vconcat(x5, x3)
    O = hmirror(x6)
    return O



def solve_9dfd6313_928ad970(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, FIVE)
    x3 = subgrid(x2, x1)
    x4 = trim(x3)
    x5 = leastcolor(x4)
    x6 = inbox(x2)
    O = fill(x1, x5, x6)
    return O



def solve_9dfd6313_b60334d2(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, FIVE)
    x3 = replace(x1, FIVE, ZERO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x2)
    x6 = fill(x3, ONE, x4)
    O = fill(x6, FIVE, x5)
    return O



def solve_9dfd6313_b94a9452(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = leastcolor(x4)
    x6 = mostcolor(x4)
    O = switch(x4, x5, x6)
    return O



def solve_9dfd6313_d037b0a7(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, DOWN)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    O = paint(x1, x6)
    return O



def solve_9dfd6313_d0f5fe59(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = astuple(x3, x3)
    x5 = canvas(ZERO, x4)
    x6 = shoot(ORIGIN, UNITY)
    O = fill(x5, EIGHT, x6)
    return O



def solve_9dfd6313_e3497940(I):
    x1 = dmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = vmirror(x3)
    x5 = objects(x4, T, F, T)
    x6 = merge(x5)
    O = paint(x2, x6)
    return O



def solve_9dfd6313_e9afcf9a(I):
    x1 = dmirror(I)
    x2 = astuple(TWO, ONE)
    x3 = crop(x1, ORIGIN, x2)
    x4 = hmirror(x3)
    x5 = hconcat(x3, x4)
    x6 = hconcat(x5, x5)
    O = hconcat(x6, x5)
    return O



def solve_9dfd6313_48d8fb45(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = matcher(size, ONE)
    x4 = extract(x2, x3)
    x5 = lbind(adjacent, x4)
    x6 = extract(x2, x5)
    O = subgrid(x6, x1)
    return O



def solve_9dfd6313_d406998b(I):
    x1 = dmirror(I)
    x2 = vmirror(x1)
    x3 = ofcolor(x2, FIVE)
    x4 = compose(even, last)
    x5 = sfilter(x3, x4)
    x6 = fill(x2, THREE, x5)
    O = vmirror(x6)
    return O



def solve_9dfd6313_3906de3d(I):
    x1 = dmirror(I)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = switch(x2, ONE, TWO)
    x5 = apply(x3, x4)
    x6 = switch(x5, ONE, TWO)
    O = cmirror(x6)
    return O



def solve_9dfd6313_00d62c1b(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, FOUR, x6)
    return O



def solve_9dfd6313_7b6016b9(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = rbind(bordering, x1)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x4)
    x6 = fill(x1, TWO, x5)
    O = replace(x6, ZERO, THREE)
    return O



def solve_9dfd6313_67385a82(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, THREE)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = merge(x5)
    O = fill(x1, EIGHT, x6)
    return O



def solve_9dfd6313_a5313dff(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, ONE, x6)
    return O



def solve_9dfd6313_ea32f347(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, FIVE, FOUR)
    x4 = argmin(x2, size)
    x5 = argmax(x2, size)
    x6 = fill(x3, ONE, x5)
    O = fill(x6, TWO, x4)
    return O



def solve_9dfd6313_d631b094(I):
    x1 = dmirror(I)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = ofcolor(x1, x3)
    x5 = size(x4)
    x6 = astuple(ONE, x5)
    O = canvas(x3, x6)
    return O



def solve_9dfd6313_10fcaaa3(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = vconcat(x3, x3)
    x5 = ofcolor(x4, x2)
    x6 = mapply(ineighbors, x5)
    O = underfill(x4, EIGHT, x6)
    return O



def solve_9dfd6313_007bbfb7(I):
    x1 = dmirror(I)
    x2 = hupscale(x1, THREE)
    x3 = vupscale(x2, THREE)
    x4 = hconcat(x1, x1)
    x5 = hconcat(x4, x1)
    x6 = vconcat(x5, x5)
    x7 = vconcat(x6, x5)
    O = cellwise(x3, x7, ZERO)
    return O



def solve_9dfd6313_496994bd(I):
    x1 = dmirror(I)
    x2 = width(x1)
    x3 = height(x1)
    x4 = halve(x3)
    x5 = astuple(x4, x2)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    O = vconcat(x6, x7)
    return O



def solve_9dfd6313_1f876c06(I):
    x1 = dmirror(I)
    x2 = fgpartition(x1)
    x3 = compose(last, first)
    x4 = power(last, TWO)
    x5 = fork(connect, x3, x4)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_9dfd6313_39a8645d(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = matcher(color, x5)
    x7 = extract(x2, x6)
    O = subgrid(x7, x1)
    return O



def solve_9dfd6313_1b2d62fb(I):
    x1 = dmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = replace(x2, NINE, ZERO)
    O = fill(x7, EIGHT, x6)
    return O



def solve_9dfd6313_90c28cc7(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = dedupe(x4)
    x6 = rot90(x5)
    x7 = dedupe(x6)
    O = rot270(x7)
    return O



def solve_9dfd6313_b6afb2da(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = replace(x1, FIVE, TWO)
    x4 = colorfilter(x2, FIVE)
    x5 = mapply(box, x4)
    x6 = fill(x3, FOUR, x5)
    x7 = mapply(corners, x4)
    O = fill(x6, ONE, x7)
    return O



def solve_9dfd6313_b9b7f026(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = argmin(x2, size)
    x4 = rbind(adjacent, x3)
    x5 = remove(x3, x2)
    x6 = extract(x5, x4)
    x7 = color(x6)
    O = canvas(x7, UNITY)
    return O



def solve_9dfd6313_ba97ae07(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = ofcolor(x1, x5)
    x7 = backdrop(x6)
    O = fill(x1, x5, x7)
    return O



def solve_9dfd6313_c9f8e694(I):
    x1 = dmirror(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = ofcolor(x1, ZERO)
    x5 = astuple(x2, ONE)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hupscale(x6, x3)
    O = fill(x7, ZERO, x4)
    return O



def solve_9dfd6313_d23f8c26(I):
    x1 = dmirror(I)
    x2 = asindices(x1)
    x3 = width(x1)
    x4 = halve(x3)
    x5 = matcher(last, x4)
    x6 = compose(flip, x5)
    x7 = sfilter(x2, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_9dfd6313_d5d6de2d(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sfilter(x2, square)
    x4 = difference(x2, x3)
    x5 = compose(backdrop, inbox)
    x6 = mapply(x5, x4)
    x7 = replace(x1, TWO, ZERO)
    O = fill(x7, THREE, x6)
    return O



def solve_9dfd6313_dbc1a6ce(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_9dfd6313_ded97339(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, EIGHT)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_9dfd6313_ea786f4a(I):
    x1 = dmirror(I)
    x2 = width(x1)
    x3 = shoot(ORIGIN, UNITY)
    x4 = decrement(x2)
    x5 = tojvec(x4)
    x6 = shoot(x5, DOWN_LEFT)
    x7 = combine(x3, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_9dfd6313_08ed6ac7(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = order(x2, height)
    x5 = size(x3)
    x6 = interval(x5, ZERO, NEG_ONE)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_9dfd6313_40853293(I):
    x1 = dmirror(I)
    x2 = partition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    x6 = mfilter(x4, vline)
    x7 = paint(x1, x5)
    O = paint(x7, x6)
    return O



def solve_9dfd6313_5521c0d9(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = cover(x1, x3)
    x5 = chain(toivec, invert, height)
    x6 = fork(shift, identity, x5)
    x7 = mapply(x6, x2)
    O = paint(x4, x7)
    return O



def solve_9dfd6313_f8ff0b80(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = rbind(canvas, UNITY)
    x6 = apply(x5, x4)
    x7 = merge(x6)
    O = hmirror(x7)
    return O



def solve_9dfd6313_85c4e7cd(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = compose(invert, size)
    x4 = order(x2, size)
    x5 = order(x2, x3)
    x6 = apply(color, x5)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_9dfd6313_d2abd087(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = matcher(size, SIX)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x3)
    x6 = mfilter(x2, x4)
    x7 = fill(x1, TWO, x5)
    O = fill(x7, ONE, x6)
    return O



def solve_9dfd6313_363442ee(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = asobject(x3)
    x5 = lbind(shift, x4)
    x6 = compose(x5, decrement)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_9dfd6313_5168d44c(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, THREE)
    x3 = height(x2)
    x4 = equality(x3, ONE)
    x5 = branch(x4, ZERO_BY_TWO, TWO_BY_ZERO)
    x6 = ofcolor(x1, TWO)
    x7 = recolor(TWO, x6)
    O = move(x1, x7, x5)
    return O



def solve_9dfd6313_d9fac9be(I):
    x1 = dmirror(I)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = color(x4)
    x6 = remove(ZERO, x2)
    x7 = other(x6, x5)
    O = canvas(x7, UNITY)
    return O



def solve_9dfd6313_e50d258f(I):
    x1 = dmirror(I)
    x2 = width(x1)
    x3 = astuple(NINE, x2)
    x4 = canvas(ZERO, x3)
    x5 = vconcat(x1, x4)
    x6 = objects(x5, F, F, T)
    x7 = rbind(colorcount, TWO)
    x8 = argmax(x6, x7)
    O = subgrid(x8, x1)
    return O



def solve_9dfd6313_810b9b61(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = apply(toindices, x2)
    x4 = fork(either, vline, hline)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = fork(equality, identity, box)
    x8 = mfilter(x6, x7)
    O = fill(x1, THREE, x8)
    return O



def solve_9dfd6313_54d82841(I):
    x1 = dmirror(I)
    x2 = height(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(last, center)
    x5 = apply(x4, x3)
    x6 = decrement(x2)
    x7 = lbind(astuple, x6)
    x8 = apply(x7, x5)
    O = fill(x1, FOUR, x8)
    return O



def solve_9dfd6313_60b61512(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = mapply(delta, x2)
    O = fill(x1, SEVEN, x3)
    return O



def solve_9dfd6313_25d8a9c8(I):
    x1 = dmirror(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, THREE)
    x5 = mfilter(x4, hline)
    x6 = toindices(x5)
    x7 = difference(x2, x6)
    x8 = fill(x1, FIVE, x6)
    O = fill(x8, ZERO, x7)
    return O



def solve_9dfd6313_239be575(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = lbind(contained, TWO)
    x4 = compose(x3, palette)
    x5 = sfilter(x2, x4)
    x6 = size(x5)
    x7 = greater(x6, ONE)
    x8 = branch(x7, ZERO, EIGHT)
    O = canvas(x8, UNITY)
    return O



def solve_9dfd6313_6430c8c4(I):
    x1 = dmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(FOUR, FOUR)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, THREE, x7)
    return O



def solve_9dfd6313_94f9d214(I):
    x1 = dmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = astuple(FOUR, FOUR)
    x7 = canvas(ZERO, x6)
    x8 = intersection(x4, x5)
    O = fill(x7, TWO, x8)
    return O



def solve_9dfd6313_ce4f8723(I):
    x1 = dmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = astuple(FOUR, FOUR)
    x8 = canvas(THREE, x7)
    O = fill(x8, ZERO, x6)
    return O



def solve_9dfd6313_d13f3404(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, UNITY)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = astuple(SIX, SIX)
    x8 = canvas(ZERO, x7)
    O = paint(x8, x6)
    return O



def solve_9dfd6313_f2829549(I):
    x1 = dmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = shape(x2)
    x8 = canvas(ZERO, x7)
    O = fill(x8, THREE, x6)
    return O



def solve_9dfd6313_fafffa47(I):
    x1 = dmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = shape(x3)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, TWO, x7)
    return O



def solve_9dfd6313_fcb5c309(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = colorfilter(x3, x2)
    x5 = difference(x3, x4)
    x6 = argmax(x5, size)
    x7 = color(x6)
    x8 = subgrid(x6, x1)
    O = replace(x8, x7, x2)
    return O



def solve_9dfd6313_e76a88a6(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = remove(x3, x2)
    x6 = apply(ulcorner, x5)
    x7 = lbind(shift, x4)
    x8 = mapply(x7, x6)
    O = paint(x1, x8)
    return O



def solve_9dfd6313_7f4411dc(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = rbind(difference, x3)
    x5 = rbind(greater, TWO)
    x6 = chain(x5, size, x4)
    x7 = compose(x6, dneighbors)
    x8 = sfilter(x3, x7)
    O = fill(x1, ZERO, x8)
    return O



def solve_9dfd6313_b230c067(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(normalize, x3)
    x5 = leastcommon(x4)
    x6 = matcher(normalize, x5)
    x7 = extract(x2, x6)
    x8 = replace(x1, EIGHT, ONE)
    O = fill(x8, TWO, x7)
    return O



def solve_9dfd6313_e8593010(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = sizefilter(x2, TWO)
    x5 = merge(x3)
    x6 = fill(x1, THREE, x5)
    x7 = merge(x4)
    x8 = fill(x6, TWO, x7)
    O = replace(x8, ZERO, ONE)
    return O



def solve_9dfd6313_6d75e8bb(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = ulcorner(x3)
    x5 = subgrid(x3, x1)
    x6 = replace(x5, ZERO, TWO)
    x7 = asobject(x6)
    x8 = shift(x7, x4)
    O = paint(x1, x8)
    return O



def solve_9dfd6313_3f7978a0(I):
    x1 = dmirror(I)
    x2 = fgpartition(x1)
    x3 = matcher(color, FIVE)
    x4 = extract(x2, x3)
    x5 = ulcorner(x4)
    x6 = subtract(x5, DOWN)
    x7 = shape(x4)
    x8 = add(x7, TWO_BY_ZERO)
    O = crop(x1, x6, x8)
    return O



def solve_9dfd6313_1190e5a7(I):
    x1 = dmirror(I)
    x2 = mostcolor(x1)
    x3 = frontiers(x1)
    x4 = sfilter(x3, vline)
    x5 = difference(x3, x4)
    x6 = astuple(x5, x4)
    x7 = apply(size, x6)
    x8 = increment(x7)
    O = canvas(x2, x8)
    return O



def solve_9dfd6313_6e02f1e3(I):
    x1 = dmirror(I)
    x2 = numcolors(x1)
    x3 = canvas(ZERO, THREE_BY_THREE)
    x4 = equality(x2, THREE)
    x5 = equality(x2, TWO)
    x6 = branch(x4, TWO_BY_ZERO, ORIGIN)
    x7 = branch(x5, TWO_BY_TWO, ZERO_BY_TWO)
    x8 = connect(x6, x7)
    O = fill(x3, FIVE, x8)
    return O



def solve_9dfd6313_a61f2674(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = replace(x1, FIVE, ZERO)
    x6 = recolor(ONE, x3)
    x7 = recolor(TWO, x4)
    x8 = combine(x6, x7)
    O = paint(x5, x8)
    return O



def solve_9dfd6313_fcc82909(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = rbind(add, DOWN)
    x4 = compose(x3, llcorner)
    x5 = compose(toivec, numcolors)
    x6 = fork(add, lrcorner, x5)
    x7 = fork(astuple, x4, x6)
    x8 = compose(box, x7)
    x9 = mapply(x8, x2)
    O = fill(x1, THREE, x9)
    return O



def solve_9dfd6313_72ca375d(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = rbind(subgrid, x1)
    x5 = apply(x4, x3)
    x6 = apply(vmirror, x5)
    x7 = papply(equality, x5, x6)
    x8 = pair(x5, x7)
    x9 = extract(x8, last)
    O = first(x9)
    return O



def solve_9dfd6313_253bf280(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, EIGHT)
    x3 = prapply(connect, x2, x2)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = fork(either, vline, hline)
    x8 = mfilter(x6, x7)
    x9 = fill(x1, THREE, x8)
    O = fill(x9, EIGHT, x2)
    return O



def solve_9dfd6313_31aa019c(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = first(x3)
    x5 = neighbors(x4)
    x6 = astuple(TEN, TEN)
    x7 = canvas(ZERO, x6)
    x8 = initset(x4)
    x9 = fill(x7, x2, x8)
    O = fill(x9, TWO, x5)
    return O



def solve_9dfd6313_27a28665(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = valmax(x2, size)
    x4 = equality(x3, ONE)
    x5 = equality(x3, FOUR)
    x6 = equality(x3, FIVE)
    x7 = branch(x4, TWO, ONE)
    x8 = branch(x5, THREE, x7)
    x9 = branch(x6, SIX, x8)
    O = canvas(x9, UNITY)
    return O



def solve_9dfd6313_3bd67248(I):
    x1 = dmirror(I)
    x2 = height(x1)
    x3 = decrement(x2)
    x4 = decrement(x3)
    x5 = astuple(x4, ONE)
    x6 = astuple(x3, ONE)
    x7 = shoot(x5, UP_RIGHT)
    x8 = shoot(x6, RIGHT)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_9dfd6313_73251a56(I):
    x1 = dmirror(I)
    x2 = dmirror(x1)
    x3 = papply(pair, x1, x2)
    x4 = lbind(apply, maximum)
    x5 = apply(x4, x3)
    x6 = mostcolor(x5)
    x7 = replace(x5, ZERO, x6)
    x8 = index(x7, ORIGIN)
    x9 = shoot(ORIGIN, UNITY)
    O = fill(x7, x8, x9)
    return O



def solve_9dfd6313_25d487eb(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = ofcolor(x1, x2)
    x5 = center(x4)
    x6 = merge(x3)
    x7 = center(x6)
    x8 = subtract(x7, x5)
    x9 = shoot(x5, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_9dfd6313_8f2ea7aa(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    O = cellwise(x5, x9, ZERO)
    return O



def solve_9dfd6313_b8825c91(I):
    x1 = dmirror(I)
    x2 = replace(x1, FOUR, ZERO)
    x3 = dmirror(x2)
    x4 = papply(pair, x2, x3)
    x5 = lbind(apply, maximum)
    x6 = apply(x5, x4)
    x7 = cmirror(x6)
    x8 = papply(pair, x6, x7)
    x9 = apply(x5, x8)
    O = cmirror(x9)
    return O



def solve_9dfd6313_cce03e0d(I):
    x1 = dmirror(I)
    x2 = upscale(x1, THREE)
    x3 = hconcat(x1, x1)
    x4 = hconcat(x3, x1)
    x5 = vconcat(x4, x4)
    x6 = vconcat(x5, x4)
    x7 = ofcolor(x2, ZERO)
    x8 = ofcolor(x2, ONE)
    x9 = combine(x7, x8)
    O = fill(x6, ZERO, x9)
    return O



def solve_9dfd6313_d364b489(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, DOWN)
    x4 = fill(x1, EIGHT, x3)
    x5 = shift(x2, UP)
    x6 = fill(x4, TWO, x5)
    x7 = shift(x2, RIGHT)
    x8 = fill(x6, SIX, x7)
    x9 = shift(x2, LEFT)
    O = fill(x8, SEVEN, x9)
    return O



def solve_9dfd6313_a5f85a15(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = interval(ONE, NINE, ONE)
    x4 = apply(double, x3)
    x5 = apply(decrement, x4)
    x6 = papply(astuple, x5, x5)
    x7 = apply(ulcorner, x2)
    x8 = lbind(shift, x6)
    x9 = mapply(x8, x7)
    O = fill(x1, FOUR, x9)
    return O



def solve_9dfd6313_3ac3eb23(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = chain(ineighbors, last, first)
    x4 = fork(recolor, color, x3)
    x5 = mapply(x4, x2)
    x6 = paint(x1, x5)
    x7 = vsplit(x6, THREE)
    x8 = first(x7)
    x9 = vconcat(x8, x8)
    O = vconcat(x8, x9)
    return O



def solve_9dfd6313_22168020(I):
    x1 = dmirror(I)
    x2 = palette(x1)
    x3 = remove(ZERO, x2)
    x4 = lbind(ofcolor, x1)
    x5 = lbind(prapply, connect)
    x6 = fork(x5, x4, x4)
    x7 = compose(merge, x6)
    x8 = fork(recolor, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_9dfd6313_6e82a1ae(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sizefilter, x2)
    x4 = compose(merge, x3)
    x5 = x4(TWO)
    x6 = x4(THREE)
    x7 = x4(FOUR)
    x8 = fill(x1, THREE, x5)
    x9 = fill(x8, TWO, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_9dfd6313_868de0fa(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = sfilter(x2, square)
    x4 = compose(even, height)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = merge(x5)
    x8 = merge(x6)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, SEVEN, x8)
    return O



def solve_9dfd6313_681b3aeb(I):
    x1 = dmirror(I)
    x2 = rot270(x1)
    x3 = objects(x2, T, F, T)
    x4 = argmax(x3, size)
    x5 = argmin(x3, size)
    x6 = color(x5)
    x7 = canvas(x6, THREE_BY_THREE)
    x8 = normalize(x4)
    x9 = paint(x7, x8)
    O = rot90(x9)
    return O



def solve_9dfd6313_8e5a5113(I):
    x1 = dmirror(I)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = rot90(x2)
    x4 = rot180(x2)
    x5 = astuple(x3, x4)
    x6 = astuple(FOUR, EIGHT)
    x7 = apply(tojvec, x6)
    x8 = apply(asobject, x5)
    x9 = mpapply(shift, x8, x7)
    O = paint(x1, x9)
    return O



def solve_9dfd6313_025d127b(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(color, x2)
    x4 = merge(x2)
    x5 = lbind(colorfilter, x2)
    x6 = rbind(argmax, rightmost)
    x7 = compose(x6, x5)
    x8 = mapply(x7, x3)
    x9 = difference(x4, x8)
    O = move(x1, x9, RIGHT)
    return O



def solve_9dfd6313_2281f1f4(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, FIVE)
    x3 = product(x2, x2)
    x4 = power(first, TWO)
    x5 = power(last, TWO)
    x6 = fork(astuple, x4, x5)
    x7 = apply(x6, x3)
    x8 = urcorner(x2)
    x9 = remove(x8, x7)
    O = underfill(x1, TWO, x9)
    return O



def solve_9dfd6313_cf98881b(I):
    x1 = dmirror(I)
    x2 = hsplit(x1, THREE)
    x3 = first(x2)
    x4 = remove(x3, x2)
    x5 = first(x4)
    x6 = last(x4)
    x7 = ofcolor(x5, NINE)
    x8 = ofcolor(x3, FOUR)
    x9 = fill(x6, NINE, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_9dfd6313_d4f3cd78(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, FIVE)
    x3 = delta(x2)
    x4 = fill(x1, EIGHT, x3)
    x5 = box(x2)
    x6 = difference(x5, x2)
    x7 = position(x5, x6)
    x8 = first(x6)
    x9 = shoot(x8, x7)
    O = fill(x4, EIGHT, x9)
    return O



def solve_9dfd6313_bda2d7a6(I):
    x1 = dmirror(I)
    x2 = partition(x1)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = last(x3)
    x6 = remove(x5, x3)
    x7 = repeat(x5, ONE)
    x8 = combine(x7, x6)
    x9 = mpapply(recolor, x4, x8)
    O = paint(x1, x9)
    return O



def solve_9dfd6313_6455b5f5(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = argmax(x2, size)
    x5 = valmin(x2, size)
    x6 = sizefilter(x3, x5)
    x7 = recolor(ONE, x4)
    x8 = merge(x6)
    x9 = paint(x1, x7)
    O = fill(x9, EIGHT, x8)
    return O



def solve_9dfd6313_b8cdaf2b(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = shift(x3, UP)
    x5 = ulcorner(x4)
    x6 = urcorner(x4)
    x7 = shoot(x5, NEG_UNITY)
    x8 = shoot(x6, UP_RIGHT)
    x9 = combine(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_9dfd6313_bd4472b8(I):
    x1 = dmirror(I)
    x2 = width(x1)
    x3 = astuple(TWO, x2)
    x4 = crop(x1, ORIGIN, x3)
    x5 = tophalf(x4)
    x6 = dmirror(x5)
    x7 = hupscale(x6, x2)
    x8 = repeat(x7, TWO)
    x9 = merge(x8)
    O = vconcat(x4, x9)
    return O



def solve_9dfd6313_4be741c5(I):
    x1 = dmirror(I)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = branch(x2, height, width)
    x5 = x4(x1)
    x6 = astuple(ONE, x5)
    x7 = x3(x1)
    x8 = crop(x7, ORIGIN, x6)
    x9 = apply(dedupe, x8)
    O = x3(x9)
    return O



def solve_9dfd6313_bbc9ae5d(I):
    x1 = dmirror(I)
    x2 = width(x1)
    x3 = palette(x1)
    x4 = halve(x2)
    x5 = vupscale(x1, x4)
    x6 = rbind(shoot, UNITY)
    x7 = other(x3, ZERO)
    x8 = ofcolor(x5, x7)
    x9 = mapply(x6, x8)
    O = fill(x5, x7, x9)
    return O



def solve_9dfd6313_d90796e8(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = lbind(contained, TWO)
    x5 = compose(x4, palette)
    x6 = mfilter(x3, x5)
    x7 = cover(x1, x6)
    x8 = matcher(first, THREE)
    x9 = sfilter(x6, x8)
    O = fill(x7, EIGHT, x9)
    return O



def solve_9dfd6313_2c608aff(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = toindices(x4)
    x6 = ofcolor(x1, x2)
    x7 = prapply(connect, x5, x6)
    x8 = fork(either, vline, hline)
    x9 = mfilter(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_9dfd6313_f8b3ba0a(I):
    x1 = dmirror(I)
    x2 = compress(x1)
    x3 = astuple(THREE, ONE)
    x4 = palette(x2)
    x5 = lbind(colorcount, x2)
    x6 = compose(invert, x5)
    x7 = order(x4, x6)
    x8 = rbind(canvas, UNITY)
    x9 = apply(x8, x7)
    x10 = merge(x9)
    O = crop(x10, DOWN, x3)
    return O



def solve_9dfd6313_80af3007(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    x10 = cellwise(x5, x9, ZERO)
    O = downscale(x10, THREE)
    return O



def solve_9dfd6313_83302e8f(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = sfilter(x3, square)
    x5 = difference(x3, x4)
    x6 = merge(x4)
    x7 = recolor(THREE, x6)
    x8 = merge(x5)
    x9 = recolor(FOUR, x8)
    x10 = paint(x1, x7)
    O = paint(x10, x9)
    return O



def solve_9dfd6313_1fad071e(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, ONE)
    x4 = sizefilter(x3, FOUR)
    x5 = size(x4)
    x6 = subtract(FIVE, x5)
    x7 = astuple(ONE, x5)
    x8 = canvas(ONE, x7)
    x9 = astuple(ONE, x6)
    x10 = canvas(ZERO, x9)
    O = hconcat(x8, x10)
    return O



def solve_9dfd6313_11852cab(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = hmirror(x3)
    x5 = vmirror(x3)
    x6 = dmirror(x3)
    x7 = cmirror(x3)
    x8 = paint(x1, x4)
    x9 = paint(x8, x5)
    x10 = paint(x9, x6)
    O = paint(x10, x7)
    return O



def solve_9dfd6313_3428a4f5(I):
    x1 = dmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(SIX, FIVE)
    x5 = ofcolor(x2, TWO)
    x6 = ofcolor(x3, TWO)
    x7 = combine(x5, x6)
    x8 = intersection(x5, x6)
    x9 = difference(x7, x8)
    x10 = canvas(ZERO, x4)
    O = fill(x10, THREE, x9)
    return O



def solve_9dfd6313_178fcbfb(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(vfrontier, x3)
    x5 = fill(x1, TWO, x4)
    x6 = colorfilter(x2, TWO)
    x7 = difference(x2, x6)
    x8 = compose(hfrontier, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x7)
    O = paint(x5, x10)
    return O



def solve_9dfd6313_54d9e175(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = compose(neighbors, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x3)
    x7 = paint(x1, x6)
    x8 = replace(x7, ONE, SIX)
    x9 = replace(x8, TWO, SEVEN)
    x10 = replace(x9, THREE, EIGHT)
    O = replace(x10, FOUR, NINE)
    return O



def solve_9dfd6313_5ad4f10b(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = color(x3)
    x5 = subgrid(x3, x1)
    x6 = leastcolor(x5)
    x7 = replace(x5, x6, ZERO)
    x8 = replace(x7, x4, x6)
    x9 = height(x8)
    x10 = divide(x9, THREE)
    O = downscale(x8, x10)
    return O



def solve_9dfd6313_623ea044(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = center(x3)
    x5 = color(x3)
    x6 = astuple(UNITY, NEG_UNITY)
    x7 = astuple(UP_RIGHT, DOWN_LEFT)
    x8 = combine(x6, x7)
    x9 = lbind(shoot, x4)
    x10 = mapply(x9, x8)
    O = fill(x1, x5, x10)
    return O



def solve_9dfd6313_794b24be(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = size(x2)
    x4 = decrement(x3)
    x5 = canvas(ZERO, THREE_BY_THREE)
    x6 = tojvec(x4)
    x7 = connect(ORIGIN, x6)
    x8 = equality(x3, FOUR)
    x9 = insert(UNITY, x7)
    x10 = branch(x8, x9, x7)
    O = fill(x5, TWO, x10)
    return O



def solve_9dfd6313_88a10436(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = colorfilter(x2, FIVE)
    x4 = first(x3)
    x5 = center(x4)
    x6 = difference(x2, x3)
    x7 = first(x6)
    x8 = normalize(x7)
    x9 = shift(x8, x5)
    x10 = shift(x9, NEG_UNITY)
    O = paint(x1, x10)
    return O



def solve_9dfd6313_88a62173(I):
    x1 = dmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = tophalf(x3)
    x6 = bottomhalf(x2)
    x7 = bottomhalf(x3)
    x8 = astuple(x4, x5)
    x9 = astuple(x6, x7)
    x10 = combine(x8, x9)
    O = leastcommon(x10)
    return O



def solve_9dfd6313_890034e9(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = inbox(x3)
    x5 = recolor(ZERO, x4)
    x6 = occurrences(x1, x5)
    x7 = normalize(x3)
    x8 = shift(x7, NEG_UNITY)
    x9 = lbind(shift, x8)
    x10 = mapply(x9, x6)
    O = fill(x1, x2, x10)
    return O



def solve_9dfd6313_99b1bc43(I):
    x1 = dmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = combine(x4, x5)
    x7 = intersection(x4, x5)
    x8 = difference(x6, x7)
    x9 = shape(x2)
    x10 = canvas(ZERO, x9)
    O = fill(x10, THREE, x8)
    return O



def solve_9dfd6313_a9f96cdd(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = shift(x2, NEG_UNITY)
    x5 = fill(x3, THREE, x4)
    x6 = shift(x2, UP_RIGHT)
    x7 = fill(x5, SIX, x6)
    x8 = shift(x2, DOWN_LEFT)
    x9 = fill(x7, EIGHT, x8)
    x10 = shift(x2, UNITY)
    O = fill(x9, SEVEN, x10)
    return O



def solve_9dfd6313_af902bf9(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, FOUR)
    x3 = prapply(connect, x2, x2)
    x4 = fork(either, vline, hline)
    x5 = mfilter(x3, x4)
    x6 = underfill(x1, NEG_ONE, x5)
    x7 = objects(x6, F, F, T)
    x8 = compose(backdrop, inbox)
    x9 = mapply(x8, x7)
    x10 = fill(x6, TWO, x9)
    O = replace(x10, NEG_ONE, ZERO)
    return O



def solve_9dfd6313_b548a754(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, EIGHT, ZERO)
    x4 = leastcolor(x3)
    x5 = replace(x3, x4, ZERO)
    x6 = leastcolor(x5)
    x7 = merge(x2)
    x8 = backdrop(x7)
    x9 = box(x7)
    x10 = fill(x1, x4, x8)
    O = fill(x10, x6, x9)
    return O



def solve_9dfd6313_c3e719e8(I):
    x1 = dmirror(I)
    x2 = mostcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = upscale(x1, THREE)
    x5 = ofcolor(x4, x2)
    x6 = asindices(x4)
    x7 = difference(x6, x5)
    x8 = hconcat(x3, x1)
    x9 = vconcat(x8, x8)
    x10 = vconcat(x9, x8)
    O = fill(x10, ZERO, x7)
    return O



def solve_9dfd6313_de1cd16c(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = rbind(subgrid, x1)
    x7 = apply(x6, x5)
    x8 = rbind(colorcount, x2)
    x9 = argmax(x7, x8)
    x10 = mostcolor(x9)
    O = canvas(x10, UNITY)
    return O



def solve_9dfd6313_d8c310e9(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = hperiod(x3)
    x5 = multiply(x4, THREE)
    x6 = tojvec(x4)
    x7 = tojvec(x5)
    x8 = shift(x3, x6)
    x9 = shift(x3, x7)
    x10 = paint(x1, x8)
    O = paint(x10, x9)
    return O



def solve_9dfd6313_a3325580(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = valmax(x2, size)
    x4 = sizefilter(x2, x3)
    x5 = order(x4, leftmost)
    x6 = apply(color, x5)
    x7 = astuple(ONE, x3)
    x8 = rbind(canvas, x7)
    x9 = apply(x8, x6)
    x10 = merge(x9)
    O = dmirror(x10)
    return O



def solve_9dfd6313_8eb1be9a(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = interval(NEG_TWO, FOUR, ONE)
    x5 = lbind(shift, x3)
    x6 = height(x3)
    x7 = rbind(multiply, x6)
    x8 = apply(x7, x4)
    x9 = apply(toivec, x8)
    x10 = mapply(x5, x9)
    O = paint(x1, x10)
    return O



def solve_9dfd6313_321b1fc6(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = colorfilter(x2, EIGHT)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = cover(x1, x5)
    x7 = normalize(x5)
    x8 = lbind(shift, x7)
    x9 = apply(ulcorner, x3)
    x10 = mapply(x8, x9)
    O = paint(x6, x10)
    return O



def solve_9dfd6313_1b60fb0c(I):
    x1 = dmirror(I)
    x2 = rot90(x1)
    x3 = ofcolor(x1, ONE)
    x4 = ofcolor(x2, ONE)
    x5 = neighbors(ORIGIN)
    x6 = mapply(neighbors, x5)
    x7 = lbind(shift, x4)
    x8 = apply(x7, x6)
    x9 = lbind(intersection, x3)
    x10 = compose(size, x9)
    x11 = argmax(x8, x10)
    O = underfill(x1, TWO, x11)
    return O



def solve_9dfd6313_ddf7fa4f(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = colorfilter(x2, FIVE)
    x5 = product(x3, x4)
    x6 = fork(vmatching, first, last)
    x7 = sfilter(x5, x6)
    x8 = compose(color, first)
    x9 = fork(recolor, x8, last)
    x10 = mapply(x9, x7)
    O = paint(x1, x10)
    return O



def solve_9dfd6313_47c1f68c(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = vmirror(x1)
    x4 = objects(x1, T, T, T)
    x5 = merge(x4)
    x6 = mostcolor(x5)
    x7 = cellwise(x1, x3, x2)
    x8 = hmirror(x7)
    x9 = cellwise(x7, x8, x2)
    x10 = compress(x9)
    O = replace(x10, x2, x6)
    return O



def solve_9dfd6313_6c434453(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, EIGHT)
    x4 = dneighbors(UNITY)
    x5 = insert(UNITY, x4)
    x6 = merge(x3)
    x7 = cover(x1, x6)
    x8 = apply(ulcorner, x3)
    x9 = lbind(shift, x5)
    x10 = mapply(x9, x8)
    O = fill(x7, TWO, x10)
    return O



def solve_9dfd6313_23581191(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = paint(x1, x6)
    x8 = fork(intersection, first, last)
    x9 = apply(x4, x2)
    x10 = x8(x9)
    O = fill(x7, TWO, x10)
    return O



def solve_9dfd6313_c8cbb738(I):
    x1 = dmirror(I)
    x2 = mostcolor(x1)
    x3 = fgpartition(x1)
    x4 = valmax(x3, shape)
    x5 = canvas(x2, x4)
    x6 = apply(normalize, x3)
    x7 = lbind(subtract, x4)
    x8 = chain(halve, x7, shape)
    x9 = fork(shift, identity, x8)
    x10 = mapply(x9, x6)
    O = paint(x5, x10)
    return O



def solve_9dfd6313_d4469b4b(I):
    x1 = dmirror(I)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = equality(x3, ONE)
    x5 = equality(x3, TWO)
    x6 = branch(x4, UNITY, TWO_BY_TWO)
    x7 = branch(x5, RIGHT, x6)
    x8 = fork(combine, vfrontier, hfrontier)
    x9 = x8(x7)
    x10 = canvas(ZERO, THREE_BY_THREE)
    O = fill(x10, FIVE, x9)
    return O



def solve_9dfd6313_6ecd11f4(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = subgrid(x3, x1)
    x6 = subgrid(x4, x1)
    x7 = width(x5)
    x8 = width(x6)
    x9 = divide(x7, x8)
    x10 = downscale(x5, x9)
    x11 = ofcolor(x10, ZERO)
    O = fill(x6, ZERO, x11)
    return O



def solve_9dfd6313_c444b776(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = argmin(x3, size)
    x5 = backdrop(x4)
    x6 = toobject(x5, x1)
    x7 = normalize(x6)
    x8 = lbind(shift, x7)
    x9 = compose(x8, ulcorner)
    x10 = mapply(x9, x3)
    O = paint(x1, x10)
    return O



def solve_9dfd6313_eb281b96(I):
    x1 = dmirror(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = decrement(x2)
    x5 = astuple(x4, x3)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    x8 = vconcat(x1, x7)
    x9 = double(x4)
    x10 = astuple(x9, x3)
    x11 = crop(x8, DOWN, x10)
    O = vconcat(x8, x11)
    return O



def solve_9dfd6313_ff28f65a(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = double(x3)
    x5 = interval(ZERO, x4, TWO)
    x6 = apply(tojvec, x5)
    x7 = astuple(ONE, NINE)
    x8 = canvas(ZERO, x7)
    x9 = fill(x8, ONE, x6)
    x10 = hsplit(x9, THREE)
    O = merge(x10)
    return O



def solve_9dfd6313_7e0986d6(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = replace(x1, x2, ZERO)
    x5 = leastcolor(x4)
    x6 = rbind(colorcount, x5)
    x7 = chain(positive, decrement, x6)
    x8 = rbind(toobject, x4)
    x9 = chain(x7, x8, dneighbors)
    x10 = sfilter(x3, x9)
    O = fill(x4, x5, x10)
    return O



def solve_9dfd6313_09629e4f(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = argmin(x2, numcolors)
    x4 = normalize(x3)
    x5 = upscale(x4, FOUR)
    x6 = paint(x1, x5)
    x7 = ofcolor(x1, FIVE)
    O = fill(x6, FIVE, x7)
    return O



def solve_9dfd6313_a85d4709(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, FIVE)
    x3 = lbind(matcher, last)
    x4 = lbind(sfilter, x2)
    x5 = lbind(mapply, hfrontier)
    x6 = chain(x5, x4, x3)
    x7 = x6(ZERO)
    x8 = x6(TWO)
    x9 = x6(ONE)
    x10 = fill(x1, TWO, x7)
    x11 = fill(x10, THREE, x8)
    O = fill(x11, FOUR, x9)
    return O



def solve_9dfd6313_feca6190(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = multiply(x3, FIVE)
    x5 = astuple(x4, x4)
    x6 = canvas(ZERO, x5)
    x7 = rbind(shoot, UNITY)
    x8 = compose(x7, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x2)
    x11 = paint(x6, x10)
    O = hmirror(x11)
    return O



def solve_9dfd6313_a68b268e(I):
    x1 = dmirror(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = lefthalf(x2)
    x5 = righthalf(x2)
    x6 = lefthalf(x3)
    x7 = righthalf(x3)
    x8 = ofcolor(x5, FOUR)
    x9 = ofcolor(x4, SEVEN)
    x10 = ofcolor(x6, EIGHT)
    x11 = fill(x7, EIGHT, x10)
    x12 = fill(x11, FOUR, x8)
    O = fill(x12, SEVEN, x9)
    return O



def solve_9dfd6313_beb8660c(I):
    x1 = dmirror(I)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(invert, size)
    x5 = order(x3, x4)
    x6 = apply(normalize, x5)
    x7 = size(x6)
    x8 = interval(ZERO, x7, ONE)
    x9 = apply(toivec, x8)
    x10 = mpapply(shift, x6, x9)
    x11 = canvas(ZERO, x2)
    x12 = paint(x11, x10)
    O = rot180(x12)
    return O



def solve_9dfd6313_913fb3ed(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, THREE)
    x3 = ofcolor(x1, EIGHT)
    x4 = ofcolor(x1, TWO)
    x5 = mapply(neighbors, x2)
    x6 = mapply(neighbors, x3)
    x7 = mapply(neighbors, x4)
    x8 = fill(x1, SIX, x5)
    x9 = fill(x8, FOUR, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_9dfd6313_0962bcdd(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = replace(x1, ZERO, x2)
    x4 = leastcolor(x3)
    x5 = ofcolor(x1, x4)
    x6 = mapply(dneighbors, x5)
    x7 = fill(x1, x4, x6)
    x8 = objects(x7, F, T, T)
    x9 = fork(connect, ulcorner, lrcorner)
    x10 = fork(connect, llcorner, urcorner)
    x11 = fork(combine, x9, x10)
    x12 = mapply(x11, x8)
    O = fill(x7, x2, x12)
    return O



def solve_9dfd6313_3631a71a(I):
    x1 = dmirror(I)
    x2 = shape(x1)
    x3 = replace(x1, NINE, ZERO)
    x4 = lbind(apply, maximum)
    x5 = dmirror(x3)
    x6 = papply(pair, x3, x5)
    x7 = apply(x4, x6)
    x8 = subtract(x2, TWO_BY_TWO)
    x9 = crop(x7, TWO_BY_TWO, x8)
    x10 = vmirror(x9)
    x11 = objects(x10, T, F, T)
    x12 = merge(x11)
    x13 = shift(x12, TWO_BY_TWO)
    O = paint(x7, x13)
    return O



def solve_9dfd6313_05269061(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = neighbors(ORIGIN)
    x4 = mapply(neighbors, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = merge(x2)
    x8 = lbind(shift, x7)
    x9 = mapply(x8, x6)
    x10 = shift(x9, UP_RIGHT)
    x11 = shift(x9, DOWN_LEFT)
    x12 = paint(x1, x9)
    x13 = paint(x12, x10)
    O = paint(x13, x11)
    return O



def solve_9dfd6313_95990924(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = apply(ulcorner, x3)
    x5 = apply(urcorner, x3)
    x6 = apply(llcorner, x3)
    x7 = apply(lrcorner, x3)
    x8 = fill(x1, ONE, x4)
    x9 = fill(x8, TWO, x5)
    x10 = fill(x9, THREE, x6)
    O = fill(x10, FOUR, x7)
    return O



def solve_9dfd6313_e509e548(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = rbind(subgrid, x1)
    x4 = chain(palette, trim, x3)
    x5 = lbind(contained, THREE)
    x6 = compose(x5, x4)
    x7 = fork(add, height, width)
    x8 = compose(decrement, x7)
    x9 = fork(equality, size, x8)
    x10 = mfilter(x2, x6)
    x11 = mfilter(x2, x9)
    x12 = replace(x1, THREE, SIX)
    x13 = fill(x12, TWO, x10)
    O = fill(x13, ONE, x11)
    return O



def solve_9dfd6313_d43fd935(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, THREE)
    x4 = sizefilter(x2, ONE)
    x5 = rbind(vmatching, x3)
    x6 = rbind(hmatching, x3)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = rbind(gravitate, x3)
    x10 = fork(add, center, x9)
    x11 = fork(connect, center, x10)
    x12 = fork(recolor, color, x11)
    x13 = mapply(x12, x8)
    O = paint(x1, x13)
    return O



def solve_9dfd6313_e73095fd(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = fork(equality, toindices, backdrop)
    x5 = sfilter(x3, x4)
    x6 = lbind(mapply, dneighbors)
    x7 = chain(x6, corners, outbox)
    x8 = fork(difference, x7, outbox)
    x9 = ofcolor(x1, FIVE)
    x10 = rbind(intersection, x9)
    x11 = matcher(size, ZERO)
    x12 = chain(x11, x10, x8)
    x13 = mfilter(x5, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_9dfd6313_1bfc4729(I):
    x1 = dmirror(I)
    x2 = asindices(x1)
    x3 = tophalf(x1)
    x4 = bottomhalf(x1)
    x5 = leastcolor(x3)
    x6 = leastcolor(x4)
    x7 = hfrontier(TWO_BY_ZERO)
    x8 = box(x2)
    x9 = combine(x7, x8)
    x10 = fill(x3, x5, x9)
    x11 = hmirror(x10)
    x12 = replace(x11, x5, x6)
    O = vconcat(x10, x12)
    return O



def solve_9dfd6313_93b581b8(I):
    x1 = dmirror(I)
    x2 = fgpartition(x1)
    x3 = chain(cmirror, dmirror, merge)
    x4 = x3(x2)
    x5 = upscale(x4, THREE)
    x6 = astuple(NEG_TWO, NEG_TWO)
    x7 = shift(x5, x6)
    x8 = underpaint(x1, x7)
    x9 = toindices(x4)
    x10 = fork(combine, hfrontier, vfrontier)
    x11 = mapply(x10, x9)
    x12 = difference(x11, x9)
    O = fill(x8, ZERO, x12)
    return O



def solve_9dfd6313_7447852a(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = compose(last, center)
    x5 = order(x3, x4)
    x6 = size(x5)
    x7 = interval(ZERO, x6, THREE)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = interval(ZERO, x6, ONE)
    x11 = pair(x5, x10)
    x12 = sfilter(x11, x9)
    x13 = mapply(first, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_9dfd6313_97999447(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(toindices, x2)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    x8 = paint(x1, x7)
    x9 = interval(ZERO, FIVE, ONE)
    x10 = apply(double, x9)
    x11 = apply(increment, x10)
    x12 = apply(tojvec, x11)
    x13 = prapply(shift, x3, x12)
    x14 = merge(x13)
    O = fill(x8, FIVE, x14)
    return O



def solve_9dfd6313_91714a58(I):
    x1 = dmirror(I)
    x2 = shape(x1)
    x3 = asindices(x1)
    x4 = objects(x1, T, F, T)
    x5 = argmax(x4, size)
    x6 = mostcolor(x5)
    x7 = canvas(ZERO, x2)
    x8 = paint(x7, x5)
    x9 = rbind(toobject, x8)
    x10 = rbind(colorcount, x6)
    x11 = chain(x10, x9, neighbors)
    x12 = lbind(greater, THREE)
    x13 = compose(x12, x11)
    x14 = sfilter(x3, x13)
    O = fill(x8, ZERO, x14)
    return O



def solve_9dfd6313_8e1813be(I):
    x1 = dmirror(I)
    x2 = replace(x1, FIVE, ZERO)
    x3 = objects(x2, T, T, T)
    x4 = first(x3)
    x5 = vline(x4)
    x6 = branch(x5, dmirror, identity)
    x7 = x6(x2)
    x8 = objects(x7, T, T, T)
    x9 = order(x8, uppermost)
    x10 = apply(color, x9)
    x11 = dedupe(x10)
    x12 = size(x11)
    x13 = rbind(repeat, x12)
    x14 = apply(x13, x11)
    O = x6(x14)
    return O



def solve_9dfd6313_bc1d5164(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = crop(x1, TWO_BY_ZERO, THREE_BY_THREE)
    x5 = tojvec(FOUR)
    x6 = crop(x1, x5, THREE_BY_THREE)
    x7 = astuple(TWO, FOUR)
    x8 = crop(x1, x7, THREE_BY_THREE)
    x9 = canvas(ZERO, THREE_BY_THREE)
    x10 = rbind(ofcolor, x2)
    x11 = astuple(x3, x4)
    x12 = astuple(x6, x8)
    x13 = combine(x11, x12)
    x14 = mapply(x10, x13)
    O = fill(x9, x2, x14)
    return O



def solve_9dfd6313_ce602527(I):
    x1 = dmirror(I)
    x2 = vmirror(x1)
    x3 = fgpartition(x2)
    x4 = order(x3, size)
    x5 = last(x4)
    x6 = remove(x5, x4)
    x7 = compose(toindices, normalize)
    x8 = rbind(upscale, TWO)
    x9 = chain(toindices, x8, normalize)
    x10 = x7(x5)
    x11 = rbind(intersection, x10)
    x12 = chain(size, x11, x9)
    x13 = argmax(x6, x12)
    x14 = subgrid(x13, x2)
    O = vmirror(x14)
    return O



def solve_9dfd6313_5c2c9af4(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = center(x3)
    x5 = ulcorner(x3)
    x6 = subtract(x4, x5)
    x7 = multiply(NEG_ONE, NINE)
    x8 = interval(ZERO, NINE, ONE)
    x9 = interval(ZERO, x7, NEG_ONE)
    x10 = lbind(multiply, x6)
    x11 = apply(x10, x8)
    x12 = apply(x10, x9)
    x13 = pair(x11, x12)
    x14 = mapply(box, x13)
    x15 = shift(x14, x4)
    O = fill(x1, x2, x15)
    return O



def solve_9dfd6313_75b8110e(I):
    x1 = dmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = bottomhalf(x2)
    x6 = tophalf(x3)
    x7 = bottomhalf(x3)
    x8 = rbind(ofcolor, ZERO)
    x9 = fork(difference, asindices, x8)
    x10 = fork(toobject, x9, identity)
    x11 = x10(x6)
    x12 = x10(x5)
    x13 = x10(x7)
    x14 = paint(x4, x13)
    x15 = paint(x14, x12)
    O = paint(x15, x11)
    return O



def solve_9dfd6313_c3f564a4(I):
    x1 = dmirror(I)
    x2 = asindices(x1)
    x3 = dmirror(x1)
    x4 = invert(NINE)
    x5 = papply(pair, x1, x3)
    x6 = lbind(apply, maximum)
    x7 = apply(x6, x5)
    x8 = ofcolor(x7, ZERO)
    x9 = difference(x2, x8)
    x10 = toobject(x9, x7)
    x11 = interval(x4, NINE, ONE)
    x12 = interval(NINE, x4, NEG_ONE)
    x13 = pair(x11, x12)
    x14 = lbind(shift, x10)
    x15 = mapply(x14, x13)
    O = paint(x7, x15)
    return O



def solve_9dfd6313_1a07d186(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = mapply(x12, x8)
    x14 = merge(x3)
    x15 = cover(x1, x14)
    O = paint(x15, x13)
    return O



def solve_9dfd6313_d687bc17(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = merge(x3)
    x14 = mapply(x12, x8)
    x15 = cover(x1, x13)
    O = paint(x15, x14)
    return O



def solve_9dfd6313_9af7a82c(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = order(x2, size)
    x4 = valmax(x2, size)
    x5 = rbind(astuple, ONE)
    x6 = lbind(subtract, x4)
    x7 = compose(x5, size)
    x8 = chain(x5, x6, size)
    x9 = fork(canvas, color, x7)
    x10 = lbind(canvas, ZERO)
    x11 = compose(x10, x8)
    x12 = fork(vconcat, x9, x11)
    x13 = compose(cmirror, x12)
    x14 = apply(x13, x3)
    x15 = merge(x14)
    O = cmirror(x15)
    return O



def solve_9dfd6313_ef135b50(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, ZERO)
    x4 = product(x2, x2)
    x5 = power(first, TWO)
    x6 = compose(first, last)
    x7 = fork(equality, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = fork(connect, first, last)
    x10 = mapply(x9, x8)
    x11 = intersection(x10, x3)
    x12 = fill(x1, NINE, x11)
    x13 = trim(x12)
    x14 = asobject(x13)
    x15 = shift(x14, UNITY)
    O = paint(x1, x15)
    return O



def solve_9dfd6313_cbded52d(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = product(x3, x3)
    x5 = fork(vmatching, first, last)
    x6 = fork(hmatching, first, last)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = compose(center, first)
    x10 = compose(center, last)
    x11 = fork(connect, x9, x10)
    x12 = chain(initset, center, x11)
    x13 = compose(color, first)
    x14 = fork(recolor, x13, x12)
    x15 = mapply(x14, x8)
    O = paint(x1, x15)
    return O



def solve_9dfd6313_e26a3af2(I):
    x1 = dmirror(I)
    x2 = rot90(x1)
    x3 = apply(mostcommon, x1)
    x4 = apply(mostcommon, x2)
    x5 = repeat(x3, ONE)
    x6 = repeat(x4, ONE)
    x7 = compose(size, dedupe)
    x8 = x7(x3)
    x9 = x7(x4)
    x10 = greater(x9, x8)
    x11 = branch(x10, height, width)
    x12 = x11(x1)
    x13 = rot90(x5)
    x14 = branch(x10, x6, x13)
    x15 = branch(x10, vupscale, hupscale)
    O = x15(x14, x12)
    return O



def solve_9dfd6313_6cf79266(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, ZERO)
    x3 = astuple(ZERO, ORIGIN)
    x4 = initset(x3)
    x5 = upscale(x4, THREE)
    x6 = toindices(x5)
    x7 = lbind(shift, x6)
    x8 = rbind(difference, x2)
    x9 = chain(size, x8, x7)
    x10 = matcher(x9, ZERO)
    x11 = lbind(add, NEG_UNITY)
    x12 = chain(flip, x10, x11)
    x13 = fork(both, x10, x12)
    x14 = sfilter(x2, x13)
    x15 = mapply(x7, x14)
    O = fill(x1, ONE, x15)
    return O



def solve_9dfd6313_a87f7484(I):
    x1 = dmirror(I)
    x2 = numcolors(x1)
    x3 = portrait(x1)
    x4 = branch(x3, dmirror, identity)
    x5 = x4(x1)
    x6 = decrement(x2)
    x7 = hsplit(x5, x6)
    x8 = rbind(ofcolor, ZERO)
    x9 = apply(x8, x7)
    x10 = leastcommon(x9)
    x11 = matcher(x8, x10)
    x12 = extract(x7, x11)
    O = x4(x12)
    return O



def solve_9dfd6313_4093f84a(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, FIVE)
    x4 = ofcolor(x1, FIVE)
    x5 = portrait(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x3)
    x8 = lefthalf(x7)
    x9 = righthalf(x7)
    x10 = rbind(order, identity)
    x11 = rbind(order, invert)
    x12 = apply(x10, x8)
    x13 = apply(x11, x9)
    x14 = hconcat(x12, x13)
    O = x6(x14)
    return O



def solve_9dfd6313_ba26e723(I):
    x1 = dmirror(I)
    x2 = rbind(divide, THREE)
    x3 = rbind(multiply, THREE)
    x4 = compose(x3, x2)
    x5 = fork(equality, identity, x4)
    x6 = compose(x5, last)
    x7 = ofcolor(x1, FOUR)
    x8 = sfilter(x7, x6)
    O = fill(x1, SIX, x8)
    return O



def solve_9dfd6313_29c11459(I):
    x1 = dmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = objects(x3, T, F, T)
    x5 = objects(x2, T, F, T)
    x6 = compose(hfrontier, center)
    x7 = fork(recolor, color, x6)
    x8 = mapply(x7, x5)
    x9 = paint(x2, x8)
    x10 = mapply(x7, x4)
    x11 = paint(x1, x10)
    x12 = objects(x9, T, F, T)
    x13 = apply(urcorner, x12)
    x14 = shift(x13, RIGHT)
    x15 = merge(x12)
    x16 = paint(x11, x15)
    O = fill(x16, FIVE, x14)
    return O



def solve_9dfd6313_963e52fc(I):
    x1 = dmirror(I)
    x2 = width(x1)
    x3 = asobject(x1)
    x4 = hperiod(x3)
    x5 = height(x3)
    x6 = astuple(x5, x4)
    x7 = ulcorner(x3)
    x8 = crop(x1, x7, x6)
    x9 = rot90(x8)
    x10 = double(x2)
    x11 = divide(x10, x4)
    x12 = increment(x11)
    x13 = repeat(x9, x12)
    x14 = merge(x13)
    x15 = rot270(x14)
    x16 = astuple(x5, x10)
    O = crop(x15, ORIGIN, x16)
    return O



def solve_9dfd6313_1f0c79e5(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = leastcolor(x3)
    x5 = ofcolor(x3, x4)
    x6 = combine(x2, x5)
    x7 = recolor(x4, x6)
    x8 = compose(decrement, double)
    x9 = ulcorner(x6)
    x10 = invert(x9)
    x11 = shift(x2, x10)
    x12 = apply(x8, x11)
    x13 = interval(ZERO, NINE, ONE)
    x14 = prapply(multiply, x12, x13)
    x15 = lbind(shift, x7)
    x16 = mapply(x15, x14)
    O = paint(x1, x16)
    return O



def solve_9dfd6313_6773b310(I):
    x1 = dmirror(I)
    x2 = compress(x1)
    x3 = neighbors(ORIGIN)
    x4 = insert(ORIGIN, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = astuple(FOUR, FOUR)
    x8 = shift(x6, x7)
    x9 = fork(insert, identity, neighbors)
    x10 = apply(x9, x8)
    x11 = rbind(toobject, x2)
    x12 = apply(x11, x10)
    x13 = rbind(colorcount, SIX)
    x14 = matcher(x13, TWO)
    x15 = mfilter(x12, x14)
    x16 = fill(x2, ONE, x15)
    x17 = replace(x16, SIX, ZERO)
    O = downscale(x17, THREE)
    return O



def solve_9dfd6313_780d0b14(I):
    x1 = dmirror(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, T, T)
    x4 = rbind(greater, TWO)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = totuple(x6)
    x8 = apply(color, x7)
    x9 = apply(center, x7)
    x10 = pair(x8, x9)
    x11 = fill(x1, ZERO, x2)
    x12 = paint(x11, x10)
    x13 = rbind(greater, ONE)
    x14 = compose(dedupe, totuple)
    x15 = chain(x13, size, x14)
    x16 = sfilter(x12, x15)
    x17 = rot90(x16)
    x18 = sfilter(x17, x15)
    O = rot270(x18)
    return O



def solve_9dfd6313_2204b7a8(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sfilter, x2)
    x4 = compose(size, x3)
    x5 = x4(vline)
    x6 = x4(hline)
    x7 = greater(x5, x6)
    x8 = branch(x7, lefthalf, tophalf)
    x9 = branch(x7, righthalf, bottomhalf)
    x10 = branch(x7, hconcat, vconcat)
    x11 = x8(x1)
    x12 = x9(x1)
    x13 = index(x11, ORIGIN)
    x14 = shape(x12)
    x15 = decrement(x14)
    x16 = index(x12, x15)
    x17 = replace(x11, THREE, x13)
    x18 = replace(x12, THREE, x16)
    O = x10(x17, x18)
    return O



def solve_9dfd6313_d9f24cd1(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, FIVE)
    x4 = prapply(connect, x2, x3)
    x5 = mfilter(x4, vline)
    x6 = underfill(x1, TWO, x5)
    x7 = matcher(numcolors, TWO)
    x8 = objects(x6, F, F, T)
    x9 = sfilter(x8, x7)
    x10 = difference(x8, x9)
    x11 = colorfilter(x10, TWO)
    x12 = mapply(toindices, x11)
    x13 = apply(urcorner, x9)
    x14 = shift(x13, UNITY)
    x15 = rbind(shoot, UP)
    x16 = mapply(x15, x14)
    x17 = fill(x6, TWO, x16)
    x18 = mapply(vfrontier, x12)
    O = fill(x17, TWO, x18)
    return O



def solve_9dfd6313_b782dc8a(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = ofcolor(x1, x2)
    x5 = first(x4)
    x6 = dneighbors(x5)
    x7 = toobject(x6, x1)
    x8 = mostcolor(x7)
    x9 = ofcolor(x1, x8)
    x10 = colorfilter(x3, ZERO)
    x11 = rbind(adjacent, x9)
    x12 = mfilter(x10, x11)
    x13 = toindices(x12)
    x14 = rbind(manhattan, x4)
    x15 = chain(even, x14, initset)
    x16 = sfilter(x13, x15)
    x17 = difference(x13, x16)
    x18 = fill(x1, x2, x16)
    O = fill(x18, x8, x17)
    return O



def solve_9dfd6313_673ef223(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, EIGHT)
    x4 = replace(x1, EIGHT, FOUR)
    x5 = colorfilter(x2, TWO)
    x6 = argmin(x2, uppermost)
    x7 = apply(uppermost, x5)
    x8 = fork(subtract, maximum, minimum)
    x9 = x8(x7)
    x10 = toivec(x9)
    x11 = leftmost(x6)
    x12 = equality(x11, ZERO)
    x13 = branch(x12, LEFT, RIGHT)
    x14 = rbind(shoot, x13)
    x15 = mapply(x14, x3)
    x16 = underfill(x4, EIGHT, x15)
    x17 = shift(x3, x10)
    x18 = mapply(hfrontier, x17)
    O = underfill(x16, EIGHT, x18)
    return O



def solve_9dfd6313_f5b8619d(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = mapply(vfrontier, x3)
    x5 = underfill(x1, EIGHT, x4)
    x6 = hconcat(x5, x5)
    O = vconcat(x6, x6)
    return O



def solve_9dfd6313_f8c80d96(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = colorfilter(x3, x2)
    x5 = argmax(x4, size)
    x6 = argmin(x3, width)
    x7 = size(x6)
    x8 = equality(x7, ONE)
    x9 = branch(x8, identity, outbox)
    x10 = chain(outbox, outbox, x9)
    x11 = power(x10, TWO)
    x12 = power(x10, THREE)
    x13 = x10(x5)
    x14 = x11(x5)
    x15 = x12(x5)
    x16 = fill(x1, x2, x13)
    x17 = fill(x16, x2, x14)
    x18 = fill(x17, x2, x15)
    O = replace(x18, ZERO, FIVE)
    return O



def solve_9dfd6313_ecdecbb3(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = colorfilter(x2, EIGHT)
    x5 = product(x3, x4)
    x6 = fork(gravitate, first, last)
    x7 = compose(crement, x6)
    x8 = compose(center, first)
    x9 = fork(add, x8, x7)
    x10 = fork(connect, x8, x9)
    x11 = apply(x10, x5)
    x12 = lbind(greater, EIGHT)
    x13 = compose(x12, size)
    x14 = mfilter(x11, x13)
    x15 = fill(x1, TWO, x14)
    x16 = apply(x9, x5)
    x17 = intersection(x14, x16)
    x18 = mapply(neighbors, x17)
    O = fill(x15, EIGHT, x18)
    return O



def solve_9dfd6313_e5062a87(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, TWO)
    x3 = recolor(ZERO, x2)
    x4 = normalize(x3)
    x5 = occurrences(x1, x3)
    x6 = lbind(shift, x4)
    x7 = apply(x6, x5)
    x8 = astuple(ONE, THREE)
    x9 = astuple(FIVE, ONE)
    x10 = astuple(TWO, SIX)
    x11 = initset(x8)
    x12 = insert(x9, x11)
    x13 = insert(x10, x12)
    x14 = rbind(contained, x13)
    x15 = chain(flip, x14, ulcorner)
    x16 = sfilter(x7, x15)
    x17 = merge(x16)
    x18 = recolor(TWO, x17)
    O = paint(x1, x18)
    return O



def solve_9dfd6313_a8d7556c(I):
    x1 = dmirror(I)
    x2 = initset(ORIGIN)
    x3 = recolor(ZERO, x2)
    x4 = upscale(x3, TWO)
    x5 = occurrences(x1, x4)
    x6 = lbind(shift, x4)
    x7 = mapply(x6, x5)
    x8 = fill(x1, TWO, x7)
    x9 = add(SIX, SIX)
    x10 = astuple(EIGHT, x9)
    x11 = index(x8, x10)
    x12 = equality(x11, TWO)
    x13 = initset(x10)
    x14 = add(x10, DOWN)
    x15 = insert(x14, x13)
    x16 = toobject(x15, x8)
    x17 = toobject(x15, x1)
    x18 = branch(x12, x17, x16)
    O = paint(x8, x18)
    return O



def solve_9dfd6313_834ec97d(I):
    x1 = dmirror(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = shift(x4, DOWN)
    x6 = fill(x1, ZERO, x4)
    x7 = paint(x6, x5)
    x8 = uppermost(x5)
    x9 = leftmost(x5)
    x10 = subtract(x9, TEN)
    x11 = add(x9, TEN)
    x12 = interval(x10, x11, TWO)
    x13 = lbind(greater, x8)
    x14 = compose(x13, first)
    x15 = rbind(contained, x12)
    x16 = compose(x15, last)
    x17 = sfilter(x2, x14)
    x18 = sfilter(x17, x16)
    O = fill(x7, FOUR, x18)
    return O



def solve_9dfd6313_90f3ed37(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, uppermost)
    x4 = first(x3)
    x5 = remove(x4, x3)
    x6 = normalize(x4)
    x7 = lbind(shift, x6)
    x8 = compose(x7, ulcorner)
    x9 = interval(TWO, NEG_ONE, NEG_ONE)
    x10 = apply(tojvec, x9)
    x11 = rbind(apply, x10)
    x12 = lbind(compose, size)
    x13 = lbind(lbind, intersection)
    x14 = compose(x12, x13)
    x15 = lbind(lbind, shift)
    x16 = chain(x11, x15, x8)
    x17 = fork(argmax, x16, x14)
    x18 = mapply(x17, x5)
    O = underfill(x1, ONE, x18)
    return O



def solve_9dfd6313_8403a5d5(I):
    x1 = dmirror(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = color(x4)
    x6 = leftmost(x4)
    x7 = interval(x6, TEN, TWO)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = sfilter(x2, x9)
    x11 = increment(x6)
    x12 = add(x6, THREE)
    x13 = interval(x11, TEN, FOUR)
    x14 = interval(x12, TEN, FOUR)
    x15 = lbind(astuple, NINE)
    x16 = apply(tojvec, x13)
    x17 = apply(x15, x14)
    x18 = fill(x1, x5, x10)
    x19 = fill(x18, FIVE, x16)
    O = fill(x19, FIVE, x17)
    return O



def solve_9dfd6313_539a4f51(I):
    x1 = dmirror(I)
    x2 = shape(x1)
    x3 = index(x1, ORIGIN)
    x4 = colorcount(x1, ZERO)
    x5 = decrement(x2)
    x6 = positive(x4)
    x7 = branch(x6, x5, x2)
    x8 = crop(x1, ORIGIN, x7)
    x9 = width(x8)
    x10 = astuple(ONE, x9)
    x11 = crop(x8, ORIGIN, x10)
    x12 = vupscale(x11, x9)
    x13 = dmirror(x12)
    x14 = hconcat(x8, x12)
    x15 = hconcat(x13, x8)
    x16 = vconcat(x14, x15)
    x17 = asobject(x16)
    x18 = multiply(UNITY, TEN)
    x19 = canvas(x3, x18)
    O = paint(x19, x17)
    return O



def solve_9dfd6313_3bdb4ada(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = compose(increment, ulcorner)
    x5 = compose(decrement, lrcorner)
    x6 = apply(x4, x3)
    x7 = apply(x5, x3)
    x8 = papply(connect, x6, x7)
    x9 = apply(last, x6)
    x10 = compose(last, first)
    x11 = power(last, TWO)
    x12 = fork(subtract, x10, x11)
    x13 = compose(even, x12)
    x14 = lbind(rbind, astuple)
    x15 = lbind(compose, x13)
    x16 = compose(x15, x14)
    x17 = fork(sfilter, first, x16)
    x18 = pair(x8, x9)
    x19 = mapply(x17, x18)
    O = fill(x1, ZERO, x19)
    return O



def solve_9dfd6313_ec883f72(I):
    x1 = dmirror(I)
    x2 = palette(x1)
    x3 = objects(x1, T, T, T)
    x4 = fork(multiply, height, width)
    x5 = argmax(x3, x4)
    x6 = color(x5)
    x7 = remove(ZERO, x2)
    x8 = other(x7, x6)
    x9 = lrcorner(x5)
    x10 = llcorner(x5)
    x11 = urcorner(x5)
    x12 = ulcorner(x5)
    x13 = shoot(x9, UNITY)
    x14 = shoot(x10, DOWN_LEFT)
    x15 = shoot(x11, UP_RIGHT)
    x16 = shoot(x12, NEG_UNITY)
    x17 = combine(x13, x14)
    x18 = combine(x15, x16)
    x19 = combine(x17, x18)
    O = underfill(x1, x8, x19)
    return O



def solve_9dfd6313_2bee17df(I):
    x1 = dmirror(I)
    x2 = height(x1)
    x3 = rot90(x1)
    x4 = subtract(x2, TWO)
    x5 = interval(ZERO, x2, ONE)
    x6 = rbind(colorcount, ZERO)
    x7 = matcher(x6, x4)
    x8 = rbind(vsplit, x2)
    x9 = lbind(apply, x7)
    x10 = compose(x9, x8)
    x11 = x10(x1)
    x12 = pair(x5, x11)
    x13 = sfilter(x12, last)
    x14 = mapply(hfrontier, x13)
    x15 = x10(x3)
    x16 = pair(x15, x5)
    x17 = sfilter(x16, first)
    x18 = mapply(vfrontier, x17)
    x19 = astuple(x14, x18)
    x20 = merge(x19)
    O = underfill(x1, THREE, x20)
    return O



def solve_9dfd6313_e8dc4411(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, ZERO)
    x4 = ofcolor(x1, x2)
    x5 = position(x3, x4)
    x6 = fork(connect, ulcorner, lrcorner)
    x7 = x6(x3)
    x8 = intersection(x3, x7)
    x9 = equality(x7, x8)
    x10 = fork(subtract, identity, crement)
    x11 = fork(add, identity, x10)
    x12 = branch(x9, identity, x11)
    x13 = shape(x3)
    x14 = multiply(x13, x5)
    x15 = apply(x12, x14)
    x16 = interval(ONE, FIVE, ONE)
    x17 = lbind(multiply, x15)
    x18 = apply(x17, x16)
    x19 = lbind(shift, x3)
    x20 = mapply(x19, x18)
    O = fill(x1, x2, x20)
    return O



def solve_9dfd6313_29623171(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = interval(ZERO, NINE, FOUR)
    x4 = product(x3, x3)
    x5 = rbind(add, THREE)
    x6 = rbind(interval, ONE)
    x7 = fork(x6, identity, x5)
    x8 = compose(x7, first)
    x9 = compose(x7, last)
    x10 = fork(product, x8, x9)
    x11 = rbind(colorcount, x2)
    x12 = rbind(toobject, x1)
    x13 = compose(x11, x12)
    x14 = apply(x10, x4)
    x15 = valmax(x14, x13)
    x16 = matcher(x13, x15)
    x17 = compose(flip, x16)
    x18 = mfilter(x14, x16)
    x19 = mfilter(x14, x17)
    x20 = fill(x1, x2, x18)
    O = fill(x20, ZERO, x19)
    return O



def solve_9dfd6313_b0c4d837(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, FIVE)
    x3 = ofcolor(x1, EIGHT)
    x4 = height(x2)
    x5 = decrement(x4)
    x6 = height(x3)
    x7 = subtract(x5, x6)
    x8 = astuple(ONE, x7)
    x9 = canvas(EIGHT, x8)
    x10 = subtract(SIX, x7)
    x11 = astuple(ONE, x10)
    x12 = canvas(ZERO, x11)
    x13 = hconcat(x9, x12)
    x14 = hsplit(x13, TWO)
    x15 = first(x14)
    x16 = last(x14)
    x17 = vmirror(x16)
    x18 = vconcat(x15, x17)
    x19 = astuple(ONE, THREE)
    x20 = canvas(ZERO, x19)
    O = vconcat(x18, x20)
    return O



def solve_9dfd6313_8731374e(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = height(x4)
    x6 = width(x4)
    x7 = vsplit(x4, x5)
    x8 = lbind(greater, FOUR)
    x9 = compose(x8, numcolors)
    x10 = sfilter(x7, x9)
    x11 = merge(x10)
    x12 = rot90(x11)
    x13 = vsplit(x12, x6)
    x14 = sfilter(x13, x9)
    x15 = merge(x14)
    x16 = rot270(x15)
    x17 = leastcolor(x16)
    x18 = ofcolor(x16, x17)
    x19 = fork(combine, vfrontier, hfrontier)
    x20 = mapply(x19, x18)
    O = fill(x16, x17, x20)
    return O



def solve_9dfd6313_db93a21d(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, NINE)
    x4 = colorfilter(x2, NINE)
    x5 = rbind(shoot, DOWN)
    x6 = mapply(x5, x3)
    x7 = underfill(x1, ONE, x6)
    x8 = compose(halve, width)
    x9 = rbind(greater, ONE)
    x10 = compose(x9, x8)
    x11 = matcher(x8, THREE)
    x12 = power(outbox, TWO)
    x13 = power(outbox, THREE)
    x14 = mapply(outbox, x4)
    x15 = sfilter(x4, x10)
    x16 = sfilter(x4, x11)
    x17 = mapply(x12, x15)
    x18 = mapply(x13, x16)
    x19 = fill(x7, THREE, x14)
    x20 = fill(x19, THREE, x17)
    O = fill(x20, THREE, x18)
    return O



def solve_9dfd6313_53b68214(I):
    x1 = dmirror(I)
    x2 = width(x1)
    x3 = objects(x1, T, T, T)
    x4 = first(x3)
    x5 = vperiod(x4)
    x6 = toivec(x5)
    x7 = interval(ZERO, NINE, ONE)
    x8 = lbind(multiply, x6)
    x9 = apply(x8, x7)
    x10 = lbind(shift, x4)
    x11 = mapply(x10, x9)
    x12 = astuple(x2, x2)
    x13 = portrait(x4)
    x14 = shape(x4)
    x15 = add(DOWN, x14)
    x16 = decrement(x15)
    x17 = shift(x4, x16)
    x18 = branch(x13, x11, x17)
    x19 = canvas(ZERO, x12)
    x20 = paint(x19, x4)
    O = paint(x20, x18)
    return O



def solve_9dfd6313_d6ad076f(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = argmin(x2, size)
    x4 = argmax(x2, size)
    x5 = vmatching(x3, x4)
    x6 = branch(x5, DOWN, RIGHT)
    x7 = branch(x5, uppermost, leftmost)
    x8 = valmax(x2, x7)
    x9 = x7(x3)
    x10 = equality(x8, x9)
    x11 = branch(x10, NEG_ONE, ONE)
    x12 = multiply(x6, x11)
    x13 = inbox(x3)
    x14 = rbind(shoot, x12)
    x15 = mapply(x14, x13)
    x16 = underfill(x1, EIGHT, x15)
    x17 = objects(x16, T, F, T)
    x18 = colorfilter(x17, EIGHT)
    x19 = rbind(bordering, x1)
    x20 = mfilter(x18, x19)
    O = cover(x16, x20)
    return O



def solve_9dfd6313_6cdd2623(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = prapply(connect, x3, x3)
    x5 = fgpartition(x1)
    x6 = merge(x5)
    x7 = cover(x1, x6)
    x8 = fork(either, hline, vline)
    x9 = box(x6)
    x10 = rbind(difference, x9)
    x11 = chain(positive, size, x10)
    x12 = fork(both, x8, x11)
    x13 = mfilter(x4, x12)
    O = fill(x7, x2, x13)
    return O



def solve_9dfd6313_8d510a79(I):
    x1 = dmirror(I)
    x2 = ofcolor(x1, ONE)
    x3 = ofcolor(x1, TWO)
    x4 = ofcolor(x1, FIVE)
    x5 = uppermost(x4)
    x6 = chain(toivec, decrement, double)
    x7 = lbind(greater, x5)
    x8 = compose(x7, first)
    x9 = chain(invert, x6, x8)
    x10 = fork(shoot, identity, x9)
    x11 = compose(x6, x8)
    x12 = fork(shoot, identity, x11)
    x13 = lbind(matcher, x8)
    x14 = compose(x13, x8)
    x15 = fork(sfilter, x12, x14)
    x16 = mapply(x10, x2)
    x17 = mapply(x15, x3)
    x18 = underfill(x1, TWO, x17)
    O = fill(x18, ONE, x16)
    return O



def solve_9dfd6313_3345333e(I):
    x1 = dmirror(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = cover(x1, x3)
    x5 = leastcolor(x4)
    x6 = ofcolor(x4, x5)
    x7 = neighbors(ORIGIN)
    x8 = mapply(neighbors, x7)
    x9 = vmirror(x6)
    x10 = lbind(shift, x9)
    x11 = apply(x10, x8)
    x12 = rbind(intersection, x6)
    x13 = compose(size, x12)
    x14 = argmax(x11, x13)
    O = fill(x4, x5, x14)
    return O



def solve_9dfd6313_b190f7f5(I):
    x1 = dmirror(I)
    x2 = portrait(x1)
    x3 = branch(x2, vsplit, hsplit)
    x4 = x3(x1, TWO)
    x5 = argmin(x4, numcolors)
    x6 = argmax(x4, numcolors)
    x7 = width(x6)
    x8 = rbind(repeat, x7)
    x9 = chain(dmirror, merge, x8)
    x10 = upscale(x6, x7)
    x11 = x9(x5)
    x12 = x9(x11)
    x13 = ofcolor(x12, ZERO)
    O = fill(x10, ZERO, x13)
    return O



def solve_9dfd6313_caa06a1f(I):
    x1 = dmirror(I)
    x2 = asobject(x1)
    x3 = shape(x1)
    x4 = decrement(x3)
    x5 = index(x1, x4)
    x6 = double(x3)
    x7 = canvas(x5, x6)
    x8 = paint(x7, x2)
    x9 = objects(x8, F, F, T)
    x10 = first(x9)
    x11 = shift(x10, LEFT)
    x12 = vperiod(x11)
    x13 = hperiod(x11)
    x14 = neighbors(ORIGIN)
    x15 = lbind(mapply, neighbors)
    x16 = power(x15, TWO)
    x17 = x16(x14)
    x18 = astuple(x12, x13)
    x19 = lbind(multiply, x18)
    x20 = apply(x19, x17)
    x21 = lbind(shift, x11)
    x22 = mapply(x21, x20)
    O = paint(x1, x22)
    return O



def solve_9dfd6313_e21d9049(I):
    x1 = dmirror(I)
    x2 = asindices(x1)
    x3 = leastcolor(x1)
    x4 = objects(x1, T, F, T)
    x5 = ofcolor(x1, x3)
    x6 = merge(x4)
    x7 = shape(x6)
    x8 = neighbors(ORIGIN)
    x9 = lbind(mapply, neighbors)
    x10 = power(x9, TWO)
    x11 = x10(x8)
    x12 = lbind(multiply, x7)
    x13 = lbind(shift, x6)
    x14 = apply(x12, x11)
    x15 = mapply(x13, x14)
    x16 = lbind(hmatching, x5)
    x17 = lbind(vmatching, x5)
    x18 = fork(either, x16, x17)
    x19 = compose(x18, initset)
    x20 = paint(x1, x15)
    x21 = sfilter(x2, x19)
    x22 = difference(x2, x21)
    O = cover(x20, x22)
    return O



def solve_9dfd6313_746b3537(I):
    x1 = dmirror(I)
    x2 = chain(size, dedupe, first)
    x3 = x2(x1)
    x4 = equality(x3, ONE)
    x5 = branch(x4, dmirror, identity)
    x6 = x5(x1)
    x7 = objects(x6, T, F, F)
    x8 = order(x7, leftmost)
    x9 = apply(color, x8)
    x10 = repeat(x9, ONE)
    O = x5(x10)
    return O



def solve_9dfd6313_63613498(I):
    x1 = dmirror(I)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = ofcolor(x2, ZERO)
    x4 = asindices(x2)
    x5 = difference(x4, x3)
    x6 = normalize(x5)
    x7 = objects(x1, T, F, T)
    x8 = compose(toindices, normalize)
    x9 = matcher(x8, x6)
    x10 = mfilter(x7, x9)
    x11 = fill(x1, FIVE, x10)
    x12 = asobject(x2)
    O = paint(x11, x12)
    return O



def solve_9dfd6313_06df4c85(I):
    x1 = dmirror(I)
    x2 = partition(x1)
    x3 = mostcolor(x1)
    x4 = ofcolor(x1, x3)
    x5 = colorfilter(x2, ZERO)
    x6 = argmax(x2, size)
    x7 = difference(x2, x5)
    x8 = remove(x6, x7)
    x9 = merge(x8)
    x10 = product(x9, x9)
    x11 = power(first, TWO)
    x12 = compose(first, last)
    x13 = fork(equality, x11, x12)
    x14 = sfilter(x10, x13)
    x15 = compose(last, first)
    x16 = power(last, TWO)
    x17 = fork(connect, x15, x16)
    x18 = fork(recolor, color, x17)
    x19 = apply(x18, x14)
    x20 = fork(either, vline, hline)
    x21 = mfilter(x19, x20)
    x22 = paint(x1, x21)
    O = fill(x22, x3, x4)
    return O



def solve_9dfd6313_4522001f(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = toindices(x3)
    x5 = contained(ZERO_BY_TWO, x4)
    x6 = contained(TWO_BY_TWO, x4)
    x7 = contained(TWO_BY_ZERO, x4)
    x8 = astuple(NINE, NINE)
    x9 = canvas(ZERO, x8)
    x10 = astuple(THREE, ORIGIN)
    x11 = initset(x10)
    x12 = upscale(x11, TWO)
    x13 = upscale(x12, TWO)
    x14 = shape(x13)
    x15 = shift(x13, x14)
    x16 = combine(x13, x15)
    x17 = paint(x9, x16)
    x18 = rot90(x17)
    x19 = rot180(x17)
    x20 = rot270(x17)
    x21 = branch(x5, x18, x17)
    x22 = branch(x6, x19, x21)
    O = branch(x7, x20, x22)
    return O



def solve_9dfd6313_eb5a1d5d(I):
    x1 = dmirror(I)
    x2 = compose(dmirror, dedupe)
    x3 = x2(x1)
    x4 = x2(x3)
    x5 = fork(remove, last, identity)
    x6 = compose(hmirror, x5)
    x7 = fork(vconcat, identity, x6)
    x8 = x7(x4)
    x9 = dmirror(x8)
    O = x7(x9)
    return O



def solve_9dfd6313_995c5fa3(I):
    x1 = dmirror(I)
    x2 = hsplit(x1, THREE)
    x3 = astuple(TWO, ONE)
    x4 = rbind(ofcolor, ZERO)
    x5 = compose(ulcorner, x4)
    x6 = compose(size, x4)
    x7 = matcher(x6, ZERO)
    x8 = matcher(x5, UNITY)
    x9 = matcher(x5, DOWN)
    x10 = matcher(x5, x3)
    x11 = rbind(multiply, THREE)
    x12 = power(double, TWO)
    x13 = compose(double, x7)
    x14 = chain(x12, double, x8)
    x15 = compose(x11, x9)
    x16 = compose(x12, x10)
    x17 = fork(add, x13, x14)
    x18 = fork(add, x15, x16)
    x19 = fork(add, x17, x18)
    x20 = rbind(canvas, UNITY)
    x21 = compose(x20, x19)
    x22 = apply(x21, x2)
    x23 = merge(x22)
    O = hupscale(x23, THREE)
    return O



def solve_9dfd6313_36fdfd69(I):
    x1 = dmirror(I)
    x2 = upscale(x1, TWO)
    x3 = objects(x2, T, T, T)
    x4 = colorfilter(x3, TWO)
    x5 = fork(manhattan, first, last)
    x6 = lbind(greater, FIVE)
    x7 = compose(x6, x5)
    x8 = product(x4, x4)
    x9 = sfilter(x8, x7)
    x10 = apply(merge, x9)
    x11 = mapply(delta, x10)
    x12 = fill(x2, FOUR, x11)
    x13 = merge(x4)
    x14 = paint(x12, x13)
    O = downscale(x14, TWO)
    return O



def solve_9dfd6313_0a938d79(I):
    x1 = dmirror(I)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = x3(x1)
    x5 = fgpartition(x4)
    x6 = merge(x5)
    x7 = chain(double, decrement, width)
    x8 = x7(x6)
    x9 = compose(vfrontier, tojvec)
    x10 = lbind(mapply, x9)
    x11 = rbind(interval, x8)
    x12 = width(x4)
    x13 = rbind(x11, x12)
    x14 = chain(x10, x13, leftmost)
    x15 = fork(recolor, color, x14)
    x16 = mapply(x15, x5)
    x17 = paint(x4, x16)
    O = x3(x17)
    return O



def solve_9dfd6313_045e512c(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = lbind(shift, x3)
    x6 = lbind(mapply, x5)
    x7 = double(TEN)
    x8 = interval(FOUR, x7, FOUR)
    x9 = rbind(apply, x8)
    x10 = lbind(position, x3)
    x11 = lbind(rbind, multiply)
    x12 = chain(x9, x11, x10)
    x13 = compose(x6, x12)
    x14 = fork(recolor, color, x13)
    x15 = mapply(x14, x4)
    O = paint(x1, x15)
    return O



def solve_9dfd6313_99fa7670(I):
    x1 = dmirror(I)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x3)
    x8 = paint(x1, x7)
    x9 = add(x2, DOWN_LEFT)
    x10 = initset(x9)
    x11 = recolor(ZERO, x10)
    x12 = objects(x8, T, F, T)
    x13 = insert(x11, x12)
    x14 = order(x13, uppermost)
    x15 = first(x14)
    x16 = remove(x11, x14)
    x17 = remove(x15, x14)
    x18 = compose(lrcorner, first)
    x19 = compose(lrcorner, last)
    x20 = fork(connect, x18, x19)
    x21 = compose(color, first)
    x22 = fork(recolor, x21, x20)
    x23 = pair(x16, x17)
    x24 = mapply(x22, x23)
    O = underpaint(x8, x24)
    return O



def solve_9dfd6313_72322fa7(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = matcher(numcolors, ONE)
    x4 = sfilter(x2, x3)
    x5 = difference(x2, x4)
    x6 = lbind(matcher, first)
    x7 = compose(x6, mostcolor)
    x8 = fork(sfilter, identity, x7)
    x9 = fork(difference, identity, x8)
    x10 = lbind(occurrences, x1)
    x11 = compose(x10, x8)
    x12 = compose(x10, x9)
    x13 = compose(ulcorner, x9)
    x14 = fork(subtract, ulcorner, x13)
    x15 = lbind(rbind, add)
    x16 = compose(x15, x14)
    x17 = fork(apply, x16, x12)
    x18 = lbind(lbind, shift)
    x19 = compose(x18, normalize)
    x20 = fork(mapply, x19, x11)
    x21 = fork(mapply, x19, x17)
    x22 = mapply(x20, x5)
    x23 = mapply(x21, x5)
    x24 = paint(x1, x22)
    O = paint(x24, x23)
    return O



def solve_9dfd6313_855e0971(I):
    x1 = dmirror(I)
    x2 = frontiers(x1)
    x3 = sfilter(x2, hline)
    x4 = size(x3)
    x5 = positive(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x1)
    x8 = rbind(subgrid, x7)
    x9 = matcher(color, ZERO)
    x10 = compose(flip, x9)
    x11 = partition(x7)
    x12 = sfilter(x11, x10)
    x13 = rbind(ofcolor, ZERO)
    x14 = lbind(mapply, vfrontier)
    x15 = chain(x14, x13, x8)
    x16 = fork(shift, x15, ulcorner)
    x17 = fork(intersection, toindices, x16)
    x18 = mapply(x17, x12)
    x19 = fill(x7, ZERO, x18)
    O = x6(x19)
    return O



def solve_9dfd6313_a78176bb(I):
    x1 = dmirror(I)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = remove(ZERO, x2)
    x5 = other(x4, FIVE)
    x6 = colorfilter(x3, FIVE)
    x7 = lbind(index, x1)
    x8 = compose(x7, urcorner)
    x9 = matcher(x8, FIVE)
    x10 = sfilter(x6, x9)
    x11 = difference(x6, x10)
    x12 = apply(urcorner, x10)
    x13 = apply(llcorner, x11)
    x14 = rbind(add, UP_RIGHT)
    x15 = rbind(add, DOWN_LEFT)
    x16 = apply(x14, x12)
    x17 = apply(x15, x13)
    x18 = rbind(shoot, UNITY)
    x19 = rbind(shoot, NEG_UNITY)
    x20 = fork(combine, x18, x19)
    x21 = mapply(x20, x16)
    x22 = mapply(x20, x17)
    x23 = combine(x21, x22)
    x24 = fill(x1, x5, x23)
    O = replace(x24, FIVE, ZERO)
    return O



def solve_9dfd6313_952a094c(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = argmax(x2, size)
    x5 = outbox(x4)
    x6 = corners(x5)
    x7 = lbind(rbind, manhattan)
    x8 = lbind(argmax, x3)
    x9 = chain(x8, x7, initset)
    x10 = compose(color, x9)
    x11 = fork(astuple, x10, identity)
    x12 = apply(x11, x6)
    x13 = merge(x3)
    x14 = cover(x1, x13)
    O = paint(x14, x12)
    return O



def solve_9dfd6313_6d58a25d(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = merge(x4)
    x6 = color(x5)
    x7 = uppermost(x3)
    x8 = rbind(greater, x7)
    x9 = compose(x8, uppermost)
    x10 = rbind(vmatching, x3)
    x11 = fork(both, x10, x9)
    x12 = sfilter(x4, x11)
    x13 = increment(x7)
    x14 = rbind(greater, x13)
    x15 = compose(x14, first)
    x16 = rbind(sfilter, x15)
    x17 = chain(x16, vfrontier, center)
    x18 = mapply(x17, x12)
    O = underfill(x1, x6, x18)
    return O



def solve_9dfd6313_6aa20dc0(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(rbind, upscale)
    x10 = interval(ONE, FOUR, ONE)
    x11 = apply(x9, x10)
    x12 = initset(identity)
    x13 = insert(vmirror, x12)
    x14 = insert(hmirror, x13)
    x15 = insert(cmirror, x14)
    x16 = insert(dmirror, x15)
    x17 = fork(compose, first, last)
    x18 = lbind(occurrences, x1)
    x19 = lbind(lbind, shift)
    x20 = compose(x18, x8)
    x21 = product(x16, x11)
    x22 = apply(x17, x21)
    x23 = rapply(x22, x4)
    x24 = fork(mapply, x19, x20)
    x25 = mapply(x24, x23)
    O = paint(x1, x25)
    return O



def solve_9dfd6313_447fd412(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(rbind, upscale)
    x10 = interval(ONE, FOUR, ONE)
    x11 = apply(x9, x10)
    x12 = lbind(recolor, ZERO)
    x13 = compose(x12, outbox)
    x14 = fork(combine, identity, x13)
    x15 = lbind(occurrences, x1)
    x16 = lbind(rbind, subtract)
    x17 = lbind(apply, increment)
    x18 = lbind(lbind, shift)
    x19 = chain(x16, ulcorner, x8)
    x20 = chain(x15, x14, x8)
    x21 = fork(apply, x19, x20)
    x22 = compose(x17, x21)
    x23 = fork(mapply, x18, x22)
    x24 = rapply(x11, x4)
    x25 = mapply(x23, x24)
    O = paint(x1, x25)
    return O



def solve_9dfd6313_2bcee788(I):
    x1 = dmirror(I)
    x2 = mostcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = replace(x1, x2, THREE)
    x5 = argmax(x3, size)
    x6 = argmin(x3, size)
    x7 = position(x5, x6)
    x8 = first(x7)
    x9 = last(x7)
    x10 = subgrid(x5, x4)
    x11 = hline(x6)
    x12 = hmirror(x10)
    x13 = vmirror(x10)
    x14 = branch(x11, x12, x13)
    x15 = branch(x11, x8, ZERO)
    x16 = branch(x11, ZERO, x9)
    x17 = asobject(x14)
    x18 = matcher(first, THREE)
    x19 = compose(flip, x18)
    x20 = sfilter(x17, x19)
    x21 = ulcorner(x5)
    x22 = shape(x5)
    x23 = astuple(x15, x16)
    x24 = multiply(x22, x23)
    x25 = add(x21, x24)
    x26 = shift(x20, x25)
    O = paint(x4, x26)
    return O



def solve_9dfd6313_776ffc46(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, FIVE)
    x4 = fork(equality, toindices, box)
    x5 = extract(x3, x4)
    x6 = inbox(x5)
    x7 = subgrid(x6, x1)
    x8 = asobject(x7)
    x9 = matcher(first, ZERO)
    x10 = compose(flip, x9)
    x11 = sfilter(x8, x10)
    x12 = normalize(x11)
    x13 = toindices(x12)
    x14 = compose(toindices, normalize)
    x15 = matcher(x14, x13)
    x16 = mfilter(x2, x15)
    x17 = color(x12)
    O = fill(x1, x17, x16)
    return O



def solve_9dfd6313_f35d900a(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = palette(x1)
    x4 = remove(ZERO, x3)
    x5 = lbind(other, x4)
    x6 = compose(x5, color)
    x7 = fork(recolor, x6, outbox)
    x8 = mapply(x7, x2)
    x9 = mapply(toindices, x2)
    x10 = box(x9)
    x11 = difference(x10, x9)
    x12 = lbind(argmin, x9)
    x13 = rbind(compose, initset)
    x14 = lbind(rbind, manhattan)
    x15 = chain(x13, x14, initset)
    x16 = chain(initset, x12, x15)
    x17 = fork(manhattan, initset, x16)
    x18 = compose(even, x17)
    x19 = sfilter(x11, x18)
    x20 = paint(x1, x8)
    O = fill(x20, FIVE, x19)
    return O



def solve_9dfd6313_0dfd9992(I):
    x1 = dmirror(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_9dfd6313_29ec7d0e(I):
    x1 = dmirror(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_9dfd6313_469497ad(I):
    x1 = dmirror(I)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    x4 = upscale(x1, x3)
    x5 = objects(x4, F, F, T)
    x6 = argmin(x5, size)
    x7 = ulcorner(x6)
    x8 = llcorner(x6)
    x9 = shoot(x7, NEG_UNITY)
    x10 = shoot(x7, UNITY)
    x11 = shoot(x8, DOWN_LEFT)
    x12 = shoot(x8, UP_RIGHT)
    x13 = combine(x9, x10)
    x14 = combine(x11, x12)
    x15 = combine(x13, x14)
    x16 = underfill(x4, TWO, x15)
    x17 = objects(x16, T, F, T)
    x18 = argmax(x17, lrcorner)
    O = paint(x16, x18)
    return O



def solve_9dfd6313_484b58aa(I):
    x1 = dmirror(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, TWO)
    x9 = astuple(TWO, x3)
    x10 = power(decrement, TWO)
    x11 = x10(x2)
    x12 = x10(x3)
    x13 = toivec(x12)
    x14 = tojvec(x11)
    x15 = crop(x1, x13, x9)
    x16 = crop(x1, x14, x8)
    x17 = asobject(x16)
    x18 = asobject(x15)
    x19 = vperiod(x17)
    x20 = hperiod(x18)
    x21 = astuple(x19, x20)
    x22 = lbind(multiply, x21)
    x23 = neighbors(ORIGIN)
    x24 = mapply(neighbors, x23)
    x25 = apply(x22, x24)
    x26 = lbind(shift, x7)
    x27 = mapply(x26, x25)
    O = paint(x1, x27)
    return O



def solve_9dfd6313_3befdf3e(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = leastcolor(x1)
    x4 = palette(x1)
    x5 = remove(ZERO, x4)
    x6 = other(x5, x3)
    x7 = switch(x1, x3, x6)
    x8 = compose(width, inbox)
    x9 = lbind(power, outbox)
    x10 = compose(x9, x8)
    x11 = initset(x10)
    x12 = lbind(rapply, x11)
    x13 = chain(initset, first, x12)
    x14 = fork(rapply, x13, identity)
    x15 = compose(first, x14)
    x16 = compose(backdrop, x15)
    x17 = lbind(chain, backdrop)
    x18 = lbind(x17, inbox)
    x19 = compose(x18, x10)
    x20 = lbind(apply, initset)
    x21 = chain(x20, corners, x16)
    x22 = fork(mapply, x19, x21)
    x23 = fork(intersection, x16, x22)
    x24 = mapply(x16, x2)
    x25 = mapply(x23, x2)
    x26 = underfill(x7, x6, x24)
    O = fill(x26, ZERO, x25)
    return O



def solve_9dfd6313_49d1d64f(I):
    x1 = dmirror(I)
    x2 = shape(x1)
    x3 = add(x2, TWO)
    x4 = canvas(ZERO, x3)
    x5 = asobject(x1)
    x6 = shift(x5, UNITY)
    x7 = paint(x4, x6)
    x8 = asindices(x4)
    x9 = fork(difference, box, corners)
    x10 = x9(x8)
    x11 = lbind(lbind, manhattan)
    x12 = rbind(compose, initset)
    x13 = chain(x12, x11, initset)
    x14 = lbind(argmin, x6)
    x15 = chain(first, x14, x13)
    x16 = fork(astuple, x15, identity)
    x17 = apply(x16, x10)
    O = paint(x7, x17)
    return O



def solve_9dfd6313_57aa92db(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = objects(x1, T, F, T)
    x4 = lbind(lbind, colorcount)
    x5 = fork(apply, x4, palette)
    x6 = compose(maximum, x5)
    x7 = compose(minimum, x5)
    x8 = fork(subtract, x6, x7)
    x9 = argmax(x2, x8)
    x10 = leastcolor(x9)
    x11 = normalize(x9)
    x12 = matcher(first, x10)
    x13 = sfilter(x11, x12)
    x14 = ulcorner(x13)
    x15 = colorfilter(x3, x10)
    x16 = rbind(toobject, x1)
    x17 = lbind(remove, ZERO)
    x18 = chain(first, x17, palette)
    x19 = chain(x18, x16, outbox)
    x20 = lbind(multiply, x14)
    x21 = compose(x20, width)
    x22 = fork(subtract, ulcorner, x21)
    x23 = lbind(shift, x11)
    x24 = compose(x23, x22)
    x25 = fork(upscale, x24, width)
    x26 = fork(recolor, x19, x25)
    x27 = mapply(x26, x15)
    x28 = paint(x1, x27)
    x29 = merge(x3)
    O = paint(x28, x29)
    return O



def solve_9dfd6313_aba27056(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = mapply(toindices, x2)
    x4 = box(x3)
    x5 = difference(x4, x3)
    x6 = delta(x3)
    x7 = position(x6, x5)
    x8 = interval(ZERO, NINE, ONE)
    x9 = lbind(multiply, x7)
    x10 = apply(x9, x8)
    x11 = lbind(shift, x5)
    x12 = mapply(x11, x10)
    x13 = fill(x1, FOUR, x6)
    x14 = fill(x13, FOUR, x12)
    x15 = corners(x5)
    x16 = ofcolor(x14, ZERO)
    x17 = rbind(toobject, x14)
    x18 = rbind(colorcount, ZERO)
    x19 = chain(x18, x17, dneighbors)
    x20 = matcher(x19, TWO)
    x21 = rbind(adjacent, x3)
    x22 = rbind(adjacent, x12)
    x23 = fork(both, x21, x22)
    x24 = compose(x23, initset)
    x25 = sfilter(x16, x20)
    x26 = sfilter(x25, x24)
    x27 = product(x15, x26)
    x28 = fork(subtract, last, first)
    x29 = fork(shoot, first, x28)
    x30 = mapply(x29, x27)
    O = fill(x14, FOUR, x30)
    return O



def solve_9dfd6313_f1cefba8(I):
    x1 = dmirror(I)
    x2 = palette(x1)
    x3 = objects(x1, F, F, T)
    x4 = ofcolor(x1, ZERO)
    x5 = first(x3)
    x6 = ulcorner(x5)
    x7 = subgrid(x5, x1)
    x8 = power(trim, TWO)
    x9 = x8(x7)
    x10 = asindices(x9)
    x11 = shift(x10, TWO_BY_TWO)
    x12 = fill(x7, ZERO, x11)
    x13 = leastcolor(x12)
    x14 = remove(ZERO, x2)
    x15 = other(x14, x13)
    x16 = ofcolor(x12, x13)
    x17 = shift(x16, x6)
    x18 = ofcolor(x1, x13)
    x19 = uppermost(x18)
    x20 = lowermost(x18)
    x21 = matcher(first, x19)
    x22 = matcher(first, x20)
    x23 = fork(either, x21, x22)
    x24 = sfilter(x17, x23)
    x25 = difference(x17, x24)
    x26 = mapply(vfrontier, x24)
    x27 = mapply(hfrontier, x25)
    x28 = combine(x26, x27)
    x29 = intersection(x4, x28)
    x30 = fill(x1, x15, x28)
    O = fill(x30, x13, x29)
    return O



def solve_9dfd6313_508bd3b6(I):
    x1 = dmirror(I)
    x2 = width(x1)
    x3 = objects(x1, T, T, T)
    x4 = argmin(x3, size)
    x5 = argmax(x3, size)
    x6 = ulcorner(x4)
    x7 = urcorner(x4)
    x8 = index(x1, x6)
    x9 = equality(x8, EIGHT)
    x10 = branch(x9, x6, x7)
    x11 = branch(x9, UNITY, DOWN_LEFT)
    x12 = multiply(x11, x2)
    x13 = double(x12)
    x14 = add(x10, x13)
    x15 = subtract(x10, x13)
    x16 = connect(x14, x15)
    x17 = fill(x1, THREE, x16)
    x18 = paint(x17, x5)
    x19 = objects(x18, T, F, T)
    x20 = rbind(adjacent, x5)
    x21 = extract(x19, x20)
    x22 = first(x21)
    x23 = last(x22)
    x24 = flip(x9)
    x25 = branch(x24, UNITY, DOWN_LEFT)
    x26 = multiply(x25, x2)
    x27 = double(x26)
    x28 = add(x23, x27)
    x29 = subtract(x23, x27)
    x30 = connect(x28, x29)
    x31 = fill(x18, THREE, x30)
    x32 = paint(x31, x4)
    O = paint(x32, x5)
    return O



def solve_9dfd6313_d07ae81c(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, F, F)
    x3 = sizefilter(x2, ONE)
    x4 = apply(color, x3)
    x5 = difference(x2, x3)
    x6 = apply(color, x5)
    x7 = first(x6)
    x8 = last(x6)
    x9 = ofcolor(x1, x7)
    x10 = ofcolor(x1, x8)
    x11 = rbind(shoot, UNITY)
    x12 = rbind(shoot, NEG_UNITY)
    x13 = rbind(shoot, DOWN_LEFT)
    x14 = rbind(shoot, UP_RIGHT)
    x15 = fork(combine, x11, x12)
    x16 = fork(combine, x13, x14)
    x17 = fork(combine, x15, x16)
    x18 = compose(x17, center)
    x19 = mapply(x18, x3)
    x20 = intersection(x9, x19)
    x21 = intersection(x10, x19)
    x22 = first(x3)
    x23 = color(x22)
    x24 = center(x22)
    x25 = neighbors(x24)
    x26 = toobject(x25, x1)
    x27 = mostcolor(x26)
    x28 = other(x4, x23)
    x29 = equality(x27, x7)
    x30 = branch(x29, x23, x28)
    x31 = branch(x29, x28, x23)
    x32 = fill(x1, x30, x20)
    O = fill(x32, x31, x21)
    return O



def solve_9dfd6313_0e206a2e(I):
    x1 = dmirror(I)
    x2 = palette(x1)
    x3 = objects(x1, F, F, T)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, numcolors)
    x6 = sfilter(x3, x5)
    x7 = remove(ZERO, x2)
    x8 = lbind(colorcount, x1)
    x9 = argmax(x7, x8)
    x10 = remove(x9, x7)
    x11 = rbind(contained, x10)
    x12 = compose(x11, first)
    x13 = rbind(sfilter, x12)
    x14 = lbind(rbind, subtract)
    x15 = lbind(occurrences, x1)
    x16 = lbind(lbind, shift)
    x17 = compose(x14, ulcorner)
    x18 = chain(x17, x13, normalize)
    x19 = chain(x15, x13, normalize)
    x20 = fork(apply, x18, x19)
    x21 = compose(x16, normalize)
    x22 = fork(mapply, x21, x20)
    x23 = astuple(cmirror, dmirror)
    x24 = astuple(hmirror, vmirror)
    x25 = combine(x23, x24)
    x26 = product(x25, x25)
    x27 = fork(compose, first, last)
    x28 = apply(x27, x26)
    x29 = totuple(x28)
    x30 = combine(x25, x29)
    x31 = lbind(rapply, x30)
    x32 = mapply(x31, x6)
    x33 = mapply(x22, x32)
    x34 = paint(x1, x33)
    x35 = merge(x6)
    O = cover(x34, x35)
    return O



def solve_9dfd6313_d22278a0(I):
    x1 = dmirror(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = fork(multiply, sign, identity)
    x5 = lbind(apply, x4)
    x6 = chain(even, maximum, x5)
    x7 = lbind(sfilter, x2)
    x8 = fork(add, first, last)
    x9 = rbind(remove, x3)
    x10 = compose(center, last)
    x11 = fork(subtract, first, x10)
    x12 = compose(x6, x11)
    x13 = lbind(rbind, equality)
    x14 = lbind(argmin, x3)
    x15 = chain(x8, x5, x11)
    x16 = lbind(lbind, astuple)
    x17 = lbind(rbind, astuple)
    x18 = lbind(compose, x12)
    x19 = lbind(compose, x15)
    x20 = compose(x19, x16)
    x21 = compose(x19, x17)
    x22 = compose(x14, x20)
    x23 = rbind(compose, x22)
    x24 = lbind(lbind, valmin)
    x25 = rbind(compose, x20)
    x26 = chain(x25, x24, x9)
    x27 = lbind(fork, greater)
    x28 = fork(x27, x26, x21)
    x29 = chain(x7, x18, x17)
    x30 = chain(x7, x23, x13)
    x31 = fork(intersection, x29, x30)
    x32 = compose(x7, x28)
    x33 = fork(intersection, x31, x32)
    x34 = fork(recolor, color, x33)
    x35 = mapply(x34, x3)
    O = paint(x1, x35)
    return O



def solve_9dfd6313_150deff5(I):
    x1 = dmirror(I)
    x2 = canvas(FIVE, TWO_BY_TWO)
    x3 = asobject(x2)
    x4 = occurrences(x1, x3)
    x5 = lbind(shift, x3)
    x6 = mapply(x5, x4)
    x7 = fill(x1, EIGHT, x6)
    x8 = canvas(FIVE, UNITY)
    x9 = astuple(TWO, ONE)
    x10 = canvas(EIGHT, x9)
    x11 = vconcat(x10, x8)
    x12 = asobject(x11)
    x13 = occurrences(x7, x12)
    x14 = lbind(shift, x12)
    x15 = mapply(x14, x13)
    x16 = fill(x7, TWO, x15)
    x17 = astuple(ONE, THREE)
    x18 = canvas(FIVE, x17)
    x19 = asobject(x18)
    x20 = occurrences(x16, x19)
    x21 = lbind(shift, x19)
    x22 = mapply(x21, x20)
    x23 = fill(x16, TWO, x22)
    x24 = hmirror(x11)
    x25 = asobject(x24)
    x26 = occurrences(x23, x25)
    x27 = lbind(shift, x25)
    x28 = mapply(x27, x26)
    x29 = fill(x23, TWO, x28)
    x30 = dmirror(x11)
    x31 = asobject(x30)
    x32 = occurrences(x29, x31)
    x33 = lbind(shift, x31)
    x34 = mapply(x33, x32)
    x35 = fill(x29, TWO, x34)
    x36 = vmirror(x30)
    x37 = asobject(x36)
    x38 = occurrences(x35, x37)
    x39 = lbind(shift, x37)
    x40 = mapply(x39, x38)
    O = fill(x35, TWO, x40)
    return O



def solve_9dfd6313_9d9215db(I):
    x1 = dmirror(I)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = initset(x1)
    x6 = chain(numcolors, lefthalf, tophalf)
    x7 = insert(x2, x5)
    x8 = insert(x3, x7)
    x9 = insert(x4, x8)
    x10 = argmax(x9, x6)
    x11 = vmirror(x10)
    x12 = papply(pair, x10, x11)
    x13 = lbind(apply, maximum)
    x14 = apply(x13, x12)
    x15 = partition(x14)
    x16 = sizefilter(x15, FOUR)
    x17 = apply(llcorner, x16)
    x18 = apply(lrcorner, x16)
    x19 = combine(x17, x18)
    x20 = cover(x14, x19)
    x21 = tojvec(NEG_TWO)
    x22 = rbind(add, ZERO_BY_TWO)
    x23 = rbind(add, x21)
    x24 = compose(x22, ulcorner)
    x25 = compose(x23, urcorner)
    x26 = fork(connect, x24, x25)
    x27 = compose(even, last)
    x28 = rbind(sfilter, x27)
    x29 = chain(normalize, x28, x26)
    x30 = fork(shift, x29, x24)
    x31 = fork(recolor, color, x30)
    x32 = mapply(x31, x16)
    x33 = paint(x20, x32)
    x34 = rot90(x33)
    x35 = rot180(x33)
    x36 = rot270(x33)
    x37 = papply(pair, x33, x34)
    x38 = apply(x13, x37)
    x39 = papply(pair, x38, x35)
    x40 = apply(x13, x39)
    x41 = papply(pair, x40, x36)
    O = apply(x13, x41)
    return O



def solve_9dfd6313_264363fd(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, F, T)
    x3 = argmin(x2, size)
    x4 = normalize(x3)
    x5 = height(x3)
    x6 = width(x3)
    x7 = equality(x5, FIVE)
    x8 = equality(x6, FIVE)
    x9 = astuple(x7, x8)
    x10 = add(UNITY, x9)
    x11 = invert(x10)
    x12 = center(x3)
    x13 = index(x1, x12)
    x14 = branch(x7, UP, RIGHT)
    x15 = add(x14, x12)
    x16 = index(x1, x15)
    x17 = astuple(x13, ORIGIN)
    x18 = initset(x17)
    x19 = cover(x1, x3)
    x20 = mostcolor(x19)
    x21 = ofcolor(x19, x20)
    x22 = occurrences(x19, x18)
    x23 = objects(x19, F, F, T)
    x24 = rbind(occurrences, x18)
    x25 = rbind(subgrid, x19)
    x26 = compose(x24, x25)
    x27 = lbind(mapply, vfrontier)
    x28 = lbind(mapply, hfrontier)
    x29 = compose(x27, x26)
    x30 = compose(x28, x26)
    x31 = branch(x7, x29, x30)
    x32 = branch(x8, x30, x29)
    x33 = fork(combine, x31, x32)
    x34 = lbind(recolor, x16)
    x35 = compose(x34, x33)
    x36 = fork(paint, x25, x35)
    x37 = compose(asobject, x36)
    x38 = fork(shift, x37, ulcorner)
    x39 = mapply(x38, x23)
    x40 = paint(x19, x39)
    x41 = shift(x4, x11)
    x42 = lbind(shift, x41)
    x43 = mapply(x42, x22)
    x44 = paint(x40, x43)
    O = fill(x44, x20, x21)
    return O



def solve_9dfd6313_22233c11(I):
    x1 = dmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = rbind(upscale, TWO)
    x4 = chain(invert, halve, shape)
    x5 = fork(combine, hfrontier, vfrontier)
    x6 = compose(x3, vmirror)
    x7 = fork(shift, x6, x4)
    x8 = compose(toindices, x7)
    x9 = lbind(mapply, x5)
    x10 = compose(x9, toindices)
    x11 = fork(difference, x8, x10)
    x12 = mapply(x11, x2)
    O = fill(x1, EIGHT, x12)
    return O



def solve_9dfd6313_a64e4611(I):
    x1 = dmirror(I)
    x2 = asindices(x1)
    x3 = fork(product, identity, identity)
    x4 = lbind(canvas, ZERO)
    x5 = compose(asobject, x4)
    x6 = fork(multiply, first, last)
    x7 = compose(positive, size)
    x8 = lbind(lbind, shift)
    x9 = rbind(fork, x6)
    x10 = lbind(x9, multiply)
    x11 = lbind(chain, x7)
    x12 = rbind(x11, x5)
    x13 = lbind(lbind, occurrences)
    x14 = chain(x10, x12, x13)
    x15 = compose(x3, first)
    x16 = compose(x14, last)
    x17 = fork(argmax, x15, x16)
    x18 = chain(x8, x5, x17)
    x19 = compose(x5, x17)
    x20 = fork(occurrences, last, x19)
    x21 = fork(mapply, x18, x20)
    x22 = multiply(TWO, SIX)
    x23 = interval(THREE, x22, ONE)
    x24 = astuple(x23, x1)
    x25 = x21(x24)
    x26 = fill(x1, THREE, x25)
    x27 = interval(THREE, TEN, ONE)
    x28 = astuple(x27, x26)
    x29 = x21(x28)
    x30 = fill(x26, THREE, x29)
    x31 = astuple(x27, x30)
    x32 = x21(x31)
    x33 = fill(x30, THREE, x32)
    x34 = rbind(toobject, x33)
    x35 = rbind(colorcount, THREE)
    x36 = chain(x35, x34, neighbors)
    x37 = matcher(x36, EIGHT)
    x38 = sfilter(x2, x37)
    x39 = fill(x1, THREE, x38)
    x40 = ofcolor(x39, ZERO)
    x41 = rbind(bordering, x39)
    x42 = compose(x41, initset)
    x43 = lbind(contained, THREE)
    x44 = rbind(toobject, x39)
    x45 = chain(x43, palette, x44)
    x46 = compose(x45, dneighbors)
    x47 = fork(both, x46, x42)
    x48 = sfilter(x40, x47)
    O = fill(x39, THREE, x48)
    return O



def solve_9dfd6313_97a05b5b(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = rbind(greater, ONE)
    x6 = compose(x5, numcolors)
    x7 = sfilter(x2, x6)
    x8 = lbind(rbind, subtract)
    x9 = switch(x4, TWO, ZERO)
    x10 = lbind(occurrences, x9)
    x11 = lbind(lbind, shift)
    x12 = compose(x8, ulcorner)
    x13 = matcher(first, TWO)
    x14 = compose(flip, x13)
    x15 = rbind(sfilter, x13)
    x16 = rbind(sfilter, x14)
    x17 = lbind(recolor, ZERO)
    x18 = compose(x17, x16)
    x19 = fork(combine, x18, x15)
    x20 = chain(x12, x19, normalize)
    x21 = objects(x9, T, T, T)
    x22 = apply(toindices, x21)
    x23 = chain(x10, x19, normalize)
    x24 = rbind(colorcount, TWO)
    x25 = lbind(sfilter, x22)
    x26 = chain(size, first, x25)
    x27 = compose(positive, size)
    x28 = lbind(lbind, contained)
    x29 = chain(x27, x25, x28)
    x30 = compose(x26, x28)
    x31 = rbind(sfilter, x29)
    x32 = compose(x31, x23)
    x33 = lbind(rbind, equality)
    x34 = rbind(compose, x30)
    x35 = chain(x34, x33, x24)
    x36 = fork(sfilter, x32, x35)
    x37 = fork(apply, x20, x36)
    x38 = compose(x11, normalize)
    x39 = fork(mapply, x38, x37)
    x40 = astuple(cmirror, dmirror)
    x41 = astuple(hmirror, vmirror)
    x42 = combine(x40, x41)
    x43 = product(x42, x42)
    x44 = fork(compose, first, last)
    x45 = apply(x44, x43)
    x46 = lbind(rapply, x45)
    x47 = mapply(x46, x7)
    x48 = mapply(x39, x47)
    x49 = paint(x4, x48)
    x50 = palette(x48)
    x51 = lbind(remove, TWO)
    x52 = x51(x50)
    x53 = chain(first, x51, palette)
    x54 = rbind(contained, x52)
    x55 = chain(flip, x54, x53)
    x56 = sfilter(x7, x55)
    x57 = fork(apply, x20, x23)
    x58 = fork(mapply, x38, x57)
    x59 = mapply(x46, x56)
    x60 = mapply(x58, x59)
    O = paint(x49, x60)
    return O



def solve_9dfd6313_3e980e27(I):
    x1 = dmirror(I)
    x2 = objects(x1, F, T, T)
    x3 = astuple(TEN, TEN)
    x4 = invert(x3)
    x5 = astuple(TWO, x4)
    x6 = astuple(THREE, x4)
    x7 = initset(x5)
    x8 = insert(x6, x7)
    x9 = insert(x8, x2)
    x10 = lbind(contained, TWO)
    x11 = lbind(contained, THREE)
    x12 = compose(invert, ulcorner)
    x13 = lbind(compose, x12)
    x14 = lbind(rbind, sfilter)
    x15 = compose(x13, x14)
    x16 = rbind(compose, center)
    x17 = lbind(lbind, shift)
    x18 = x15(x10)
    x19 = x15(x11)
    x20 = fork(shift, identity, x18)
    x21 = fork(shift, identity, x19)
    x22 = compose(x10, palette)
    x23 = compose(x11, palette)
    x24 = sfilter(x9, x22)
    x25 = argmax(x24, size)
    x26 = remove(x25, x24)
    x27 = vmirror(x25)
    x28 = chain(x16, x17, x20)
    x29 = x28(x27)
    x30 = mapply(x29, x26)
    x31 = sfilter(x9, x23)
    x32 = argmax(x31, size)
    x33 = remove(x32, x31)
    x34 = chain(x16, x17, x21)
    x35 = x34(x32)
    x36 = mapply(x35, x33)
    x37 = combine(x30, x36)
    O = paint(x1, x37)
    return O



def solve_a416b8f3_67a3c6ac(I):
    x1 = hconcat(I, I)
    O = vmirror(x1)
    return O



def solve_a416b8f3_68b16354(I):
    x1 = hconcat(I, I)
    O = hmirror(x1)
    return O



def solve_a416b8f3_74dd1130(I):
    x1 = hconcat(I, I)
    O = dmirror(x1)
    return O



def solve_a416b8f3_3c9b0459(I):
    x1 = hconcat(I, I)
    O = rot180(x1)
    return O



def solve_a416b8f3_6150a2bd(I):
    x1 = hconcat(I, I)
    O = rot180(x1)
    return O



def solve_a416b8f3_9172f3a0(I):
    x1 = hconcat(I, I)
    O = upscale(x1, THREE)
    return O



def solve_a416b8f3_9dfd6313(I):
    x1 = hconcat(I, I)
    O = dmirror(x1)
    return O



def solve_a416b8f3_b1948b0a(I):
    x1 = hconcat(I, I)
    O = replace(x1, SIX, TWO)
    return O



def solve_a416b8f3_c59eb873(I):
    x1 = hconcat(I, I)
    O = upscale(x1, TWO)
    return O



def solve_a416b8f3_c8f0f002(I):
    x1 = hconcat(I, I)
    O = replace(x1, SEVEN, FIVE)
    return O



def solve_a416b8f3_d10ecb37(I):
    x1 = hconcat(I, I)
    O = crop(x1, ORIGIN, TWO_BY_TWO)
    return O



def solve_a416b8f3_d511f180(I):
    x1 = hconcat(I, I)
    O = switch(x1, FIVE, EIGHT)
    return O



def solve_a416b8f3_ed36ccf7(I):
    x1 = hconcat(I, I)
    O = rot270(x1)
    return O



def solve_a416b8f3_4c4377d9(I):
    x1 = hconcat(I, I)
    x2 = hmirror(x1)
    O = vconcat(x2, x1)
    return O



def solve_a416b8f3_6d0aefbc(I):
    x1 = hconcat(I, I)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_a416b8f3_6fa7a44f(I):
    x1 = hconcat(I, I)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_a416b8f3_5614dbcf(I):
    x1 = hconcat(I, I)
    x2 = replace(x1, FIVE, ZERO)
    O = downscale(x2, THREE)
    return O



def solve_a416b8f3_5bd6f4ac(I):
    x1 = hconcat(I, I)
    x2 = tojvec(SIX)
    O = crop(x1, x2, THREE_BY_THREE)
    return O



def solve_a416b8f3_5582e5ca(I):
    x1 = hconcat(I, I)
    x2 = mostcolor(x1)
    O = canvas(x2, THREE_BY_THREE)
    return O



def solve_a416b8f3_8be77c9e(I):
    x1 = hconcat(I, I)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_a416b8f3_c9e6f938(I):
    x1 = hconcat(I, I)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_a416b8f3_2dee498d(I):
    x1 = hconcat(I, I)
    x2 = hsplit(x1, THREE)
    O = first(x2)
    return O



def solve_a416b8f3_1cf80156(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = subgrid(x3, x1)
    return O



def solve_a416b8f3_32597951(I):
    x1 = hconcat(I, I)
    x2 = ofcolor(x1, EIGHT)
    x3 = delta(x2)
    O = fill(x1, THREE, x3)
    return O



def solve_a416b8f3_25ff71a9(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = move(x1, x3, DOWN)
    return O



def solve_a416b8f3_0b148d64(I):
    x1 = hconcat(I, I)
    x2 = partition(x1)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_a416b8f3_1f85a75f(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_a416b8f3_23b5c85d(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_a416b8f3_9ecd008a(I):
    x1 = hconcat(I, I)
    x2 = vmirror(x1)
    x3 = ofcolor(x1, ZERO)
    O = subgrid(x3, x2)
    return O



def solve_a416b8f3_ac0a08a4(I):
    x1 = hconcat(I, I)
    x2 = colorcount(x1, ZERO)
    x3 = subtract(NINE, x2)
    O = upscale(x1, x3)
    return O



def solve_a416b8f3_be94b721(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_a416b8f3_c909285e(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    O = subgrid(x3, x1)
    return O



def solve_a416b8f3_f25ffba3(I):
    x1 = hconcat(I, I)
    x2 = bottomhalf(x1)
    x3 = hmirror(x2)
    O = vconcat(x3, x2)
    return O



def solve_a416b8f3_c1d99e64(I):
    x1 = hconcat(I, I)
    x2 = frontiers(x1)
    x3 = merge(x2)
    O = fill(x1, TWO, x3)
    return O



def solve_a416b8f3_b91ae062(I):
    x1 = hconcat(I, I)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    O = upscale(x1, x3)
    return O



def solve_a416b8f3_3aa6fb7a(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = mapply(corners, x2)
    O = underfill(x1, ONE, x3)
    return O



def solve_a416b8f3_7b7f7511(I):
    x1 = hconcat(I, I)
    x2 = portrait(x1)
    x3 = branch(x2, tophalf, lefthalf)
    O = x3(x1)
    return O



def solve_a416b8f3_4258a5f9(I):
    x1 = hconcat(I, I)
    x2 = ofcolor(x1, FIVE)
    x3 = mapply(neighbors, x2)
    O = fill(x1, ONE, x3)
    return O



def solve_a416b8f3_2dc579da(I):
    x1 = hconcat(I, I)
    x2 = vsplit(x1, TWO)
    x3 = rbind(hsplit, TWO)
    x4 = mapply(x3, x2)
    O = argmax(x4, numcolors)
    return O



def solve_a416b8f3_28bf18c6(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = hconcat(x4, x4)
    return O



def solve_a416b8f3_3af2c5a8(I):
    x1 = hconcat(I, I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_a416b8f3_44f52bb0(I):
    x1 = hconcat(I, I)
    x2 = vmirror(x1)
    x3 = equality(x2, x1)
    x4 = branch(x3, ONE, SEVEN)
    O = canvas(x4, UNITY)
    return O



def solve_a416b8f3_62c24649(I):
    x1 = hconcat(I, I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_a416b8f3_67e8384a(I):
    x1 = hconcat(I, I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_a416b8f3_7468f01a(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = vmirror(x4)
    return O



def solve_a416b8f3_662c240a(I):
    x1 = hconcat(I, I)
    x2 = vsplit(x1, THREE)
    x3 = fork(equality, dmirror, identity)
    x4 = compose(flip, x3)
    O = extract(x2, x4)
    return O



def solve_a416b8f3_42a50994(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = cover(x1, x4)
    return O



def solve_a416b8f3_56ff96f3(I):
    x1 = hconcat(I, I)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = mapply(x3, x2)
    O = paint(x1, x4)
    return O



def solve_a416b8f3_50cb2852(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = compose(backdrop, inbox)
    x4 = mapply(x3, x2)
    O = fill(x1, EIGHT, x4)
    return O



def solve_a416b8f3_4347f46a(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = fork(difference, toindices, box)
    x4 = mapply(x3, x2)
    O = fill(x1, ZERO, x4)
    return O



def solve_a416b8f3_46f33fce(I):
    x1 = hconcat(I, I)
    x2 = rot180(x1)
    x3 = downscale(x2, TWO)
    x4 = rot180(x3)
    O = upscale(x4, FOUR)
    return O



def solve_a416b8f3_a740d043(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    O = replace(x4, ONE, ZERO)
    return O



def solve_a416b8f3_a79310a0(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = move(x1, x3, DOWN)
    O = replace(x4, EIGHT, TWO)
    return O



def solve_a416b8f3_aabf363d(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, ZERO)
    x4 = leastcolor(x3)
    O = replace(x3, x4, x2)
    return O



def solve_a416b8f3_ae4f1146(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, F, T)
    x3 = rbind(colorcount, ONE)
    x4 = argmax(x2, x3)
    O = subgrid(x4, x1)
    return O



def solve_a416b8f3_b27ca6d3(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, THREE, x4)
    return O



def solve_a416b8f3_ce22a75a(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = mapply(backdrop, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_a416b8f3_dc1df850(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_a416b8f3_f25fbde4(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = upscale(x4, TWO)
    return O



def solve_a416b8f3_44d8ac46(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = apply(delta, x2)
    x4 = mfilter(x3, square)
    O = fill(x1, TWO, x4)
    return O



def solve_a416b8f3_1e0a9b12(I):
    x1 = hconcat(I, I)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = apply(x3, x2)
    O = rot90(x4)
    return O



def solve_a416b8f3_0d3d703e(I):
    x1 = hconcat(I, I)
    x2 = switch(x1, THREE, FOUR)
    x3 = switch(x2, EIGHT, NINE)
    x4 = switch(x3, TWO, SIX)
    O = switch(x4, ONE, FIVE)
    return O



def solve_a416b8f3_3618c87e(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = move(x1, x4, TWO_BY_ZERO)
    return O



def solve_a416b8f3_1c786137(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, height)
    x4 = subgrid(x3, x1)
    O = trim(x4)
    return O



def solve_a416b8f3_445eab21(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = fork(multiply, height, width)
    x4 = argmax(x2, x3)
    x5 = color(x4)
    O = canvas(x5, TWO_BY_TWO)
    return O



def solve_a416b8f3_6f8cd79b(I):
    x1 = hconcat(I, I)
    x2 = asindices(x1)
    x3 = apply(initset, x2)
    x4 = rbind(bordering, x1)
    x5 = mfilter(x3, x4)
    O = fill(x1, EIGHT, x5)
    return O



def solve_a416b8f3_2013d3e2(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = lefthalf(x4)
    O = tophalf(x5)
    return O



def solve_a416b8f3_41e4d17e(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = mapply(x4, x2)
    O = underfill(x1, SIX, x5)
    return O



def solve_a416b8f3_9565186b(I):
    x1 = hconcat(I, I)
    x2 = shape(x1)
    x3 = objects(x1, T, F, F)
    x4 = argmax(x3, size)
    x5 = canvas(FIVE, x2)
    O = paint(x5, x4)
    return O



def solve_a416b8f3_aedd82e4(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, TWO)
    x4 = sizefilter(x3, ONE)
    x5 = merge(x4)
    O = fill(x1, ONE, x5)
    return O



def solve_a416b8f3_bb43febb(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, FIVE)
    x4 = compose(backdrop, inbox)
    x5 = mapply(x4, x3)
    O = fill(x1, TWO, x5)
    return O



def solve_a416b8f3_e98196ab(I):
    x1 = hconcat(I, I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = objects(x2, T, F, T)
    x5 = merge(x4)
    O = paint(x3, x5)
    return O



def solve_a416b8f3_f76d97a5(I):
    x1 = hconcat(I, I)
    x2 = palette(x1)
    x3 = first(x2)
    x4 = last(x2)
    x5 = switch(x1, x3, x4)
    O = replace(x5, FIVE, ZERO)
    return O



def solve_a416b8f3_ce9e57f2(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = fork(connect, ulcorner, centerofmass)
    x4 = mapply(x3, x2)
    x5 = fill(x1, EIGHT, x4)
    O = switch(x5, EIGHT, TWO)
    return O



def solve_a416b8f3_22eb0ac0(I):
    x1 = hconcat(I, I)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    O = paint(x1, x5)
    return O



def solve_a416b8f3_9f236235(I):
    x1 = hconcat(I, I)
    x2 = compress(x1)
    x3 = objects(x1, T, F, F)
    x4 = vmirror(x2)
    x5 = valmin(x3, width)
    O = downscale(x4, x5)
    return O



def solve_a416b8f3_a699fb00(I):
    x1 = hconcat(I, I)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, RIGHT)
    x4 = shift(x2, LEFT)
    x5 = intersection(x3, x4)
    O = fill(x1, TWO, x5)
    return O



def solve_a416b8f3_46442a0e(I):
    x1 = hconcat(I, I)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_a416b8f3_7fe24cdd(I):
    x1 = hconcat(I, I)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_a416b8f3_0ca9ddb6(I):
    x1 = hconcat(I, I)
    x2 = ofcolor(x1, ONE)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x3)
    x6 = fill(x1, SEVEN, x4)
    O = fill(x6, FOUR, x5)
    return O



def solve_a416b8f3_543a7ed5(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, SIX)
    x4 = mapply(outbox, x3)
    x5 = fill(x1, THREE, x4)
    x6 = mapply(delta, x3)
    O = fill(x5, FOUR, x6)
    return O



def solve_a416b8f3_0520fde7(I):
    x1 = hconcat(I, I)
    x2 = vmirror(x1)
    x3 = lefthalf(x2)
    x4 = righthalf(x2)
    x5 = vmirror(x4)
    x6 = cellwise(x3, x5, ZERO)
    O = replace(x6, ONE, TWO)
    return O



def solve_a416b8f3_dae9d2b5(I):
    x1 = hconcat(I, I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, FOUR)
    x5 = ofcolor(x3, THREE)
    x6 = combine(x4, x5)
    O = fill(x2, SIX, x6)
    return O



def solve_a416b8f3_8d5021e8(I):
    x1 = hconcat(I, I)
    x2 = vmirror(x1)
    x3 = hconcat(x2, x1)
    x4 = hmirror(x3)
    x5 = vconcat(x3, x4)
    x6 = vconcat(x5, x3)
    O = hmirror(x6)
    return O



def solve_a416b8f3_b60334d2(I):
    x1 = hconcat(I, I)
    x2 = ofcolor(x1, FIVE)
    x3 = replace(x1, FIVE, ZERO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x2)
    x6 = fill(x3, ONE, x4)
    O = fill(x6, FIVE, x5)
    return O



def solve_a416b8f3_b94a9452(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = leastcolor(x4)
    x6 = mostcolor(x4)
    O = switch(x4, x5, x6)
    return O



def solve_a416b8f3_d037b0a7(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, DOWN)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    O = paint(x1, x6)
    return O



def solve_a416b8f3_d0f5fe59(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = astuple(x3, x3)
    x5 = canvas(ZERO, x4)
    x6 = shoot(ORIGIN, UNITY)
    O = fill(x5, EIGHT, x6)
    return O



def solve_a416b8f3_e3497940(I):
    x1 = hconcat(I, I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = vmirror(x3)
    x5 = objects(x4, T, F, T)
    x6 = merge(x5)
    O = paint(x2, x6)
    return O



def solve_a416b8f3_e9afcf9a(I):
    x1 = hconcat(I, I)
    x2 = astuple(TWO, ONE)
    x3 = crop(x1, ORIGIN, x2)
    x4 = hmirror(x3)
    x5 = hconcat(x3, x4)
    x6 = hconcat(x5, x5)
    O = hconcat(x6, x5)
    return O



def solve_a416b8f3_d406998b(I):
    x1 = hconcat(I, I)
    x2 = vmirror(x1)
    x3 = ofcolor(x2, FIVE)
    x4 = compose(even, last)
    x5 = sfilter(x3, x4)
    x6 = fill(x2, THREE, x5)
    O = vmirror(x6)
    return O



def solve_a416b8f3_3906de3d(I):
    x1 = hconcat(I, I)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = switch(x2, ONE, TWO)
    x5 = apply(x3, x4)
    x6 = switch(x5, ONE, TWO)
    O = cmirror(x6)
    return O



def solve_a416b8f3_00d62c1b(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, FOUR, x6)
    return O



def solve_a416b8f3_7b6016b9(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, F)
    x3 = rbind(bordering, x1)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x4)
    x6 = fill(x1, TWO, x5)
    O = replace(x6, ZERO, THREE)
    return O



def solve_a416b8f3_67385a82(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, THREE)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = merge(x5)
    O = fill(x1, EIGHT, x6)
    return O



def solve_a416b8f3_a5313dff(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, ONE, x6)
    return O



def solve_a416b8f3_ea32f347(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, FIVE, FOUR)
    x4 = argmin(x2, size)
    x5 = argmax(x2, size)
    x6 = fill(x3, ONE, x5)
    O = fill(x6, TWO, x4)
    return O



def solve_a416b8f3_d631b094(I):
    x1 = hconcat(I, I)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = ofcolor(x1, x3)
    x5 = size(x4)
    x6 = astuple(ONE, x5)
    O = canvas(x3, x6)
    return O



def solve_a416b8f3_10fcaaa3(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = vconcat(x3, x3)
    x5 = ofcolor(x4, x2)
    x6 = mapply(ineighbors, x5)
    O = underfill(x4, EIGHT, x6)
    return O



def solve_a416b8f3_007bbfb7(I):
    x1 = hconcat(I, I)
    x2 = hupscale(x1, THREE)
    x3 = vupscale(x2, THREE)
    x4 = hconcat(x1, x1)
    x5 = hconcat(x4, x1)
    x6 = vconcat(x5, x5)
    x7 = vconcat(x6, x5)
    O = cellwise(x3, x7, ZERO)
    return O



def solve_a416b8f3_496994bd(I):
    x1 = hconcat(I, I)
    x2 = width(x1)
    x3 = height(x1)
    x4 = halve(x3)
    x5 = astuple(x4, x2)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    O = vconcat(x6, x7)
    return O



def solve_a416b8f3_1f876c06(I):
    x1 = hconcat(I, I)
    x2 = fgpartition(x1)
    x3 = compose(last, first)
    x4 = power(last, TWO)
    x5 = fork(connect, x3, x4)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_a416b8f3_39a8645d(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = matcher(color, x5)
    x7 = extract(x2, x6)
    O = subgrid(x7, x1)
    return O



def solve_a416b8f3_1b2d62fb(I):
    x1 = hconcat(I, I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = replace(x2, NINE, ZERO)
    O = fill(x7, EIGHT, x6)
    return O



def solve_a416b8f3_90c28cc7(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = dedupe(x4)
    x6 = rot90(x5)
    x7 = dedupe(x6)
    O = rot270(x7)
    return O



def solve_a416b8f3_b6afb2da(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, F)
    x3 = replace(x1, FIVE, TWO)
    x4 = colorfilter(x2, FIVE)
    x5 = mapply(box, x4)
    x6 = fill(x3, FOUR, x5)
    x7 = mapply(corners, x4)
    O = fill(x6, ONE, x7)
    return O



def solve_a416b8f3_b9b7f026(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, F)
    x3 = argmin(x2, size)
    x4 = rbind(adjacent, x3)
    x5 = remove(x3, x2)
    x6 = extract(x5, x4)
    x7 = color(x6)
    O = canvas(x7, UNITY)
    return O



def solve_a416b8f3_ba97ae07(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = ofcolor(x1, x5)
    x7 = backdrop(x6)
    O = fill(x1, x5, x7)
    return O



def solve_a416b8f3_c9f8e694(I):
    x1 = hconcat(I, I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = ofcolor(x1, ZERO)
    x5 = astuple(x2, ONE)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hupscale(x6, x3)
    O = fill(x7, ZERO, x4)
    return O



def solve_a416b8f3_d23f8c26(I):
    x1 = hconcat(I, I)
    x2 = asindices(x1)
    x3 = width(x1)
    x4 = halve(x3)
    x5 = matcher(last, x4)
    x6 = compose(flip, x5)
    x7 = sfilter(x2, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_a416b8f3_d5d6de2d(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = sfilter(x2, square)
    x4 = difference(x2, x3)
    x5 = compose(backdrop, inbox)
    x6 = mapply(x5, x4)
    x7 = replace(x1, TWO, ZERO)
    O = fill(x7, THREE, x6)
    return O



def solve_a416b8f3_dbc1a6ce(I):
    x1 = hconcat(I, I)
    x2 = ofcolor(x1, ONE)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_a416b8f3_ded97339(I):
    x1 = hconcat(I, I)
    x2 = ofcolor(x1, EIGHT)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_a416b8f3_ea786f4a(I):
    x1 = hconcat(I, I)
    x2 = width(x1)
    x3 = shoot(ORIGIN, UNITY)
    x4 = decrement(x2)
    x5 = tojvec(x4)
    x6 = shoot(x5, DOWN_LEFT)
    x7 = combine(x3, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_a416b8f3_08ed6ac7(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = order(x2, height)
    x5 = size(x3)
    x6 = interval(x5, ZERO, NEG_ONE)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_a416b8f3_40853293(I):
    x1 = hconcat(I, I)
    x2 = partition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    x6 = mfilter(x4, vline)
    x7 = paint(x1, x5)
    O = paint(x7, x6)
    return O



def solve_a416b8f3_5521c0d9(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = cover(x1, x3)
    x5 = chain(toivec, invert, height)
    x6 = fork(shift, identity, x5)
    x7 = mapply(x6, x2)
    O = paint(x4, x7)
    return O



def solve_a416b8f3_f8ff0b80(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = rbind(canvas, UNITY)
    x6 = apply(x5, x4)
    x7 = merge(x6)
    O = hmirror(x7)
    return O



def solve_a416b8f3_85c4e7cd(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, F)
    x3 = compose(invert, size)
    x4 = order(x2, size)
    x5 = order(x2, x3)
    x6 = apply(color, x5)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_a416b8f3_d2abd087(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = matcher(size, SIX)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x3)
    x6 = mfilter(x2, x4)
    x7 = fill(x1, TWO, x5)
    O = fill(x7, ONE, x6)
    return O



def solve_a416b8f3_363442ee(I):
    x1 = hconcat(I, I)
    x2 = ofcolor(x1, ONE)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = asobject(x3)
    x5 = lbind(shift, x4)
    x6 = compose(x5, decrement)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_a416b8f3_5168d44c(I):
    x1 = hconcat(I, I)
    x2 = ofcolor(x1, THREE)
    x3 = height(x2)
    x4 = equality(x3, ONE)
    x5 = branch(x4, ZERO_BY_TWO, TWO_BY_ZERO)
    x6 = ofcolor(x1, TWO)
    x7 = recolor(TWO, x6)
    O = move(x1, x7, x5)
    return O



def solve_a416b8f3_d9fac9be(I):
    x1 = hconcat(I, I)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = color(x4)
    x6 = remove(ZERO, x2)
    x7 = other(x6, x5)
    O = canvas(x7, UNITY)
    return O



def solve_a416b8f3_e50d258f(I):
    x1 = hconcat(I, I)
    x2 = width(x1)
    x3 = astuple(NINE, x2)
    x4 = canvas(ZERO, x3)
    x5 = vconcat(x1, x4)
    x6 = objects(x5, F, F, T)
    x7 = rbind(colorcount, TWO)
    x8 = argmax(x6, x7)
    O = subgrid(x8, x1)
    return O



def solve_a416b8f3_810b9b61(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = apply(toindices, x2)
    x4 = fork(either, vline, hline)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = fork(equality, identity, box)
    x8 = mfilter(x6, x7)
    O = fill(x1, THREE, x8)
    return O



def solve_a416b8f3_54d82841(I):
    x1 = hconcat(I, I)
    x2 = height(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(last, center)
    x5 = apply(x4, x3)
    x6 = decrement(x2)
    x7 = lbind(astuple, x6)
    x8 = apply(x7, x5)
    O = fill(x1, FOUR, x8)
    return O



def solve_a416b8f3_60b61512(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = mapply(delta, x2)
    O = fill(x1, SEVEN, x3)
    return O



def solve_a416b8f3_25d8a9c8(I):
    x1 = hconcat(I, I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, THREE)
    x5 = mfilter(x4, hline)
    x6 = toindices(x5)
    x7 = difference(x2, x6)
    x8 = fill(x1, FIVE, x6)
    O = fill(x8, ZERO, x7)
    return O



def solve_a416b8f3_239be575(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, T, T)
    x3 = lbind(contained, TWO)
    x4 = compose(x3, palette)
    x5 = sfilter(x2, x4)
    x6 = size(x5)
    x7 = greater(x6, ONE)
    x8 = branch(x7, ZERO, EIGHT)
    O = canvas(x8, UNITY)
    return O



def solve_a416b8f3_67a423a3(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = colorfilter(x3, x2)
    x5 = merge(x4)
    x6 = delta(x5)
    x7 = first(x6)
    x8 = neighbors(x7)
    O = fill(x1, FOUR, x8)
    return O



def solve_a416b8f3_6430c8c4(I):
    x1 = hconcat(I, I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(FOUR, FOUR)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, THREE, x7)
    return O



def solve_a416b8f3_94f9d214(I):
    x1 = hconcat(I, I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = astuple(FOUR, FOUR)
    x7 = canvas(ZERO, x6)
    x8 = intersection(x4, x5)
    O = fill(x7, TWO, x8)
    return O



def solve_a416b8f3_ce4f8723(I):
    x1 = hconcat(I, I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = astuple(FOUR, FOUR)
    x8 = canvas(THREE, x7)
    O = fill(x8, ZERO, x6)
    return O



def solve_a416b8f3_d13f3404(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, UNITY)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = astuple(SIX, SIX)
    x8 = canvas(ZERO, x7)
    O = paint(x8, x6)
    return O



def solve_a416b8f3_f2829549(I):
    x1 = hconcat(I, I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = shape(x2)
    x8 = canvas(ZERO, x7)
    O = fill(x8, THREE, x6)
    return O



def solve_a416b8f3_fafffa47(I):
    x1 = hconcat(I, I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = shape(x3)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, TWO, x7)
    return O



def solve_a416b8f3_fcb5c309(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = colorfilter(x3, x2)
    x5 = difference(x3, x4)
    x6 = argmax(x5, size)
    x7 = color(x6)
    x8 = subgrid(x6, x1)
    O = replace(x8, x7, x2)
    return O



def solve_a416b8f3_e76a88a6(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, F, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = remove(x3, x2)
    x6 = apply(ulcorner, x5)
    x7 = lbind(shift, x4)
    x8 = mapply(x7, x6)
    O = paint(x1, x8)
    return O



def solve_a416b8f3_7f4411dc(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = rbind(difference, x3)
    x5 = rbind(greater, TWO)
    x6 = chain(x5, size, x4)
    x7 = compose(x6, dneighbors)
    x8 = sfilter(x3, x7)
    O = fill(x1, ZERO, x8)
    return O



def solve_a416b8f3_b230c067(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(normalize, x3)
    x5 = leastcommon(x4)
    x6 = matcher(normalize, x5)
    x7 = extract(x2, x6)
    x8 = replace(x1, EIGHT, ONE)
    O = fill(x8, TWO, x7)
    return O



def solve_a416b8f3_e8593010(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = sizefilter(x2, TWO)
    x5 = merge(x3)
    x6 = fill(x1, THREE, x5)
    x7 = merge(x4)
    x8 = fill(x6, TWO, x7)
    O = replace(x8, ZERO, ONE)
    return O



def solve_a416b8f3_6d75e8bb(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = ulcorner(x3)
    x5 = subgrid(x3, x1)
    x6 = replace(x5, ZERO, TWO)
    x7 = asobject(x6)
    x8 = shift(x7, x4)
    O = paint(x1, x8)
    return O



def solve_a416b8f3_1190e5a7(I):
    x1 = hconcat(I, I)
    x2 = mostcolor(x1)
    x3 = frontiers(x1)
    x4 = sfilter(x3, vline)
    x5 = difference(x3, x4)
    x6 = astuple(x5, x4)
    x7 = apply(size, x6)
    x8 = increment(x7)
    O = canvas(x2, x8)
    return O



def solve_a416b8f3_6e02f1e3(I):
    x1 = hconcat(I, I)
    x2 = numcolors(x1)
    x3 = canvas(ZERO, THREE_BY_THREE)
    x4 = equality(x2, THREE)
    x5 = equality(x2, TWO)
    x6 = branch(x4, TWO_BY_ZERO, ORIGIN)
    x7 = branch(x5, TWO_BY_TWO, ZERO_BY_TWO)
    x8 = connect(x6, x7)
    O = fill(x3, FIVE, x8)
    return O



def solve_a416b8f3_a61f2674(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = replace(x1, FIVE, ZERO)
    x6 = recolor(ONE, x3)
    x7 = recolor(TWO, x4)
    x8 = combine(x6, x7)
    O = paint(x5, x8)
    return O



def solve_a416b8f3_fcc82909(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, T, T)
    x3 = rbind(add, DOWN)
    x4 = compose(x3, llcorner)
    x5 = compose(toivec, numcolors)
    x6 = fork(add, lrcorner, x5)
    x7 = fork(astuple, x4, x6)
    x8 = compose(box, x7)
    x9 = mapply(x8, x2)
    O = fill(x1, THREE, x9)
    return O



def solve_a416b8f3_72ca375d(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = rbind(subgrid, x1)
    x5 = apply(x4, x3)
    x6 = apply(vmirror, x5)
    x7 = papply(equality, x5, x6)
    x8 = pair(x5, x7)
    x9 = extract(x8, last)
    O = first(x9)
    return O



def solve_a416b8f3_253bf280(I):
    x1 = hconcat(I, I)
    x2 = ofcolor(x1, EIGHT)
    x3 = prapply(connect, x2, x2)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = fork(either, vline, hline)
    x8 = mfilter(x6, x7)
    x9 = fill(x1, THREE, x8)
    O = fill(x9, EIGHT, x2)
    return O



def solve_a416b8f3_1f642eb9(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = rbind(gravitate, x5)
    x7 = compose(crement, x6)
    x8 = fork(shift, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_a416b8f3_31aa019c(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = first(x3)
    x5 = neighbors(x4)
    x6 = astuple(TEN, TEN)
    x7 = canvas(ZERO, x6)
    x8 = initset(x4)
    x9 = fill(x7, x2, x8)
    O = fill(x9, TWO, x5)
    return O



def solve_a416b8f3_27a28665(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, F)
    x3 = valmax(x2, size)
    x4 = equality(x3, ONE)
    x5 = equality(x3, FOUR)
    x6 = equality(x3, FIVE)
    x7 = branch(x4, TWO, ONE)
    x8 = branch(x5, THREE, x7)
    x9 = branch(x6, SIX, x8)
    O = canvas(x9, UNITY)
    return O



def solve_a416b8f3_7ddcd7ec(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = color(x5)
    x7 = lbind(position, x5)
    x8 = fork(shoot, center, x7)
    x9 = mapply(x8, x3)
    O = fill(x1, x6, x9)
    return O



def solve_a416b8f3_3bd67248(I):
    x1 = hconcat(I, I)
    x2 = height(x1)
    x3 = decrement(x2)
    x4 = decrement(x3)
    x5 = astuple(x4, ONE)
    x6 = astuple(x3, ONE)
    x7 = shoot(x5, UP_RIGHT)
    x8 = shoot(x6, RIGHT)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_a416b8f3_73251a56(I):
    x1 = hconcat(I, I)
    x2 = dmirror(x1)
    x3 = papply(pair, x1, x2)
    x4 = lbind(apply, maximum)
    x5 = apply(x4, x3)
    x6 = mostcolor(x5)
    x7 = replace(x5, ZERO, x6)
    x8 = index(x7, ORIGIN)
    x9 = shoot(ORIGIN, UNITY)
    O = fill(x7, x8, x9)
    return O



def solve_a416b8f3_25d487eb(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = ofcolor(x1, x2)
    x5 = center(x4)
    x6 = merge(x3)
    x7 = center(x6)
    x8 = subtract(x7, x5)
    x9 = shoot(x5, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_a416b8f3_8f2ea7aa(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    O = cellwise(x5, x9, ZERO)
    return O



def solve_a416b8f3_b8825c91(I):
    x1 = hconcat(I, I)
    x2 = replace(x1, FOUR, ZERO)
    x3 = dmirror(x2)
    x4 = papply(pair, x2, x3)
    x5 = lbind(apply, maximum)
    x6 = apply(x5, x4)
    x7 = cmirror(x6)
    x8 = papply(pair, x6, x7)
    x9 = apply(x5, x8)
    O = cmirror(x9)
    return O



def solve_a416b8f3_cce03e0d(I):
    x1 = hconcat(I, I)
    x2 = upscale(x1, THREE)
    x3 = hconcat(x1, x1)
    x4 = hconcat(x3, x1)
    x5 = vconcat(x4, x4)
    x6 = vconcat(x5, x4)
    x7 = ofcolor(x2, ZERO)
    x8 = ofcolor(x2, ONE)
    x9 = combine(x7, x8)
    O = fill(x6, ZERO, x9)
    return O



def solve_a416b8f3_d364b489(I):
    x1 = hconcat(I, I)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, DOWN)
    x4 = fill(x1, EIGHT, x3)
    x5 = shift(x2, UP)
    x6 = fill(x4, TWO, x5)
    x7 = shift(x2, RIGHT)
    x8 = fill(x6, SIX, x7)
    x9 = shift(x2, LEFT)
    O = fill(x8, SEVEN, x9)
    return O



def solve_a416b8f3_a5f85a15(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = interval(ONE, NINE, ONE)
    x4 = apply(double, x3)
    x5 = apply(decrement, x4)
    x6 = papply(astuple, x5, x5)
    x7 = apply(ulcorner, x2)
    x8 = lbind(shift, x6)
    x9 = mapply(x8, x7)
    O = fill(x1, FOUR, x9)
    return O



def solve_a416b8f3_3ac3eb23(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = chain(ineighbors, last, first)
    x4 = fork(recolor, color, x3)
    x5 = mapply(x4, x2)
    x6 = paint(x1, x5)
    x7 = vsplit(x6, THREE)
    x8 = first(x7)
    x9 = vconcat(x8, x8)
    O = vconcat(x8, x9)
    return O



def solve_a416b8f3_22168020(I):
    x1 = hconcat(I, I)
    x2 = palette(x1)
    x3 = remove(ZERO, x2)
    x4 = lbind(ofcolor, x1)
    x5 = lbind(prapply, connect)
    x6 = fork(x5, x4, x4)
    x7 = compose(merge, x6)
    x8 = fork(recolor, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_a416b8f3_6e82a1ae(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sizefilter, x2)
    x4 = compose(merge, x3)
    x5 = x4(TWO)
    x6 = x4(THREE)
    x7 = x4(FOUR)
    x8 = fill(x1, THREE, x5)
    x9 = fill(x8, TWO, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_a416b8f3_868de0fa(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, F)
    x3 = sfilter(x2, square)
    x4 = compose(even, height)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = merge(x5)
    x8 = merge(x6)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, SEVEN, x8)
    return O



def solve_a416b8f3_681b3aeb(I):
    x1 = hconcat(I, I)
    x2 = rot270(x1)
    x3 = objects(x2, T, F, T)
    x4 = argmax(x3, size)
    x5 = argmin(x3, size)
    x6 = color(x5)
    x7 = canvas(x6, THREE_BY_THREE)
    x8 = normalize(x4)
    x9 = paint(x7, x8)
    O = rot90(x9)
    return O



def solve_a416b8f3_8e5a5113(I):
    x1 = hconcat(I, I)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = rot90(x2)
    x4 = rot180(x2)
    x5 = astuple(x3, x4)
    x6 = astuple(FOUR, EIGHT)
    x7 = apply(tojvec, x6)
    x8 = apply(asobject, x5)
    x9 = mpapply(shift, x8, x7)
    O = paint(x1, x9)
    return O



def solve_a416b8f3_025d127b(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = apply(color, x2)
    x4 = merge(x2)
    x5 = lbind(colorfilter, x2)
    x6 = rbind(argmax, rightmost)
    x7 = compose(x6, x5)
    x8 = mapply(x7, x3)
    x9 = difference(x4, x8)
    O = move(x1, x9, RIGHT)
    return O



def solve_a416b8f3_2281f1f4(I):
    x1 = hconcat(I, I)
    x2 = ofcolor(x1, FIVE)
    x3 = product(x2, x2)
    x4 = power(first, TWO)
    x5 = power(last, TWO)
    x6 = fork(astuple, x4, x5)
    x7 = apply(x6, x3)
    x8 = urcorner(x2)
    x9 = remove(x8, x7)
    O = underfill(x1, TWO, x9)
    return O



def solve_a416b8f3_cf98881b(I):
    x1 = hconcat(I, I)
    x2 = hsplit(x1, THREE)
    x3 = first(x2)
    x4 = remove(x3, x2)
    x5 = first(x4)
    x6 = last(x4)
    x7 = ofcolor(x5, NINE)
    x8 = ofcolor(x3, FOUR)
    x9 = fill(x6, NINE, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_a416b8f3_bda2d7a6(I):
    x1 = hconcat(I, I)
    x2 = partition(x1)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = last(x3)
    x6 = remove(x5, x3)
    x7 = repeat(x5, ONE)
    x8 = combine(x7, x6)
    x9 = mpapply(recolor, x4, x8)
    O = paint(x1, x9)
    return O



def solve_a416b8f3_6455b5f5(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = argmax(x2, size)
    x5 = valmin(x2, size)
    x6 = sizefilter(x3, x5)
    x7 = recolor(ONE, x4)
    x8 = merge(x6)
    x9 = paint(x1, x7)
    O = fill(x9, EIGHT, x8)
    return O



def solve_a416b8f3_b8cdaf2b(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = shift(x3, UP)
    x5 = ulcorner(x4)
    x6 = urcorner(x4)
    x7 = shoot(x5, NEG_UNITY)
    x8 = shoot(x6, UP_RIGHT)
    x9 = combine(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_a416b8f3_bd4472b8(I):
    x1 = hconcat(I, I)
    x2 = width(x1)
    x3 = astuple(TWO, x2)
    x4 = crop(x1, ORIGIN, x3)
    x5 = tophalf(x4)
    x6 = dmirror(x5)
    x7 = hupscale(x6, x2)
    x8 = repeat(x7, TWO)
    x9 = merge(x8)
    O = vconcat(x4, x9)
    return O



def solve_a416b8f3_4be741c5(I):
    x1 = hconcat(I, I)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = branch(x2, height, width)
    x5 = x4(x1)
    x6 = astuple(ONE, x5)
    x7 = x3(x1)
    x8 = crop(x7, ORIGIN, x6)
    x9 = apply(dedupe, x8)
    O = x3(x9)
    return O



def solve_a416b8f3_bbc9ae5d(I):
    x1 = hconcat(I, I)
    x2 = width(x1)
    x3 = palette(x1)
    x4 = halve(x2)
    x5 = vupscale(x1, x4)
    x6 = rbind(shoot, UNITY)
    x7 = other(x3, ZERO)
    x8 = ofcolor(x5, x7)
    x9 = mapply(x6, x8)
    O = fill(x5, x7, x9)
    return O



def solve_a416b8f3_d90796e8(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = lbind(contained, TWO)
    x5 = compose(x4, palette)
    x6 = mfilter(x3, x5)
    x7 = cover(x1, x6)
    x8 = matcher(first, THREE)
    x9 = sfilter(x6, x8)
    O = fill(x7, EIGHT, x9)
    return O



def solve_a416b8f3_2c608aff(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = toindices(x4)
    x6 = ofcolor(x1, x2)
    x7 = prapply(connect, x5, x6)
    x8 = fork(either, vline, hline)
    x9 = mfilter(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_a416b8f3_f8b3ba0a(I):
    x1 = hconcat(I, I)
    x2 = compress(x1)
    x3 = astuple(THREE, ONE)
    x4 = palette(x2)
    x5 = lbind(colorcount, x2)
    x6 = compose(invert, x5)
    x7 = order(x4, x6)
    x8 = rbind(canvas, UNITY)
    x9 = apply(x8, x7)
    x10 = merge(x9)
    O = crop(x10, DOWN, x3)
    return O



def solve_a416b8f3_80af3007(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    x10 = cellwise(x5, x9, ZERO)
    O = downscale(x10, THREE)
    return O



def solve_a416b8f3_83302e8f(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = sfilter(x3, square)
    x5 = difference(x3, x4)
    x6 = merge(x4)
    x7 = recolor(THREE, x6)
    x8 = merge(x5)
    x9 = recolor(FOUR, x8)
    x10 = paint(x1, x7)
    O = paint(x10, x9)
    return O



def solve_a416b8f3_1fad071e(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, ONE)
    x4 = sizefilter(x3, FOUR)
    x5 = size(x4)
    x6 = subtract(FIVE, x5)
    x7 = astuple(ONE, x5)
    x8 = canvas(ONE, x7)
    x9 = astuple(ONE, x6)
    x10 = canvas(ZERO, x9)
    O = hconcat(x8, x10)
    return O



def solve_a416b8f3_11852cab(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = hmirror(x3)
    x5 = vmirror(x3)
    x6 = dmirror(x3)
    x7 = cmirror(x3)
    x8 = paint(x1, x4)
    x9 = paint(x8, x5)
    x10 = paint(x9, x6)
    O = paint(x10, x7)
    return O



def solve_a416b8f3_3428a4f5(I):
    x1 = hconcat(I, I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(SIX, FIVE)
    x5 = ofcolor(x2, TWO)
    x6 = ofcolor(x3, TWO)
    x7 = combine(x5, x6)
    x8 = intersection(x5, x6)
    x9 = difference(x7, x8)
    x10 = canvas(ZERO, x4)
    O = fill(x10, THREE, x9)
    return O



def solve_a416b8f3_178fcbfb(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(vfrontier, x3)
    x5 = fill(x1, TWO, x4)
    x6 = colorfilter(x2, TWO)
    x7 = difference(x2, x6)
    x8 = compose(hfrontier, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x7)
    O = paint(x5, x10)
    return O



def solve_a416b8f3_54d9e175(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = compose(neighbors, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x3)
    x7 = paint(x1, x6)
    x8 = replace(x7, ONE, SIX)
    x9 = replace(x8, TWO, SEVEN)
    x10 = replace(x9, THREE, EIGHT)
    O = replace(x10, FOUR, NINE)
    return O



def solve_a416b8f3_623ea044(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = center(x3)
    x5 = color(x3)
    x6 = astuple(UNITY, NEG_UNITY)
    x7 = astuple(UP_RIGHT, DOWN_LEFT)
    x8 = combine(x6, x7)
    x9 = lbind(shoot, x4)
    x10 = mapply(x9, x8)
    O = fill(x1, x5, x10)
    return O



def solve_a416b8f3_794b24be(I):
    x1 = hconcat(I, I)
    x2 = ofcolor(x1, ONE)
    x3 = size(x2)
    x4 = decrement(x3)
    x5 = canvas(ZERO, THREE_BY_THREE)
    x6 = tojvec(x4)
    x7 = connect(ORIGIN, x6)
    x8 = equality(x3, FOUR)
    x9 = insert(UNITY, x7)
    x10 = branch(x8, x9, x7)
    O = fill(x5, TWO, x10)
    return O



def solve_a416b8f3_88a62173(I):
    x1 = hconcat(I, I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = tophalf(x3)
    x6 = bottomhalf(x2)
    x7 = bottomhalf(x3)
    x8 = astuple(x4, x5)
    x9 = astuple(x6, x7)
    x10 = combine(x8, x9)
    O = leastcommon(x10)
    return O



def solve_a416b8f3_890034e9(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = inbox(x3)
    x5 = recolor(ZERO, x4)
    x6 = occurrences(x1, x5)
    x7 = normalize(x3)
    x8 = shift(x7, NEG_UNITY)
    x9 = lbind(shift, x8)
    x10 = mapply(x9, x6)
    O = fill(x1, x2, x10)
    return O



def solve_a416b8f3_99b1bc43(I):
    x1 = hconcat(I, I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = combine(x4, x5)
    x7 = intersection(x4, x5)
    x8 = difference(x6, x7)
    x9 = shape(x2)
    x10 = canvas(ZERO, x9)
    O = fill(x10, THREE, x8)
    return O



def solve_a416b8f3_a9f96cdd(I):
    x1 = hconcat(I, I)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = shift(x2, NEG_UNITY)
    x5 = fill(x3, THREE, x4)
    x6 = shift(x2, UP_RIGHT)
    x7 = fill(x5, SIX, x6)
    x8 = shift(x2, DOWN_LEFT)
    x9 = fill(x7, EIGHT, x8)
    x10 = shift(x2, UNITY)
    O = fill(x9, SEVEN, x10)
    return O



def solve_a416b8f3_af902bf9(I):
    x1 = hconcat(I, I)
    x2 = ofcolor(x1, FOUR)
    x3 = prapply(connect, x2, x2)
    x4 = fork(either, vline, hline)
    x5 = mfilter(x3, x4)
    x6 = underfill(x1, NEG_ONE, x5)
    x7 = objects(x6, F, F, T)
    x8 = compose(backdrop, inbox)
    x9 = mapply(x8, x7)
    x10 = fill(x6, TWO, x9)
    O = replace(x10, NEG_ONE, ZERO)
    return O



def solve_a416b8f3_b548a754(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, EIGHT, ZERO)
    x4 = leastcolor(x3)
    x5 = replace(x3, x4, ZERO)
    x6 = leastcolor(x5)
    x7 = merge(x2)
    x8 = backdrop(x7)
    x9 = box(x7)
    x10 = fill(x1, x4, x8)
    O = fill(x10, x6, x9)
    return O



def solve_a416b8f3_c3e719e8(I):
    x1 = hconcat(I, I)
    x2 = mostcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = upscale(x1, THREE)
    x5 = ofcolor(x4, x2)
    x6 = asindices(x4)
    x7 = difference(x6, x5)
    x8 = hconcat(x3, x1)
    x9 = vconcat(x8, x8)
    x10 = vconcat(x9, x8)
    O = fill(x10, ZERO, x7)
    return O



def solve_a416b8f3_de1cd16c(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = rbind(subgrid, x1)
    x7 = apply(x6, x5)
    x8 = rbind(colorcount, x2)
    x9 = argmax(x7, x8)
    x10 = mostcolor(x9)
    O = canvas(x10, UNITY)
    return O



def solve_a416b8f3_d8c310e9(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = hperiod(x3)
    x5 = multiply(x4, THREE)
    x6 = tojvec(x4)
    x7 = tojvec(x5)
    x8 = shift(x3, x6)
    x9 = shift(x3, x7)
    x10 = paint(x1, x8)
    O = paint(x10, x9)
    return O



def solve_a416b8f3_a3325580(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = valmax(x2, size)
    x4 = sizefilter(x2, x3)
    x5 = order(x4, leftmost)
    x6 = apply(color, x5)
    x7 = astuple(ONE, x3)
    x8 = rbind(canvas, x7)
    x9 = apply(x8, x6)
    x10 = merge(x9)
    O = dmirror(x10)
    return O



def solve_a416b8f3_8eb1be9a(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = interval(NEG_TWO, FOUR, ONE)
    x5 = lbind(shift, x3)
    x6 = height(x3)
    x7 = rbind(multiply, x6)
    x8 = apply(x7, x4)
    x9 = apply(toivec, x8)
    x10 = mapply(x5, x9)
    O = paint(x1, x10)
    return O



def solve_a416b8f3_321b1fc6(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, F, T)
    x3 = colorfilter(x2, EIGHT)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = cover(x1, x5)
    x7 = normalize(x5)
    x8 = lbind(shift, x7)
    x9 = apply(ulcorner, x3)
    x10 = mapply(x8, x9)
    O = paint(x6, x10)
    return O



def solve_a416b8f3_c0f76784(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = sfilter(x3, square)
    x5 = sizefilter(x4, ONE)
    x6 = merge(x5)
    x7 = argmax(x4, size)
    x8 = merge(x4)
    x9 = fill(x1, SEVEN, x8)
    x10 = fill(x9, EIGHT, x7)
    O = fill(x10, SIX, x6)
    return O



def solve_a416b8f3_1b60fb0c(I):
    x1 = hconcat(I, I)
    x2 = rot90(x1)
    x3 = ofcolor(x1, ONE)
    x4 = ofcolor(x2, ONE)
    x5 = neighbors(ORIGIN)
    x6 = mapply(neighbors, x5)
    x7 = lbind(shift, x4)
    x8 = apply(x7, x6)
    x9 = lbind(intersection, x3)
    x10 = compose(size, x9)
    x11 = argmax(x8, x10)
    O = underfill(x1, TWO, x11)
    return O



def solve_a416b8f3_ddf7fa4f(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = colorfilter(x2, FIVE)
    x5 = product(x3, x4)
    x6 = fork(vmatching, first, last)
    x7 = sfilter(x5, x6)
    x8 = compose(color, first)
    x9 = fork(recolor, x8, last)
    x10 = mapply(x9, x7)
    O = paint(x1, x10)
    return O



def solve_a416b8f3_47c1f68c(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = vmirror(x1)
    x4 = objects(x1, T, T, T)
    x5 = merge(x4)
    x6 = mostcolor(x5)
    x7 = cellwise(x1, x3, x2)
    x8 = hmirror(x7)
    x9 = cellwise(x7, x8, x2)
    x10 = compress(x9)
    O = replace(x10, x2, x6)
    return O



def solve_a416b8f3_6c434453(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, EIGHT)
    x4 = dneighbors(UNITY)
    x5 = insert(UNITY, x4)
    x6 = merge(x3)
    x7 = cover(x1, x6)
    x8 = apply(ulcorner, x3)
    x9 = lbind(shift, x5)
    x10 = mapply(x9, x8)
    O = fill(x7, TWO, x10)
    return O



def solve_a416b8f3_23581191(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = paint(x1, x6)
    x8 = fork(intersection, first, last)
    x9 = apply(x4, x2)
    x10 = x8(x9)
    O = fill(x7, TWO, x10)
    return O



def solve_a416b8f3_c8cbb738(I):
    x1 = hconcat(I, I)
    x2 = mostcolor(x1)
    x3 = fgpartition(x1)
    x4 = valmax(x3, shape)
    x5 = canvas(x2, x4)
    x6 = apply(normalize, x3)
    x7 = lbind(subtract, x4)
    x8 = chain(halve, x7, shape)
    x9 = fork(shift, identity, x8)
    x10 = mapply(x9, x6)
    O = paint(x5, x10)
    return O



def solve_a416b8f3_d4469b4b(I):
    x1 = hconcat(I, I)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = equality(x3, ONE)
    x5 = equality(x3, TWO)
    x6 = branch(x4, UNITY, TWO_BY_TWO)
    x7 = branch(x5, RIGHT, x6)
    x8 = fork(combine, vfrontier, hfrontier)
    x9 = x8(x7)
    x10 = canvas(ZERO, THREE_BY_THREE)
    O = fill(x10, FIVE, x9)
    return O



def solve_a416b8f3_6ecd11f4(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = subgrid(x3, x1)
    x6 = subgrid(x4, x1)
    x7 = width(x5)
    x8 = width(x6)
    x9 = divide(x7, x8)
    x10 = downscale(x5, x9)
    x11 = ofcolor(x10, ZERO)
    O = fill(x6, ZERO, x11)
    return O



def solve_a416b8f3_c444b776(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = argmin(x3, size)
    x5 = backdrop(x4)
    x6 = toobject(x5, x1)
    x7 = normalize(x6)
    x8 = lbind(shift, x7)
    x9 = compose(x8, ulcorner)
    x10 = mapply(x9, x3)
    O = paint(x1, x10)
    return O



def solve_a416b8f3_eb281b96(I):
    x1 = hconcat(I, I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = decrement(x2)
    x5 = astuple(x4, x3)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    x8 = vconcat(x1, x7)
    x9 = double(x4)
    x10 = astuple(x9, x3)
    x11 = crop(x8, DOWN, x10)
    O = vconcat(x8, x11)
    return O



def solve_a416b8f3_ff28f65a(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = double(x3)
    x5 = interval(ZERO, x4, TWO)
    x6 = apply(tojvec, x5)
    x7 = astuple(ONE, NINE)
    x8 = canvas(ZERO, x7)
    x9 = fill(x8, ONE, x6)
    x10 = hsplit(x9, THREE)
    O = merge(x10)
    return O



def solve_a416b8f3_7e0986d6(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = replace(x1, x2, ZERO)
    x5 = leastcolor(x4)
    x6 = rbind(colorcount, x5)
    x7 = chain(positive, decrement, x6)
    x8 = rbind(toobject, x4)
    x9 = chain(x7, x8, dneighbors)
    x10 = sfilter(x3, x9)
    O = fill(x4, x5, x10)
    return O



def solve_a416b8f3_09629e4f(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, T, T)
    x3 = argmin(x2, numcolors)
    x4 = normalize(x3)
    x5 = upscale(x4, FOUR)
    x6 = paint(x1, x5)
    x7 = ofcolor(x1, FIVE)
    O = fill(x6, FIVE, x7)
    return O



def solve_a416b8f3_a85d4709(I):
    x1 = hconcat(I, I)
    x2 = ofcolor(x1, FIVE)
    x3 = lbind(matcher, last)
    x4 = lbind(sfilter, x2)
    x5 = lbind(mapply, hfrontier)
    x6 = chain(x5, x4, x3)
    x7 = x6(ZERO)
    x8 = x6(TWO)
    x9 = x6(ONE)
    x10 = fill(x1, TWO, x7)
    x11 = fill(x10, THREE, x8)
    O = fill(x11, FOUR, x9)
    return O



def solve_a416b8f3_feca6190(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = multiply(x3, FIVE)
    x5 = astuple(x4, x4)
    x6 = canvas(ZERO, x5)
    x7 = rbind(shoot, UNITY)
    x8 = compose(x7, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x2)
    x11 = paint(x6, x10)
    O = hmirror(x11)
    return O



def solve_a416b8f3_a68b268e(I):
    x1 = hconcat(I, I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = lefthalf(x2)
    x5 = righthalf(x2)
    x6 = lefthalf(x3)
    x7 = righthalf(x3)
    x8 = ofcolor(x5, FOUR)
    x9 = ofcolor(x4, SEVEN)
    x10 = ofcolor(x6, EIGHT)
    x11 = fill(x7, EIGHT, x10)
    x12 = fill(x11, FOUR, x8)
    O = fill(x12, SEVEN, x9)
    return O



def solve_a416b8f3_beb8660c(I):
    x1 = hconcat(I, I)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(invert, size)
    x5 = order(x3, x4)
    x6 = apply(normalize, x5)
    x7 = size(x6)
    x8 = interval(ZERO, x7, ONE)
    x9 = apply(toivec, x8)
    x10 = mpapply(shift, x6, x9)
    x11 = canvas(ZERO, x2)
    x12 = paint(x11, x10)
    O = rot180(x12)
    return O



def solve_a416b8f3_913fb3ed(I):
    x1 = hconcat(I, I)
    x2 = ofcolor(x1, THREE)
    x3 = ofcolor(x1, EIGHT)
    x4 = ofcolor(x1, TWO)
    x5 = mapply(neighbors, x2)
    x6 = mapply(neighbors, x3)
    x7 = mapply(neighbors, x4)
    x8 = fill(x1, SIX, x5)
    x9 = fill(x8, FOUR, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_a416b8f3_0962bcdd(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = replace(x1, ZERO, x2)
    x4 = leastcolor(x3)
    x5 = ofcolor(x1, x4)
    x6 = mapply(dneighbors, x5)
    x7 = fill(x1, x4, x6)
    x8 = objects(x7, F, T, T)
    x9 = fork(connect, ulcorner, lrcorner)
    x10 = fork(connect, llcorner, urcorner)
    x11 = fork(combine, x9, x10)
    x12 = mapply(x11, x8)
    O = fill(x7, x2, x12)
    return O



def solve_a416b8f3_3631a71a(I):
    x1 = hconcat(I, I)
    x2 = shape(x1)
    x3 = replace(x1, NINE, ZERO)
    x4 = lbind(apply, maximum)
    x5 = dmirror(x3)
    x6 = papply(pair, x3, x5)
    x7 = apply(x4, x6)
    x8 = subtract(x2, TWO_BY_TWO)
    x9 = crop(x7, TWO_BY_TWO, x8)
    x10 = vmirror(x9)
    x11 = objects(x10, T, F, T)
    x12 = merge(x11)
    x13 = shift(x12, TWO_BY_TWO)
    O = paint(x7, x13)
    return O



def solve_a416b8f3_05269061(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = neighbors(ORIGIN)
    x4 = mapply(neighbors, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = merge(x2)
    x8 = lbind(shift, x7)
    x9 = mapply(x8, x6)
    x10 = shift(x9, UP_RIGHT)
    x11 = shift(x9, DOWN_LEFT)
    x12 = paint(x1, x9)
    x13 = paint(x12, x10)
    O = paint(x13, x11)
    return O



def solve_a416b8f3_95990924(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = apply(ulcorner, x3)
    x5 = apply(urcorner, x3)
    x6 = apply(llcorner, x3)
    x7 = apply(lrcorner, x3)
    x8 = fill(x1, ONE, x4)
    x9 = fill(x8, TWO, x5)
    x10 = fill(x9, THREE, x6)
    O = fill(x10, FOUR, x7)
    return O



def solve_a416b8f3_e509e548(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = rbind(subgrid, x1)
    x4 = chain(palette, trim, x3)
    x5 = lbind(contained, THREE)
    x6 = compose(x5, x4)
    x7 = fork(add, height, width)
    x8 = compose(decrement, x7)
    x9 = fork(equality, size, x8)
    x10 = mfilter(x2, x6)
    x11 = mfilter(x2, x9)
    x12 = replace(x1, THREE, SIX)
    x13 = fill(x12, TWO, x10)
    O = fill(x13, ONE, x11)
    return O



def solve_a416b8f3_d43fd935(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, THREE)
    x4 = sizefilter(x2, ONE)
    x5 = rbind(vmatching, x3)
    x6 = rbind(hmatching, x3)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = rbind(gravitate, x3)
    x10 = fork(add, center, x9)
    x11 = fork(connect, center, x10)
    x12 = fork(recolor, color, x11)
    x13 = mapply(x12, x8)
    O = paint(x1, x13)
    return O



def solve_a416b8f3_e73095fd(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = fork(equality, toindices, backdrop)
    x5 = sfilter(x3, x4)
    x6 = lbind(mapply, dneighbors)
    x7 = chain(x6, corners, outbox)
    x8 = fork(difference, x7, outbox)
    x9 = ofcolor(x1, FIVE)
    x10 = rbind(intersection, x9)
    x11 = matcher(size, ZERO)
    x12 = chain(x11, x10, x8)
    x13 = mfilter(x5, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_a416b8f3_1bfc4729(I):
    x1 = hconcat(I, I)
    x2 = asindices(x1)
    x3 = tophalf(x1)
    x4 = bottomhalf(x1)
    x5 = leastcolor(x3)
    x6 = leastcolor(x4)
    x7 = hfrontier(TWO_BY_ZERO)
    x8 = box(x2)
    x9 = combine(x7, x8)
    x10 = fill(x3, x5, x9)
    x11 = hmirror(x10)
    x12 = replace(x11, x5, x6)
    O = vconcat(x10, x12)
    return O



def solve_a416b8f3_93b581b8(I):
    x1 = hconcat(I, I)
    x2 = fgpartition(x1)
    x3 = chain(cmirror, dmirror, merge)
    x4 = x3(x2)
    x5 = upscale(x4, THREE)
    x6 = astuple(NEG_TWO, NEG_TWO)
    x7 = shift(x5, x6)
    x8 = underpaint(x1, x7)
    x9 = toindices(x4)
    x10 = fork(combine, hfrontier, vfrontier)
    x11 = mapply(x10, x9)
    x12 = difference(x11, x9)
    O = fill(x8, ZERO, x12)
    return O



def solve_a416b8f3_7447852a(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = compose(last, center)
    x5 = order(x3, x4)
    x6 = size(x5)
    x7 = interval(ZERO, x6, THREE)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = interval(ZERO, x6, ONE)
    x11 = pair(x5, x10)
    x12 = sfilter(x11, x9)
    x13 = mapply(first, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_a416b8f3_97999447(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = apply(toindices, x2)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    x8 = paint(x1, x7)
    x9 = interval(ZERO, FIVE, ONE)
    x10 = apply(double, x9)
    x11 = apply(increment, x10)
    x12 = apply(tojvec, x11)
    x13 = prapply(shift, x3, x12)
    x14 = merge(x13)
    O = fill(x8, FIVE, x14)
    return O



def solve_a416b8f3_91714a58(I):
    x1 = hconcat(I, I)
    x2 = shape(x1)
    x3 = asindices(x1)
    x4 = objects(x1, T, F, T)
    x5 = argmax(x4, size)
    x6 = mostcolor(x5)
    x7 = canvas(ZERO, x2)
    x8 = paint(x7, x5)
    x9 = rbind(toobject, x8)
    x10 = rbind(colorcount, x6)
    x11 = chain(x10, x9, neighbors)
    x12 = lbind(greater, THREE)
    x13 = compose(x12, x11)
    x14 = sfilter(x3, x13)
    O = fill(x8, ZERO, x14)
    return O



def solve_a416b8f3_8e1813be(I):
    x1 = hconcat(I, I)
    x2 = replace(x1, FIVE, ZERO)
    x3 = objects(x2, T, T, T)
    x4 = first(x3)
    x5 = vline(x4)
    x6 = branch(x5, dmirror, identity)
    x7 = x6(x2)
    x8 = objects(x7, T, T, T)
    x9 = order(x8, uppermost)
    x10 = apply(color, x9)
    x11 = dedupe(x10)
    x12 = size(x11)
    x13 = rbind(repeat, x12)
    x14 = apply(x13, x11)
    O = x6(x14)
    return O



def solve_a416b8f3_bc1d5164(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = crop(x1, TWO_BY_ZERO, THREE_BY_THREE)
    x5 = tojvec(FOUR)
    x6 = crop(x1, x5, THREE_BY_THREE)
    x7 = astuple(TWO, FOUR)
    x8 = crop(x1, x7, THREE_BY_THREE)
    x9 = canvas(ZERO, THREE_BY_THREE)
    x10 = rbind(ofcolor, x2)
    x11 = astuple(x3, x4)
    x12 = astuple(x6, x8)
    x13 = combine(x11, x12)
    x14 = mapply(x10, x13)
    O = fill(x9, x2, x14)
    return O



def solve_a416b8f3_ce602527(I):
    x1 = hconcat(I, I)
    x2 = vmirror(x1)
    x3 = fgpartition(x2)
    x4 = order(x3, size)
    x5 = last(x4)
    x6 = remove(x5, x4)
    x7 = compose(toindices, normalize)
    x8 = rbind(upscale, TWO)
    x9 = chain(toindices, x8, normalize)
    x10 = x7(x5)
    x11 = rbind(intersection, x10)
    x12 = chain(size, x11, x9)
    x13 = argmax(x6, x12)
    x14 = subgrid(x13, x2)
    O = vmirror(x14)
    return O



def solve_a416b8f3_5c2c9af4(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = center(x3)
    x5 = ulcorner(x3)
    x6 = subtract(x4, x5)
    x7 = multiply(NEG_ONE, NINE)
    x8 = interval(ZERO, NINE, ONE)
    x9 = interval(ZERO, x7, NEG_ONE)
    x10 = lbind(multiply, x6)
    x11 = apply(x10, x8)
    x12 = apply(x10, x9)
    x13 = pair(x11, x12)
    x14 = mapply(box, x13)
    x15 = shift(x14, x4)
    O = fill(x1, x2, x15)
    return O



def solve_a416b8f3_75b8110e(I):
    x1 = hconcat(I, I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = bottomhalf(x2)
    x6 = tophalf(x3)
    x7 = bottomhalf(x3)
    x8 = rbind(ofcolor, ZERO)
    x9 = fork(difference, asindices, x8)
    x10 = fork(toobject, x9, identity)
    x11 = x10(x6)
    x12 = x10(x5)
    x13 = x10(x7)
    x14 = paint(x4, x13)
    x15 = paint(x14, x12)
    O = paint(x15, x11)
    return O



def solve_a416b8f3_c3f564a4(I):
    x1 = hconcat(I, I)
    x2 = asindices(x1)
    x3 = dmirror(x1)
    x4 = invert(NINE)
    x5 = papply(pair, x1, x3)
    x6 = lbind(apply, maximum)
    x7 = apply(x6, x5)
    x8 = ofcolor(x7, ZERO)
    x9 = difference(x2, x8)
    x10 = toobject(x9, x7)
    x11 = interval(x4, NINE, ONE)
    x12 = interval(NINE, x4, NEG_ONE)
    x13 = pair(x11, x12)
    x14 = lbind(shift, x10)
    x15 = mapply(x14, x13)
    O = paint(x7, x15)
    return O



def solve_a416b8f3_1a07d186(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = mapply(x12, x8)
    x14 = merge(x3)
    x15 = cover(x1, x14)
    O = paint(x15, x13)
    return O



def solve_a416b8f3_d687bc17(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = merge(x3)
    x14 = mapply(x12, x8)
    x15 = cover(x1, x13)
    O = paint(x15, x14)
    return O



def solve_a416b8f3_9af7a82c(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, F)
    x3 = order(x2, size)
    x4 = valmax(x2, size)
    x5 = rbind(astuple, ONE)
    x6 = lbind(subtract, x4)
    x7 = compose(x5, size)
    x8 = chain(x5, x6, size)
    x9 = fork(canvas, color, x7)
    x10 = lbind(canvas, ZERO)
    x11 = compose(x10, x8)
    x12 = fork(vconcat, x9, x11)
    x13 = compose(cmirror, x12)
    x14 = apply(x13, x3)
    x15 = merge(x14)
    O = cmirror(x15)
    return O



def solve_a416b8f3_ef135b50(I):
    x1 = hconcat(I, I)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, ZERO)
    x4 = product(x2, x2)
    x5 = power(first, TWO)
    x6 = compose(first, last)
    x7 = fork(equality, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = fork(connect, first, last)
    x10 = mapply(x9, x8)
    x11 = intersection(x10, x3)
    x12 = fill(x1, NINE, x11)
    x13 = trim(x12)
    x14 = asobject(x13)
    x15 = shift(x14, UNITY)
    O = paint(x1, x15)
    return O



def solve_a416b8f3_cbded52d(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = product(x3, x3)
    x5 = fork(vmatching, first, last)
    x6 = fork(hmatching, first, last)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = compose(center, first)
    x10 = compose(center, last)
    x11 = fork(connect, x9, x10)
    x12 = chain(initset, center, x11)
    x13 = compose(color, first)
    x14 = fork(recolor, x13, x12)
    x15 = mapply(x14, x8)
    O = paint(x1, x15)
    return O



def solve_a416b8f3_e26a3af2(I):
    x1 = hconcat(I, I)
    x2 = rot90(x1)
    x3 = apply(mostcommon, x1)
    x4 = apply(mostcommon, x2)
    x5 = repeat(x3, ONE)
    x6 = repeat(x4, ONE)
    x7 = compose(size, dedupe)
    x8 = x7(x3)
    x9 = x7(x4)
    x10 = greater(x9, x8)
    x11 = branch(x10, height, width)
    x12 = x11(x1)
    x13 = rot90(x5)
    x14 = branch(x10, x6, x13)
    x15 = branch(x10, vupscale, hupscale)
    O = x15(x14, x12)
    return O



def solve_a416b8f3_6cf79266(I):
    x1 = hconcat(I, I)
    x2 = ofcolor(x1, ZERO)
    x3 = astuple(ZERO, ORIGIN)
    x4 = initset(x3)
    x5 = upscale(x4, THREE)
    x6 = toindices(x5)
    x7 = lbind(shift, x6)
    x8 = rbind(difference, x2)
    x9 = chain(size, x8, x7)
    x10 = matcher(x9, ZERO)
    x11 = lbind(add, NEG_UNITY)
    x12 = chain(flip, x10, x11)
    x13 = fork(both, x10, x12)
    x14 = sfilter(x2, x13)
    x15 = mapply(x7, x14)
    O = fill(x1, ONE, x15)
    return O



def solve_a416b8f3_a87f7484(I):
    x1 = hconcat(I, I)
    x2 = numcolors(x1)
    x3 = portrait(x1)
    x4 = branch(x3, dmirror, identity)
    x5 = x4(x1)
    x6 = decrement(x2)
    x7 = hsplit(x5, x6)
    x8 = rbind(ofcolor, ZERO)
    x9 = apply(x8, x7)
    x10 = leastcommon(x9)
    x11 = matcher(x8, x10)
    x12 = extract(x7, x11)
    O = x4(x12)
    return O



def solve_a416b8f3_4093f84a(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, FIVE)
    x4 = ofcolor(x1, FIVE)
    x5 = portrait(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x3)
    x8 = lefthalf(x7)
    x9 = righthalf(x7)
    x10 = rbind(order, identity)
    x11 = rbind(order, invert)
    x12 = apply(x10, x8)
    x13 = apply(x11, x9)
    x14 = hconcat(x12, x13)
    O = x6(x14)
    return O



def solve_a416b8f3_ba26e723(I):
    x1 = hconcat(I, I)
    x2 = rbind(divide, THREE)
    x3 = rbind(multiply, THREE)
    x4 = compose(x3, x2)
    x5 = fork(equality, identity, x4)
    x6 = compose(x5, last)
    x7 = ofcolor(x1, FOUR)
    x8 = sfilter(x7, x6)
    O = fill(x1, SIX, x8)
    return O



def solve_a416b8f3_29c11459(I):
    x1 = hconcat(I, I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = objects(x3, T, F, T)
    x5 = objects(x2, T, F, T)
    x6 = compose(hfrontier, center)
    x7 = fork(recolor, color, x6)
    x8 = mapply(x7, x5)
    x9 = paint(x2, x8)
    x10 = mapply(x7, x4)
    x11 = paint(x1, x10)
    x12 = objects(x9, T, F, T)
    x13 = apply(urcorner, x12)
    x14 = shift(x13, RIGHT)
    x15 = merge(x12)
    x16 = paint(x11, x15)
    O = fill(x16, FIVE, x14)
    return O



def solve_a416b8f3_963e52fc(I):
    x1 = hconcat(I, I)
    x2 = width(x1)
    x3 = asobject(x1)
    x4 = hperiod(x3)
    x5 = height(x3)
    x6 = astuple(x5, x4)
    x7 = ulcorner(x3)
    x8 = crop(x1, x7, x6)
    x9 = rot90(x8)
    x10 = double(x2)
    x11 = divide(x10, x4)
    x12 = increment(x11)
    x13 = repeat(x9, x12)
    x14 = merge(x13)
    x15 = rot270(x14)
    x16 = astuple(x5, x10)
    O = crop(x15, ORIGIN, x16)
    return O



def solve_a416b8f3_1f0c79e5(I):
    x1 = hconcat(I, I)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = leastcolor(x3)
    x5 = ofcolor(x3, x4)
    x6 = combine(x2, x5)
    x7 = recolor(x4, x6)
    x8 = compose(decrement, double)
    x9 = ulcorner(x6)
    x10 = invert(x9)
    x11 = shift(x2, x10)
    x12 = apply(x8, x11)
    x13 = interval(ZERO, NINE, ONE)
    x14 = prapply(multiply, x12, x13)
    x15 = lbind(shift, x7)
    x16 = mapply(x15, x14)
    O = paint(x1, x16)
    return O



def solve_a416b8f3_6773b310(I):
    x1 = hconcat(I, I)
    x2 = compress(x1)
    x3 = neighbors(ORIGIN)
    x4 = insert(ORIGIN, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = astuple(FOUR, FOUR)
    x8 = shift(x6, x7)
    x9 = fork(insert, identity, neighbors)
    x10 = apply(x9, x8)
    x11 = rbind(toobject, x2)
    x12 = apply(x11, x10)
    x13 = rbind(colorcount, SIX)
    x14 = matcher(x13, TWO)
    x15 = mfilter(x12, x14)
    x16 = fill(x2, ONE, x15)
    x17 = replace(x16, SIX, ZERO)
    O = downscale(x17, THREE)
    return O



def solve_a416b8f3_780d0b14(I):
    x1 = hconcat(I, I)
    x2 = asindices(x1)
    x3 = objects(x1, T, T, T)
    x4 = rbind(greater, TWO)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = totuple(x6)
    x8 = apply(color, x7)
    x9 = apply(center, x7)
    x10 = pair(x8, x9)
    x11 = fill(x1, ZERO, x2)
    x12 = paint(x11, x10)
    x13 = rbind(greater, ONE)
    x14 = compose(dedupe, totuple)
    x15 = chain(x13, size, x14)
    x16 = sfilter(x12, x15)
    x17 = rot90(x16)
    x18 = sfilter(x17, x15)
    O = rot270(x18)
    return O



def solve_a416b8f3_2204b7a8(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sfilter, x2)
    x4 = compose(size, x3)
    x5 = x4(vline)
    x6 = x4(hline)
    x7 = greater(x5, x6)
    x8 = branch(x7, lefthalf, tophalf)
    x9 = branch(x7, righthalf, bottomhalf)
    x10 = branch(x7, hconcat, vconcat)
    x11 = x8(x1)
    x12 = x9(x1)
    x13 = index(x11, ORIGIN)
    x14 = shape(x12)
    x15 = decrement(x14)
    x16 = index(x12, x15)
    x17 = replace(x11, THREE, x13)
    x18 = replace(x12, THREE, x16)
    O = x10(x17, x18)
    return O



def solve_a416b8f3_d9f24cd1(I):
    x1 = hconcat(I, I)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, FIVE)
    x4 = prapply(connect, x2, x3)
    x5 = mfilter(x4, vline)
    x6 = underfill(x1, TWO, x5)
    x7 = matcher(numcolors, TWO)
    x8 = objects(x6, F, F, T)
    x9 = sfilter(x8, x7)
    x10 = difference(x8, x9)
    x11 = colorfilter(x10, TWO)
    x12 = mapply(toindices, x11)
    x13 = apply(urcorner, x9)
    x14 = shift(x13, UNITY)
    x15 = rbind(shoot, UP)
    x16 = mapply(x15, x14)
    x17 = fill(x6, TWO, x16)
    x18 = mapply(vfrontier, x12)
    O = fill(x17, TWO, x18)
    return O



def solve_a416b8f3_b782dc8a(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = ofcolor(x1, x2)
    x5 = first(x4)
    x6 = dneighbors(x5)
    x7 = toobject(x6, x1)
    x8 = mostcolor(x7)
    x9 = ofcolor(x1, x8)
    x10 = colorfilter(x3, ZERO)
    x11 = rbind(adjacent, x9)
    x12 = mfilter(x10, x11)
    x13 = toindices(x12)
    x14 = rbind(manhattan, x4)
    x15 = chain(even, x14, initset)
    x16 = sfilter(x13, x15)
    x17 = difference(x13, x16)
    x18 = fill(x1, x2, x16)
    O = fill(x18, x8, x17)
    return O



def solve_a416b8f3_673ef223(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, EIGHT)
    x4 = replace(x1, EIGHT, FOUR)
    x5 = colorfilter(x2, TWO)
    x6 = argmin(x2, uppermost)
    x7 = apply(uppermost, x5)
    x8 = fork(subtract, maximum, minimum)
    x9 = x8(x7)
    x10 = toivec(x9)
    x11 = leftmost(x6)
    x12 = equality(x11, ZERO)
    x13 = branch(x12, LEFT, RIGHT)
    x14 = rbind(shoot, x13)
    x15 = mapply(x14, x3)
    x16 = underfill(x4, EIGHT, x15)
    x17 = shift(x3, x10)
    x18 = mapply(hfrontier, x17)
    O = underfill(x16, EIGHT, x18)
    return O



def solve_a416b8f3_f5b8619d(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = mapply(vfrontier, x3)
    x5 = underfill(x1, EIGHT, x4)
    x6 = hconcat(x5, x5)
    O = vconcat(x6, x6)
    return O



def solve_a416b8f3_f8c80d96(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = colorfilter(x3, x2)
    x5 = argmax(x4, size)
    x6 = argmin(x3, width)
    x7 = size(x6)
    x8 = equality(x7, ONE)
    x9 = branch(x8, identity, outbox)
    x10 = chain(outbox, outbox, x9)
    x11 = power(x10, TWO)
    x12 = power(x10, THREE)
    x13 = x10(x5)
    x14 = x11(x5)
    x15 = x12(x5)
    x16 = fill(x1, x2, x13)
    x17 = fill(x16, x2, x14)
    x18 = fill(x17, x2, x15)
    O = replace(x18, ZERO, FIVE)
    return O



def solve_a416b8f3_ecdecbb3(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = colorfilter(x2, EIGHT)
    x5 = product(x3, x4)
    x6 = fork(gravitate, first, last)
    x7 = compose(crement, x6)
    x8 = compose(center, first)
    x9 = fork(add, x8, x7)
    x10 = fork(connect, x8, x9)
    x11 = apply(x10, x5)
    x12 = lbind(greater, EIGHT)
    x13 = compose(x12, size)
    x14 = mfilter(x11, x13)
    x15 = fill(x1, TWO, x14)
    x16 = apply(x9, x5)
    x17 = intersection(x14, x16)
    x18 = mapply(neighbors, x17)
    O = fill(x15, EIGHT, x18)
    return O



def solve_a416b8f3_e5062a87(I):
    x1 = hconcat(I, I)
    x2 = ofcolor(x1, TWO)
    x3 = recolor(ZERO, x2)
    x4 = normalize(x3)
    x5 = occurrences(x1, x3)
    x6 = lbind(shift, x4)
    x7 = apply(x6, x5)
    x8 = astuple(ONE, THREE)
    x9 = astuple(FIVE, ONE)
    x10 = astuple(TWO, SIX)
    x11 = initset(x8)
    x12 = insert(x9, x11)
    x13 = insert(x10, x12)
    x14 = rbind(contained, x13)
    x15 = chain(flip, x14, ulcorner)
    x16 = sfilter(x7, x15)
    x17 = merge(x16)
    x18 = recolor(TWO, x17)
    O = paint(x1, x18)
    return O



def solve_a416b8f3_a8d7556c(I):
    x1 = hconcat(I, I)
    x2 = initset(ORIGIN)
    x3 = recolor(ZERO, x2)
    x4 = upscale(x3, TWO)
    x5 = occurrences(x1, x4)
    x6 = lbind(shift, x4)
    x7 = mapply(x6, x5)
    x8 = fill(x1, TWO, x7)
    x9 = add(SIX, SIX)
    x10 = astuple(EIGHT, x9)
    x11 = index(x8, x10)
    x12 = equality(x11, TWO)
    x13 = initset(x10)
    x14 = add(x10, DOWN)
    x15 = insert(x14, x13)
    x16 = toobject(x15, x8)
    x17 = toobject(x15, x1)
    x18 = branch(x12, x17, x16)
    O = paint(x8, x18)
    return O



def solve_a416b8f3_834ec97d(I):
    x1 = hconcat(I, I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = shift(x4, DOWN)
    x6 = fill(x1, ZERO, x4)
    x7 = paint(x6, x5)
    x8 = uppermost(x5)
    x9 = leftmost(x5)
    x10 = subtract(x9, TEN)
    x11 = add(x9, TEN)
    x12 = interval(x10, x11, TWO)
    x13 = lbind(greater, x8)
    x14 = compose(x13, first)
    x15 = rbind(contained, x12)
    x16 = compose(x15, last)
    x17 = sfilter(x2, x14)
    x18 = sfilter(x17, x16)
    O = fill(x7, FOUR, x18)
    return O



def solve_a416b8f3_90f3ed37(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, uppermost)
    x4 = first(x3)
    x5 = remove(x4, x3)
    x6 = normalize(x4)
    x7 = lbind(shift, x6)
    x8 = compose(x7, ulcorner)
    x9 = interval(TWO, NEG_ONE, NEG_ONE)
    x10 = apply(tojvec, x9)
    x11 = rbind(apply, x10)
    x12 = lbind(compose, size)
    x13 = lbind(lbind, intersection)
    x14 = compose(x12, x13)
    x15 = lbind(lbind, shift)
    x16 = chain(x11, x15, x8)
    x17 = fork(argmax, x16, x14)
    x18 = mapply(x17, x5)
    O = underfill(x1, ONE, x18)
    return O



def solve_a416b8f3_8403a5d5(I):
    x1 = hconcat(I, I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = color(x4)
    x6 = leftmost(x4)
    x7 = interval(x6, TEN, TWO)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = sfilter(x2, x9)
    x11 = increment(x6)
    x12 = add(x6, THREE)
    x13 = interval(x11, TEN, FOUR)
    x14 = interval(x12, TEN, FOUR)
    x15 = lbind(astuple, NINE)
    x16 = apply(tojvec, x13)
    x17 = apply(x15, x14)
    x18 = fill(x1, x5, x10)
    x19 = fill(x18, FIVE, x16)
    O = fill(x19, FIVE, x17)
    return O



def solve_a416b8f3_539a4f51(I):
    x1 = hconcat(I, I)
    x2 = shape(x1)
    x3 = index(x1, ORIGIN)
    x4 = colorcount(x1, ZERO)
    x5 = decrement(x2)
    x6 = positive(x4)
    x7 = branch(x6, x5, x2)
    x8 = crop(x1, ORIGIN, x7)
    x9 = width(x8)
    x10 = astuple(ONE, x9)
    x11 = crop(x8, ORIGIN, x10)
    x12 = vupscale(x11, x9)
    x13 = dmirror(x12)
    x14 = hconcat(x8, x12)
    x15 = hconcat(x13, x8)
    x16 = vconcat(x14, x15)
    x17 = asobject(x16)
    x18 = multiply(UNITY, TEN)
    x19 = canvas(x3, x18)
    O = paint(x19, x17)
    return O



def solve_a416b8f3_3bdb4ada(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = compose(increment, ulcorner)
    x5 = compose(decrement, lrcorner)
    x6 = apply(x4, x3)
    x7 = apply(x5, x3)
    x8 = papply(connect, x6, x7)
    x9 = apply(last, x6)
    x10 = compose(last, first)
    x11 = power(last, TWO)
    x12 = fork(subtract, x10, x11)
    x13 = compose(even, x12)
    x14 = lbind(rbind, astuple)
    x15 = lbind(compose, x13)
    x16 = compose(x15, x14)
    x17 = fork(sfilter, first, x16)
    x18 = pair(x8, x9)
    x19 = mapply(x17, x18)
    O = fill(x1, ZERO, x19)
    return O



def solve_a416b8f3_ec883f72(I):
    x1 = hconcat(I, I)
    x2 = palette(x1)
    x3 = objects(x1, T, T, T)
    x4 = fork(multiply, height, width)
    x5 = argmax(x3, x4)
    x6 = color(x5)
    x7 = remove(ZERO, x2)
    x8 = other(x7, x6)
    x9 = lrcorner(x5)
    x10 = llcorner(x5)
    x11 = urcorner(x5)
    x12 = ulcorner(x5)
    x13 = shoot(x9, UNITY)
    x14 = shoot(x10, DOWN_LEFT)
    x15 = shoot(x11, UP_RIGHT)
    x16 = shoot(x12, NEG_UNITY)
    x17 = combine(x13, x14)
    x18 = combine(x15, x16)
    x19 = combine(x17, x18)
    O = underfill(x1, x8, x19)
    return O



def solve_a416b8f3_2bee17df(I):
    x1 = hconcat(I, I)
    x2 = height(x1)
    x3 = rot90(x1)
    x4 = subtract(x2, TWO)
    x5 = interval(ZERO, x2, ONE)
    x6 = rbind(colorcount, ZERO)
    x7 = matcher(x6, x4)
    x8 = rbind(vsplit, x2)
    x9 = lbind(apply, x7)
    x10 = compose(x9, x8)
    x11 = x10(x1)
    x12 = pair(x5, x11)
    x13 = sfilter(x12, last)
    x14 = mapply(hfrontier, x13)
    x15 = x10(x3)
    x16 = pair(x15, x5)
    x17 = sfilter(x16, first)
    x18 = mapply(vfrontier, x17)
    x19 = astuple(x14, x18)
    x20 = merge(x19)
    O = underfill(x1, THREE, x20)
    return O



def solve_a416b8f3_e8dc4411(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, ZERO)
    x4 = ofcolor(x1, x2)
    x5 = position(x3, x4)
    x6 = fork(connect, ulcorner, lrcorner)
    x7 = x6(x3)
    x8 = intersection(x3, x7)
    x9 = equality(x7, x8)
    x10 = fork(subtract, identity, crement)
    x11 = fork(add, identity, x10)
    x12 = branch(x9, identity, x11)
    x13 = shape(x3)
    x14 = multiply(x13, x5)
    x15 = apply(x12, x14)
    x16 = interval(ONE, FIVE, ONE)
    x17 = lbind(multiply, x15)
    x18 = apply(x17, x16)
    x19 = lbind(shift, x3)
    x20 = mapply(x19, x18)
    O = fill(x1, x2, x20)
    return O



def solve_a416b8f3_29623171(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = interval(ZERO, NINE, FOUR)
    x4 = product(x3, x3)
    x5 = rbind(add, THREE)
    x6 = rbind(interval, ONE)
    x7 = fork(x6, identity, x5)
    x8 = compose(x7, first)
    x9 = compose(x7, last)
    x10 = fork(product, x8, x9)
    x11 = rbind(colorcount, x2)
    x12 = rbind(toobject, x1)
    x13 = compose(x11, x12)
    x14 = apply(x10, x4)
    x15 = valmax(x14, x13)
    x16 = matcher(x13, x15)
    x17 = compose(flip, x16)
    x18 = mfilter(x14, x16)
    x19 = mfilter(x14, x17)
    x20 = fill(x1, x2, x18)
    O = fill(x20, ZERO, x19)
    return O



def solve_a416b8f3_8731374e(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = height(x4)
    x6 = width(x4)
    x7 = vsplit(x4, x5)
    x8 = lbind(greater, FOUR)
    x9 = compose(x8, numcolors)
    x10 = sfilter(x7, x9)
    x11 = merge(x10)
    x12 = rot90(x11)
    x13 = vsplit(x12, x6)
    x14 = sfilter(x13, x9)
    x15 = merge(x14)
    x16 = rot270(x15)
    x17 = leastcolor(x16)
    x18 = ofcolor(x16, x17)
    x19 = fork(combine, vfrontier, hfrontier)
    x20 = mapply(x19, x18)
    O = fill(x16, x17, x20)
    return O



def solve_a416b8f3_db93a21d(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, NINE)
    x4 = colorfilter(x2, NINE)
    x5 = rbind(shoot, DOWN)
    x6 = mapply(x5, x3)
    x7 = underfill(x1, ONE, x6)
    x8 = compose(halve, width)
    x9 = rbind(greater, ONE)
    x10 = compose(x9, x8)
    x11 = matcher(x8, THREE)
    x12 = power(outbox, TWO)
    x13 = power(outbox, THREE)
    x14 = mapply(outbox, x4)
    x15 = sfilter(x4, x10)
    x16 = sfilter(x4, x11)
    x17 = mapply(x12, x15)
    x18 = mapply(x13, x16)
    x19 = fill(x7, THREE, x14)
    x20 = fill(x19, THREE, x17)
    O = fill(x20, THREE, x18)
    return O



def solve_a416b8f3_53b68214(I):
    x1 = hconcat(I, I)
    x2 = width(x1)
    x3 = objects(x1, T, T, T)
    x4 = first(x3)
    x5 = vperiod(x4)
    x6 = toivec(x5)
    x7 = interval(ZERO, NINE, ONE)
    x8 = lbind(multiply, x6)
    x9 = apply(x8, x7)
    x10 = lbind(shift, x4)
    x11 = mapply(x10, x9)
    x12 = astuple(x2, x2)
    x13 = portrait(x4)
    x14 = shape(x4)
    x15 = add(DOWN, x14)
    x16 = decrement(x15)
    x17 = shift(x4, x16)
    x18 = branch(x13, x11, x17)
    x19 = canvas(ZERO, x12)
    x20 = paint(x19, x4)
    O = paint(x20, x18)
    return O



def solve_a416b8f3_d6ad076f(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = argmin(x2, size)
    x4 = argmax(x2, size)
    x5 = vmatching(x3, x4)
    x6 = branch(x5, DOWN, RIGHT)
    x7 = branch(x5, uppermost, leftmost)
    x8 = valmax(x2, x7)
    x9 = x7(x3)
    x10 = equality(x8, x9)
    x11 = branch(x10, NEG_ONE, ONE)
    x12 = multiply(x6, x11)
    x13 = inbox(x3)
    x14 = rbind(shoot, x12)
    x15 = mapply(x14, x13)
    x16 = underfill(x1, EIGHT, x15)
    x17 = objects(x16, T, F, T)
    x18 = colorfilter(x17, EIGHT)
    x19 = rbind(bordering, x1)
    x20 = mfilter(x18, x19)
    O = cover(x16, x20)
    return O



def solve_a416b8f3_6cdd2623(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = prapply(connect, x3, x3)
    x5 = fgpartition(x1)
    x6 = merge(x5)
    x7 = cover(x1, x6)
    x8 = fork(either, hline, vline)
    x9 = box(x6)
    x10 = rbind(difference, x9)
    x11 = chain(positive, size, x10)
    x12 = fork(both, x8, x11)
    x13 = mfilter(x4, x12)
    O = fill(x7, x2, x13)
    return O



def solve_a416b8f3_3345333e(I):
    x1 = hconcat(I, I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = cover(x1, x3)
    x5 = leastcolor(x4)
    x6 = ofcolor(x4, x5)
    x7 = neighbors(ORIGIN)
    x8 = mapply(neighbors, x7)
    x9 = vmirror(x6)
    x10 = lbind(shift, x9)
    x11 = apply(x10, x8)
    x12 = rbind(intersection, x6)
    x13 = compose(size, x12)
    x14 = argmax(x11, x13)
    O = fill(x4, x5, x14)
    return O



def solve_a416b8f3_b190f7f5(I):
    x1 = hconcat(I, I)
    x2 = portrait(x1)
    x3 = branch(x2, vsplit, hsplit)
    x4 = x3(x1, TWO)
    x5 = argmin(x4, numcolors)
    x6 = argmax(x4, numcolors)
    x7 = width(x6)
    x8 = rbind(repeat, x7)
    x9 = chain(dmirror, merge, x8)
    x10 = upscale(x6, x7)
    x11 = x9(x5)
    x12 = x9(x11)
    x13 = ofcolor(x12, ZERO)
    O = fill(x10, ZERO, x13)
    return O



def solve_a416b8f3_caa06a1f(I):
    x1 = hconcat(I, I)
    x2 = asobject(x1)
    x3 = shape(x1)
    x4 = decrement(x3)
    x5 = index(x1, x4)
    x6 = double(x3)
    x7 = canvas(x5, x6)
    x8 = paint(x7, x2)
    x9 = objects(x8, F, F, T)
    x10 = first(x9)
    x11 = shift(x10, LEFT)
    x12 = vperiod(x11)
    x13 = hperiod(x11)
    x14 = neighbors(ORIGIN)
    x15 = lbind(mapply, neighbors)
    x16 = power(x15, TWO)
    x17 = x16(x14)
    x18 = astuple(x12, x13)
    x19 = lbind(multiply, x18)
    x20 = apply(x19, x17)
    x21 = lbind(shift, x11)
    x22 = mapply(x21, x20)
    O = paint(x1, x22)
    return O



def solve_a416b8f3_e21d9049(I):
    x1 = hconcat(I, I)
    x2 = asindices(x1)
    x3 = leastcolor(x1)
    x4 = objects(x1, T, F, T)
    x5 = ofcolor(x1, x3)
    x6 = merge(x4)
    x7 = shape(x6)
    x8 = neighbors(ORIGIN)
    x9 = lbind(mapply, neighbors)
    x10 = power(x9, TWO)
    x11 = x10(x8)
    x12 = lbind(multiply, x7)
    x13 = lbind(shift, x6)
    x14 = apply(x12, x11)
    x15 = mapply(x13, x14)
    x16 = lbind(hmatching, x5)
    x17 = lbind(vmatching, x5)
    x18 = fork(either, x16, x17)
    x19 = compose(x18, initset)
    x20 = paint(x1, x15)
    x21 = sfilter(x2, x19)
    x22 = difference(x2, x21)
    O = cover(x20, x22)
    return O



def solve_a416b8f3_746b3537(I):
    x1 = hconcat(I, I)
    x2 = chain(size, dedupe, first)
    x3 = x2(x1)
    x4 = equality(x3, ONE)
    x5 = branch(x4, dmirror, identity)
    x6 = x5(x1)
    x7 = objects(x6, T, F, F)
    x8 = order(x7, leftmost)
    x9 = apply(color, x8)
    x10 = repeat(x9, ONE)
    O = x5(x10)
    return O



def solve_a416b8f3_63613498(I):
    x1 = hconcat(I, I)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = ofcolor(x2, ZERO)
    x4 = asindices(x2)
    x5 = difference(x4, x3)
    x6 = normalize(x5)
    x7 = objects(x1, T, F, T)
    x8 = compose(toindices, normalize)
    x9 = matcher(x8, x6)
    x10 = mfilter(x7, x9)
    x11 = fill(x1, FIVE, x10)
    x12 = asobject(x2)
    O = paint(x11, x12)
    return O



def solve_a416b8f3_06df4c85(I):
    x1 = hconcat(I, I)
    x2 = partition(x1)
    x3 = mostcolor(x1)
    x4 = ofcolor(x1, x3)
    x5 = colorfilter(x2, ZERO)
    x6 = argmax(x2, size)
    x7 = difference(x2, x5)
    x8 = remove(x6, x7)
    x9 = merge(x8)
    x10 = product(x9, x9)
    x11 = power(first, TWO)
    x12 = compose(first, last)
    x13 = fork(equality, x11, x12)
    x14 = sfilter(x10, x13)
    x15 = compose(last, first)
    x16 = power(last, TWO)
    x17 = fork(connect, x15, x16)
    x18 = fork(recolor, color, x17)
    x19 = apply(x18, x14)
    x20 = fork(either, vline, hline)
    x21 = mfilter(x19, x20)
    x22 = paint(x1, x21)
    O = fill(x22, x3, x4)
    return O



def solve_a416b8f3_4522001f(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = toindices(x3)
    x5 = contained(ZERO_BY_TWO, x4)
    x6 = contained(TWO_BY_TWO, x4)
    x7 = contained(TWO_BY_ZERO, x4)
    x8 = astuple(NINE, NINE)
    x9 = canvas(ZERO, x8)
    x10 = astuple(THREE, ORIGIN)
    x11 = initset(x10)
    x12 = upscale(x11, TWO)
    x13 = upscale(x12, TWO)
    x14 = shape(x13)
    x15 = shift(x13, x14)
    x16 = combine(x13, x15)
    x17 = paint(x9, x16)
    x18 = rot90(x17)
    x19 = rot180(x17)
    x20 = rot270(x17)
    x21 = branch(x5, x18, x17)
    x22 = branch(x6, x19, x21)
    O = branch(x7, x20, x22)
    return O



def solve_a416b8f3_eb5a1d5d(I):
    x1 = hconcat(I, I)
    x2 = compose(dmirror, dedupe)
    x3 = x2(x1)
    x4 = x2(x3)
    x5 = fork(remove, last, identity)
    x6 = compose(hmirror, x5)
    x7 = fork(vconcat, identity, x6)
    x8 = x7(x4)
    x9 = dmirror(x8)
    O = x7(x9)
    return O



def solve_a416b8f3_995c5fa3(I):
    x1 = hconcat(I, I)
    x2 = hsplit(x1, THREE)
    x3 = astuple(TWO, ONE)
    x4 = rbind(ofcolor, ZERO)
    x5 = compose(ulcorner, x4)
    x6 = compose(size, x4)
    x7 = matcher(x6, ZERO)
    x8 = matcher(x5, UNITY)
    x9 = matcher(x5, DOWN)
    x10 = matcher(x5, x3)
    x11 = rbind(multiply, THREE)
    x12 = power(double, TWO)
    x13 = compose(double, x7)
    x14 = chain(x12, double, x8)
    x15 = compose(x11, x9)
    x16 = compose(x12, x10)
    x17 = fork(add, x13, x14)
    x18 = fork(add, x15, x16)
    x19 = fork(add, x17, x18)
    x20 = rbind(canvas, UNITY)
    x21 = compose(x20, x19)
    x22 = apply(x21, x2)
    x23 = merge(x22)
    O = hupscale(x23, THREE)
    return O



def solve_a416b8f3_36fdfd69(I):
    x1 = hconcat(I, I)
    x2 = upscale(x1, TWO)
    x3 = objects(x2, T, T, T)
    x4 = colorfilter(x3, TWO)
    x5 = fork(manhattan, first, last)
    x6 = lbind(greater, FIVE)
    x7 = compose(x6, x5)
    x8 = product(x4, x4)
    x9 = sfilter(x8, x7)
    x10 = apply(merge, x9)
    x11 = mapply(delta, x10)
    x12 = fill(x2, FOUR, x11)
    x13 = merge(x4)
    x14 = paint(x12, x13)
    O = downscale(x14, TWO)
    return O



def solve_a416b8f3_0a938d79(I):
    x1 = hconcat(I, I)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = x3(x1)
    x5 = fgpartition(x4)
    x6 = merge(x5)
    x7 = chain(double, decrement, width)
    x8 = x7(x6)
    x9 = compose(vfrontier, tojvec)
    x10 = lbind(mapply, x9)
    x11 = rbind(interval, x8)
    x12 = width(x4)
    x13 = rbind(x11, x12)
    x14 = chain(x10, x13, leftmost)
    x15 = fork(recolor, color, x14)
    x16 = mapply(x15, x5)
    x17 = paint(x4, x16)
    O = x3(x17)
    return O



def solve_a416b8f3_045e512c(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = lbind(shift, x3)
    x6 = lbind(mapply, x5)
    x7 = double(TEN)
    x8 = interval(FOUR, x7, FOUR)
    x9 = rbind(apply, x8)
    x10 = lbind(position, x3)
    x11 = lbind(rbind, multiply)
    x12 = chain(x9, x11, x10)
    x13 = compose(x6, x12)
    x14 = fork(recolor, color, x13)
    x15 = mapply(x14, x4)
    O = paint(x1, x15)
    return O



def solve_a416b8f3_82819916(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = normalize(x3)
    x6 = compose(last, last)
    x7 = rbind(argmin, x6)
    x8 = compose(first, x7)
    x9 = fork(other, palette, x8)
    x10 = x8(x5)
    x11 = matcher(first, x10)
    x12 = sfilter(x5, x11)
    x13 = difference(x5, x12)
    x14 = compose(toivec, uppermost)
    x15 = lbind(shift, x12)
    x16 = lbind(shift, x13)
    x17 = compose(x15, x14)
    x18 = compose(x16, x14)
    x19 = fork(recolor, x8, x17)
    x20 = fork(recolor, x9, x18)
    x21 = fork(combine, x19, x20)
    x22 = mapply(x21, x4)
    O = paint(x1, x22)
    return O



def solve_a416b8f3_99fa7670(I):
    x1 = hconcat(I, I)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x3)
    x8 = paint(x1, x7)
    x9 = add(x2, DOWN_LEFT)
    x10 = initset(x9)
    x11 = recolor(ZERO, x10)
    x12 = objects(x8, T, F, T)
    x13 = insert(x11, x12)
    x14 = order(x13, uppermost)
    x15 = first(x14)
    x16 = remove(x11, x14)
    x17 = remove(x15, x14)
    x18 = compose(lrcorner, first)
    x19 = compose(lrcorner, last)
    x20 = fork(connect, x18, x19)
    x21 = compose(color, first)
    x22 = fork(recolor, x21, x20)
    x23 = pair(x16, x17)
    x24 = mapply(x22, x23)
    O = underpaint(x8, x24)
    return O



def solve_a416b8f3_72322fa7(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, T, T)
    x3 = matcher(numcolors, ONE)
    x4 = sfilter(x2, x3)
    x5 = difference(x2, x4)
    x6 = lbind(matcher, first)
    x7 = compose(x6, mostcolor)
    x8 = fork(sfilter, identity, x7)
    x9 = fork(difference, identity, x8)
    x10 = lbind(occurrences, x1)
    x11 = compose(x10, x8)
    x12 = compose(x10, x9)
    x13 = compose(ulcorner, x9)
    x14 = fork(subtract, ulcorner, x13)
    x15 = lbind(rbind, add)
    x16 = compose(x15, x14)
    x17 = fork(apply, x16, x12)
    x18 = lbind(lbind, shift)
    x19 = compose(x18, normalize)
    x20 = fork(mapply, x19, x11)
    x21 = fork(mapply, x19, x17)
    x22 = mapply(x20, x5)
    x23 = mapply(x21, x5)
    x24 = paint(x1, x22)
    O = paint(x24, x23)
    return O



def solve_a416b8f3_855e0971(I):
    x1 = hconcat(I, I)
    x2 = frontiers(x1)
    x3 = sfilter(x2, hline)
    x4 = size(x3)
    x5 = positive(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x1)
    x8 = rbind(subgrid, x7)
    x9 = matcher(color, ZERO)
    x10 = compose(flip, x9)
    x11 = partition(x7)
    x12 = sfilter(x11, x10)
    x13 = rbind(ofcolor, ZERO)
    x14 = lbind(mapply, vfrontier)
    x15 = chain(x14, x13, x8)
    x16 = fork(shift, x15, ulcorner)
    x17 = fork(intersection, toindices, x16)
    x18 = mapply(x17, x12)
    x19 = fill(x7, ZERO, x18)
    O = x6(x19)
    return O



def solve_a416b8f3_a78176bb(I):
    x1 = hconcat(I, I)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = remove(ZERO, x2)
    x5 = other(x4, FIVE)
    x6 = colorfilter(x3, FIVE)
    x7 = lbind(index, x1)
    x8 = compose(x7, urcorner)
    x9 = matcher(x8, FIVE)
    x10 = sfilter(x6, x9)
    x11 = difference(x6, x10)
    x12 = apply(urcorner, x10)
    x13 = apply(llcorner, x11)
    x14 = rbind(add, UP_RIGHT)
    x15 = rbind(add, DOWN_LEFT)
    x16 = apply(x14, x12)
    x17 = apply(x15, x13)
    x18 = rbind(shoot, UNITY)
    x19 = rbind(shoot, NEG_UNITY)
    x20 = fork(combine, x18, x19)
    x21 = mapply(x20, x16)
    x22 = mapply(x20, x17)
    x23 = combine(x21, x22)
    x24 = fill(x1, x5, x23)
    O = replace(x24, FIVE, ZERO)
    return O



def solve_a416b8f3_952a094c(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = argmax(x2, size)
    x5 = outbox(x4)
    x6 = corners(x5)
    x7 = lbind(rbind, manhattan)
    x8 = lbind(argmax, x3)
    x9 = chain(x8, x7, initset)
    x10 = compose(color, x9)
    x11 = fork(astuple, x10, identity)
    x12 = apply(x11, x6)
    x13 = merge(x3)
    x14 = cover(x1, x13)
    O = paint(x14, x12)
    return O



def solve_a416b8f3_6d58a25d(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = merge(x4)
    x6 = color(x5)
    x7 = uppermost(x3)
    x8 = rbind(greater, x7)
    x9 = compose(x8, uppermost)
    x10 = rbind(vmatching, x3)
    x11 = fork(both, x10, x9)
    x12 = sfilter(x4, x11)
    x13 = increment(x7)
    x14 = rbind(greater, x13)
    x15 = compose(x14, first)
    x16 = rbind(sfilter, x15)
    x17 = chain(x16, vfrontier, center)
    x18 = mapply(x17, x12)
    O = underfill(x1, x6, x18)
    return O



def solve_a416b8f3_6aa20dc0(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(rbind, upscale)
    x10 = interval(ONE, FOUR, ONE)
    x11 = apply(x9, x10)
    x12 = initset(identity)
    x13 = insert(vmirror, x12)
    x14 = insert(hmirror, x13)
    x15 = insert(cmirror, x14)
    x16 = insert(dmirror, x15)
    x17 = fork(compose, first, last)
    x18 = lbind(occurrences, x1)
    x19 = lbind(lbind, shift)
    x20 = compose(x18, x8)
    x21 = product(x16, x11)
    x22 = apply(x17, x21)
    x23 = rapply(x22, x4)
    x24 = fork(mapply, x19, x20)
    x25 = mapply(x24, x23)
    O = paint(x1, x25)
    return O



def solve_a416b8f3_e6721834(I):
    x1 = hconcat(I, I)
    x2 = portrait(x1)
    x3 = branch(x2, vsplit, hsplit)
    x4 = x3(x1, TWO)
    x5 = order(x4, numcolors)
    x6 = first(x5)
    x7 = last(x5)
    x8 = objects(x7, F, F, T)
    x9 = merge(x8)
    x10 = mostcolor(x9)
    x11 = matcher(first, x10)
    x12 = compose(flip, x11)
    x13 = rbind(sfilter, x12)
    x14 = lbind(occurrences, x6)
    x15 = compose(x14, x13)
    x16 = chain(positive, size, x15)
    x17 = sfilter(x8, x16)
    x18 = chain(first, x14, x13)
    x19 = compose(ulcorner, x13)
    x20 = fork(subtract, x18, x19)
    x21 = fork(shift, identity, x20)
    x22 = apply(x21, x17)
    x23 = compose(decrement, width)
    x24 = chain(positive, decrement, x23)
    x25 = mfilter(x22, x24)
    O = paint(x6, x25)
    return O



def solve_a416b8f3_447fd412(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(rbind, upscale)
    x10 = interval(ONE, FOUR, ONE)
    x11 = apply(x9, x10)
    x12 = lbind(recolor, ZERO)
    x13 = compose(x12, outbox)
    x14 = fork(combine, identity, x13)
    x15 = lbind(occurrences, x1)
    x16 = lbind(rbind, subtract)
    x17 = lbind(apply, increment)
    x18 = lbind(lbind, shift)
    x19 = chain(x16, ulcorner, x8)
    x20 = chain(x15, x14, x8)
    x21 = fork(apply, x19, x20)
    x22 = compose(x17, x21)
    x23 = fork(mapply, x18, x22)
    x24 = rapply(x11, x4)
    x25 = mapply(x23, x24)
    O = paint(x1, x25)
    return O



def solve_a416b8f3_2bcee788(I):
    x1 = hconcat(I, I)
    x2 = mostcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = replace(x1, x2, THREE)
    x5 = argmax(x3, size)
    x6 = argmin(x3, size)
    x7 = position(x5, x6)
    x8 = first(x7)
    x9 = last(x7)
    x10 = subgrid(x5, x4)
    x11 = hline(x6)
    x12 = hmirror(x10)
    x13 = vmirror(x10)
    x14 = branch(x11, x12, x13)
    x15 = branch(x11, x8, ZERO)
    x16 = branch(x11, ZERO, x9)
    x17 = asobject(x14)
    x18 = matcher(first, THREE)
    x19 = compose(flip, x18)
    x20 = sfilter(x17, x19)
    x21 = ulcorner(x5)
    x22 = shape(x5)
    x23 = astuple(x15, x16)
    x24 = multiply(x22, x23)
    x25 = add(x21, x24)
    x26 = shift(x20, x25)
    O = paint(x4, x26)
    return O



def solve_a416b8f3_f35d900a(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = palette(x1)
    x4 = remove(ZERO, x3)
    x5 = lbind(other, x4)
    x6 = compose(x5, color)
    x7 = fork(recolor, x6, outbox)
    x8 = mapply(x7, x2)
    x9 = mapply(toindices, x2)
    x10 = box(x9)
    x11 = difference(x10, x9)
    x12 = lbind(argmin, x9)
    x13 = rbind(compose, initset)
    x14 = lbind(rbind, manhattan)
    x15 = chain(x13, x14, initset)
    x16 = chain(initset, x12, x15)
    x17 = fork(manhattan, initset, x16)
    x18 = compose(even, x17)
    x19 = sfilter(x11, x18)
    x20 = paint(x1, x8)
    O = fill(x20, FIVE, x19)
    return O



def solve_a416b8f3_0dfd9992(I):
    x1 = hconcat(I, I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_a416b8f3_29ec7d0e(I):
    x1 = hconcat(I, I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_a416b8f3_36d67576(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, F, T)
    x3 = argmax(x2, numcolors)
    x4 = astuple(TWO, FOUR)
    x5 = rbind(contained, x4)
    x6 = compose(x5, first)
    x7 = rbind(sfilter, x6)
    x8 = lbind(rbind, subtract)
    x9 = lbind(occurrences, x1)
    x10 = lbind(lbind, shift)
    x11 = compose(x8, ulcorner)
    x12 = chain(x11, x7, normalize)
    x13 = chain(x9, x7, normalize)
    x14 = fork(apply, x12, x13)
    x15 = compose(x10, normalize)
    x16 = fork(mapply, x15, x14)
    x17 = astuple(cmirror, dmirror)
    x18 = astuple(hmirror, vmirror)
    x19 = combine(x17, x18)
    x20 = product(x19, x19)
    x21 = fork(compose, first, last)
    x22 = apply(x21, x20)
    x23 = totuple(x22)
    x24 = combine(x19, x23)
    x25 = rapply(x24, x3)
    x26 = mapply(x16, x25)
    O = paint(x1, x26)
    return O



def solve_a416b8f3_469497ad(I):
    x1 = hconcat(I, I)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    x4 = upscale(x1, x3)
    x5 = objects(x4, F, F, T)
    x6 = argmin(x5, size)
    x7 = ulcorner(x6)
    x8 = llcorner(x6)
    x9 = shoot(x7, NEG_UNITY)
    x10 = shoot(x7, UNITY)
    x11 = shoot(x8, DOWN_LEFT)
    x12 = shoot(x8, UP_RIGHT)
    x13 = combine(x9, x10)
    x14 = combine(x11, x12)
    x15 = combine(x13, x14)
    x16 = underfill(x4, TWO, x15)
    x17 = objects(x16, T, F, T)
    x18 = argmax(x17, lrcorner)
    O = paint(x16, x18)
    return O



def solve_a416b8f3_484b58aa(I):
    x1 = hconcat(I, I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, TWO)
    x9 = astuple(TWO, x3)
    x10 = power(decrement, TWO)
    x11 = x10(x2)
    x12 = x10(x3)
    x13 = toivec(x12)
    x14 = tojvec(x11)
    x15 = crop(x1, x13, x9)
    x16 = crop(x1, x14, x8)
    x17 = asobject(x16)
    x18 = asobject(x15)
    x19 = vperiod(x17)
    x20 = hperiod(x18)
    x21 = astuple(x19, x20)
    x22 = lbind(multiply, x21)
    x23 = neighbors(ORIGIN)
    x24 = mapply(neighbors, x23)
    x25 = apply(x22, x24)
    x26 = lbind(shift, x7)
    x27 = mapply(x26, x25)
    O = paint(x1, x27)
    return O



def solve_a416b8f3_3befdf3e(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, F, T)
    x3 = leastcolor(x1)
    x4 = palette(x1)
    x5 = remove(ZERO, x4)
    x6 = other(x5, x3)
    x7 = switch(x1, x3, x6)
    x8 = compose(width, inbox)
    x9 = lbind(power, outbox)
    x10 = compose(x9, x8)
    x11 = initset(x10)
    x12 = lbind(rapply, x11)
    x13 = chain(initset, first, x12)
    x14 = fork(rapply, x13, identity)
    x15 = compose(first, x14)
    x16 = compose(backdrop, x15)
    x17 = lbind(chain, backdrop)
    x18 = lbind(x17, inbox)
    x19 = compose(x18, x10)
    x20 = lbind(apply, initset)
    x21 = chain(x20, corners, x16)
    x22 = fork(mapply, x19, x21)
    x23 = fork(intersection, x16, x22)
    x24 = mapply(x16, x2)
    x25 = mapply(x23, x2)
    x26 = underfill(x7, x6, x24)
    O = fill(x26, ZERO, x25)
    return O



def solve_a416b8f3_49d1d64f(I):
    x1 = hconcat(I, I)
    x2 = shape(x1)
    x3 = add(x2, TWO)
    x4 = canvas(ZERO, x3)
    x5 = asobject(x1)
    x6 = shift(x5, UNITY)
    x7 = paint(x4, x6)
    x8 = asindices(x4)
    x9 = fork(difference, box, corners)
    x10 = x9(x8)
    x11 = lbind(lbind, manhattan)
    x12 = rbind(compose, initset)
    x13 = chain(x12, x11, initset)
    x14 = lbind(argmin, x6)
    x15 = chain(first, x14, x13)
    x16 = fork(astuple, x15, identity)
    x17 = apply(x16, x10)
    O = paint(x7, x17)
    return O



def solve_a416b8f3_57aa92db(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, T, T)
    x3 = objects(x1, T, F, T)
    x4 = lbind(lbind, colorcount)
    x5 = fork(apply, x4, palette)
    x6 = compose(maximum, x5)
    x7 = compose(minimum, x5)
    x8 = fork(subtract, x6, x7)
    x9 = argmax(x2, x8)
    x10 = leastcolor(x9)
    x11 = normalize(x9)
    x12 = matcher(first, x10)
    x13 = sfilter(x11, x12)
    x14 = ulcorner(x13)
    x15 = colorfilter(x3, x10)
    x16 = rbind(toobject, x1)
    x17 = lbind(remove, ZERO)
    x18 = chain(first, x17, palette)
    x19 = chain(x18, x16, outbox)
    x20 = lbind(multiply, x14)
    x21 = compose(x20, width)
    x22 = fork(subtract, ulcorner, x21)
    x23 = lbind(shift, x11)
    x24 = compose(x23, x22)
    x25 = fork(upscale, x24, width)
    x26 = fork(recolor, x19, x25)
    x27 = mapply(x26, x15)
    x28 = paint(x1, x27)
    x29 = merge(x3)
    O = paint(x28, x29)
    return O



def solve_a416b8f3_aba27056(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, T)
    x3 = mapply(toindices, x2)
    x4 = box(x3)
    x5 = difference(x4, x3)
    x6 = delta(x3)
    x7 = position(x6, x5)
    x8 = interval(ZERO, NINE, ONE)
    x9 = lbind(multiply, x7)
    x10 = apply(x9, x8)
    x11 = lbind(shift, x5)
    x12 = mapply(x11, x10)
    x13 = fill(x1, FOUR, x6)
    x14 = fill(x13, FOUR, x12)
    x15 = corners(x5)
    x16 = ofcolor(x14, ZERO)
    x17 = rbind(toobject, x14)
    x18 = rbind(colorcount, ZERO)
    x19 = chain(x18, x17, dneighbors)
    x20 = matcher(x19, TWO)
    x21 = rbind(adjacent, x3)
    x22 = rbind(adjacent, x12)
    x23 = fork(both, x21, x22)
    x24 = compose(x23, initset)
    x25 = sfilter(x16, x20)
    x26 = sfilter(x25, x24)
    x27 = product(x15, x26)
    x28 = fork(subtract, last, first)
    x29 = fork(shoot, first, x28)
    x30 = mapply(x29, x27)
    O = fill(x14, FOUR, x30)
    return O



def solve_a416b8f3_f1cefba8(I):
    x1 = hconcat(I, I)
    x2 = palette(x1)
    x3 = objects(x1, F, F, T)
    x4 = ofcolor(x1, ZERO)
    x5 = first(x3)
    x6 = ulcorner(x5)
    x7 = subgrid(x5, x1)
    x8 = power(trim, TWO)
    x9 = x8(x7)
    x10 = asindices(x9)
    x11 = shift(x10, TWO_BY_TWO)
    x12 = fill(x7, ZERO, x11)
    x13 = leastcolor(x12)
    x14 = remove(ZERO, x2)
    x15 = other(x14, x13)
    x16 = ofcolor(x12, x13)
    x17 = shift(x16, x6)
    x18 = ofcolor(x1, x13)
    x19 = uppermost(x18)
    x20 = lowermost(x18)
    x21 = matcher(first, x19)
    x22 = matcher(first, x20)
    x23 = fork(either, x21, x22)
    x24 = sfilter(x17, x23)
    x25 = difference(x17, x24)
    x26 = mapply(vfrontier, x24)
    x27 = mapply(hfrontier, x25)
    x28 = combine(x26, x27)
    x29 = intersection(x4, x28)
    x30 = fill(x1, x15, x28)
    O = fill(x30, x13, x29)
    return O



def solve_a416b8f3_28e73c20(I):
    x1 = hconcat(I, I)
    x2 = width(x1)
    x3 = astuple(ONE, TWO)
    x4 = astuple(TWO, TWO)
    x5 = astuple(TWO, ONE)
    x6 = astuple(THREE, ONE)
    x7 = canvas(THREE, UNITY)
    x8 = upscale(x7, FOUR)
    x9 = initset(DOWN)
    x10 = insert(UNITY, x9)
    x11 = insert(x3, x10)
    x12 = insert(x4, x11)
    x13 = fill(x8, ZERO, x12)
    x14 = vupscale(x7, FIVE)
    x15 = hupscale(x14, THREE)
    x16 = insert(x5, x10)
    x17 = insert(x6, x16)
    x18 = fill(x15, ZERO, x17)
    x19 = even(x2)
    x20 = branch(x19, x13, x18)
    x21 = canvas(ZERO, UNITY)
    x22 = lbind(hupscale, x21)
    x23 = chain(x22, decrement, height)
    x24 = rbind(hconcat, x7)
    x25 = compose(x24, x23)
    x26 = lbind(hupscale, x7)
    x27 = compose(x26, height)
    x28 = fork(vconcat, x25, rot90)
    x29 = fork(vconcat, x27, x28)
    x30 = subtract(x2, FOUR)
    x31 = power(x29, x30)
    O = x31(x20)
    return O



def solve_a416b8f3_508bd3b6(I):
    x1 = hconcat(I, I)
    x2 = width(x1)
    x3 = objects(x1, T, T, T)
    x4 = argmin(x3, size)
    x5 = argmax(x3, size)
    x6 = ulcorner(x4)
    x7 = urcorner(x4)
    x8 = index(x1, x6)
    x9 = equality(x8, EIGHT)
    x10 = branch(x9, x6, x7)
    x11 = branch(x9, UNITY, DOWN_LEFT)
    x12 = multiply(x11, x2)
    x13 = double(x12)
    x14 = add(x10, x13)
    x15 = subtract(x10, x13)
    x16 = connect(x14, x15)
    x17 = fill(x1, THREE, x16)
    x18 = paint(x17, x5)
    x19 = objects(x18, T, F, T)
    x20 = rbind(adjacent, x5)
    x21 = extract(x19, x20)
    x22 = first(x21)
    x23 = last(x22)
    x24 = flip(x9)
    x25 = branch(x24, UNITY, DOWN_LEFT)
    x26 = multiply(x25, x2)
    x27 = double(x26)
    x28 = add(x23, x27)
    x29 = subtract(x23, x27)
    x30 = connect(x28, x29)
    x31 = fill(x18, THREE, x30)
    x32 = paint(x31, x4)
    O = paint(x32, x5)
    return O



def solve_a416b8f3_d07ae81c(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, F, F)
    x3 = sizefilter(x2, ONE)
    x4 = apply(color, x3)
    x5 = difference(x2, x3)
    x6 = apply(color, x5)
    x7 = first(x6)
    x8 = last(x6)
    x9 = ofcolor(x1, x7)
    x10 = ofcolor(x1, x8)
    x11 = rbind(shoot, UNITY)
    x12 = rbind(shoot, NEG_UNITY)
    x13 = rbind(shoot, DOWN_LEFT)
    x14 = rbind(shoot, UP_RIGHT)
    x15 = fork(combine, x11, x12)
    x16 = fork(combine, x13, x14)
    x17 = fork(combine, x15, x16)
    x18 = compose(x17, center)
    x19 = mapply(x18, x3)
    x20 = intersection(x9, x19)
    x21 = intersection(x10, x19)
    x22 = first(x3)
    x23 = color(x22)
    x24 = center(x22)
    x25 = neighbors(x24)
    x26 = toobject(x25, x1)
    x27 = mostcolor(x26)
    x28 = other(x4, x23)
    x29 = equality(x27, x7)
    x30 = branch(x29, x23, x28)
    x31 = branch(x29, x28, x23)
    x32 = fill(x1, x30, x20)
    O = fill(x32, x31, x21)
    return O



def solve_a416b8f3_0e206a2e(I):
    x1 = hconcat(I, I)
    x2 = palette(x1)
    x3 = objects(x1, F, F, T)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, numcolors)
    x6 = sfilter(x3, x5)
    x7 = remove(ZERO, x2)
    x8 = lbind(colorcount, x1)
    x9 = argmax(x7, x8)
    x10 = remove(x9, x7)
    x11 = rbind(contained, x10)
    x12 = compose(x11, first)
    x13 = rbind(sfilter, x12)
    x14 = lbind(rbind, subtract)
    x15 = lbind(occurrences, x1)
    x16 = lbind(lbind, shift)
    x17 = compose(x14, ulcorner)
    x18 = chain(x17, x13, normalize)
    x19 = chain(x15, x13, normalize)
    x20 = fork(apply, x18, x19)
    x21 = compose(x16, normalize)
    x22 = fork(mapply, x21, x20)
    x23 = astuple(cmirror, dmirror)
    x24 = astuple(hmirror, vmirror)
    x25 = combine(x23, x24)
    x26 = product(x25, x25)
    x27 = fork(compose, first, last)
    x28 = apply(x27, x26)
    x29 = totuple(x28)
    x30 = combine(x25, x29)
    x31 = lbind(rapply, x30)
    x32 = mapply(x31, x6)
    x33 = mapply(x22, x32)
    x34 = paint(x1, x33)
    x35 = merge(x6)
    O = cover(x34, x35)
    return O



def solve_a416b8f3_d22278a0(I):
    x1 = hconcat(I, I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = fork(multiply, sign, identity)
    x5 = lbind(apply, x4)
    x6 = chain(even, maximum, x5)
    x7 = lbind(sfilter, x2)
    x8 = fork(add, first, last)
    x9 = rbind(remove, x3)
    x10 = compose(center, last)
    x11 = fork(subtract, first, x10)
    x12 = compose(x6, x11)
    x13 = lbind(rbind, equality)
    x14 = lbind(argmin, x3)
    x15 = chain(x8, x5, x11)
    x16 = lbind(lbind, astuple)
    x17 = lbind(rbind, astuple)
    x18 = lbind(compose, x12)
    x19 = lbind(compose, x15)
    x20 = compose(x19, x16)
    x21 = compose(x19, x17)
    x22 = compose(x14, x20)
    x23 = rbind(compose, x22)
    x24 = lbind(lbind, valmin)
    x25 = rbind(compose, x20)
    x26 = chain(x25, x24, x9)
    x27 = lbind(fork, greater)
    x28 = fork(x27, x26, x21)
    x29 = chain(x7, x18, x17)
    x30 = chain(x7, x23, x13)
    x31 = fork(intersection, x29, x30)
    x32 = compose(x7, x28)
    x33 = fork(intersection, x31, x32)
    x34 = fork(recolor, color, x33)
    x35 = mapply(x34, x3)
    O = paint(x1, x35)
    return O



def solve_a416b8f3_150deff5(I):
    x1 = hconcat(I, I)
    x2 = canvas(FIVE, TWO_BY_TWO)
    x3 = asobject(x2)
    x4 = occurrences(x1, x3)
    x5 = lbind(shift, x3)
    x6 = mapply(x5, x4)
    x7 = fill(x1, EIGHT, x6)
    x8 = canvas(FIVE, UNITY)
    x9 = astuple(TWO, ONE)
    x10 = canvas(EIGHT, x9)
    x11 = vconcat(x10, x8)
    x12 = asobject(x11)
    x13 = occurrences(x7, x12)
    x14 = lbind(shift, x12)
    x15 = mapply(x14, x13)
    x16 = fill(x7, TWO, x15)
    x17 = astuple(ONE, THREE)
    x18 = canvas(FIVE, x17)
    x19 = asobject(x18)
    x20 = occurrences(x16, x19)
    x21 = lbind(shift, x19)
    x22 = mapply(x21, x20)
    x23 = fill(x16, TWO, x22)
    x24 = hmirror(x11)
    x25 = asobject(x24)
    x26 = occurrences(x23, x25)
    x27 = lbind(shift, x25)
    x28 = mapply(x27, x26)
    x29 = fill(x23, TWO, x28)
    x30 = dmirror(x11)
    x31 = asobject(x30)
    x32 = occurrences(x29, x31)
    x33 = lbind(shift, x31)
    x34 = mapply(x33, x32)
    x35 = fill(x29, TWO, x34)
    x36 = vmirror(x30)
    x37 = asobject(x36)
    x38 = occurrences(x35, x37)
    x39 = lbind(shift, x37)
    x40 = mapply(x39, x38)
    O = fill(x35, TWO, x40)
    return O



def solve_a416b8f3_9d9215db(I):
    x1 = hconcat(I, I)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = initset(x1)
    x6 = chain(numcolors, lefthalf, tophalf)
    x7 = insert(x2, x5)
    x8 = insert(x3, x7)
    x9 = insert(x4, x8)
    x10 = argmax(x9, x6)
    x11 = vmirror(x10)
    x12 = papply(pair, x10, x11)
    x13 = lbind(apply, maximum)
    x14 = apply(x13, x12)
    x15 = partition(x14)
    x16 = sizefilter(x15, FOUR)
    x17 = apply(llcorner, x16)
    x18 = apply(lrcorner, x16)
    x19 = combine(x17, x18)
    x20 = cover(x14, x19)
    x21 = tojvec(NEG_TWO)
    x22 = rbind(add, ZERO_BY_TWO)
    x23 = rbind(add, x21)
    x24 = compose(x22, ulcorner)
    x25 = compose(x23, urcorner)
    x26 = fork(connect, x24, x25)
    x27 = compose(even, last)
    x28 = rbind(sfilter, x27)
    x29 = chain(normalize, x28, x26)
    x30 = fork(shift, x29, x24)
    x31 = fork(recolor, color, x30)
    x32 = mapply(x31, x16)
    x33 = paint(x20, x32)
    x34 = rot90(x33)
    x35 = rot180(x33)
    x36 = rot270(x33)
    x37 = papply(pair, x33, x34)
    x38 = apply(x13, x37)
    x39 = papply(pair, x38, x35)
    x40 = apply(x13, x39)
    x41 = papply(pair, x40, x36)
    O = apply(x13, x41)
    return O



def solve_a416b8f3_264363fd(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, F, T)
    x3 = argmin(x2, size)
    x4 = normalize(x3)
    x5 = height(x3)
    x6 = width(x3)
    x7 = equality(x5, FIVE)
    x8 = equality(x6, FIVE)
    x9 = astuple(x7, x8)
    x10 = add(UNITY, x9)
    x11 = invert(x10)
    x12 = center(x3)
    x13 = index(x1, x12)
    x14 = branch(x7, UP, RIGHT)
    x15 = add(x14, x12)
    x16 = index(x1, x15)
    x17 = astuple(x13, ORIGIN)
    x18 = initset(x17)
    x19 = cover(x1, x3)
    x20 = mostcolor(x19)
    x21 = ofcolor(x19, x20)
    x22 = occurrences(x19, x18)
    x23 = objects(x19, F, F, T)
    x24 = rbind(occurrences, x18)
    x25 = rbind(subgrid, x19)
    x26 = compose(x24, x25)
    x27 = lbind(mapply, vfrontier)
    x28 = lbind(mapply, hfrontier)
    x29 = compose(x27, x26)
    x30 = compose(x28, x26)
    x31 = branch(x7, x29, x30)
    x32 = branch(x8, x30, x29)
    x33 = fork(combine, x31, x32)
    x34 = lbind(recolor, x16)
    x35 = compose(x34, x33)
    x36 = fork(paint, x25, x35)
    x37 = compose(asobject, x36)
    x38 = fork(shift, x37, ulcorner)
    x39 = mapply(x38, x23)
    x40 = paint(x19, x39)
    x41 = shift(x4, x11)
    x42 = lbind(shift, x41)
    x43 = mapply(x42, x22)
    x44 = paint(x40, x43)
    O = fill(x44, x20, x21)
    return O



def solve_a416b8f3_234bbc79(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, F, T)
    x3 = rbind(other, FIVE)
    x4 = compose(x3, palette)
    x5 = fork(recolor, x4, identity)
    x6 = apply(x5, x2)
    x7 = order(x6, leftmost)
    x8 = compose(last, last)
    x9 = lbind(matcher, x8)
    x10 = compose(x9, leftmost)
    x11 = compose(x9, rightmost)
    x12 = fork(sfilter, identity, x10)
    x13 = fork(sfilter, identity, x11)
    x14 = compose(dneighbors, last)
    x15 = rbind(chain, x14)
    x16 = lbind(x15, size)
    x17 = lbind(rbind, intersection)
    x18 = chain(x16, x17, toindices)
    x19 = fork(argmin, x12, x18)
    x20 = fork(argmin, x13, x18)
    x21 = compose(last, x19)
    x22 = compose(last, x20)
    x23 = astuple(ZERO, DOWN_LEFT)
    x24 = initset(x23)
    x25 = lbind(add, RIGHT)
    x26 = chain(x21, first, last)
    x27 = compose(x22, first)
    x28 = fork(subtract, x27, x26)
    x29 = compose(first, last)
    x30 = compose(x25, x28)
    x31 = fork(shift, x29, x30)
    x32 = fork(combine, first, x31)
    x33 = fork(remove, x29, last)
    x34 = fork(astuple, x32, x33)
    x35 = size(x2)
    x36 = power(x34, x35)
    x37 = astuple(x24, x7)
    x38 = x36(x37)
    x39 = first(x38)
    x40 = width(x39)
    x41 = decrement(x40)
    x42 = astuple(THREE, x41)
    x43 = canvas(ZERO, x42)
    O = paint(x43, x39)
    return O



def solve_a416b8f3_22233c11(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, T, T, T)
    x3 = rbind(upscale, TWO)
    x4 = chain(invert, halve, shape)
    x5 = fork(combine, hfrontier, vfrontier)
    x6 = compose(x3, vmirror)
    x7 = fork(shift, x6, x4)
    x8 = compose(toindices, x7)
    x9 = lbind(mapply, x5)
    x10 = compose(x9, toindices)
    x11 = fork(difference, x8, x10)
    x12 = mapply(x11, x2)
    O = fill(x1, EIGHT, x12)
    return O



def solve_a416b8f3_a64e4611(I):
    x1 = hconcat(I, I)
    x2 = asindices(x1)
    x3 = fork(product, identity, identity)
    x4 = lbind(canvas, ZERO)
    x5 = compose(asobject, x4)
    x6 = fork(multiply, first, last)
    x7 = compose(positive, size)
    x8 = lbind(lbind, shift)
    x9 = rbind(fork, x6)
    x10 = lbind(x9, multiply)
    x11 = lbind(chain, x7)
    x12 = rbind(x11, x5)
    x13 = lbind(lbind, occurrences)
    x14 = chain(x10, x12, x13)
    x15 = compose(x3, first)
    x16 = compose(x14, last)
    x17 = fork(argmax, x15, x16)
    x18 = chain(x8, x5, x17)
    x19 = compose(x5, x17)
    x20 = fork(occurrences, last, x19)
    x21 = fork(mapply, x18, x20)
    x22 = multiply(TWO, SIX)
    x23 = interval(THREE, x22, ONE)
    x24 = astuple(x23, x1)
    x25 = x21(x24)
    x26 = fill(x1, THREE, x25)
    x27 = interval(THREE, TEN, ONE)
    x28 = astuple(x27, x26)
    x29 = x21(x28)
    x30 = fill(x26, THREE, x29)
    x31 = astuple(x27, x30)
    x32 = x21(x31)
    x33 = fill(x30, THREE, x32)
    x34 = rbind(toobject, x33)
    x35 = rbind(colorcount, THREE)
    x36 = chain(x35, x34, neighbors)
    x37 = matcher(x36, EIGHT)
    x38 = sfilter(x2, x37)
    x39 = fill(x1, THREE, x38)
    x40 = ofcolor(x39, ZERO)
    x41 = rbind(bordering, x39)
    x42 = compose(x41, initset)
    x43 = lbind(contained, THREE)
    x44 = rbind(toobject, x39)
    x45 = chain(x43, palette, x44)
    x46 = compose(x45, dneighbors)
    x47 = fork(both, x46, x42)
    x48 = sfilter(x40, x47)
    O = fill(x39, THREE, x48)
    return O



def solve_a416b8f3_97a05b5b(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = rbind(greater, ONE)
    x6 = compose(x5, numcolors)
    x7 = sfilter(x2, x6)
    x8 = lbind(rbind, subtract)
    x9 = switch(x4, TWO, ZERO)
    x10 = lbind(occurrences, x9)
    x11 = lbind(lbind, shift)
    x12 = compose(x8, ulcorner)
    x13 = matcher(first, TWO)
    x14 = compose(flip, x13)
    x15 = rbind(sfilter, x13)
    x16 = rbind(sfilter, x14)
    x17 = lbind(recolor, ZERO)
    x18 = compose(x17, x16)
    x19 = fork(combine, x18, x15)
    x20 = chain(x12, x19, normalize)
    x21 = objects(x9, T, T, T)
    x22 = apply(toindices, x21)
    x23 = chain(x10, x19, normalize)
    x24 = rbind(colorcount, TWO)
    x25 = lbind(sfilter, x22)
    x26 = chain(size, first, x25)
    x27 = compose(positive, size)
    x28 = lbind(lbind, contained)
    x29 = chain(x27, x25, x28)
    x30 = compose(x26, x28)
    x31 = rbind(sfilter, x29)
    x32 = compose(x31, x23)
    x33 = lbind(rbind, equality)
    x34 = rbind(compose, x30)
    x35 = chain(x34, x33, x24)
    x36 = fork(sfilter, x32, x35)
    x37 = fork(apply, x20, x36)
    x38 = compose(x11, normalize)
    x39 = fork(mapply, x38, x37)
    x40 = astuple(cmirror, dmirror)
    x41 = astuple(hmirror, vmirror)
    x42 = combine(x40, x41)
    x43 = product(x42, x42)
    x44 = fork(compose, first, last)
    x45 = apply(x44, x43)
    x46 = lbind(rapply, x45)
    x47 = mapply(x46, x7)
    x48 = mapply(x39, x47)
    x49 = paint(x4, x48)
    x50 = palette(x48)
    x51 = lbind(remove, TWO)
    x52 = x51(x50)
    x53 = chain(first, x51, palette)
    x54 = rbind(contained, x52)
    x55 = chain(flip, x54, x53)
    x56 = sfilter(x7, x55)
    x57 = fork(apply, x20, x23)
    x58 = fork(mapply, x38, x57)
    x59 = mapply(x46, x56)
    x60 = mapply(x58, x59)
    O = paint(x49, x60)
    return O



def solve_a416b8f3_3e980e27(I):
    x1 = hconcat(I, I)
    x2 = objects(x1, F, T, T)
    x3 = astuple(TEN, TEN)
    x4 = invert(x3)
    x5 = astuple(TWO, x4)
    x6 = astuple(THREE, x4)
    x7 = initset(x5)
    x8 = insert(x6, x7)
    x9 = insert(x8, x2)
    x10 = lbind(contained, TWO)
    x11 = lbind(contained, THREE)
    x12 = compose(invert, ulcorner)
    x13 = lbind(compose, x12)
    x14 = lbind(rbind, sfilter)
    x15 = compose(x13, x14)
    x16 = rbind(compose, center)
    x17 = lbind(lbind, shift)
    x18 = x15(x10)
    x19 = x15(x11)
    x20 = fork(shift, identity, x18)
    x21 = fork(shift, identity, x19)
    x22 = compose(x10, palette)
    x23 = compose(x11, palette)
    x24 = sfilter(x9, x22)
    x25 = argmax(x24, size)
    x26 = remove(x25, x24)
    x27 = vmirror(x25)
    x28 = chain(x16, x17, x20)
    x29 = x28(x27)
    x30 = mapply(x29, x26)
    x31 = sfilter(x9, x23)
    x32 = argmax(x31, size)
    x33 = remove(x32, x31)
    x34 = chain(x16, x17, x21)
    x35 = x34(x32)
    x36 = mapply(x35, x33)
    x37 = combine(x30, x36)
    O = paint(x1, x37)
    return O



def solve_b1948b0a_67a3c6ac(I):
    x1 = replace(I, SIX, TWO)
    O = vmirror(x1)
    return O



def solve_b1948b0a_68b16354(I):
    x1 = replace(I, SIX, TWO)
    O = hmirror(x1)
    return O



def solve_b1948b0a_74dd1130(I):
    x1 = replace(I, SIX, TWO)
    O = dmirror(x1)
    return O



def solve_b1948b0a_3c9b0459(I):
    x1 = replace(I, SIX, TWO)
    O = rot180(x1)
    return O



def solve_b1948b0a_6150a2bd(I):
    x1 = replace(I, SIX, TWO)
    O = rot180(x1)
    return O



def solve_b1948b0a_9172f3a0(I):
    x1 = replace(I, SIX, TWO)
    O = upscale(x1, THREE)
    return O



def solve_b1948b0a_9dfd6313(I):
    x1 = replace(I, SIX, TWO)
    O = dmirror(x1)
    return O



def solve_b1948b0a_a416b8f3(I):
    x1 = replace(I, SIX, TWO)
    O = hconcat(x1, x1)
    return O



def solve_b1948b0a_c59eb873(I):
    x1 = replace(I, SIX, TWO)
    O = upscale(x1, TWO)
    return O



def solve_b1948b0a_c8f0f002(I):
    x1 = replace(I, SIX, TWO)
    O = replace(x1, SEVEN, FIVE)
    return O



def solve_b1948b0a_d10ecb37(I):
    x1 = replace(I, SIX, TWO)
    O = crop(x1, ORIGIN, TWO_BY_TWO)
    return O



def solve_b1948b0a_d511f180(I):
    x1 = replace(I, SIX, TWO)
    O = switch(x1, FIVE, EIGHT)
    return O



def solve_b1948b0a_ed36ccf7(I):
    x1 = replace(I, SIX, TWO)
    O = rot270(x1)
    return O



def solve_b1948b0a_4c4377d9(I):
    x1 = replace(I, SIX, TWO)
    x2 = hmirror(x1)
    O = vconcat(x2, x1)
    return O



def solve_b1948b0a_6d0aefbc(I):
    x1 = replace(I, SIX, TWO)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_b1948b0a_6fa7a44f(I):
    x1 = replace(I, SIX, TWO)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_b1948b0a_5614dbcf(I):
    x1 = replace(I, SIX, TWO)
    x2 = replace(x1, FIVE, ZERO)
    O = downscale(x2, THREE)
    return O



def solve_b1948b0a_5bd6f4ac(I):
    x1 = replace(I, SIX, TWO)
    x2 = tojvec(SIX)
    O = crop(x1, x2, THREE_BY_THREE)
    return O



def solve_b1948b0a_5582e5ca(I):
    x1 = replace(I, SIX, TWO)
    x2 = mostcolor(x1)
    O = canvas(x2, THREE_BY_THREE)
    return O



def solve_b1948b0a_8be77c9e(I):
    x1 = replace(I, SIX, TWO)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_b1948b0a_c9e6f938(I):
    x1 = replace(I, SIX, TWO)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_b1948b0a_2dee498d(I):
    x1 = replace(I, SIX, TWO)
    x2 = hsplit(x1, THREE)
    O = first(x2)
    return O



def solve_b1948b0a_1cf80156(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = subgrid(x3, x1)
    return O



def solve_b1948b0a_32597951(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, EIGHT)
    x3 = delta(x2)
    O = fill(x1, THREE, x3)
    return O



def solve_b1948b0a_25ff71a9(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = move(x1, x3, DOWN)
    return O



def solve_b1948b0a_0b148d64(I):
    x1 = replace(I, SIX, TWO)
    x2 = partition(x1)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_b1948b0a_1f85a75f(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_b1948b0a_23b5c85d(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_b1948b0a_ac0a08a4(I):
    x1 = replace(I, SIX, TWO)
    x2 = colorcount(x1, ZERO)
    x3 = subtract(NINE, x2)
    O = upscale(x1, x3)
    return O



def solve_b1948b0a_be94b721(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_b1948b0a_c909285e(I):
    x1 = replace(I, SIX, TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    O = subgrid(x3, x1)
    return O



def solve_b1948b0a_f25ffba3(I):
    x1 = replace(I, SIX, TWO)
    x2 = bottomhalf(x1)
    x3 = hmirror(x2)
    O = vconcat(x3, x2)
    return O



def solve_b1948b0a_c1d99e64(I):
    x1 = replace(I, SIX, TWO)
    x2 = frontiers(x1)
    x3 = merge(x2)
    O = fill(x1, TWO, x3)
    return O



def solve_b1948b0a_b91ae062(I):
    x1 = replace(I, SIX, TWO)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    O = upscale(x1, x3)
    return O



def solve_b1948b0a_3aa6fb7a(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = mapply(corners, x2)
    O = underfill(x1, ONE, x3)
    return O



def solve_b1948b0a_7b7f7511(I):
    x1 = replace(I, SIX, TWO)
    x2 = portrait(x1)
    x3 = branch(x2, tophalf, lefthalf)
    O = x3(x1)
    return O



def solve_b1948b0a_4258a5f9(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, FIVE)
    x3 = mapply(neighbors, x2)
    O = fill(x1, ONE, x3)
    return O



def solve_b1948b0a_2dc579da(I):
    x1 = replace(I, SIX, TWO)
    x2 = vsplit(x1, TWO)
    x3 = rbind(hsplit, TWO)
    x4 = mapply(x3, x2)
    O = argmax(x4, numcolors)
    return O



def solve_b1948b0a_28bf18c6(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = hconcat(x4, x4)
    return O



def solve_b1948b0a_3af2c5a8(I):
    x1 = replace(I, SIX, TWO)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_b1948b0a_44f52bb0(I):
    x1 = replace(I, SIX, TWO)
    x2 = vmirror(x1)
    x3 = equality(x2, x1)
    x4 = branch(x3, ONE, SEVEN)
    O = canvas(x4, UNITY)
    return O



def solve_b1948b0a_62c24649(I):
    x1 = replace(I, SIX, TWO)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_b1948b0a_67e8384a(I):
    x1 = replace(I, SIX, TWO)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_b1948b0a_7468f01a(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = vmirror(x4)
    return O



def solve_b1948b0a_662c240a(I):
    x1 = replace(I, SIX, TWO)
    x2 = vsplit(x1, THREE)
    x3 = fork(equality, dmirror, identity)
    x4 = compose(flip, x3)
    O = extract(x2, x4)
    return O



def solve_b1948b0a_42a50994(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = cover(x1, x4)
    return O



def solve_b1948b0a_56ff96f3(I):
    x1 = replace(I, SIX, TWO)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = mapply(x3, x2)
    O = paint(x1, x4)
    return O



def solve_b1948b0a_50cb2852(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = compose(backdrop, inbox)
    x4 = mapply(x3, x2)
    O = fill(x1, EIGHT, x4)
    return O



def solve_b1948b0a_4347f46a(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = fork(difference, toindices, box)
    x4 = mapply(x3, x2)
    O = fill(x1, ZERO, x4)
    return O



def solve_b1948b0a_46f33fce(I):
    x1 = replace(I, SIX, TWO)
    x2 = rot180(x1)
    x3 = downscale(x2, TWO)
    x4 = rot180(x3)
    O = upscale(x4, FOUR)
    return O



def solve_b1948b0a_a740d043(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    O = replace(x4, ONE, ZERO)
    return O



def solve_b1948b0a_a79310a0(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = move(x1, x3, DOWN)
    O = replace(x4, EIGHT, TWO)
    return O



def solve_b1948b0a_aabf363d(I):
    x1 = replace(I, SIX, TWO)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, ZERO)
    x4 = leastcolor(x3)
    O = replace(x3, x4, x2)
    return O



def solve_b1948b0a_ae4f1146(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, F, F, T)
    x3 = rbind(colorcount, ONE)
    x4 = argmax(x2, x3)
    O = subgrid(x4, x1)
    return O



def solve_b1948b0a_b27ca6d3(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, THREE, x4)
    return O



def solve_b1948b0a_ce22a75a(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = mapply(backdrop, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_b1948b0a_dc1df850(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_b1948b0a_f25fbde4(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = upscale(x4, TWO)
    return O



def solve_b1948b0a_44d8ac46(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = apply(delta, x2)
    x4 = mfilter(x3, square)
    O = fill(x1, TWO, x4)
    return O



def solve_b1948b0a_1e0a9b12(I):
    x1 = replace(I, SIX, TWO)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = apply(x3, x2)
    O = rot90(x4)
    return O



def solve_b1948b0a_0d3d703e(I):
    x1 = replace(I, SIX, TWO)
    x2 = switch(x1, THREE, FOUR)
    x3 = switch(x2, EIGHT, NINE)
    x4 = switch(x3, TWO, SIX)
    O = switch(x4, ONE, FIVE)
    return O



def solve_b1948b0a_3618c87e(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = move(x1, x4, TWO_BY_ZERO)
    return O



def solve_b1948b0a_1c786137(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, height)
    x4 = subgrid(x3, x1)
    O = trim(x4)
    return O



def solve_b1948b0a_445eab21(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = fork(multiply, height, width)
    x4 = argmax(x2, x3)
    x5 = color(x4)
    O = canvas(x5, TWO_BY_TWO)
    return O



def solve_b1948b0a_6f8cd79b(I):
    x1 = replace(I, SIX, TWO)
    x2 = asindices(x1)
    x3 = apply(initset, x2)
    x4 = rbind(bordering, x1)
    x5 = mfilter(x3, x4)
    O = fill(x1, EIGHT, x5)
    return O



def solve_b1948b0a_2013d3e2(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = lefthalf(x4)
    O = tophalf(x5)
    return O



def solve_b1948b0a_41e4d17e(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = mapply(x4, x2)
    O = underfill(x1, SIX, x5)
    return O



def solve_b1948b0a_9565186b(I):
    x1 = replace(I, SIX, TWO)
    x2 = shape(x1)
    x3 = objects(x1, T, F, F)
    x4 = argmax(x3, size)
    x5 = canvas(FIVE, x2)
    O = paint(x5, x4)
    return O



def solve_b1948b0a_aedd82e4(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, TWO)
    x4 = sizefilter(x3, ONE)
    x5 = merge(x4)
    O = fill(x1, ONE, x5)
    return O



def solve_b1948b0a_bb43febb(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, FIVE)
    x4 = compose(backdrop, inbox)
    x5 = mapply(x4, x3)
    O = fill(x1, TWO, x5)
    return O



def solve_b1948b0a_e98196ab(I):
    x1 = replace(I, SIX, TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = objects(x2, T, F, T)
    x5 = merge(x4)
    O = paint(x3, x5)
    return O



def solve_b1948b0a_f76d97a5(I):
    x1 = replace(I, SIX, TWO)
    x2 = palette(x1)
    x3 = first(x2)
    x4 = last(x2)
    x5 = switch(x1, x3, x4)
    O = replace(x5, FIVE, ZERO)
    return O



def solve_b1948b0a_ce9e57f2(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = fork(connect, ulcorner, centerofmass)
    x4 = mapply(x3, x2)
    x5 = fill(x1, EIGHT, x4)
    O = switch(x5, EIGHT, TWO)
    return O



def solve_b1948b0a_22eb0ac0(I):
    x1 = replace(I, SIX, TWO)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    O = paint(x1, x5)
    return O



def solve_b1948b0a_9f236235(I):
    x1 = replace(I, SIX, TWO)
    x2 = compress(x1)
    x3 = objects(x1, T, F, F)
    x4 = vmirror(x2)
    x5 = valmin(x3, width)
    O = downscale(x4, x5)
    return O



def solve_b1948b0a_a699fb00(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, RIGHT)
    x4 = shift(x2, LEFT)
    x5 = intersection(x3, x4)
    O = fill(x1, TWO, x5)
    return O



def solve_b1948b0a_46442a0e(I):
    x1 = replace(I, SIX, TWO)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_b1948b0a_7fe24cdd(I):
    x1 = replace(I, SIX, TWO)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_b1948b0a_0ca9ddb6(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, ONE)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x3)
    x6 = fill(x1, SEVEN, x4)
    O = fill(x6, FOUR, x5)
    return O



def solve_b1948b0a_543a7ed5(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, SIX)
    x4 = mapply(outbox, x3)
    x5 = fill(x1, THREE, x4)
    x6 = mapply(delta, x3)
    O = fill(x5, FOUR, x6)
    return O



def solve_b1948b0a_0520fde7(I):
    x1 = replace(I, SIX, TWO)
    x2 = vmirror(x1)
    x3 = lefthalf(x2)
    x4 = righthalf(x2)
    x5 = vmirror(x4)
    x6 = cellwise(x3, x5, ZERO)
    O = replace(x6, ONE, TWO)
    return O



def solve_b1948b0a_dae9d2b5(I):
    x1 = replace(I, SIX, TWO)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, FOUR)
    x5 = ofcolor(x3, THREE)
    x6 = combine(x4, x5)
    O = fill(x2, SIX, x6)
    return O



def solve_b1948b0a_8d5021e8(I):
    x1 = replace(I, SIX, TWO)
    x2 = vmirror(x1)
    x3 = hconcat(x2, x1)
    x4 = hmirror(x3)
    x5 = vconcat(x3, x4)
    x6 = vconcat(x5, x3)
    O = hmirror(x6)
    return O



def solve_b1948b0a_b60334d2(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, FIVE)
    x3 = replace(x1, FIVE, ZERO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x2)
    x6 = fill(x3, ONE, x4)
    O = fill(x6, FIVE, x5)
    return O



def solve_b1948b0a_b94a9452(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = leastcolor(x4)
    x6 = mostcolor(x4)
    O = switch(x4, x5, x6)
    return O



def solve_b1948b0a_d037b0a7(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, DOWN)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    O = paint(x1, x6)
    return O



def solve_b1948b0a_d0f5fe59(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = astuple(x3, x3)
    x5 = canvas(ZERO, x4)
    x6 = shoot(ORIGIN, UNITY)
    O = fill(x5, EIGHT, x6)
    return O



def solve_b1948b0a_e3497940(I):
    x1 = replace(I, SIX, TWO)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = vmirror(x3)
    x5 = objects(x4, T, F, T)
    x6 = merge(x5)
    O = paint(x2, x6)
    return O



def solve_b1948b0a_e9afcf9a(I):
    x1 = replace(I, SIX, TWO)
    x2 = astuple(TWO, ONE)
    x3 = crop(x1, ORIGIN, x2)
    x4 = hmirror(x3)
    x5 = hconcat(x3, x4)
    x6 = hconcat(x5, x5)
    O = hconcat(x6, x5)
    return O



def solve_b1948b0a_d406998b(I):
    x1 = replace(I, SIX, TWO)
    x2 = vmirror(x1)
    x3 = ofcolor(x2, FIVE)
    x4 = compose(even, last)
    x5 = sfilter(x3, x4)
    x6 = fill(x2, THREE, x5)
    O = vmirror(x6)
    return O



def solve_b1948b0a_3906de3d(I):
    x1 = replace(I, SIX, TWO)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = switch(x2, ONE, TWO)
    x5 = apply(x3, x4)
    x6 = switch(x5, ONE, TWO)
    O = cmirror(x6)
    return O



def solve_b1948b0a_00d62c1b(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, FOUR, x6)
    return O



def solve_b1948b0a_7b6016b9(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, F)
    x3 = rbind(bordering, x1)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x4)
    x6 = fill(x1, TWO, x5)
    O = replace(x6, ZERO, THREE)
    return O



def solve_b1948b0a_67385a82(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, THREE)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = merge(x5)
    O = fill(x1, EIGHT, x6)
    return O



def solve_b1948b0a_a5313dff(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, ONE, x6)
    return O



def solve_b1948b0a_ea32f347(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, FIVE, FOUR)
    x4 = argmin(x2, size)
    x5 = argmax(x2, size)
    x6 = fill(x3, ONE, x5)
    O = fill(x6, TWO, x4)
    return O



def solve_b1948b0a_d631b094(I):
    x1 = replace(I, SIX, TWO)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = ofcolor(x1, x3)
    x5 = size(x4)
    x6 = astuple(ONE, x5)
    O = canvas(x3, x6)
    return O



def solve_b1948b0a_10fcaaa3(I):
    x1 = replace(I, SIX, TWO)
    x2 = leastcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = vconcat(x3, x3)
    x5 = ofcolor(x4, x2)
    x6 = mapply(ineighbors, x5)
    O = underfill(x4, EIGHT, x6)
    return O



def solve_b1948b0a_007bbfb7(I):
    x1 = replace(I, SIX, TWO)
    x2 = hupscale(x1, THREE)
    x3 = vupscale(x2, THREE)
    x4 = hconcat(x1, x1)
    x5 = hconcat(x4, x1)
    x6 = vconcat(x5, x5)
    x7 = vconcat(x6, x5)
    O = cellwise(x3, x7, ZERO)
    return O



def solve_b1948b0a_496994bd(I):
    x1 = replace(I, SIX, TWO)
    x2 = width(x1)
    x3 = height(x1)
    x4 = halve(x3)
    x5 = astuple(x4, x2)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    O = vconcat(x6, x7)
    return O



def solve_b1948b0a_1f876c06(I):
    x1 = replace(I, SIX, TWO)
    x2 = fgpartition(x1)
    x3 = compose(last, first)
    x4 = power(last, TWO)
    x5 = fork(connect, x3, x4)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_b1948b0a_39a8645d(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = matcher(color, x5)
    x7 = extract(x2, x6)
    O = subgrid(x7, x1)
    return O



def solve_b1948b0a_1b2d62fb(I):
    x1 = replace(I, SIX, TWO)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = replace(x2, NINE, ZERO)
    O = fill(x7, EIGHT, x6)
    return O



def solve_b1948b0a_90c28cc7(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = dedupe(x4)
    x6 = rot90(x5)
    x7 = dedupe(x6)
    O = rot270(x7)
    return O



def solve_b1948b0a_b6afb2da(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, F)
    x3 = replace(x1, FIVE, TWO)
    x4 = colorfilter(x2, FIVE)
    x5 = mapply(box, x4)
    x6 = fill(x3, FOUR, x5)
    x7 = mapply(corners, x4)
    O = fill(x6, ONE, x7)
    return O



def solve_b1948b0a_b9b7f026(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, F)
    x3 = argmin(x2, size)
    x4 = rbind(adjacent, x3)
    x5 = remove(x3, x2)
    x6 = extract(x5, x4)
    x7 = color(x6)
    O = canvas(x7, UNITY)
    return O



def solve_b1948b0a_ba97ae07(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = ofcolor(x1, x5)
    x7 = backdrop(x6)
    O = fill(x1, x5, x7)
    return O



def solve_b1948b0a_c9f8e694(I):
    x1 = replace(I, SIX, TWO)
    x2 = height(x1)
    x3 = width(x1)
    x4 = ofcolor(x1, ZERO)
    x5 = astuple(x2, ONE)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hupscale(x6, x3)
    O = fill(x7, ZERO, x4)
    return O



def solve_b1948b0a_d23f8c26(I):
    x1 = replace(I, SIX, TWO)
    x2 = asindices(x1)
    x3 = width(x1)
    x4 = halve(x3)
    x5 = matcher(last, x4)
    x6 = compose(flip, x5)
    x7 = sfilter(x2, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_b1948b0a_d5d6de2d(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = sfilter(x2, square)
    x4 = difference(x2, x3)
    x5 = compose(backdrop, inbox)
    x6 = mapply(x5, x4)
    x7 = replace(x1, TWO, ZERO)
    O = fill(x7, THREE, x6)
    return O



def solve_b1948b0a_dbc1a6ce(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, ONE)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_b1948b0a_ded97339(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, EIGHT)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_b1948b0a_ea786f4a(I):
    x1 = replace(I, SIX, TWO)
    x2 = width(x1)
    x3 = shoot(ORIGIN, UNITY)
    x4 = decrement(x2)
    x5 = tojvec(x4)
    x6 = shoot(x5, DOWN_LEFT)
    x7 = combine(x3, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_b1948b0a_08ed6ac7(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = order(x2, height)
    x5 = size(x3)
    x6 = interval(x5, ZERO, NEG_ONE)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_b1948b0a_40853293(I):
    x1 = replace(I, SIX, TWO)
    x2 = partition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    x6 = mfilter(x4, vline)
    x7 = paint(x1, x5)
    O = paint(x7, x6)
    return O



def solve_b1948b0a_5521c0d9(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = cover(x1, x3)
    x5 = chain(toivec, invert, height)
    x6 = fork(shift, identity, x5)
    x7 = mapply(x6, x2)
    O = paint(x4, x7)
    return O



def solve_b1948b0a_f8ff0b80(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = rbind(canvas, UNITY)
    x6 = apply(x5, x4)
    x7 = merge(x6)
    O = hmirror(x7)
    return O



def solve_b1948b0a_85c4e7cd(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, F)
    x3 = compose(invert, size)
    x4 = order(x2, size)
    x5 = order(x2, x3)
    x6 = apply(color, x5)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_b1948b0a_d2abd087(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = matcher(size, SIX)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x3)
    x6 = mfilter(x2, x4)
    x7 = fill(x1, TWO, x5)
    O = fill(x7, ONE, x6)
    return O



def solve_b1948b0a_363442ee(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, ONE)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = asobject(x3)
    x5 = lbind(shift, x4)
    x6 = compose(x5, decrement)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_b1948b0a_5168d44c(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, THREE)
    x3 = height(x2)
    x4 = equality(x3, ONE)
    x5 = branch(x4, ZERO_BY_TWO, TWO_BY_ZERO)
    x6 = ofcolor(x1, TWO)
    x7 = recolor(TWO, x6)
    O = move(x1, x7, x5)
    return O



def solve_b1948b0a_d9fac9be(I):
    x1 = replace(I, SIX, TWO)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = color(x4)
    x6 = remove(ZERO, x2)
    x7 = other(x6, x5)
    O = canvas(x7, UNITY)
    return O



def solve_b1948b0a_e50d258f(I):
    x1 = replace(I, SIX, TWO)
    x2 = width(x1)
    x3 = astuple(NINE, x2)
    x4 = canvas(ZERO, x3)
    x5 = vconcat(x1, x4)
    x6 = objects(x5, F, F, T)
    x7 = rbind(colorcount, TWO)
    x8 = argmax(x6, x7)
    O = subgrid(x8, x1)
    return O



def solve_b1948b0a_810b9b61(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = apply(toindices, x2)
    x4 = fork(either, vline, hline)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = fork(equality, identity, box)
    x8 = mfilter(x6, x7)
    O = fill(x1, THREE, x8)
    return O



def solve_b1948b0a_54d82841(I):
    x1 = replace(I, SIX, TWO)
    x2 = height(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(last, center)
    x5 = apply(x4, x3)
    x6 = decrement(x2)
    x7 = lbind(astuple, x6)
    x8 = apply(x7, x5)
    O = fill(x1, FOUR, x8)
    return O



def solve_b1948b0a_60b61512(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = mapply(delta, x2)
    O = fill(x1, SEVEN, x3)
    return O



def solve_b1948b0a_25d8a9c8(I):
    x1 = replace(I, SIX, TWO)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, THREE)
    x5 = mfilter(x4, hline)
    x6 = toindices(x5)
    x7 = difference(x2, x6)
    x8 = fill(x1, FIVE, x6)
    O = fill(x8, ZERO, x7)
    return O



def solve_b1948b0a_239be575(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, F, T, T)
    x3 = lbind(contained, TWO)
    x4 = compose(x3, palette)
    x5 = sfilter(x2, x4)
    x6 = size(x5)
    x7 = greater(x6, ONE)
    x8 = branch(x7, ZERO, EIGHT)
    O = canvas(x8, UNITY)
    return O



def solve_b1948b0a_6430c8c4(I):
    x1 = replace(I, SIX, TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(FOUR, FOUR)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, THREE, x7)
    return O



def solve_b1948b0a_94f9d214(I):
    x1 = replace(I, SIX, TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = astuple(FOUR, FOUR)
    x7 = canvas(ZERO, x6)
    x8 = intersection(x4, x5)
    O = fill(x7, TWO, x8)
    return O



def solve_b1948b0a_ce4f8723(I):
    x1 = replace(I, SIX, TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = astuple(FOUR, FOUR)
    x8 = canvas(THREE, x7)
    O = fill(x8, ZERO, x6)
    return O



def solve_b1948b0a_d13f3404(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, UNITY)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = astuple(SIX, SIX)
    x8 = canvas(ZERO, x7)
    O = paint(x8, x6)
    return O



def solve_b1948b0a_f2829549(I):
    x1 = replace(I, SIX, TWO)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = shape(x2)
    x8 = canvas(ZERO, x7)
    O = fill(x8, THREE, x6)
    return O



def solve_b1948b0a_fafffa47(I):
    x1 = replace(I, SIX, TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = shape(x3)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, TWO, x7)
    return O



def solve_b1948b0a_e76a88a6(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, F, F, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = remove(x3, x2)
    x6 = apply(ulcorner, x5)
    x7 = lbind(shift, x4)
    x8 = mapply(x7, x6)
    O = paint(x1, x8)
    return O



def solve_b1948b0a_7f4411dc(I):
    x1 = replace(I, SIX, TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = rbind(difference, x3)
    x5 = rbind(greater, TWO)
    x6 = chain(x5, size, x4)
    x7 = compose(x6, dneighbors)
    x8 = sfilter(x3, x7)
    O = fill(x1, ZERO, x8)
    return O



def solve_b1948b0a_b230c067(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(normalize, x3)
    x5 = leastcommon(x4)
    x6 = matcher(normalize, x5)
    x7 = extract(x2, x6)
    x8 = replace(x1, EIGHT, ONE)
    O = fill(x8, TWO, x7)
    return O



def solve_b1948b0a_e8593010(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = sizefilter(x2, TWO)
    x5 = merge(x3)
    x6 = fill(x1, THREE, x5)
    x7 = merge(x4)
    x8 = fill(x6, TWO, x7)
    O = replace(x8, ZERO, ONE)
    return O



def solve_b1948b0a_6d75e8bb(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = ulcorner(x3)
    x5 = subgrid(x3, x1)
    x6 = replace(x5, ZERO, TWO)
    x7 = asobject(x6)
    x8 = shift(x7, x4)
    O = paint(x1, x8)
    return O



def solve_b1948b0a_1190e5a7(I):
    x1 = replace(I, SIX, TWO)
    x2 = mostcolor(x1)
    x3 = frontiers(x1)
    x4 = sfilter(x3, vline)
    x5 = difference(x3, x4)
    x6 = astuple(x5, x4)
    x7 = apply(size, x6)
    x8 = increment(x7)
    O = canvas(x2, x8)
    return O



def solve_b1948b0a_6e02f1e3(I):
    x1 = replace(I, SIX, TWO)
    x2 = numcolors(x1)
    x3 = canvas(ZERO, THREE_BY_THREE)
    x4 = equality(x2, THREE)
    x5 = equality(x2, TWO)
    x6 = branch(x4, TWO_BY_ZERO, ORIGIN)
    x7 = branch(x5, TWO_BY_TWO, ZERO_BY_TWO)
    x8 = connect(x6, x7)
    O = fill(x3, FIVE, x8)
    return O



def solve_b1948b0a_a61f2674(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = replace(x1, FIVE, ZERO)
    x6 = recolor(ONE, x3)
    x7 = recolor(TWO, x4)
    x8 = combine(x6, x7)
    O = paint(x5, x8)
    return O



def solve_b1948b0a_fcc82909(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, F, T, T)
    x3 = rbind(add, DOWN)
    x4 = compose(x3, llcorner)
    x5 = compose(toivec, numcolors)
    x6 = fork(add, lrcorner, x5)
    x7 = fork(astuple, x4, x6)
    x8 = compose(box, x7)
    x9 = mapply(x8, x2)
    O = fill(x1, THREE, x9)
    return O



def solve_b1948b0a_253bf280(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, EIGHT)
    x3 = prapply(connect, x2, x2)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = fork(either, vline, hline)
    x8 = mfilter(x6, x7)
    x9 = fill(x1, THREE, x8)
    O = fill(x9, EIGHT, x2)
    return O



def solve_b1948b0a_1f642eb9(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = rbind(gravitate, x5)
    x7 = compose(crement, x6)
    x8 = fork(shift, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_b1948b0a_31aa019c(I):
    x1 = replace(I, SIX, TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = first(x3)
    x5 = neighbors(x4)
    x6 = astuple(TEN, TEN)
    x7 = canvas(ZERO, x6)
    x8 = initset(x4)
    x9 = fill(x7, x2, x8)
    O = fill(x9, TWO, x5)
    return O



def solve_b1948b0a_27a28665(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, F)
    x3 = valmax(x2, size)
    x4 = equality(x3, ONE)
    x5 = equality(x3, FOUR)
    x6 = equality(x3, FIVE)
    x7 = branch(x4, TWO, ONE)
    x8 = branch(x5, THREE, x7)
    x9 = branch(x6, SIX, x8)
    O = canvas(x9, UNITY)
    return O



def solve_b1948b0a_7ddcd7ec(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = color(x5)
    x7 = lbind(position, x5)
    x8 = fork(shoot, center, x7)
    x9 = mapply(x8, x3)
    O = fill(x1, x6, x9)
    return O



def solve_b1948b0a_3bd67248(I):
    x1 = replace(I, SIX, TWO)
    x2 = height(x1)
    x3 = decrement(x2)
    x4 = decrement(x3)
    x5 = astuple(x4, ONE)
    x6 = astuple(x3, ONE)
    x7 = shoot(x5, UP_RIGHT)
    x8 = shoot(x6, RIGHT)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_b1948b0a_73251a56(I):
    x1 = replace(I, SIX, TWO)
    x2 = dmirror(x1)
    x3 = papply(pair, x1, x2)
    x4 = lbind(apply, maximum)
    x5 = apply(x4, x3)
    x6 = mostcolor(x5)
    x7 = replace(x5, ZERO, x6)
    x8 = index(x7, ORIGIN)
    x9 = shoot(ORIGIN, UNITY)
    O = fill(x7, x8, x9)
    return O



def solve_b1948b0a_25d487eb(I):
    x1 = replace(I, SIX, TWO)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = ofcolor(x1, x2)
    x5 = center(x4)
    x6 = merge(x3)
    x7 = center(x6)
    x8 = subtract(x7, x5)
    x9 = shoot(x5, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_b1948b0a_8f2ea7aa(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    O = cellwise(x5, x9, ZERO)
    return O



def solve_b1948b0a_b8825c91(I):
    x1 = replace(I, SIX, TWO)
    x2 = replace(x1, FOUR, ZERO)
    x3 = dmirror(x2)
    x4 = papply(pair, x2, x3)
    x5 = lbind(apply, maximum)
    x6 = apply(x5, x4)
    x7 = cmirror(x6)
    x8 = papply(pair, x6, x7)
    x9 = apply(x5, x8)
    O = cmirror(x9)
    return O



def solve_b1948b0a_cce03e0d(I):
    x1 = replace(I, SIX, TWO)
    x2 = upscale(x1, THREE)
    x3 = hconcat(x1, x1)
    x4 = hconcat(x3, x1)
    x5 = vconcat(x4, x4)
    x6 = vconcat(x5, x4)
    x7 = ofcolor(x2, ZERO)
    x8 = ofcolor(x2, ONE)
    x9 = combine(x7, x8)
    O = fill(x6, ZERO, x9)
    return O



def solve_b1948b0a_d364b489(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, DOWN)
    x4 = fill(x1, EIGHT, x3)
    x5 = shift(x2, UP)
    x6 = fill(x4, TWO, x5)
    x7 = shift(x2, RIGHT)
    x8 = fill(x6, SIX, x7)
    x9 = shift(x2, LEFT)
    O = fill(x8, SEVEN, x9)
    return O



def solve_b1948b0a_a5f85a15(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = interval(ONE, NINE, ONE)
    x4 = apply(double, x3)
    x5 = apply(decrement, x4)
    x6 = papply(astuple, x5, x5)
    x7 = apply(ulcorner, x2)
    x8 = lbind(shift, x6)
    x9 = mapply(x8, x7)
    O = fill(x1, FOUR, x9)
    return O



def solve_b1948b0a_3ac3eb23(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = chain(ineighbors, last, first)
    x4 = fork(recolor, color, x3)
    x5 = mapply(x4, x2)
    x6 = paint(x1, x5)
    x7 = vsplit(x6, THREE)
    x8 = first(x7)
    x9 = vconcat(x8, x8)
    O = vconcat(x8, x9)
    return O



def solve_b1948b0a_444801d8(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, ONE)
    x4 = rbind(toobject, x1)
    x5 = chain(leastcolor, x4, delta)
    x6 = rbind(shift, UP)
    x7 = compose(x6, backdrop)
    x8 = fork(recolor, x5, x7)
    x9 = mapply(x8, x3)
    O = underpaint(x1, x9)
    return O



def solve_b1948b0a_22168020(I):
    x1 = replace(I, SIX, TWO)
    x2 = palette(x1)
    x3 = remove(ZERO, x2)
    x4 = lbind(ofcolor, x1)
    x5 = lbind(prapply, connect)
    x6 = fork(x5, x4, x4)
    x7 = compose(merge, x6)
    x8 = fork(recolor, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_b1948b0a_6e82a1ae(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sizefilter, x2)
    x4 = compose(merge, x3)
    x5 = x4(TWO)
    x6 = x4(THREE)
    x7 = x4(FOUR)
    x8 = fill(x1, THREE, x5)
    x9 = fill(x8, TWO, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_b1948b0a_b2862040(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, NINE)
    x4 = colorfilter(x2, ONE)
    x5 = rbind(bordering, x1)
    x6 = compose(flip, x5)
    x7 = mfilter(x3, x6)
    x8 = rbind(adjacent, x7)
    x9 = mfilter(x4, x8)
    O = fill(x1, EIGHT, x9)
    return O



def solve_b1948b0a_868de0fa(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, F)
    x3 = sfilter(x2, square)
    x4 = compose(even, height)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = merge(x5)
    x8 = merge(x6)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, SEVEN, x8)
    return O



def solve_b1948b0a_681b3aeb(I):
    x1 = replace(I, SIX, TWO)
    x2 = rot270(x1)
    x3 = objects(x2, T, F, T)
    x4 = argmax(x3, size)
    x5 = argmin(x3, size)
    x6 = color(x5)
    x7 = canvas(x6, THREE_BY_THREE)
    x8 = normalize(x4)
    x9 = paint(x7, x8)
    O = rot90(x9)
    return O



def solve_b1948b0a_8e5a5113(I):
    x1 = replace(I, SIX, TWO)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = rot90(x2)
    x4 = rot180(x2)
    x5 = astuple(x3, x4)
    x6 = astuple(FOUR, EIGHT)
    x7 = apply(tojvec, x6)
    x8 = apply(asobject, x5)
    x9 = mpapply(shift, x8, x7)
    O = paint(x1, x9)
    return O



def solve_b1948b0a_025d127b(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = apply(color, x2)
    x4 = merge(x2)
    x5 = lbind(colorfilter, x2)
    x6 = rbind(argmax, rightmost)
    x7 = compose(x6, x5)
    x8 = mapply(x7, x3)
    x9 = difference(x4, x8)
    O = move(x1, x9, RIGHT)
    return O



def solve_b1948b0a_2281f1f4(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, FIVE)
    x3 = product(x2, x2)
    x4 = power(first, TWO)
    x5 = power(last, TWO)
    x6 = fork(astuple, x4, x5)
    x7 = apply(x6, x3)
    x8 = urcorner(x2)
    x9 = remove(x8, x7)
    O = underfill(x1, TWO, x9)
    return O



def solve_b1948b0a_cf98881b(I):
    x1 = replace(I, SIX, TWO)
    x2 = hsplit(x1, THREE)
    x3 = first(x2)
    x4 = remove(x3, x2)
    x5 = first(x4)
    x6 = last(x4)
    x7 = ofcolor(x5, NINE)
    x8 = ofcolor(x3, FOUR)
    x9 = fill(x6, NINE, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_b1948b0a_bda2d7a6(I):
    x1 = replace(I, SIX, TWO)
    x2 = partition(x1)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = last(x3)
    x6 = remove(x5, x3)
    x7 = repeat(x5, ONE)
    x8 = combine(x7, x6)
    x9 = mpapply(recolor, x4, x8)
    O = paint(x1, x9)
    return O



def solve_b1948b0a_6455b5f5(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = argmax(x2, size)
    x5 = valmin(x2, size)
    x6 = sizefilter(x3, x5)
    x7 = recolor(ONE, x4)
    x8 = merge(x6)
    x9 = paint(x1, x7)
    O = fill(x9, EIGHT, x8)
    return O



def solve_b1948b0a_b8cdaf2b(I):
    x1 = replace(I, SIX, TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = shift(x3, UP)
    x5 = ulcorner(x4)
    x6 = urcorner(x4)
    x7 = shoot(x5, NEG_UNITY)
    x8 = shoot(x6, UP_RIGHT)
    x9 = combine(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_b1948b0a_bd4472b8(I):
    x1 = replace(I, SIX, TWO)
    x2 = width(x1)
    x3 = astuple(TWO, x2)
    x4 = crop(x1, ORIGIN, x3)
    x5 = tophalf(x4)
    x6 = dmirror(x5)
    x7 = hupscale(x6, x2)
    x8 = repeat(x7, TWO)
    x9 = merge(x8)
    O = vconcat(x4, x9)
    return O



def solve_b1948b0a_4be741c5(I):
    x1 = replace(I, SIX, TWO)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = branch(x2, height, width)
    x5 = x4(x1)
    x6 = astuple(ONE, x5)
    x7 = x3(x1)
    x8 = crop(x7, ORIGIN, x6)
    x9 = apply(dedupe, x8)
    O = x3(x9)
    return O



def solve_b1948b0a_bbc9ae5d(I):
    x1 = replace(I, SIX, TWO)
    x2 = width(x1)
    x3 = palette(x1)
    x4 = halve(x2)
    x5 = vupscale(x1, x4)
    x6 = rbind(shoot, UNITY)
    x7 = other(x3, ZERO)
    x8 = ofcolor(x5, x7)
    x9 = mapply(x6, x8)
    O = fill(x5, x7, x9)
    return O



def solve_b1948b0a_d90796e8(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, F, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = lbind(contained, TWO)
    x5 = compose(x4, palette)
    x6 = mfilter(x3, x5)
    x7 = cover(x1, x6)
    x8 = matcher(first, THREE)
    x9 = sfilter(x6, x8)
    O = fill(x7, EIGHT, x9)
    return O



def solve_b1948b0a_2c608aff(I):
    x1 = replace(I, SIX, TWO)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = toindices(x4)
    x6 = ofcolor(x1, x2)
    x7 = prapply(connect, x5, x6)
    x8 = fork(either, vline, hline)
    x9 = mfilter(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_b1948b0a_f8b3ba0a(I):
    x1 = replace(I, SIX, TWO)
    x2 = compress(x1)
    x3 = astuple(THREE, ONE)
    x4 = palette(x2)
    x5 = lbind(colorcount, x2)
    x6 = compose(invert, x5)
    x7 = order(x4, x6)
    x8 = rbind(canvas, UNITY)
    x9 = apply(x8, x7)
    x10 = merge(x9)
    O = crop(x10, DOWN, x3)
    return O



def solve_b1948b0a_80af3007(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    x10 = cellwise(x5, x9, ZERO)
    O = downscale(x10, THREE)
    return O



def solve_b1948b0a_83302e8f(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = sfilter(x3, square)
    x5 = difference(x3, x4)
    x6 = merge(x4)
    x7 = recolor(THREE, x6)
    x8 = merge(x5)
    x9 = recolor(FOUR, x8)
    x10 = paint(x1, x7)
    O = paint(x10, x9)
    return O



def solve_b1948b0a_1fad071e(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, ONE)
    x4 = sizefilter(x3, FOUR)
    x5 = size(x4)
    x6 = subtract(FIVE, x5)
    x7 = astuple(ONE, x5)
    x8 = canvas(ONE, x7)
    x9 = astuple(ONE, x6)
    x10 = canvas(ZERO, x9)
    O = hconcat(x8, x10)
    return O



def solve_b1948b0a_11852cab(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = hmirror(x3)
    x5 = vmirror(x3)
    x6 = dmirror(x3)
    x7 = cmirror(x3)
    x8 = paint(x1, x4)
    x9 = paint(x8, x5)
    x10 = paint(x9, x6)
    O = paint(x10, x7)
    return O



def solve_b1948b0a_3428a4f5(I):
    x1 = replace(I, SIX, TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(SIX, FIVE)
    x5 = ofcolor(x2, TWO)
    x6 = ofcolor(x3, TWO)
    x7 = combine(x5, x6)
    x8 = intersection(x5, x6)
    x9 = difference(x7, x8)
    x10 = canvas(ZERO, x4)
    O = fill(x10, THREE, x9)
    return O



def solve_b1948b0a_178fcbfb(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(vfrontier, x3)
    x5 = fill(x1, TWO, x4)
    x6 = colorfilter(x2, TWO)
    x7 = difference(x2, x6)
    x8 = compose(hfrontier, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x7)
    O = paint(x5, x10)
    return O



def solve_b1948b0a_54d9e175(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = compose(neighbors, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x3)
    x7 = paint(x1, x6)
    x8 = replace(x7, ONE, SIX)
    x9 = replace(x8, TWO, SEVEN)
    x10 = replace(x9, THREE, EIGHT)
    O = replace(x10, FOUR, NINE)
    return O



def solve_b1948b0a_5ad4f10b(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = color(x3)
    x5 = subgrid(x3, x1)
    x6 = leastcolor(x5)
    x7 = replace(x5, x6, ZERO)
    x8 = replace(x7, x4, x6)
    x9 = height(x8)
    x10 = divide(x9, THREE)
    O = downscale(x8, x10)
    return O



def solve_b1948b0a_623ea044(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = center(x3)
    x5 = color(x3)
    x6 = astuple(UNITY, NEG_UNITY)
    x7 = astuple(UP_RIGHT, DOWN_LEFT)
    x8 = combine(x6, x7)
    x9 = lbind(shoot, x4)
    x10 = mapply(x9, x8)
    O = fill(x1, x5, x10)
    return O



def solve_b1948b0a_6b9890af(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, TWO)
    x4 = argmin(x2, size)
    x5 = subgrid(x3, x1)
    x6 = width(x5)
    x7 = divide(x6, THREE)
    x8 = upscale(x4, x7)
    x9 = normalize(x8)
    x10 = shift(x9, UNITY)
    O = paint(x5, x10)
    return O



def solve_b1948b0a_794b24be(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, ONE)
    x3 = size(x2)
    x4 = decrement(x3)
    x5 = canvas(ZERO, THREE_BY_THREE)
    x6 = tojvec(x4)
    x7 = connect(ORIGIN, x6)
    x8 = equality(x3, FOUR)
    x9 = insert(UNITY, x7)
    x10 = branch(x8, x9, x7)
    O = fill(x5, TWO, x10)
    return O



def solve_b1948b0a_88a62173(I):
    x1 = replace(I, SIX, TWO)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = tophalf(x3)
    x6 = bottomhalf(x2)
    x7 = bottomhalf(x3)
    x8 = astuple(x4, x5)
    x9 = astuple(x6, x7)
    x10 = combine(x8, x9)
    O = leastcommon(x10)
    return O



def solve_b1948b0a_890034e9(I):
    x1 = replace(I, SIX, TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = inbox(x3)
    x5 = recolor(ZERO, x4)
    x6 = occurrences(x1, x5)
    x7 = normalize(x3)
    x8 = shift(x7, NEG_UNITY)
    x9 = lbind(shift, x8)
    x10 = mapply(x9, x6)
    O = fill(x1, x2, x10)
    return O



def solve_b1948b0a_99b1bc43(I):
    x1 = replace(I, SIX, TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = combine(x4, x5)
    x7 = intersection(x4, x5)
    x8 = difference(x6, x7)
    x9 = shape(x2)
    x10 = canvas(ZERO, x9)
    O = fill(x10, THREE, x8)
    return O



def solve_b1948b0a_a9f96cdd(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = shift(x2, NEG_UNITY)
    x5 = fill(x3, THREE, x4)
    x6 = shift(x2, UP_RIGHT)
    x7 = fill(x5, SIX, x6)
    x8 = shift(x2, DOWN_LEFT)
    x9 = fill(x7, EIGHT, x8)
    x10 = shift(x2, UNITY)
    O = fill(x9, SEVEN, x10)
    return O



def solve_b1948b0a_af902bf9(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, FOUR)
    x3 = prapply(connect, x2, x2)
    x4 = fork(either, vline, hline)
    x5 = mfilter(x3, x4)
    x6 = underfill(x1, NEG_ONE, x5)
    x7 = objects(x6, F, F, T)
    x8 = compose(backdrop, inbox)
    x9 = mapply(x8, x7)
    x10 = fill(x6, TWO, x9)
    O = replace(x10, NEG_ONE, ZERO)
    return O



def solve_b1948b0a_b548a754(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, EIGHT, ZERO)
    x4 = leastcolor(x3)
    x5 = replace(x3, x4, ZERO)
    x6 = leastcolor(x5)
    x7 = merge(x2)
    x8 = backdrop(x7)
    x9 = box(x7)
    x10 = fill(x1, x4, x8)
    O = fill(x10, x6, x9)
    return O



def solve_b1948b0a_c3e719e8(I):
    x1 = replace(I, SIX, TWO)
    x2 = mostcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = upscale(x1, THREE)
    x5 = ofcolor(x4, x2)
    x6 = asindices(x4)
    x7 = difference(x6, x5)
    x8 = hconcat(x3, x1)
    x9 = vconcat(x8, x8)
    x10 = vconcat(x9, x8)
    O = fill(x10, ZERO, x7)
    return O



def solve_b1948b0a_de1cd16c(I):
    x1 = replace(I, SIX, TWO)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = rbind(subgrid, x1)
    x7 = apply(x6, x5)
    x8 = rbind(colorcount, x2)
    x9 = argmax(x7, x8)
    x10 = mostcolor(x9)
    O = canvas(x10, UNITY)
    return O



def solve_b1948b0a_d8c310e9(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = hperiod(x3)
    x5 = multiply(x4, THREE)
    x6 = tojvec(x4)
    x7 = tojvec(x5)
    x8 = shift(x3, x6)
    x9 = shift(x3, x7)
    x10 = paint(x1, x8)
    O = paint(x10, x9)
    return O



def solve_b1948b0a_a3325580(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = valmax(x2, size)
    x4 = sizefilter(x2, x3)
    x5 = order(x4, leftmost)
    x6 = apply(color, x5)
    x7 = astuple(ONE, x3)
    x8 = rbind(canvas, x7)
    x9 = apply(x8, x6)
    x10 = merge(x9)
    O = dmirror(x10)
    return O



def solve_b1948b0a_8eb1be9a(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = interval(NEG_TWO, FOUR, ONE)
    x5 = lbind(shift, x3)
    x6 = height(x3)
    x7 = rbind(multiply, x6)
    x8 = apply(x7, x4)
    x9 = apply(toivec, x8)
    x10 = mapply(x5, x9)
    O = paint(x1, x10)
    return O



def solve_b1948b0a_321b1fc6(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, F, F, T)
    x3 = colorfilter(x2, EIGHT)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = cover(x1, x5)
    x7 = normalize(x5)
    x8 = lbind(shift, x7)
    x9 = apply(ulcorner, x3)
    x10 = mapply(x8, x9)
    O = paint(x6, x10)
    return O



def solve_b1948b0a_1b60fb0c(I):
    x1 = replace(I, SIX, TWO)
    x2 = rot90(x1)
    x3 = ofcolor(x1, ONE)
    x4 = ofcolor(x2, ONE)
    x5 = neighbors(ORIGIN)
    x6 = mapply(neighbors, x5)
    x7 = lbind(shift, x4)
    x8 = apply(x7, x6)
    x9 = lbind(intersection, x3)
    x10 = compose(size, x9)
    x11 = argmax(x8, x10)
    O = underfill(x1, TWO, x11)
    return O



def solve_b1948b0a_ddf7fa4f(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = colorfilter(x2, FIVE)
    x5 = product(x3, x4)
    x6 = fork(vmatching, first, last)
    x7 = sfilter(x5, x6)
    x8 = compose(color, first)
    x9 = fork(recolor, x8, last)
    x10 = mapply(x9, x7)
    O = paint(x1, x10)
    return O



def solve_b1948b0a_47c1f68c(I):
    x1 = replace(I, SIX, TWO)
    x2 = leastcolor(x1)
    x3 = vmirror(x1)
    x4 = objects(x1, T, T, T)
    x5 = merge(x4)
    x6 = mostcolor(x5)
    x7 = cellwise(x1, x3, x2)
    x8 = hmirror(x7)
    x9 = cellwise(x7, x8, x2)
    x10 = compress(x9)
    O = replace(x10, x2, x6)
    return O



def solve_b1948b0a_6c434453(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, EIGHT)
    x4 = dneighbors(UNITY)
    x5 = insert(UNITY, x4)
    x6 = merge(x3)
    x7 = cover(x1, x6)
    x8 = apply(ulcorner, x3)
    x9 = lbind(shift, x5)
    x10 = mapply(x9, x8)
    O = fill(x7, TWO, x10)
    return O



def solve_b1948b0a_23581191(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = paint(x1, x6)
    x8 = fork(intersection, first, last)
    x9 = apply(x4, x2)
    x10 = x8(x9)
    O = fill(x7, TWO, x10)
    return O



def solve_b1948b0a_c8cbb738(I):
    x1 = replace(I, SIX, TWO)
    x2 = mostcolor(x1)
    x3 = fgpartition(x1)
    x4 = valmax(x3, shape)
    x5 = canvas(x2, x4)
    x6 = apply(normalize, x3)
    x7 = lbind(subtract, x4)
    x8 = chain(halve, x7, shape)
    x9 = fork(shift, identity, x8)
    x10 = mapply(x9, x6)
    O = paint(x5, x10)
    return O



def solve_b1948b0a_d4469b4b(I):
    x1 = replace(I, SIX, TWO)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = equality(x3, ONE)
    x5 = equality(x3, TWO)
    x6 = branch(x4, UNITY, TWO_BY_TWO)
    x7 = branch(x5, RIGHT, x6)
    x8 = fork(combine, vfrontier, hfrontier)
    x9 = x8(x7)
    x10 = canvas(ZERO, THREE_BY_THREE)
    O = fill(x10, FIVE, x9)
    return O



def solve_b1948b0a_6ecd11f4(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = subgrid(x3, x1)
    x6 = subgrid(x4, x1)
    x7 = width(x5)
    x8 = width(x6)
    x9 = divide(x7, x8)
    x10 = downscale(x5, x9)
    x11 = ofcolor(x10, ZERO)
    O = fill(x6, ZERO, x11)
    return O



def solve_b1948b0a_eb281b96(I):
    x1 = replace(I, SIX, TWO)
    x2 = height(x1)
    x3 = width(x1)
    x4 = decrement(x2)
    x5 = astuple(x4, x3)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    x8 = vconcat(x1, x7)
    x9 = double(x4)
    x10 = astuple(x9, x3)
    x11 = crop(x8, DOWN, x10)
    O = vconcat(x8, x11)
    return O



def solve_b1948b0a_ff28f65a(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = double(x3)
    x5 = interval(ZERO, x4, TWO)
    x6 = apply(tojvec, x5)
    x7 = astuple(ONE, NINE)
    x8 = canvas(ZERO, x7)
    x9 = fill(x8, ONE, x6)
    x10 = hsplit(x9, THREE)
    O = merge(x10)
    return O



def solve_b1948b0a_7e0986d6(I):
    x1 = replace(I, SIX, TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = replace(x1, x2, ZERO)
    x5 = leastcolor(x4)
    x6 = rbind(colorcount, x5)
    x7 = chain(positive, decrement, x6)
    x8 = rbind(toobject, x4)
    x9 = chain(x7, x8, dneighbors)
    x10 = sfilter(x3, x9)
    O = fill(x4, x5, x10)
    return O



def solve_b1948b0a_09629e4f(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, F, T, T)
    x3 = argmin(x2, numcolors)
    x4 = normalize(x3)
    x5 = upscale(x4, FOUR)
    x6 = paint(x1, x5)
    x7 = ofcolor(x1, FIVE)
    O = fill(x6, FIVE, x7)
    return O



def solve_b1948b0a_a85d4709(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, FIVE)
    x3 = lbind(matcher, last)
    x4 = lbind(sfilter, x2)
    x5 = lbind(mapply, hfrontier)
    x6 = chain(x5, x4, x3)
    x7 = x6(ZERO)
    x8 = x6(TWO)
    x9 = x6(ONE)
    x10 = fill(x1, TWO, x7)
    x11 = fill(x10, THREE, x8)
    O = fill(x11, FOUR, x9)
    return O



def solve_b1948b0a_feca6190(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = multiply(x3, FIVE)
    x5 = astuple(x4, x4)
    x6 = canvas(ZERO, x5)
    x7 = rbind(shoot, UNITY)
    x8 = compose(x7, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x2)
    x11 = paint(x6, x10)
    O = hmirror(x11)
    return O



def solve_b1948b0a_a68b268e(I):
    x1 = replace(I, SIX, TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = lefthalf(x2)
    x5 = righthalf(x2)
    x6 = lefthalf(x3)
    x7 = righthalf(x3)
    x8 = ofcolor(x5, FOUR)
    x9 = ofcolor(x4, SEVEN)
    x10 = ofcolor(x6, EIGHT)
    x11 = fill(x7, EIGHT, x10)
    x12 = fill(x11, FOUR, x8)
    O = fill(x12, SEVEN, x9)
    return O



def solve_b1948b0a_beb8660c(I):
    x1 = replace(I, SIX, TWO)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(invert, size)
    x5 = order(x3, x4)
    x6 = apply(normalize, x5)
    x7 = size(x6)
    x8 = interval(ZERO, x7, ONE)
    x9 = apply(toivec, x8)
    x10 = mpapply(shift, x6, x9)
    x11 = canvas(ZERO, x2)
    x12 = paint(x11, x10)
    O = rot180(x12)
    return O



def solve_b1948b0a_913fb3ed(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, THREE)
    x3 = ofcolor(x1, EIGHT)
    x4 = ofcolor(x1, TWO)
    x5 = mapply(neighbors, x2)
    x6 = mapply(neighbors, x3)
    x7 = mapply(neighbors, x4)
    x8 = fill(x1, SIX, x5)
    x9 = fill(x8, FOUR, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_b1948b0a_0962bcdd(I):
    x1 = replace(I, SIX, TWO)
    x2 = leastcolor(x1)
    x3 = replace(x1, ZERO, x2)
    x4 = leastcolor(x3)
    x5 = ofcolor(x1, x4)
    x6 = mapply(dneighbors, x5)
    x7 = fill(x1, x4, x6)
    x8 = objects(x7, F, T, T)
    x9 = fork(connect, ulcorner, lrcorner)
    x10 = fork(connect, llcorner, urcorner)
    x11 = fork(combine, x9, x10)
    x12 = mapply(x11, x8)
    O = fill(x7, x2, x12)
    return O



def solve_b1948b0a_3631a71a(I):
    x1 = replace(I, SIX, TWO)
    x2 = shape(x1)
    x3 = replace(x1, NINE, ZERO)
    x4 = lbind(apply, maximum)
    x5 = dmirror(x3)
    x6 = papply(pair, x3, x5)
    x7 = apply(x4, x6)
    x8 = subtract(x2, TWO_BY_TWO)
    x9 = crop(x7, TWO_BY_TWO, x8)
    x10 = vmirror(x9)
    x11 = objects(x10, T, F, T)
    x12 = merge(x11)
    x13 = shift(x12, TWO_BY_TWO)
    O = paint(x7, x13)
    return O



def solve_b1948b0a_05269061(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = neighbors(ORIGIN)
    x4 = mapply(neighbors, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = merge(x2)
    x8 = lbind(shift, x7)
    x9 = mapply(x8, x6)
    x10 = shift(x9, UP_RIGHT)
    x11 = shift(x9, DOWN_LEFT)
    x12 = paint(x1, x9)
    x13 = paint(x12, x10)
    O = paint(x13, x11)
    return O



def solve_b1948b0a_95990924(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = apply(ulcorner, x3)
    x5 = apply(urcorner, x3)
    x6 = apply(llcorner, x3)
    x7 = apply(lrcorner, x3)
    x8 = fill(x1, ONE, x4)
    x9 = fill(x8, TWO, x5)
    x10 = fill(x9, THREE, x6)
    O = fill(x10, FOUR, x7)
    return O



def solve_b1948b0a_e509e548(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = rbind(subgrid, x1)
    x4 = chain(palette, trim, x3)
    x5 = lbind(contained, THREE)
    x6 = compose(x5, x4)
    x7 = fork(add, height, width)
    x8 = compose(decrement, x7)
    x9 = fork(equality, size, x8)
    x10 = mfilter(x2, x6)
    x11 = mfilter(x2, x9)
    x12 = replace(x1, THREE, SIX)
    x13 = fill(x12, TWO, x10)
    O = fill(x13, ONE, x11)
    return O



def solve_b1948b0a_d43fd935(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, THREE)
    x4 = sizefilter(x2, ONE)
    x5 = rbind(vmatching, x3)
    x6 = rbind(hmatching, x3)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = rbind(gravitate, x3)
    x10 = fork(add, center, x9)
    x11 = fork(connect, center, x10)
    x12 = fork(recolor, color, x11)
    x13 = mapply(x12, x8)
    O = paint(x1, x13)
    return O



def solve_b1948b0a_db3e9e38(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, SEVEN)
    x3 = lrcorner(x2)
    x4 = shoot(x3, UP_RIGHT)
    x5 = shoot(x3, NEG_UNITY)
    x6 = combine(x4, x5)
    x7 = rbind(shoot, UP)
    x8 = mapply(x7, x6)
    x9 = last(x3)
    x10 = rbind(subtract, x9)
    x11 = chain(even, x10, last)
    x12 = fill(x1, EIGHT, x8)
    x13 = sfilter(x8, x11)
    O = fill(x12, SEVEN, x13)
    return O



def solve_b1948b0a_e73095fd(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = fork(equality, toindices, backdrop)
    x5 = sfilter(x3, x4)
    x6 = lbind(mapply, dneighbors)
    x7 = chain(x6, corners, outbox)
    x8 = fork(difference, x7, outbox)
    x9 = ofcolor(x1, FIVE)
    x10 = rbind(intersection, x9)
    x11 = matcher(size, ZERO)
    x12 = chain(x11, x10, x8)
    x13 = mfilter(x5, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_b1948b0a_1bfc4729(I):
    x1 = replace(I, SIX, TWO)
    x2 = asindices(x1)
    x3 = tophalf(x1)
    x4 = bottomhalf(x1)
    x5 = leastcolor(x3)
    x6 = leastcolor(x4)
    x7 = hfrontier(TWO_BY_ZERO)
    x8 = box(x2)
    x9 = combine(x7, x8)
    x10 = fill(x3, x5, x9)
    x11 = hmirror(x10)
    x12 = replace(x11, x5, x6)
    O = vconcat(x10, x12)
    return O



def solve_b1948b0a_93b581b8(I):
    x1 = replace(I, SIX, TWO)
    x2 = fgpartition(x1)
    x3 = chain(cmirror, dmirror, merge)
    x4 = x3(x2)
    x5 = upscale(x4, THREE)
    x6 = astuple(NEG_TWO, NEG_TWO)
    x7 = shift(x5, x6)
    x8 = underpaint(x1, x7)
    x9 = toindices(x4)
    x10 = fork(combine, hfrontier, vfrontier)
    x11 = mapply(x10, x9)
    x12 = difference(x11, x9)
    O = fill(x8, ZERO, x12)
    return O



def solve_b1948b0a_9edfc990(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = ofcolor(x1, ONE)
    x5 = rbind(adjacent, x4)
    x6 = mfilter(x3, x5)
    x7 = recolor(ONE, x6)
    O = paint(x1, x7)
    return O



def solve_b1948b0a_a65b410d(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, TWO)
    x3 = urcorner(x2)
    x4 = shoot(x3, UP_RIGHT)
    x5 = shoot(x3, DOWN_LEFT)
    x6 = underfill(x1, THREE, x4)
    x7 = underfill(x6, ONE, x5)
    x8 = rbind(shoot, LEFT)
    x9 = mapply(x8, x4)
    x10 = mapply(x8, x5)
    x11 = underfill(x7, ONE, x10)
    O = underfill(x11, THREE, x9)
    return O



def solve_b1948b0a_7447852a(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = compose(last, center)
    x5 = order(x3, x4)
    x6 = size(x5)
    x7 = interval(ZERO, x6, THREE)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = interval(ZERO, x6, ONE)
    x11 = pair(x5, x10)
    x12 = sfilter(x11, x9)
    x13 = mapply(first, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_b1948b0a_97999447(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = apply(toindices, x2)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    x8 = paint(x1, x7)
    x9 = interval(ZERO, FIVE, ONE)
    x10 = apply(double, x9)
    x11 = apply(increment, x10)
    x12 = apply(tojvec, x11)
    x13 = prapply(shift, x3, x12)
    x14 = merge(x13)
    O = fill(x8, FIVE, x14)
    return O



def solve_b1948b0a_91714a58(I):
    x1 = replace(I, SIX, TWO)
    x2 = shape(x1)
    x3 = asindices(x1)
    x4 = objects(x1, T, F, T)
    x5 = argmax(x4, size)
    x6 = mostcolor(x5)
    x7 = canvas(ZERO, x2)
    x8 = paint(x7, x5)
    x9 = rbind(toobject, x8)
    x10 = rbind(colorcount, x6)
    x11 = chain(x10, x9, neighbors)
    x12 = lbind(greater, THREE)
    x13 = compose(x12, x11)
    x14 = sfilter(x3, x13)
    O = fill(x8, ZERO, x14)
    return O



def solve_b1948b0a_8e1813be(I):
    x1 = replace(I, SIX, TWO)
    x2 = replace(x1, FIVE, ZERO)
    x3 = objects(x2, T, T, T)
    x4 = first(x3)
    x5 = vline(x4)
    x6 = branch(x5, dmirror, identity)
    x7 = x6(x2)
    x8 = objects(x7, T, T, T)
    x9 = order(x8, uppermost)
    x10 = apply(color, x9)
    x11 = dedupe(x10)
    x12 = size(x11)
    x13 = rbind(repeat, x12)
    x14 = apply(x13, x11)
    O = x6(x14)
    return O



def solve_b1948b0a_bc1d5164(I):
    x1 = replace(I, SIX, TWO)
    x2 = leastcolor(x1)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = crop(x1, TWO_BY_ZERO, THREE_BY_THREE)
    x5 = tojvec(FOUR)
    x6 = crop(x1, x5, THREE_BY_THREE)
    x7 = astuple(TWO, FOUR)
    x8 = crop(x1, x7, THREE_BY_THREE)
    x9 = canvas(ZERO, THREE_BY_THREE)
    x10 = rbind(ofcolor, x2)
    x11 = astuple(x3, x4)
    x12 = astuple(x6, x8)
    x13 = combine(x11, x12)
    x14 = mapply(x10, x13)
    O = fill(x9, x2, x14)
    return O



def solve_b1948b0a_5c2c9af4(I):
    x1 = replace(I, SIX, TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = center(x3)
    x5 = ulcorner(x3)
    x6 = subtract(x4, x5)
    x7 = multiply(NEG_ONE, NINE)
    x8 = interval(ZERO, NINE, ONE)
    x9 = interval(ZERO, x7, NEG_ONE)
    x10 = lbind(multiply, x6)
    x11 = apply(x10, x8)
    x12 = apply(x10, x9)
    x13 = pair(x11, x12)
    x14 = mapply(box, x13)
    x15 = shift(x14, x4)
    O = fill(x1, x2, x15)
    return O



def solve_b1948b0a_75b8110e(I):
    x1 = replace(I, SIX, TWO)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = bottomhalf(x2)
    x6 = tophalf(x3)
    x7 = bottomhalf(x3)
    x8 = rbind(ofcolor, ZERO)
    x9 = fork(difference, asindices, x8)
    x10 = fork(toobject, x9, identity)
    x11 = x10(x6)
    x12 = x10(x5)
    x13 = x10(x7)
    x14 = paint(x4, x13)
    x15 = paint(x14, x12)
    O = paint(x15, x11)
    return O



def solve_b1948b0a_c3f564a4(I):
    x1 = replace(I, SIX, TWO)
    x2 = asindices(x1)
    x3 = dmirror(x1)
    x4 = invert(NINE)
    x5 = papply(pair, x1, x3)
    x6 = lbind(apply, maximum)
    x7 = apply(x6, x5)
    x8 = ofcolor(x7, ZERO)
    x9 = difference(x2, x8)
    x10 = toobject(x9, x7)
    x11 = interval(x4, NINE, ONE)
    x12 = interval(NINE, x4, NEG_ONE)
    x13 = pair(x11, x12)
    x14 = lbind(shift, x10)
    x15 = mapply(x14, x13)
    O = paint(x7, x15)
    return O



def solve_b1948b0a_1a07d186(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = mapply(x12, x8)
    x14 = merge(x3)
    x15 = cover(x1, x14)
    O = paint(x15, x13)
    return O



def solve_b1948b0a_d687bc17(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = merge(x3)
    x14 = mapply(x12, x8)
    x15 = cover(x1, x13)
    O = paint(x15, x14)
    return O



def solve_b1948b0a_9af7a82c(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, F)
    x3 = order(x2, size)
    x4 = valmax(x2, size)
    x5 = rbind(astuple, ONE)
    x6 = lbind(subtract, x4)
    x7 = compose(x5, size)
    x8 = chain(x5, x6, size)
    x9 = fork(canvas, color, x7)
    x10 = lbind(canvas, ZERO)
    x11 = compose(x10, x8)
    x12 = fork(vconcat, x9, x11)
    x13 = compose(cmirror, x12)
    x14 = apply(x13, x3)
    x15 = merge(x14)
    O = cmirror(x15)
    return O



def solve_b1948b0a_ef135b50(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, ZERO)
    x4 = product(x2, x2)
    x5 = power(first, TWO)
    x6 = compose(first, last)
    x7 = fork(equality, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = fork(connect, first, last)
    x10 = mapply(x9, x8)
    x11 = intersection(x10, x3)
    x12 = fill(x1, NINE, x11)
    x13 = trim(x12)
    x14 = asobject(x13)
    x15 = shift(x14, UNITY)
    O = paint(x1, x15)
    return O



def solve_b1948b0a_cbded52d(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = product(x3, x3)
    x5 = fork(vmatching, first, last)
    x6 = fork(hmatching, first, last)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = compose(center, first)
    x10 = compose(center, last)
    x11 = fork(connect, x9, x10)
    x12 = chain(initset, center, x11)
    x13 = compose(color, first)
    x14 = fork(recolor, x13, x12)
    x15 = mapply(x14, x8)
    O = paint(x1, x15)
    return O



def solve_b1948b0a_e26a3af2(I):
    x1 = replace(I, SIX, TWO)
    x2 = rot90(x1)
    x3 = apply(mostcommon, x1)
    x4 = apply(mostcommon, x2)
    x5 = repeat(x3, ONE)
    x6 = repeat(x4, ONE)
    x7 = compose(size, dedupe)
    x8 = x7(x3)
    x9 = x7(x4)
    x10 = greater(x9, x8)
    x11 = branch(x10, height, width)
    x12 = x11(x1)
    x13 = rot90(x5)
    x14 = branch(x10, x6, x13)
    x15 = branch(x10, vupscale, hupscale)
    O = x15(x14, x12)
    return O



def solve_b1948b0a_6cf79266(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, ZERO)
    x3 = astuple(ZERO, ORIGIN)
    x4 = initset(x3)
    x5 = upscale(x4, THREE)
    x6 = toindices(x5)
    x7 = lbind(shift, x6)
    x8 = rbind(difference, x2)
    x9 = chain(size, x8, x7)
    x10 = matcher(x9, ZERO)
    x11 = lbind(add, NEG_UNITY)
    x12 = chain(flip, x10, x11)
    x13 = fork(both, x10, x12)
    x14 = sfilter(x2, x13)
    x15 = mapply(x7, x14)
    O = fill(x1, ONE, x15)
    return O



def solve_b1948b0a_a87f7484(I):
    x1 = replace(I, SIX, TWO)
    x2 = numcolors(x1)
    x3 = portrait(x1)
    x4 = branch(x3, dmirror, identity)
    x5 = x4(x1)
    x6 = decrement(x2)
    x7 = hsplit(x5, x6)
    x8 = rbind(ofcolor, ZERO)
    x9 = apply(x8, x7)
    x10 = leastcommon(x9)
    x11 = matcher(x8, x10)
    x12 = extract(x7, x11)
    O = x4(x12)
    return O



def solve_b1948b0a_4093f84a(I):
    x1 = replace(I, SIX, TWO)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, FIVE)
    x4 = ofcolor(x1, FIVE)
    x5 = portrait(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x3)
    x8 = lefthalf(x7)
    x9 = righthalf(x7)
    x10 = rbind(order, identity)
    x11 = rbind(order, invert)
    x12 = apply(x10, x8)
    x13 = apply(x11, x9)
    x14 = hconcat(x12, x13)
    O = x6(x14)
    return O



def solve_b1948b0a_ba26e723(I):
    x1 = replace(I, SIX, TWO)
    x2 = rbind(divide, THREE)
    x3 = rbind(multiply, THREE)
    x4 = compose(x3, x2)
    x5 = fork(equality, identity, x4)
    x6 = compose(x5, last)
    x7 = ofcolor(x1, FOUR)
    x8 = sfilter(x7, x6)
    O = fill(x1, SIX, x8)
    return O



def solve_b1948b0a_29c11459(I):
    x1 = replace(I, SIX, TWO)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = objects(x3, T, F, T)
    x5 = objects(x2, T, F, T)
    x6 = compose(hfrontier, center)
    x7 = fork(recolor, color, x6)
    x8 = mapply(x7, x5)
    x9 = paint(x2, x8)
    x10 = mapply(x7, x4)
    x11 = paint(x1, x10)
    x12 = objects(x9, T, F, T)
    x13 = apply(urcorner, x12)
    x14 = shift(x13, RIGHT)
    x15 = merge(x12)
    x16 = paint(x11, x15)
    O = fill(x16, FIVE, x14)
    return O



def solve_b1948b0a_963e52fc(I):
    x1 = replace(I, SIX, TWO)
    x2 = width(x1)
    x3 = asobject(x1)
    x4 = hperiod(x3)
    x5 = height(x3)
    x6 = astuple(x5, x4)
    x7 = ulcorner(x3)
    x8 = crop(x1, x7, x6)
    x9 = rot90(x8)
    x10 = double(x2)
    x11 = divide(x10, x4)
    x12 = increment(x11)
    x13 = repeat(x9, x12)
    x14 = merge(x13)
    x15 = rot270(x14)
    x16 = astuple(x5, x10)
    O = crop(x15, ORIGIN, x16)
    return O



def solve_b1948b0a_1f0c79e5(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = leastcolor(x3)
    x5 = ofcolor(x3, x4)
    x6 = combine(x2, x5)
    x7 = recolor(x4, x6)
    x8 = compose(decrement, double)
    x9 = ulcorner(x6)
    x10 = invert(x9)
    x11 = shift(x2, x10)
    x12 = apply(x8, x11)
    x13 = interval(ZERO, NINE, ONE)
    x14 = prapply(multiply, x12, x13)
    x15 = lbind(shift, x7)
    x16 = mapply(x15, x14)
    O = paint(x1, x16)
    return O



def solve_b1948b0a_6773b310(I):
    x1 = replace(I, SIX, TWO)
    x2 = compress(x1)
    x3 = neighbors(ORIGIN)
    x4 = insert(ORIGIN, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = astuple(FOUR, FOUR)
    x8 = shift(x6, x7)
    x9 = fork(insert, identity, neighbors)
    x10 = apply(x9, x8)
    x11 = rbind(toobject, x2)
    x12 = apply(x11, x10)
    x13 = rbind(colorcount, SIX)
    x14 = matcher(x13, TWO)
    x15 = mfilter(x12, x14)
    x16 = fill(x2, ONE, x15)
    x17 = replace(x16, SIX, ZERO)
    O = downscale(x17, THREE)
    return O



def solve_b1948b0a_780d0b14(I):
    x1 = replace(I, SIX, TWO)
    x2 = asindices(x1)
    x3 = objects(x1, T, T, T)
    x4 = rbind(greater, TWO)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = totuple(x6)
    x8 = apply(color, x7)
    x9 = apply(center, x7)
    x10 = pair(x8, x9)
    x11 = fill(x1, ZERO, x2)
    x12 = paint(x11, x10)
    x13 = rbind(greater, ONE)
    x14 = compose(dedupe, totuple)
    x15 = chain(x13, size, x14)
    x16 = sfilter(x12, x15)
    x17 = rot90(x16)
    x18 = sfilter(x17, x15)
    O = rot270(x18)
    return O



def solve_b1948b0a_2204b7a8(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sfilter, x2)
    x4 = compose(size, x3)
    x5 = x4(vline)
    x6 = x4(hline)
    x7 = greater(x5, x6)
    x8 = branch(x7, lefthalf, tophalf)
    x9 = branch(x7, righthalf, bottomhalf)
    x10 = branch(x7, hconcat, vconcat)
    x11 = x8(x1)
    x12 = x9(x1)
    x13 = index(x11, ORIGIN)
    x14 = shape(x12)
    x15 = decrement(x14)
    x16 = index(x12, x15)
    x17 = replace(x11, THREE, x13)
    x18 = replace(x12, THREE, x16)
    O = x10(x17, x18)
    return O



def solve_b1948b0a_d9f24cd1(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, FIVE)
    x4 = prapply(connect, x2, x3)
    x5 = mfilter(x4, vline)
    x6 = underfill(x1, TWO, x5)
    x7 = matcher(numcolors, TWO)
    x8 = objects(x6, F, F, T)
    x9 = sfilter(x8, x7)
    x10 = difference(x8, x9)
    x11 = colorfilter(x10, TWO)
    x12 = mapply(toindices, x11)
    x13 = apply(urcorner, x9)
    x14 = shift(x13, UNITY)
    x15 = rbind(shoot, UP)
    x16 = mapply(x15, x14)
    x17 = fill(x6, TWO, x16)
    x18 = mapply(vfrontier, x12)
    O = fill(x17, TWO, x18)
    return O



def solve_b1948b0a_b782dc8a(I):
    x1 = replace(I, SIX, TWO)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = ofcolor(x1, x2)
    x5 = first(x4)
    x6 = dneighbors(x5)
    x7 = toobject(x6, x1)
    x8 = mostcolor(x7)
    x9 = ofcolor(x1, x8)
    x10 = colorfilter(x3, ZERO)
    x11 = rbind(adjacent, x9)
    x12 = mfilter(x10, x11)
    x13 = toindices(x12)
    x14 = rbind(manhattan, x4)
    x15 = chain(even, x14, initset)
    x16 = sfilter(x13, x15)
    x17 = difference(x13, x16)
    x18 = fill(x1, x2, x16)
    O = fill(x18, x8, x17)
    return O



def solve_b1948b0a_673ef223(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, EIGHT)
    x4 = replace(x1, EIGHT, FOUR)
    x5 = colorfilter(x2, TWO)
    x6 = argmin(x2, uppermost)
    x7 = apply(uppermost, x5)
    x8 = fork(subtract, maximum, minimum)
    x9 = x8(x7)
    x10 = toivec(x9)
    x11 = leftmost(x6)
    x12 = equality(x11, ZERO)
    x13 = branch(x12, LEFT, RIGHT)
    x14 = rbind(shoot, x13)
    x15 = mapply(x14, x3)
    x16 = underfill(x4, EIGHT, x15)
    x17 = shift(x3, x10)
    x18 = mapply(hfrontier, x17)
    O = underfill(x16, EIGHT, x18)
    return O



def solve_b1948b0a_f5b8619d(I):
    x1 = replace(I, SIX, TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = mapply(vfrontier, x3)
    x5 = underfill(x1, EIGHT, x4)
    x6 = hconcat(x5, x5)
    O = vconcat(x6, x6)
    return O



def solve_b1948b0a_f8c80d96(I):
    x1 = replace(I, SIX, TWO)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = colorfilter(x3, x2)
    x5 = argmax(x4, size)
    x6 = argmin(x3, width)
    x7 = size(x6)
    x8 = equality(x7, ONE)
    x9 = branch(x8, identity, outbox)
    x10 = chain(outbox, outbox, x9)
    x11 = power(x10, TWO)
    x12 = power(x10, THREE)
    x13 = x10(x5)
    x14 = x11(x5)
    x15 = x12(x5)
    x16 = fill(x1, x2, x13)
    x17 = fill(x16, x2, x14)
    x18 = fill(x17, x2, x15)
    O = replace(x18, ZERO, FIVE)
    return O



def solve_b1948b0a_ecdecbb3(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = colorfilter(x2, EIGHT)
    x5 = product(x3, x4)
    x6 = fork(gravitate, first, last)
    x7 = compose(crement, x6)
    x8 = compose(center, first)
    x9 = fork(add, x8, x7)
    x10 = fork(connect, x8, x9)
    x11 = apply(x10, x5)
    x12 = lbind(greater, EIGHT)
    x13 = compose(x12, size)
    x14 = mfilter(x11, x13)
    x15 = fill(x1, TWO, x14)
    x16 = apply(x9, x5)
    x17 = intersection(x14, x16)
    x18 = mapply(neighbors, x17)
    O = fill(x15, EIGHT, x18)
    return O



def solve_b1948b0a_e5062a87(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, TWO)
    x3 = recolor(ZERO, x2)
    x4 = normalize(x3)
    x5 = occurrences(x1, x3)
    x6 = lbind(shift, x4)
    x7 = apply(x6, x5)
    x8 = astuple(ONE, THREE)
    x9 = astuple(FIVE, ONE)
    x10 = astuple(TWO, SIX)
    x11 = initset(x8)
    x12 = insert(x9, x11)
    x13 = insert(x10, x12)
    x14 = rbind(contained, x13)
    x15 = chain(flip, x14, ulcorner)
    x16 = sfilter(x7, x15)
    x17 = merge(x16)
    x18 = recolor(TWO, x17)
    O = paint(x1, x18)
    return O



def solve_b1948b0a_a8d7556c(I):
    x1 = replace(I, SIX, TWO)
    x2 = initset(ORIGIN)
    x3 = recolor(ZERO, x2)
    x4 = upscale(x3, TWO)
    x5 = occurrences(x1, x4)
    x6 = lbind(shift, x4)
    x7 = mapply(x6, x5)
    x8 = fill(x1, TWO, x7)
    x9 = add(SIX, SIX)
    x10 = astuple(EIGHT, x9)
    x11 = index(x8, x10)
    x12 = equality(x11, TWO)
    x13 = initset(x10)
    x14 = add(x10, DOWN)
    x15 = insert(x14, x13)
    x16 = toobject(x15, x8)
    x17 = toobject(x15, x1)
    x18 = branch(x12, x17, x16)
    O = paint(x8, x18)
    return O



def solve_b1948b0a_4938f0c2(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, TWO)
    x4 = vmirror(x3)
    x5 = height(x3)
    x6 = width(x3)
    x7 = toivec(x5)
    x8 = tojvec(x6)
    x9 = add(x8, ZERO_BY_TWO)
    x10 = add(x7, TWO_BY_ZERO)
    x11 = shift(x4, x9)
    x12 = fill(x1, TWO, x11)
    x13 = ofcolor(x12, TWO)
    x14 = hmirror(x13)
    x15 = shift(x14, x10)
    x16 = fill(x12, TWO, x15)
    x17 = size(x2)
    x18 = greater(x17, FOUR)
    O = branch(x18, x1, x16)
    return O



def solve_b1948b0a_834ec97d(I):
    x1 = replace(I, SIX, TWO)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = shift(x4, DOWN)
    x6 = fill(x1, ZERO, x4)
    x7 = paint(x6, x5)
    x8 = uppermost(x5)
    x9 = leftmost(x5)
    x10 = subtract(x9, TEN)
    x11 = add(x9, TEN)
    x12 = interval(x10, x11, TWO)
    x13 = lbind(greater, x8)
    x14 = compose(x13, first)
    x15 = rbind(contained, x12)
    x16 = compose(x15, last)
    x17 = sfilter(x2, x14)
    x18 = sfilter(x17, x16)
    O = fill(x7, FOUR, x18)
    return O



def solve_b1948b0a_90f3ed37(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, uppermost)
    x4 = first(x3)
    x5 = remove(x4, x3)
    x6 = normalize(x4)
    x7 = lbind(shift, x6)
    x8 = compose(x7, ulcorner)
    x9 = interval(TWO, NEG_ONE, NEG_ONE)
    x10 = apply(tojvec, x9)
    x11 = rbind(apply, x10)
    x12 = lbind(compose, size)
    x13 = lbind(lbind, intersection)
    x14 = compose(x12, x13)
    x15 = lbind(lbind, shift)
    x16 = chain(x11, x15, x8)
    x17 = fork(argmax, x16, x14)
    x18 = mapply(x17, x5)
    O = underfill(x1, ONE, x18)
    return O



def solve_b1948b0a_8403a5d5(I):
    x1 = replace(I, SIX, TWO)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = color(x4)
    x6 = leftmost(x4)
    x7 = interval(x6, TEN, TWO)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = sfilter(x2, x9)
    x11 = increment(x6)
    x12 = add(x6, THREE)
    x13 = interval(x11, TEN, FOUR)
    x14 = interval(x12, TEN, FOUR)
    x15 = lbind(astuple, NINE)
    x16 = apply(tojvec, x13)
    x17 = apply(x15, x14)
    x18 = fill(x1, x5, x10)
    x19 = fill(x18, FIVE, x16)
    O = fill(x19, FIVE, x17)
    return O



def solve_b1948b0a_539a4f51(I):
    x1 = replace(I, SIX, TWO)
    x2 = shape(x1)
    x3 = index(x1, ORIGIN)
    x4 = colorcount(x1, ZERO)
    x5 = decrement(x2)
    x6 = positive(x4)
    x7 = branch(x6, x5, x2)
    x8 = crop(x1, ORIGIN, x7)
    x9 = width(x8)
    x10 = astuple(ONE, x9)
    x11 = crop(x8, ORIGIN, x10)
    x12 = vupscale(x11, x9)
    x13 = dmirror(x12)
    x14 = hconcat(x8, x12)
    x15 = hconcat(x13, x8)
    x16 = vconcat(x14, x15)
    x17 = asobject(x16)
    x18 = multiply(UNITY, TEN)
    x19 = canvas(x3, x18)
    O = paint(x19, x17)
    return O



def solve_b1948b0a_3bdb4ada(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = compose(increment, ulcorner)
    x5 = compose(decrement, lrcorner)
    x6 = apply(x4, x3)
    x7 = apply(x5, x3)
    x8 = papply(connect, x6, x7)
    x9 = apply(last, x6)
    x10 = compose(last, first)
    x11 = power(last, TWO)
    x12 = fork(subtract, x10, x11)
    x13 = compose(even, x12)
    x14 = lbind(rbind, astuple)
    x15 = lbind(compose, x13)
    x16 = compose(x15, x14)
    x17 = fork(sfilter, first, x16)
    x18 = pair(x8, x9)
    x19 = mapply(x17, x18)
    O = fill(x1, ZERO, x19)
    return O



def solve_b1948b0a_ec883f72(I):
    x1 = replace(I, SIX, TWO)
    x2 = palette(x1)
    x3 = objects(x1, T, T, T)
    x4 = fork(multiply, height, width)
    x5 = argmax(x3, x4)
    x6 = color(x5)
    x7 = remove(ZERO, x2)
    x8 = other(x7, x6)
    x9 = lrcorner(x5)
    x10 = llcorner(x5)
    x11 = urcorner(x5)
    x12 = ulcorner(x5)
    x13 = shoot(x9, UNITY)
    x14 = shoot(x10, DOWN_LEFT)
    x15 = shoot(x11, UP_RIGHT)
    x16 = shoot(x12, NEG_UNITY)
    x17 = combine(x13, x14)
    x18 = combine(x15, x16)
    x19 = combine(x17, x18)
    O = underfill(x1, x8, x19)
    return O



def solve_b1948b0a_2bee17df(I):
    x1 = replace(I, SIX, TWO)
    x2 = height(x1)
    x3 = rot90(x1)
    x4 = subtract(x2, TWO)
    x5 = interval(ZERO, x2, ONE)
    x6 = rbind(colorcount, ZERO)
    x7 = matcher(x6, x4)
    x8 = rbind(vsplit, x2)
    x9 = lbind(apply, x7)
    x10 = compose(x9, x8)
    x11 = x10(x1)
    x12 = pair(x5, x11)
    x13 = sfilter(x12, last)
    x14 = mapply(hfrontier, x13)
    x15 = x10(x3)
    x16 = pair(x15, x5)
    x17 = sfilter(x16, first)
    x18 = mapply(vfrontier, x17)
    x19 = astuple(x14, x18)
    x20 = merge(x19)
    O = underfill(x1, THREE, x20)
    return O



def solve_b1948b0a_29623171(I):
    x1 = replace(I, SIX, TWO)
    x2 = leastcolor(x1)
    x3 = interval(ZERO, NINE, FOUR)
    x4 = product(x3, x3)
    x5 = rbind(add, THREE)
    x6 = rbind(interval, ONE)
    x7 = fork(x6, identity, x5)
    x8 = compose(x7, first)
    x9 = compose(x7, last)
    x10 = fork(product, x8, x9)
    x11 = rbind(colorcount, x2)
    x12 = rbind(toobject, x1)
    x13 = compose(x11, x12)
    x14 = apply(x10, x4)
    x15 = valmax(x14, x13)
    x16 = matcher(x13, x15)
    x17 = compose(flip, x16)
    x18 = mfilter(x14, x16)
    x19 = mfilter(x14, x17)
    x20 = fill(x1, x2, x18)
    O = fill(x20, ZERO, x19)
    return O



def solve_b1948b0a_b0c4d837(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, FIVE)
    x3 = ofcolor(x1, EIGHT)
    x4 = height(x2)
    x5 = decrement(x4)
    x6 = height(x3)
    x7 = subtract(x5, x6)
    x8 = astuple(ONE, x7)
    x9 = canvas(EIGHT, x8)
    x10 = subtract(SIX, x7)
    x11 = astuple(ONE, x10)
    x12 = canvas(ZERO, x11)
    x13 = hconcat(x9, x12)
    x14 = hsplit(x13, TWO)
    x15 = first(x14)
    x16 = last(x14)
    x17 = vmirror(x16)
    x18 = vconcat(x15, x17)
    x19 = astuple(ONE, THREE)
    x20 = canvas(ZERO, x19)
    O = vconcat(x18, x20)
    return O



def solve_b1948b0a_8731374e(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = height(x4)
    x6 = width(x4)
    x7 = vsplit(x4, x5)
    x8 = lbind(greater, FOUR)
    x9 = compose(x8, numcolors)
    x10 = sfilter(x7, x9)
    x11 = merge(x10)
    x12 = rot90(x11)
    x13 = vsplit(x12, x6)
    x14 = sfilter(x13, x9)
    x15 = merge(x14)
    x16 = rot270(x15)
    x17 = leastcolor(x16)
    x18 = ofcolor(x16, x17)
    x19 = fork(combine, vfrontier, hfrontier)
    x20 = mapply(x19, x18)
    O = fill(x16, x17, x20)
    return O



def solve_b1948b0a_db93a21d(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, NINE)
    x4 = colorfilter(x2, NINE)
    x5 = rbind(shoot, DOWN)
    x6 = mapply(x5, x3)
    x7 = underfill(x1, ONE, x6)
    x8 = compose(halve, width)
    x9 = rbind(greater, ONE)
    x10 = compose(x9, x8)
    x11 = matcher(x8, THREE)
    x12 = power(outbox, TWO)
    x13 = power(outbox, THREE)
    x14 = mapply(outbox, x4)
    x15 = sfilter(x4, x10)
    x16 = sfilter(x4, x11)
    x17 = mapply(x12, x15)
    x18 = mapply(x13, x16)
    x19 = fill(x7, THREE, x14)
    x20 = fill(x19, THREE, x17)
    O = fill(x20, THREE, x18)
    return O



def solve_b1948b0a_53b68214(I):
    x1 = replace(I, SIX, TWO)
    x2 = width(x1)
    x3 = objects(x1, T, T, T)
    x4 = first(x3)
    x5 = vperiod(x4)
    x6 = toivec(x5)
    x7 = interval(ZERO, NINE, ONE)
    x8 = lbind(multiply, x6)
    x9 = apply(x8, x7)
    x10 = lbind(shift, x4)
    x11 = mapply(x10, x9)
    x12 = astuple(x2, x2)
    x13 = portrait(x4)
    x14 = shape(x4)
    x15 = add(DOWN, x14)
    x16 = decrement(x15)
    x17 = shift(x4, x16)
    x18 = branch(x13, x11, x17)
    x19 = canvas(ZERO, x12)
    x20 = paint(x19, x4)
    O = paint(x20, x18)
    return O



def solve_b1948b0a_d6ad076f(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = argmin(x2, size)
    x4 = argmax(x2, size)
    x5 = vmatching(x3, x4)
    x6 = branch(x5, DOWN, RIGHT)
    x7 = branch(x5, uppermost, leftmost)
    x8 = valmax(x2, x7)
    x9 = x7(x3)
    x10 = equality(x8, x9)
    x11 = branch(x10, NEG_ONE, ONE)
    x12 = multiply(x6, x11)
    x13 = inbox(x3)
    x14 = rbind(shoot, x12)
    x15 = mapply(x14, x13)
    x16 = underfill(x1, EIGHT, x15)
    x17 = objects(x16, T, F, T)
    x18 = colorfilter(x17, EIGHT)
    x19 = rbind(bordering, x1)
    x20 = mfilter(x18, x19)
    O = cover(x16, x20)
    return O



def solve_b1948b0a_6cdd2623(I):
    x1 = replace(I, SIX, TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = prapply(connect, x3, x3)
    x5 = fgpartition(x1)
    x6 = merge(x5)
    x7 = cover(x1, x6)
    x8 = fork(either, hline, vline)
    x9 = box(x6)
    x10 = rbind(difference, x9)
    x11 = chain(positive, size, x10)
    x12 = fork(both, x8, x11)
    x13 = mfilter(x4, x12)
    O = fill(x7, x2, x13)
    return O



def solve_b1948b0a_cdecee7f(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = astuple(ONE, THREE)
    x4 = size(x2)
    x5 = order(x2, leftmost)
    x6 = apply(color, x5)
    x7 = rbind(canvas, UNITY)
    x8 = apply(x7, x6)
    x9 = merge(x8)
    x10 = dmirror(x9)
    x11 = subtract(NINE, x4)
    x12 = astuple(ONE, x11)
    x13 = canvas(ZERO, x12)
    x14 = hconcat(x10, x13)
    x15 = hsplit(x14, THREE)
    x16 = merge(x15)
    x17 = crop(x16, ORIGIN, x3)
    x18 = crop(x16, DOWN, x3)
    x19 = crop(x16, TWO_BY_ZERO, x3)
    x20 = vmirror(x18)
    x21 = vconcat(x17, x20)
    O = vconcat(x21, x19)
    return O



def solve_b1948b0a_3345333e(I):
    x1 = replace(I, SIX, TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = cover(x1, x3)
    x5 = leastcolor(x4)
    x6 = ofcolor(x4, x5)
    x7 = neighbors(ORIGIN)
    x8 = mapply(neighbors, x7)
    x9 = vmirror(x6)
    x10 = lbind(shift, x9)
    x11 = apply(x10, x8)
    x12 = rbind(intersection, x6)
    x13 = compose(size, x12)
    x14 = argmax(x11, x13)
    O = fill(x4, x5, x14)
    return O



def solve_b1948b0a_b190f7f5(I):
    x1 = replace(I, SIX, TWO)
    x2 = portrait(x1)
    x3 = branch(x2, vsplit, hsplit)
    x4 = x3(x1, TWO)
    x5 = argmin(x4, numcolors)
    x6 = argmax(x4, numcolors)
    x7 = width(x6)
    x8 = rbind(repeat, x7)
    x9 = chain(dmirror, merge, x8)
    x10 = upscale(x6, x7)
    x11 = x9(x5)
    x12 = x9(x11)
    x13 = ofcolor(x12, ZERO)
    O = fill(x10, ZERO, x13)
    return O



def solve_b1948b0a_caa06a1f(I):
    x1 = replace(I, SIX, TWO)
    x2 = asobject(x1)
    x3 = shape(x1)
    x4 = decrement(x3)
    x5 = index(x1, x4)
    x6 = double(x3)
    x7 = canvas(x5, x6)
    x8 = paint(x7, x2)
    x9 = objects(x8, F, F, T)
    x10 = first(x9)
    x11 = shift(x10, LEFT)
    x12 = vperiod(x11)
    x13 = hperiod(x11)
    x14 = neighbors(ORIGIN)
    x15 = lbind(mapply, neighbors)
    x16 = power(x15, TWO)
    x17 = x16(x14)
    x18 = astuple(x12, x13)
    x19 = lbind(multiply, x18)
    x20 = apply(x19, x17)
    x21 = lbind(shift, x11)
    x22 = mapply(x21, x20)
    O = paint(x1, x22)
    return O



def solve_b1948b0a_e21d9049(I):
    x1 = replace(I, SIX, TWO)
    x2 = asindices(x1)
    x3 = leastcolor(x1)
    x4 = objects(x1, T, F, T)
    x5 = ofcolor(x1, x3)
    x6 = merge(x4)
    x7 = shape(x6)
    x8 = neighbors(ORIGIN)
    x9 = lbind(mapply, neighbors)
    x10 = power(x9, TWO)
    x11 = x10(x8)
    x12 = lbind(multiply, x7)
    x13 = lbind(shift, x6)
    x14 = apply(x12, x11)
    x15 = mapply(x13, x14)
    x16 = lbind(hmatching, x5)
    x17 = lbind(vmatching, x5)
    x18 = fork(either, x16, x17)
    x19 = compose(x18, initset)
    x20 = paint(x1, x15)
    x21 = sfilter(x2, x19)
    x22 = difference(x2, x21)
    O = cover(x20, x22)
    return O



def solve_b1948b0a_746b3537(I):
    x1 = replace(I, SIX, TWO)
    x2 = chain(size, dedupe, first)
    x3 = x2(x1)
    x4 = equality(x3, ONE)
    x5 = branch(x4, dmirror, identity)
    x6 = x5(x1)
    x7 = objects(x6, T, F, F)
    x8 = order(x7, leftmost)
    x9 = apply(color, x8)
    x10 = repeat(x9, ONE)
    O = x5(x10)
    return O



def solve_b1948b0a_63613498(I):
    x1 = replace(I, SIX, TWO)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = ofcolor(x2, ZERO)
    x4 = asindices(x2)
    x5 = difference(x4, x3)
    x6 = normalize(x5)
    x7 = objects(x1, T, F, T)
    x8 = compose(toindices, normalize)
    x9 = matcher(x8, x6)
    x10 = mfilter(x7, x9)
    x11 = fill(x1, FIVE, x10)
    x12 = asobject(x2)
    O = paint(x11, x12)
    return O



def solve_b1948b0a_06df4c85(I):
    x1 = replace(I, SIX, TWO)
    x2 = partition(x1)
    x3 = mostcolor(x1)
    x4 = ofcolor(x1, x3)
    x5 = colorfilter(x2, ZERO)
    x6 = argmax(x2, size)
    x7 = difference(x2, x5)
    x8 = remove(x6, x7)
    x9 = merge(x8)
    x10 = product(x9, x9)
    x11 = power(first, TWO)
    x12 = compose(first, last)
    x13 = fork(equality, x11, x12)
    x14 = sfilter(x10, x13)
    x15 = compose(last, first)
    x16 = power(last, TWO)
    x17 = fork(connect, x15, x16)
    x18 = fork(recolor, color, x17)
    x19 = apply(x18, x14)
    x20 = fork(either, vline, hline)
    x21 = mfilter(x19, x20)
    x22 = paint(x1, x21)
    O = fill(x22, x3, x4)
    return O



def solve_b1948b0a_4522001f(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = toindices(x3)
    x5 = contained(ZERO_BY_TWO, x4)
    x6 = contained(TWO_BY_TWO, x4)
    x7 = contained(TWO_BY_ZERO, x4)
    x8 = astuple(NINE, NINE)
    x9 = canvas(ZERO, x8)
    x10 = astuple(THREE, ORIGIN)
    x11 = initset(x10)
    x12 = upscale(x11, TWO)
    x13 = upscale(x12, TWO)
    x14 = shape(x13)
    x15 = shift(x13, x14)
    x16 = combine(x13, x15)
    x17 = paint(x9, x16)
    x18 = rot90(x17)
    x19 = rot180(x17)
    x20 = rot270(x17)
    x21 = branch(x5, x18, x17)
    x22 = branch(x6, x19, x21)
    O = branch(x7, x20, x22)
    return O



def solve_b1948b0a_a48eeaf7(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, TWO)
    x3 = outbox(x2)
    x4 = apply(initset, x3)
    x5 = ofcolor(x1, FIVE)
    x6 = lbind(argmin, x4)
    x7 = lbind(lbind, manhattan)
    x8 = compose(x7, initset)
    x9 = compose(x6, x8)
    x10 = mapply(x9, x5)
    x11 = cover(x1, x5)
    O = fill(x11, FIVE, x10)
    return O



def solve_b1948b0a_eb5a1d5d(I):
    x1 = replace(I, SIX, TWO)
    x2 = compose(dmirror, dedupe)
    x3 = x2(x1)
    x4 = x2(x3)
    x5 = fork(remove, last, identity)
    x6 = compose(hmirror, x5)
    x7 = fork(vconcat, identity, x6)
    x8 = x7(x4)
    x9 = dmirror(x8)
    O = x7(x9)
    return O



def solve_b1948b0a_995c5fa3(I):
    x1 = replace(I, SIX, TWO)
    x2 = hsplit(x1, THREE)
    x3 = astuple(TWO, ONE)
    x4 = rbind(ofcolor, ZERO)
    x5 = compose(ulcorner, x4)
    x6 = compose(size, x4)
    x7 = matcher(x6, ZERO)
    x8 = matcher(x5, UNITY)
    x9 = matcher(x5, DOWN)
    x10 = matcher(x5, x3)
    x11 = rbind(multiply, THREE)
    x12 = power(double, TWO)
    x13 = compose(double, x7)
    x14 = chain(x12, double, x8)
    x15 = compose(x11, x9)
    x16 = compose(x12, x10)
    x17 = fork(add, x13, x14)
    x18 = fork(add, x15, x16)
    x19 = fork(add, x17, x18)
    x20 = rbind(canvas, UNITY)
    x21 = compose(x20, x19)
    x22 = apply(x21, x2)
    x23 = merge(x22)
    O = hupscale(x23, THREE)
    return O



def solve_b1948b0a_36fdfd69(I):
    x1 = replace(I, SIX, TWO)
    x2 = upscale(x1, TWO)
    x3 = objects(x2, T, T, T)
    x4 = colorfilter(x3, TWO)
    x5 = fork(manhattan, first, last)
    x6 = lbind(greater, FIVE)
    x7 = compose(x6, x5)
    x8 = product(x4, x4)
    x9 = sfilter(x8, x7)
    x10 = apply(merge, x9)
    x11 = mapply(delta, x10)
    x12 = fill(x2, FOUR, x11)
    x13 = merge(x4)
    x14 = paint(x12, x13)
    O = downscale(x14, TWO)
    return O



def solve_b1948b0a_0a938d79(I):
    x1 = replace(I, SIX, TWO)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = x3(x1)
    x5 = fgpartition(x4)
    x6 = merge(x5)
    x7 = chain(double, decrement, width)
    x8 = x7(x6)
    x9 = compose(vfrontier, tojvec)
    x10 = lbind(mapply, x9)
    x11 = rbind(interval, x8)
    x12 = width(x4)
    x13 = rbind(x11, x12)
    x14 = chain(x10, x13, leftmost)
    x15 = fork(recolor, color, x14)
    x16 = mapply(x15, x5)
    x17 = paint(x4, x16)
    O = x3(x17)
    return O



def solve_b1948b0a_045e512c(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = lbind(shift, x3)
    x6 = lbind(mapply, x5)
    x7 = double(TEN)
    x8 = interval(FOUR, x7, FOUR)
    x9 = rbind(apply, x8)
    x10 = lbind(position, x3)
    x11 = lbind(rbind, multiply)
    x12 = chain(x9, x11, x10)
    x13 = compose(x6, x12)
    x14 = fork(recolor, color, x13)
    x15 = mapply(x14, x4)
    O = paint(x1, x15)
    return O



def solve_b1948b0a_99fa7670(I):
    x1 = replace(I, SIX, TWO)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x3)
    x8 = paint(x1, x7)
    x9 = add(x2, DOWN_LEFT)
    x10 = initset(x9)
    x11 = recolor(ZERO, x10)
    x12 = objects(x8, T, F, T)
    x13 = insert(x11, x12)
    x14 = order(x13, uppermost)
    x15 = first(x14)
    x16 = remove(x11, x14)
    x17 = remove(x15, x14)
    x18 = compose(lrcorner, first)
    x19 = compose(lrcorner, last)
    x20 = fork(connect, x18, x19)
    x21 = compose(color, first)
    x22 = fork(recolor, x21, x20)
    x23 = pair(x16, x17)
    x24 = mapply(x22, x23)
    O = underpaint(x8, x24)
    return O



def solve_b1948b0a_72322fa7(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, F, T, T)
    x3 = matcher(numcolors, ONE)
    x4 = sfilter(x2, x3)
    x5 = difference(x2, x4)
    x6 = lbind(matcher, first)
    x7 = compose(x6, mostcolor)
    x8 = fork(sfilter, identity, x7)
    x9 = fork(difference, identity, x8)
    x10 = lbind(occurrences, x1)
    x11 = compose(x10, x8)
    x12 = compose(x10, x9)
    x13 = compose(ulcorner, x9)
    x14 = fork(subtract, ulcorner, x13)
    x15 = lbind(rbind, add)
    x16 = compose(x15, x14)
    x17 = fork(apply, x16, x12)
    x18 = lbind(lbind, shift)
    x19 = compose(x18, normalize)
    x20 = fork(mapply, x19, x11)
    x21 = fork(mapply, x19, x17)
    x22 = mapply(x20, x5)
    x23 = mapply(x21, x5)
    x24 = paint(x1, x22)
    O = paint(x24, x23)
    return O



def solve_b1948b0a_855e0971(I):
    x1 = replace(I, SIX, TWO)
    x2 = frontiers(x1)
    x3 = sfilter(x2, hline)
    x4 = size(x3)
    x5 = positive(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x1)
    x8 = rbind(subgrid, x7)
    x9 = matcher(color, ZERO)
    x10 = compose(flip, x9)
    x11 = partition(x7)
    x12 = sfilter(x11, x10)
    x13 = rbind(ofcolor, ZERO)
    x14 = lbind(mapply, vfrontier)
    x15 = chain(x14, x13, x8)
    x16 = fork(shift, x15, ulcorner)
    x17 = fork(intersection, toindices, x16)
    x18 = mapply(x17, x12)
    x19 = fill(x7, ZERO, x18)
    O = x6(x19)
    return O



def solve_b1948b0a_a78176bb(I):
    x1 = replace(I, SIX, TWO)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = remove(ZERO, x2)
    x5 = other(x4, FIVE)
    x6 = colorfilter(x3, FIVE)
    x7 = lbind(index, x1)
    x8 = compose(x7, urcorner)
    x9 = matcher(x8, FIVE)
    x10 = sfilter(x6, x9)
    x11 = difference(x6, x10)
    x12 = apply(urcorner, x10)
    x13 = apply(llcorner, x11)
    x14 = rbind(add, UP_RIGHT)
    x15 = rbind(add, DOWN_LEFT)
    x16 = apply(x14, x12)
    x17 = apply(x15, x13)
    x18 = rbind(shoot, UNITY)
    x19 = rbind(shoot, NEG_UNITY)
    x20 = fork(combine, x18, x19)
    x21 = mapply(x20, x16)
    x22 = mapply(x20, x17)
    x23 = combine(x21, x22)
    x24 = fill(x1, x5, x23)
    O = replace(x24, FIVE, ZERO)
    return O



def solve_b1948b0a_6aa20dc0(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(rbind, upscale)
    x10 = interval(ONE, FOUR, ONE)
    x11 = apply(x9, x10)
    x12 = initset(identity)
    x13 = insert(vmirror, x12)
    x14 = insert(hmirror, x13)
    x15 = insert(cmirror, x14)
    x16 = insert(dmirror, x15)
    x17 = fork(compose, first, last)
    x18 = lbind(occurrences, x1)
    x19 = lbind(lbind, shift)
    x20 = compose(x18, x8)
    x21 = product(x16, x11)
    x22 = apply(x17, x21)
    x23 = rapply(x22, x4)
    x24 = fork(mapply, x19, x20)
    x25 = mapply(x24, x23)
    O = paint(x1, x25)
    return O



def solve_b1948b0a_2bcee788(I):
    x1 = replace(I, SIX, TWO)
    x2 = mostcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = replace(x1, x2, THREE)
    x5 = argmax(x3, size)
    x6 = argmin(x3, size)
    x7 = position(x5, x6)
    x8 = first(x7)
    x9 = last(x7)
    x10 = subgrid(x5, x4)
    x11 = hline(x6)
    x12 = hmirror(x10)
    x13 = vmirror(x10)
    x14 = branch(x11, x12, x13)
    x15 = branch(x11, x8, ZERO)
    x16 = branch(x11, ZERO, x9)
    x17 = asobject(x14)
    x18 = matcher(first, THREE)
    x19 = compose(flip, x18)
    x20 = sfilter(x17, x19)
    x21 = ulcorner(x5)
    x22 = shape(x5)
    x23 = astuple(x15, x16)
    x24 = multiply(x22, x23)
    x25 = add(x21, x24)
    x26 = shift(x20, x25)
    O = paint(x4, x26)
    return O



def solve_b1948b0a_f35d900a(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = palette(x1)
    x4 = remove(ZERO, x3)
    x5 = lbind(other, x4)
    x6 = compose(x5, color)
    x7 = fork(recolor, x6, outbox)
    x8 = mapply(x7, x2)
    x9 = mapply(toindices, x2)
    x10 = box(x9)
    x11 = difference(x10, x9)
    x12 = lbind(argmin, x9)
    x13 = rbind(compose, initset)
    x14 = lbind(rbind, manhattan)
    x15 = chain(x13, x14, initset)
    x16 = chain(initset, x12, x15)
    x17 = fork(manhattan, initset, x16)
    x18 = compose(even, x17)
    x19 = sfilter(x11, x18)
    x20 = paint(x1, x8)
    O = fill(x20, FIVE, x19)
    return O



def solve_b1948b0a_0dfd9992(I):
    x1 = replace(I, SIX, TWO)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_b1948b0a_29ec7d0e(I):
    x1 = replace(I, SIX, TWO)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_b1948b0a_469497ad(I):
    x1 = replace(I, SIX, TWO)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    x4 = upscale(x1, x3)
    x5 = objects(x4, F, F, T)
    x6 = argmin(x5, size)
    x7 = ulcorner(x6)
    x8 = llcorner(x6)
    x9 = shoot(x7, NEG_UNITY)
    x10 = shoot(x7, UNITY)
    x11 = shoot(x8, DOWN_LEFT)
    x12 = shoot(x8, UP_RIGHT)
    x13 = combine(x9, x10)
    x14 = combine(x11, x12)
    x15 = combine(x13, x14)
    x16 = underfill(x4, TWO, x15)
    x17 = objects(x16, T, F, T)
    x18 = argmax(x17, lrcorner)
    O = paint(x16, x18)
    return O



def solve_b1948b0a_484b58aa(I):
    x1 = replace(I, SIX, TWO)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, TWO)
    x9 = astuple(TWO, x3)
    x10 = power(decrement, TWO)
    x11 = x10(x2)
    x12 = x10(x3)
    x13 = toivec(x12)
    x14 = tojvec(x11)
    x15 = crop(x1, x13, x9)
    x16 = crop(x1, x14, x8)
    x17 = asobject(x16)
    x18 = asobject(x15)
    x19 = vperiod(x17)
    x20 = hperiod(x18)
    x21 = astuple(x19, x20)
    x22 = lbind(multiply, x21)
    x23 = neighbors(ORIGIN)
    x24 = mapply(neighbors, x23)
    x25 = apply(x22, x24)
    x26 = lbind(shift, x7)
    x27 = mapply(x26, x25)
    O = paint(x1, x27)
    return O



def solve_b1948b0a_3befdf3e(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, F, F, T)
    x3 = leastcolor(x1)
    x4 = palette(x1)
    x5 = remove(ZERO, x4)
    x6 = other(x5, x3)
    x7 = switch(x1, x3, x6)
    x8 = compose(width, inbox)
    x9 = lbind(power, outbox)
    x10 = compose(x9, x8)
    x11 = initset(x10)
    x12 = lbind(rapply, x11)
    x13 = chain(initset, first, x12)
    x14 = fork(rapply, x13, identity)
    x15 = compose(first, x14)
    x16 = compose(backdrop, x15)
    x17 = lbind(chain, backdrop)
    x18 = lbind(x17, inbox)
    x19 = compose(x18, x10)
    x20 = lbind(apply, initset)
    x21 = chain(x20, corners, x16)
    x22 = fork(mapply, x19, x21)
    x23 = fork(intersection, x16, x22)
    x24 = mapply(x16, x2)
    x25 = mapply(x23, x2)
    x26 = underfill(x7, x6, x24)
    O = fill(x26, ZERO, x25)
    return O



def solve_b1948b0a_49d1d64f(I):
    x1 = replace(I, SIX, TWO)
    x2 = shape(x1)
    x3 = add(x2, TWO)
    x4 = canvas(ZERO, x3)
    x5 = asobject(x1)
    x6 = shift(x5, UNITY)
    x7 = paint(x4, x6)
    x8 = asindices(x4)
    x9 = fork(difference, box, corners)
    x10 = x9(x8)
    x11 = lbind(lbind, manhattan)
    x12 = rbind(compose, initset)
    x13 = chain(x12, x11, initset)
    x14 = lbind(argmin, x6)
    x15 = chain(first, x14, x13)
    x16 = fork(astuple, x15, identity)
    x17 = apply(x16, x10)
    O = paint(x7, x17)
    return O



def solve_b1948b0a_57aa92db(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, F, T, T)
    x3 = objects(x1, T, F, T)
    x4 = lbind(lbind, colorcount)
    x5 = fork(apply, x4, palette)
    x6 = compose(maximum, x5)
    x7 = compose(minimum, x5)
    x8 = fork(subtract, x6, x7)
    x9 = argmax(x2, x8)
    x10 = leastcolor(x9)
    x11 = normalize(x9)
    x12 = matcher(first, x10)
    x13 = sfilter(x11, x12)
    x14 = ulcorner(x13)
    x15 = colorfilter(x3, x10)
    x16 = rbind(toobject, x1)
    x17 = lbind(remove, ZERO)
    x18 = chain(first, x17, palette)
    x19 = chain(x18, x16, outbox)
    x20 = lbind(multiply, x14)
    x21 = compose(x20, width)
    x22 = fork(subtract, ulcorner, x21)
    x23 = lbind(shift, x11)
    x24 = compose(x23, x22)
    x25 = fork(upscale, x24, width)
    x26 = fork(recolor, x19, x25)
    x27 = mapply(x26, x15)
    x28 = paint(x1, x27)
    x29 = merge(x3)
    O = paint(x28, x29)
    return O



def solve_b1948b0a_aba27056(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, F, T)
    x3 = mapply(toindices, x2)
    x4 = box(x3)
    x5 = difference(x4, x3)
    x6 = delta(x3)
    x7 = position(x6, x5)
    x8 = interval(ZERO, NINE, ONE)
    x9 = lbind(multiply, x7)
    x10 = apply(x9, x8)
    x11 = lbind(shift, x5)
    x12 = mapply(x11, x10)
    x13 = fill(x1, FOUR, x6)
    x14 = fill(x13, FOUR, x12)
    x15 = corners(x5)
    x16 = ofcolor(x14, ZERO)
    x17 = rbind(toobject, x14)
    x18 = rbind(colorcount, ZERO)
    x19 = chain(x18, x17, dneighbors)
    x20 = matcher(x19, TWO)
    x21 = rbind(adjacent, x3)
    x22 = rbind(adjacent, x12)
    x23 = fork(both, x21, x22)
    x24 = compose(x23, initset)
    x25 = sfilter(x16, x20)
    x26 = sfilter(x25, x24)
    x27 = product(x15, x26)
    x28 = fork(subtract, last, first)
    x29 = fork(shoot, first, x28)
    x30 = mapply(x29, x27)
    O = fill(x14, FOUR, x30)
    return O



def solve_b1948b0a_f1cefba8(I):
    x1 = replace(I, SIX, TWO)
    x2 = palette(x1)
    x3 = objects(x1, F, F, T)
    x4 = ofcolor(x1, ZERO)
    x5 = first(x3)
    x6 = ulcorner(x5)
    x7 = subgrid(x5, x1)
    x8 = power(trim, TWO)
    x9 = x8(x7)
    x10 = asindices(x9)
    x11 = shift(x10, TWO_BY_TWO)
    x12 = fill(x7, ZERO, x11)
    x13 = leastcolor(x12)
    x14 = remove(ZERO, x2)
    x15 = other(x14, x13)
    x16 = ofcolor(x12, x13)
    x17 = shift(x16, x6)
    x18 = ofcolor(x1, x13)
    x19 = uppermost(x18)
    x20 = lowermost(x18)
    x21 = matcher(first, x19)
    x22 = matcher(first, x20)
    x23 = fork(either, x21, x22)
    x24 = sfilter(x17, x23)
    x25 = difference(x17, x24)
    x26 = mapply(vfrontier, x24)
    x27 = mapply(hfrontier, x25)
    x28 = combine(x26, x27)
    x29 = intersection(x4, x28)
    x30 = fill(x1, x15, x28)
    O = fill(x30, x13, x29)
    return O



def solve_b1948b0a_508bd3b6(I):
    x1 = replace(I, SIX, TWO)
    x2 = width(x1)
    x3 = objects(x1, T, T, T)
    x4 = argmin(x3, size)
    x5 = argmax(x3, size)
    x6 = ulcorner(x4)
    x7 = urcorner(x4)
    x8 = index(x1, x6)
    x9 = equality(x8, EIGHT)
    x10 = branch(x9, x6, x7)
    x11 = branch(x9, UNITY, DOWN_LEFT)
    x12 = multiply(x11, x2)
    x13 = double(x12)
    x14 = add(x10, x13)
    x15 = subtract(x10, x13)
    x16 = connect(x14, x15)
    x17 = fill(x1, THREE, x16)
    x18 = paint(x17, x5)
    x19 = objects(x18, T, F, T)
    x20 = rbind(adjacent, x5)
    x21 = extract(x19, x20)
    x22 = first(x21)
    x23 = last(x22)
    x24 = flip(x9)
    x25 = branch(x24, UNITY, DOWN_LEFT)
    x26 = multiply(x25, x2)
    x27 = double(x26)
    x28 = add(x23, x27)
    x29 = subtract(x23, x27)
    x30 = connect(x28, x29)
    x31 = fill(x18, THREE, x30)
    x32 = paint(x31, x4)
    O = paint(x32, x5)
    return O



def solve_b1948b0a_0e206a2e(I):
    x1 = replace(I, SIX, TWO)
    x2 = palette(x1)
    x3 = objects(x1, F, F, T)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, numcolors)
    x6 = sfilter(x3, x5)
    x7 = remove(ZERO, x2)
    x8 = lbind(colorcount, x1)
    x9 = argmax(x7, x8)
    x10 = remove(x9, x7)
    x11 = rbind(contained, x10)
    x12 = compose(x11, first)
    x13 = rbind(sfilter, x12)
    x14 = lbind(rbind, subtract)
    x15 = lbind(occurrences, x1)
    x16 = lbind(lbind, shift)
    x17 = compose(x14, ulcorner)
    x18 = chain(x17, x13, normalize)
    x19 = chain(x15, x13, normalize)
    x20 = fork(apply, x18, x19)
    x21 = compose(x16, normalize)
    x22 = fork(mapply, x21, x20)
    x23 = astuple(cmirror, dmirror)
    x24 = astuple(hmirror, vmirror)
    x25 = combine(x23, x24)
    x26 = product(x25, x25)
    x27 = fork(compose, first, last)
    x28 = apply(x27, x26)
    x29 = totuple(x28)
    x30 = combine(x25, x29)
    x31 = lbind(rapply, x30)
    x32 = mapply(x31, x6)
    x33 = mapply(x22, x32)
    x34 = paint(x1, x33)
    x35 = merge(x6)
    O = cover(x34, x35)
    return O



def solve_b1948b0a_d22278a0(I):
    x1 = replace(I, SIX, TWO)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = fork(multiply, sign, identity)
    x5 = lbind(apply, x4)
    x6 = chain(even, maximum, x5)
    x7 = lbind(sfilter, x2)
    x8 = fork(add, first, last)
    x9 = rbind(remove, x3)
    x10 = compose(center, last)
    x11 = fork(subtract, first, x10)
    x12 = compose(x6, x11)
    x13 = lbind(rbind, equality)
    x14 = lbind(argmin, x3)
    x15 = chain(x8, x5, x11)
    x16 = lbind(lbind, astuple)
    x17 = lbind(rbind, astuple)
    x18 = lbind(compose, x12)
    x19 = lbind(compose, x15)
    x20 = compose(x19, x16)
    x21 = compose(x19, x17)
    x22 = compose(x14, x20)
    x23 = rbind(compose, x22)
    x24 = lbind(lbind, valmin)
    x25 = rbind(compose, x20)
    x26 = chain(x25, x24, x9)
    x27 = lbind(fork, greater)
    x28 = fork(x27, x26, x21)
    x29 = chain(x7, x18, x17)
    x30 = chain(x7, x23, x13)
    x31 = fork(intersection, x29, x30)
    x32 = compose(x7, x28)
    x33 = fork(intersection, x31, x32)
    x34 = fork(recolor, color, x33)
    x35 = mapply(x34, x3)
    O = paint(x1, x35)
    return O



def solve_b1948b0a_50846271(I):
    x1 = replace(I, SIX, TWO)
    x2 = ofcolor(x1, TWO)
    x3 = prapply(connect, x2, x2)
    x4 = lbind(greater, SIX)
    x5 = compose(x4, size)
    x6 = fork(either, vline, hline)
    x7 = fork(both, x5, x6)
    x8 = mfilter(x3, x7)
    x9 = fill(x1, TWO, x8)
    x10 = objects(x9, T, F, F)
    x11 = colorfilter(x10, TWO)
    x12 = valmax(x11, width)
    x13 = halve(x12)
    x14 = toivec(x13)
    x15 = tojvec(x13)
    x16 = rbind(add, ZERO_BY_TWO)
    x17 = rbind(add, TWO_BY_ZERO)
    x18 = rbind(subtract, ZERO_BY_TWO)
    x19 = rbind(subtract, TWO_BY_ZERO)
    x20 = rbind(colorcount, TWO)
    x21 = rbind(toobject, x9)
    x22 = compose(initset, x16)
    x23 = fork(insert, x17, x22)
    x24 = fork(insert, x18, x23)
    x25 = fork(insert, x19, x24)
    x26 = fork(combine, dneighbors, x25)
    x27 = chain(x20, x21, x26)
    x28 = rbind(argmax, x27)
    x29 = compose(x28, toindices)
    x30 = apply(x29, x11)
    x31 = rbind(add, x14)
    x32 = rbind(subtract, x14)
    x33 = rbind(add, x15)
    x34 = rbind(subtract, x15)
    x35 = fork(connect, x31, x32)
    x36 = fork(connect, x33, x34)
    x37 = fork(combine, x35, x36)
    x38 = mapply(x37, x30)
    x39 = fill(x9, EIGHT, x38)
    O = fill(x39, TWO, x2)
    return O



def solve_b1948b0a_150deff5(I):
    x1 = replace(I, SIX, TWO)
    x2 = canvas(FIVE, TWO_BY_TWO)
    x3 = asobject(x2)
    x4 = occurrences(x1, x3)
    x5 = lbind(shift, x3)
    x6 = mapply(x5, x4)
    x7 = fill(x1, EIGHT, x6)
    x8 = canvas(FIVE, UNITY)
    x9 = astuple(TWO, ONE)
    x10 = canvas(EIGHT, x9)
    x11 = vconcat(x10, x8)
    x12 = asobject(x11)
    x13 = occurrences(x7, x12)
    x14 = lbind(shift, x12)
    x15 = mapply(x14, x13)
    x16 = fill(x7, TWO, x15)
    x17 = astuple(ONE, THREE)
    x18 = canvas(FIVE, x17)
    x19 = asobject(x18)
    x20 = occurrences(x16, x19)
    x21 = lbind(shift, x19)
    x22 = mapply(x21, x20)
    x23 = fill(x16, TWO, x22)
    x24 = hmirror(x11)
    x25 = asobject(x24)
    x26 = occurrences(x23, x25)
    x27 = lbind(shift, x25)
    x28 = mapply(x27, x26)
    x29 = fill(x23, TWO, x28)
    x30 = dmirror(x11)
    x31 = asobject(x30)
    x32 = occurrences(x29, x31)
    x33 = lbind(shift, x31)
    x34 = mapply(x33, x32)
    x35 = fill(x29, TWO, x34)
    x36 = vmirror(x30)
    x37 = asobject(x36)
    x38 = occurrences(x35, x37)
    x39 = lbind(shift, x37)
    x40 = mapply(x39, x38)
    O = fill(x35, TWO, x40)
    return O



def solve_b1948b0a_9d9215db(I):
    x1 = replace(I, SIX, TWO)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = initset(x1)
    x6 = chain(numcolors, lefthalf, tophalf)
    x7 = insert(x2, x5)
    x8 = insert(x3, x7)
    x9 = insert(x4, x8)
    x10 = argmax(x9, x6)
    x11 = vmirror(x10)
    x12 = papply(pair, x10, x11)
    x13 = lbind(apply, maximum)
    x14 = apply(x13, x12)
    x15 = partition(x14)
    x16 = sizefilter(x15, FOUR)
    x17 = apply(llcorner, x16)
    x18 = apply(lrcorner, x16)
    x19 = combine(x17, x18)
    x20 = cover(x14, x19)
    x21 = tojvec(NEG_TWO)
    x22 = rbind(add, ZERO_BY_TWO)
    x23 = rbind(add, x21)
    x24 = compose(x22, ulcorner)
    x25 = compose(x23, urcorner)
    x26 = fork(connect, x24, x25)
    x27 = compose(even, last)
    x28 = rbind(sfilter, x27)
    x29 = chain(normalize, x28, x26)
    x30 = fork(shift, x29, x24)
    x31 = fork(recolor, color, x30)
    x32 = mapply(x31, x16)
    x33 = paint(x20, x32)
    x34 = rot90(x33)
    x35 = rot180(x33)
    x36 = rot270(x33)
    x37 = papply(pair, x33, x34)
    x38 = apply(x13, x37)
    x39 = papply(pair, x38, x35)
    x40 = apply(x13, x39)
    x41 = papply(pair, x40, x36)
    O = apply(x13, x41)
    return O



def solve_b1948b0a_264363fd(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, F, F, T)
    x3 = argmin(x2, size)
    x4 = normalize(x3)
    x5 = height(x3)
    x6 = width(x3)
    x7 = equality(x5, FIVE)
    x8 = equality(x6, FIVE)
    x9 = astuple(x7, x8)
    x10 = add(UNITY, x9)
    x11 = invert(x10)
    x12 = center(x3)
    x13 = index(x1, x12)
    x14 = branch(x7, UP, RIGHT)
    x15 = add(x14, x12)
    x16 = index(x1, x15)
    x17 = astuple(x13, ORIGIN)
    x18 = initset(x17)
    x19 = cover(x1, x3)
    x20 = mostcolor(x19)
    x21 = ofcolor(x19, x20)
    x22 = occurrences(x19, x18)
    x23 = objects(x19, F, F, T)
    x24 = rbind(occurrences, x18)
    x25 = rbind(subgrid, x19)
    x26 = compose(x24, x25)
    x27 = lbind(mapply, vfrontier)
    x28 = lbind(mapply, hfrontier)
    x29 = compose(x27, x26)
    x30 = compose(x28, x26)
    x31 = branch(x7, x29, x30)
    x32 = branch(x8, x30, x29)
    x33 = fork(combine, x31, x32)
    x34 = lbind(recolor, x16)
    x35 = compose(x34, x33)
    x36 = fork(paint, x25, x35)
    x37 = compose(asobject, x36)
    x38 = fork(shift, x37, ulcorner)
    x39 = mapply(x38, x23)
    x40 = paint(x19, x39)
    x41 = shift(x4, x11)
    x42 = lbind(shift, x41)
    x43 = mapply(x42, x22)
    x44 = paint(x40, x43)
    O = fill(x44, x20, x21)
    return O



def solve_b1948b0a_234bbc79(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, F, F, T)
    x3 = rbind(other, FIVE)
    x4 = compose(x3, palette)
    x5 = fork(recolor, x4, identity)
    x6 = apply(x5, x2)
    x7 = order(x6, leftmost)
    x8 = compose(last, last)
    x9 = lbind(matcher, x8)
    x10 = compose(x9, leftmost)
    x11 = compose(x9, rightmost)
    x12 = fork(sfilter, identity, x10)
    x13 = fork(sfilter, identity, x11)
    x14 = compose(dneighbors, last)
    x15 = rbind(chain, x14)
    x16 = lbind(x15, size)
    x17 = lbind(rbind, intersection)
    x18 = chain(x16, x17, toindices)
    x19 = fork(argmin, x12, x18)
    x20 = fork(argmin, x13, x18)
    x21 = compose(last, x19)
    x22 = compose(last, x20)
    x23 = astuple(ZERO, DOWN_LEFT)
    x24 = initset(x23)
    x25 = lbind(add, RIGHT)
    x26 = chain(x21, first, last)
    x27 = compose(x22, first)
    x28 = fork(subtract, x27, x26)
    x29 = compose(first, last)
    x30 = compose(x25, x28)
    x31 = fork(shift, x29, x30)
    x32 = fork(combine, first, x31)
    x33 = fork(remove, x29, last)
    x34 = fork(astuple, x32, x33)
    x35 = size(x2)
    x36 = power(x34, x35)
    x37 = astuple(x24, x7)
    x38 = x36(x37)
    x39 = first(x38)
    x40 = width(x39)
    x41 = decrement(x40)
    x42 = astuple(THREE, x41)
    x43 = canvas(ZERO, x42)
    O = paint(x43, x39)
    return O



def solve_b1948b0a_22233c11(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, T, T, T)
    x3 = rbind(upscale, TWO)
    x4 = chain(invert, halve, shape)
    x5 = fork(combine, hfrontier, vfrontier)
    x6 = compose(x3, vmirror)
    x7 = fork(shift, x6, x4)
    x8 = compose(toindices, x7)
    x9 = lbind(mapply, x5)
    x10 = compose(x9, toindices)
    x11 = fork(difference, x8, x10)
    x12 = mapply(x11, x2)
    O = fill(x1, EIGHT, x12)
    return O



def solve_b1948b0a_a64e4611(I):
    x1 = replace(I, SIX, TWO)
    x2 = asindices(x1)
    x3 = fork(product, identity, identity)
    x4 = lbind(canvas, ZERO)
    x5 = compose(asobject, x4)
    x6 = fork(multiply, first, last)
    x7 = compose(positive, size)
    x8 = lbind(lbind, shift)
    x9 = rbind(fork, x6)
    x10 = lbind(x9, multiply)
    x11 = lbind(chain, x7)
    x12 = rbind(x11, x5)
    x13 = lbind(lbind, occurrences)
    x14 = chain(x10, x12, x13)
    x15 = compose(x3, first)
    x16 = compose(x14, last)
    x17 = fork(argmax, x15, x16)
    x18 = chain(x8, x5, x17)
    x19 = compose(x5, x17)
    x20 = fork(occurrences, last, x19)
    x21 = fork(mapply, x18, x20)
    x22 = multiply(TWO, SIX)
    x23 = interval(THREE, x22, ONE)
    x24 = astuple(x23, x1)
    x25 = x21(x24)
    x26 = fill(x1, THREE, x25)
    x27 = interval(THREE, TEN, ONE)
    x28 = astuple(x27, x26)
    x29 = x21(x28)
    x30 = fill(x26, THREE, x29)
    x31 = astuple(x27, x30)
    x32 = x21(x31)
    x33 = fill(x30, THREE, x32)
    x34 = rbind(toobject, x33)
    x35 = rbind(colorcount, THREE)
    x36 = chain(x35, x34, neighbors)
    x37 = matcher(x36, EIGHT)
    x38 = sfilter(x2, x37)
    x39 = fill(x1, THREE, x38)
    x40 = ofcolor(x39, ZERO)
    x41 = rbind(bordering, x39)
    x42 = compose(x41, initset)
    x43 = lbind(contained, THREE)
    x44 = rbind(toobject, x39)
    x45 = chain(x43, palette, x44)
    x46 = compose(x45, dneighbors)
    x47 = fork(both, x46, x42)
    x48 = sfilter(x40, x47)
    O = fill(x39, THREE, x48)
    return O



def solve_b1948b0a_97a05b5b(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = rbind(greater, ONE)
    x6 = compose(x5, numcolors)
    x7 = sfilter(x2, x6)
    x8 = lbind(rbind, subtract)
    x9 = switch(x4, TWO, ZERO)
    x10 = lbind(occurrences, x9)
    x11 = lbind(lbind, shift)
    x12 = compose(x8, ulcorner)
    x13 = matcher(first, TWO)
    x14 = compose(flip, x13)
    x15 = rbind(sfilter, x13)
    x16 = rbind(sfilter, x14)
    x17 = lbind(recolor, ZERO)
    x18 = compose(x17, x16)
    x19 = fork(combine, x18, x15)
    x20 = chain(x12, x19, normalize)
    x21 = objects(x9, T, T, T)
    x22 = apply(toindices, x21)
    x23 = chain(x10, x19, normalize)
    x24 = rbind(colorcount, TWO)
    x25 = lbind(sfilter, x22)
    x26 = chain(size, first, x25)
    x27 = compose(positive, size)
    x28 = lbind(lbind, contained)
    x29 = chain(x27, x25, x28)
    x30 = compose(x26, x28)
    x31 = rbind(sfilter, x29)
    x32 = compose(x31, x23)
    x33 = lbind(rbind, equality)
    x34 = rbind(compose, x30)
    x35 = chain(x34, x33, x24)
    x36 = fork(sfilter, x32, x35)
    x37 = fork(apply, x20, x36)
    x38 = compose(x11, normalize)
    x39 = fork(mapply, x38, x37)
    x40 = astuple(cmirror, dmirror)
    x41 = astuple(hmirror, vmirror)
    x42 = combine(x40, x41)
    x43 = product(x42, x42)
    x44 = fork(compose, first, last)
    x45 = apply(x44, x43)
    x46 = lbind(rapply, x45)
    x47 = mapply(x46, x7)
    x48 = mapply(x39, x47)
    x49 = paint(x4, x48)
    x50 = palette(x48)
    x51 = lbind(remove, TWO)
    x52 = x51(x50)
    x53 = chain(first, x51, palette)
    x54 = rbind(contained, x52)
    x55 = chain(flip, x54, x53)
    x56 = sfilter(x7, x55)
    x57 = fork(apply, x20, x23)
    x58 = fork(mapply, x38, x57)
    x59 = mapply(x46, x56)
    x60 = mapply(x58, x59)
    O = paint(x49, x60)
    return O



def solve_b1948b0a_3e980e27(I):
    x1 = replace(I, SIX, TWO)
    x2 = objects(x1, F, T, T)
    x3 = astuple(TEN, TEN)
    x4 = invert(x3)
    x5 = astuple(TWO, x4)
    x6 = astuple(THREE, x4)
    x7 = initset(x5)
    x8 = insert(x6, x7)
    x9 = insert(x8, x2)
    x10 = lbind(contained, TWO)
    x11 = lbind(contained, THREE)
    x12 = compose(invert, ulcorner)
    x13 = lbind(compose, x12)
    x14 = lbind(rbind, sfilter)
    x15 = compose(x13, x14)
    x16 = rbind(compose, center)
    x17 = lbind(lbind, shift)
    x18 = x15(x10)
    x19 = x15(x11)
    x20 = fork(shift, identity, x18)
    x21 = fork(shift, identity, x19)
    x22 = compose(x10, palette)
    x23 = compose(x11, palette)
    x24 = sfilter(x9, x22)
    x25 = argmax(x24, size)
    x26 = remove(x25, x24)
    x27 = vmirror(x25)
    x28 = chain(x16, x17, x20)
    x29 = x28(x27)
    x30 = mapply(x29, x26)
    x31 = sfilter(x9, x23)
    x32 = argmax(x31, size)
    x33 = remove(x32, x31)
    x34 = chain(x16, x17, x21)
    x35 = x34(x32)
    x36 = mapply(x35, x33)
    x37 = combine(x30, x36)
    O = paint(x1, x37)
    return O



def solve_c59eb873_67a3c6ac(I):
    x1 = upscale(I, TWO)
    O = vmirror(x1)
    return O



def solve_c59eb873_68b16354(I):
    x1 = upscale(I, TWO)
    O = hmirror(x1)
    return O



def solve_c59eb873_74dd1130(I):
    x1 = upscale(I, TWO)
    O = dmirror(x1)
    return O



def solve_c59eb873_3c9b0459(I):
    x1 = upscale(I, TWO)
    O = rot180(x1)
    return O



def solve_c59eb873_6150a2bd(I):
    x1 = upscale(I, TWO)
    O = rot180(x1)
    return O



def solve_c59eb873_9172f3a0(I):
    x1 = upscale(I, TWO)
    O = upscale(x1, THREE)
    return O



def solve_c59eb873_9dfd6313(I):
    x1 = upscale(I, TWO)
    O = dmirror(x1)
    return O



def solve_c59eb873_a416b8f3(I):
    x1 = upscale(I, TWO)
    O = hconcat(x1, x1)
    return O



def solve_c59eb873_b1948b0a(I):
    x1 = upscale(I, TWO)
    O = replace(x1, SIX, TWO)
    return O



def solve_c59eb873_c8f0f002(I):
    x1 = upscale(I, TWO)
    O = replace(x1, SEVEN, FIVE)
    return O



def solve_c59eb873_d10ecb37(I):
    x1 = upscale(I, TWO)
    O = crop(x1, ORIGIN, TWO_BY_TWO)
    return O



def solve_c59eb873_d511f180(I):
    x1 = upscale(I, TWO)
    O = switch(x1, FIVE, EIGHT)
    return O



def solve_c59eb873_ed36ccf7(I):
    x1 = upscale(I, TWO)
    O = rot270(x1)
    return O



def solve_c59eb873_4c4377d9(I):
    x1 = upscale(I, TWO)
    x2 = hmirror(x1)
    O = vconcat(x2, x1)
    return O



def solve_c59eb873_6d0aefbc(I):
    x1 = upscale(I, TWO)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_c59eb873_6fa7a44f(I):
    x1 = upscale(I, TWO)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_c59eb873_5614dbcf(I):
    x1 = upscale(I, TWO)
    x2 = replace(x1, FIVE, ZERO)
    O = downscale(x2, THREE)
    return O



def solve_c59eb873_5bd6f4ac(I):
    x1 = upscale(I, TWO)
    x2 = tojvec(SIX)
    O = crop(x1, x2, THREE_BY_THREE)
    return O



def solve_c59eb873_5582e5ca(I):
    x1 = upscale(I, TWO)
    x2 = mostcolor(x1)
    O = canvas(x2, THREE_BY_THREE)
    return O



def solve_c59eb873_8be77c9e(I):
    x1 = upscale(I, TWO)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_c59eb873_c9e6f938(I):
    x1 = upscale(I, TWO)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_c59eb873_2dee498d(I):
    x1 = upscale(I, TWO)
    x2 = hsplit(x1, THREE)
    O = first(x2)
    return O



def solve_c59eb873_1cf80156(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = subgrid(x3, x1)
    return O



def solve_c59eb873_32597951(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, EIGHT)
    x3 = delta(x2)
    O = fill(x1, THREE, x3)
    return O



def solve_c59eb873_25ff71a9(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = move(x1, x3, DOWN)
    return O



def solve_c59eb873_0b148d64(I):
    x1 = upscale(I, TWO)
    x2 = partition(x1)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_c59eb873_1f85a75f(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_c59eb873_23b5c85d(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_c59eb873_ac0a08a4(I):
    x1 = upscale(I, TWO)
    x2 = colorcount(x1, ZERO)
    x3 = subtract(NINE, x2)
    O = upscale(x1, x3)
    return O



def solve_c59eb873_be94b721(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_c59eb873_c909285e(I):
    x1 = upscale(I, TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    O = subgrid(x3, x1)
    return O



def solve_c59eb873_f25ffba3(I):
    x1 = upscale(I, TWO)
    x2 = bottomhalf(x1)
    x3 = hmirror(x2)
    O = vconcat(x3, x2)
    return O



def solve_c59eb873_c1d99e64(I):
    x1 = upscale(I, TWO)
    x2 = frontiers(x1)
    x3 = merge(x2)
    O = fill(x1, TWO, x3)
    return O



def solve_c59eb873_b91ae062(I):
    x1 = upscale(I, TWO)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    O = upscale(x1, x3)
    return O



def solve_c59eb873_3aa6fb7a(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = mapply(corners, x2)
    O = underfill(x1, ONE, x3)
    return O



def solve_c59eb873_7b7f7511(I):
    x1 = upscale(I, TWO)
    x2 = portrait(x1)
    x3 = branch(x2, tophalf, lefthalf)
    O = x3(x1)
    return O



def solve_c59eb873_4258a5f9(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, FIVE)
    x3 = mapply(neighbors, x2)
    O = fill(x1, ONE, x3)
    return O



def solve_c59eb873_2dc579da(I):
    x1 = upscale(I, TWO)
    x2 = vsplit(x1, TWO)
    x3 = rbind(hsplit, TWO)
    x4 = mapply(x3, x2)
    O = argmax(x4, numcolors)
    return O



def solve_c59eb873_28bf18c6(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = hconcat(x4, x4)
    return O



def solve_c59eb873_3af2c5a8(I):
    x1 = upscale(I, TWO)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_c59eb873_44f52bb0(I):
    x1 = upscale(I, TWO)
    x2 = vmirror(x1)
    x3 = equality(x2, x1)
    x4 = branch(x3, ONE, SEVEN)
    O = canvas(x4, UNITY)
    return O



def solve_c59eb873_62c24649(I):
    x1 = upscale(I, TWO)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_c59eb873_67e8384a(I):
    x1 = upscale(I, TWO)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_c59eb873_7468f01a(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = vmirror(x4)
    return O



def solve_c59eb873_662c240a(I):
    x1 = upscale(I, TWO)
    x2 = vsplit(x1, THREE)
    x3 = fork(equality, dmirror, identity)
    x4 = compose(flip, x3)
    O = extract(x2, x4)
    return O



def solve_c59eb873_42a50994(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = cover(x1, x4)
    return O



def solve_c59eb873_56ff96f3(I):
    x1 = upscale(I, TWO)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = mapply(x3, x2)
    O = paint(x1, x4)
    return O



def solve_c59eb873_50cb2852(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = compose(backdrop, inbox)
    x4 = mapply(x3, x2)
    O = fill(x1, EIGHT, x4)
    return O



def solve_c59eb873_4347f46a(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = fork(difference, toindices, box)
    x4 = mapply(x3, x2)
    O = fill(x1, ZERO, x4)
    return O



def solve_c59eb873_46f33fce(I):
    x1 = upscale(I, TWO)
    x2 = rot180(x1)
    x3 = downscale(x2, TWO)
    x4 = rot180(x3)
    O = upscale(x4, FOUR)
    return O



def solve_c59eb873_a740d043(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    O = replace(x4, ONE, ZERO)
    return O



def solve_c59eb873_a79310a0(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = move(x1, x3, DOWN)
    O = replace(x4, EIGHT, TWO)
    return O



def solve_c59eb873_aabf363d(I):
    x1 = upscale(I, TWO)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, ZERO)
    x4 = leastcolor(x3)
    O = replace(x3, x4, x2)
    return O



def solve_c59eb873_ae4f1146(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, F, F, T)
    x3 = rbind(colorcount, ONE)
    x4 = argmax(x2, x3)
    O = subgrid(x4, x1)
    return O



def solve_c59eb873_b27ca6d3(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, THREE, x4)
    return O



def solve_c59eb873_ce22a75a(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = mapply(backdrop, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_c59eb873_dc1df850(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_c59eb873_f25fbde4(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = upscale(x4, TWO)
    return O



def solve_c59eb873_44d8ac46(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = apply(delta, x2)
    x4 = mfilter(x3, square)
    O = fill(x1, TWO, x4)
    return O



def solve_c59eb873_1e0a9b12(I):
    x1 = upscale(I, TWO)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = apply(x3, x2)
    O = rot90(x4)
    return O



def solve_c59eb873_0d3d703e(I):
    x1 = upscale(I, TWO)
    x2 = switch(x1, THREE, FOUR)
    x3 = switch(x2, EIGHT, NINE)
    x4 = switch(x3, TWO, SIX)
    O = switch(x4, ONE, FIVE)
    return O



def solve_c59eb873_3618c87e(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = move(x1, x4, TWO_BY_ZERO)
    return O



def solve_c59eb873_1c786137(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, height)
    x4 = subgrid(x3, x1)
    O = trim(x4)
    return O



def solve_c59eb873_8efcae92(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ONE)
    x4 = compose(size, delta)
    x5 = argmax(x3, x4)
    O = subgrid(x5, x1)
    return O



def solve_c59eb873_445eab21(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = fork(multiply, height, width)
    x4 = argmax(x2, x3)
    x5 = color(x4)
    O = canvas(x5, TWO_BY_TWO)
    return O



def solve_c59eb873_6f8cd79b(I):
    x1 = upscale(I, TWO)
    x2 = asindices(x1)
    x3 = apply(initset, x2)
    x4 = rbind(bordering, x1)
    x5 = mfilter(x3, x4)
    O = fill(x1, EIGHT, x5)
    return O



def solve_c59eb873_2013d3e2(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = lefthalf(x4)
    O = tophalf(x5)
    return O



def solve_c59eb873_41e4d17e(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = mapply(x4, x2)
    O = underfill(x1, SIX, x5)
    return O



def solve_c59eb873_9565186b(I):
    x1 = upscale(I, TWO)
    x2 = shape(x1)
    x3 = objects(x1, T, F, F)
    x4 = argmax(x3, size)
    x5 = canvas(FIVE, x2)
    O = paint(x5, x4)
    return O



def solve_c59eb873_aedd82e4(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, TWO)
    x4 = sizefilter(x3, ONE)
    x5 = merge(x4)
    O = fill(x1, ONE, x5)
    return O



def solve_c59eb873_bb43febb(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, FIVE)
    x4 = compose(backdrop, inbox)
    x5 = mapply(x4, x3)
    O = fill(x1, TWO, x5)
    return O



def solve_c59eb873_e98196ab(I):
    x1 = upscale(I, TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = objects(x2, T, F, T)
    x5 = merge(x4)
    O = paint(x3, x5)
    return O



def solve_c59eb873_f76d97a5(I):
    x1 = upscale(I, TWO)
    x2 = palette(x1)
    x3 = first(x2)
    x4 = last(x2)
    x5 = switch(x1, x3, x4)
    O = replace(x5, FIVE, ZERO)
    return O



def solve_c59eb873_ce9e57f2(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = fork(connect, ulcorner, centerofmass)
    x4 = mapply(x3, x2)
    x5 = fill(x1, EIGHT, x4)
    O = switch(x5, EIGHT, TWO)
    return O



def solve_c59eb873_22eb0ac0(I):
    x1 = upscale(I, TWO)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    O = paint(x1, x5)
    return O



def solve_c59eb873_9f236235(I):
    x1 = upscale(I, TWO)
    x2 = compress(x1)
    x3 = objects(x1, T, F, F)
    x4 = vmirror(x2)
    x5 = valmin(x3, width)
    O = downscale(x4, x5)
    return O



def solve_c59eb873_a699fb00(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, RIGHT)
    x4 = shift(x2, LEFT)
    x5 = intersection(x3, x4)
    O = fill(x1, TWO, x5)
    return O



def solve_c59eb873_46442a0e(I):
    x1 = upscale(I, TWO)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_c59eb873_7fe24cdd(I):
    x1 = upscale(I, TWO)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_c59eb873_0ca9ddb6(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, ONE)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x3)
    x6 = fill(x1, SEVEN, x4)
    O = fill(x6, FOUR, x5)
    return O



def solve_c59eb873_543a7ed5(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, SIX)
    x4 = mapply(outbox, x3)
    x5 = fill(x1, THREE, x4)
    x6 = mapply(delta, x3)
    O = fill(x5, FOUR, x6)
    return O



def solve_c59eb873_0520fde7(I):
    x1 = upscale(I, TWO)
    x2 = vmirror(x1)
    x3 = lefthalf(x2)
    x4 = righthalf(x2)
    x5 = vmirror(x4)
    x6 = cellwise(x3, x5, ZERO)
    O = replace(x6, ONE, TWO)
    return O



def solve_c59eb873_dae9d2b5(I):
    x1 = upscale(I, TWO)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, FOUR)
    x5 = ofcolor(x3, THREE)
    x6 = combine(x4, x5)
    O = fill(x2, SIX, x6)
    return O



def solve_c59eb873_8d5021e8(I):
    x1 = upscale(I, TWO)
    x2 = vmirror(x1)
    x3 = hconcat(x2, x1)
    x4 = hmirror(x3)
    x5 = vconcat(x3, x4)
    x6 = vconcat(x5, x3)
    O = hmirror(x6)
    return O



def solve_c59eb873_b60334d2(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, FIVE)
    x3 = replace(x1, FIVE, ZERO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x2)
    x6 = fill(x3, ONE, x4)
    O = fill(x6, FIVE, x5)
    return O



def solve_c59eb873_b94a9452(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = leastcolor(x4)
    x6 = mostcolor(x4)
    O = switch(x4, x5, x6)
    return O



def solve_c59eb873_d037b0a7(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, DOWN)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    O = paint(x1, x6)
    return O



def solve_c59eb873_d0f5fe59(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = astuple(x3, x3)
    x5 = canvas(ZERO, x4)
    x6 = shoot(ORIGIN, UNITY)
    O = fill(x5, EIGHT, x6)
    return O



def solve_c59eb873_e3497940(I):
    x1 = upscale(I, TWO)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = vmirror(x3)
    x5 = objects(x4, T, F, T)
    x6 = merge(x5)
    O = paint(x2, x6)
    return O



def solve_c59eb873_e9afcf9a(I):
    x1 = upscale(I, TWO)
    x2 = astuple(TWO, ONE)
    x3 = crop(x1, ORIGIN, x2)
    x4 = hmirror(x3)
    x5 = hconcat(x3, x4)
    x6 = hconcat(x5, x5)
    O = hconcat(x6, x5)
    return O



def solve_c59eb873_d406998b(I):
    x1 = upscale(I, TWO)
    x2 = vmirror(x1)
    x3 = ofcolor(x2, FIVE)
    x4 = compose(even, last)
    x5 = sfilter(x3, x4)
    x6 = fill(x2, THREE, x5)
    O = vmirror(x6)
    return O



def solve_c59eb873_3906de3d(I):
    x1 = upscale(I, TWO)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = switch(x2, ONE, TWO)
    x5 = apply(x3, x4)
    x6 = switch(x5, ONE, TWO)
    O = cmirror(x6)
    return O



def solve_c59eb873_00d62c1b(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, FOUR, x6)
    return O



def solve_c59eb873_7b6016b9(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, F)
    x3 = rbind(bordering, x1)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x4)
    x6 = fill(x1, TWO, x5)
    O = replace(x6, ZERO, THREE)
    return O



def solve_c59eb873_67385a82(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, THREE)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = merge(x5)
    O = fill(x1, EIGHT, x6)
    return O



def solve_c59eb873_a5313dff(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, ONE, x6)
    return O



def solve_c59eb873_ea32f347(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, FIVE, FOUR)
    x4 = argmin(x2, size)
    x5 = argmax(x2, size)
    x6 = fill(x3, ONE, x5)
    O = fill(x6, TWO, x4)
    return O



def solve_c59eb873_d631b094(I):
    x1 = upscale(I, TWO)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = ofcolor(x1, x3)
    x5 = size(x4)
    x6 = astuple(ONE, x5)
    O = canvas(x3, x6)
    return O



def solve_c59eb873_10fcaaa3(I):
    x1 = upscale(I, TWO)
    x2 = leastcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = vconcat(x3, x3)
    x5 = ofcolor(x4, x2)
    x6 = mapply(ineighbors, x5)
    O = underfill(x4, EIGHT, x6)
    return O



def solve_c59eb873_007bbfb7(I):
    x1 = upscale(I, TWO)
    x2 = hupscale(x1, THREE)
    x3 = vupscale(x2, THREE)
    x4 = hconcat(x1, x1)
    x5 = hconcat(x4, x1)
    x6 = vconcat(x5, x5)
    x7 = vconcat(x6, x5)
    O = cellwise(x3, x7, ZERO)
    return O



def solve_c59eb873_496994bd(I):
    x1 = upscale(I, TWO)
    x2 = width(x1)
    x3 = height(x1)
    x4 = halve(x3)
    x5 = astuple(x4, x2)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    O = vconcat(x6, x7)
    return O



def solve_c59eb873_1f876c06(I):
    x1 = upscale(I, TWO)
    x2 = fgpartition(x1)
    x3 = compose(last, first)
    x4 = power(last, TWO)
    x5 = fork(connect, x3, x4)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_c59eb873_39a8645d(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = matcher(color, x5)
    x7 = extract(x2, x6)
    O = subgrid(x7, x1)
    return O



def solve_c59eb873_1b2d62fb(I):
    x1 = upscale(I, TWO)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = replace(x2, NINE, ZERO)
    O = fill(x7, EIGHT, x6)
    return O



def solve_c59eb873_90c28cc7(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = dedupe(x4)
    x6 = rot90(x5)
    x7 = dedupe(x6)
    O = rot270(x7)
    return O



def solve_c59eb873_b6afb2da(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, F)
    x3 = replace(x1, FIVE, TWO)
    x4 = colorfilter(x2, FIVE)
    x5 = mapply(box, x4)
    x6 = fill(x3, FOUR, x5)
    x7 = mapply(corners, x4)
    O = fill(x6, ONE, x7)
    return O



def solve_c59eb873_b9b7f026(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, F)
    x3 = argmin(x2, size)
    x4 = rbind(adjacent, x3)
    x5 = remove(x3, x2)
    x6 = extract(x5, x4)
    x7 = color(x6)
    O = canvas(x7, UNITY)
    return O



def solve_c59eb873_ba97ae07(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = ofcolor(x1, x5)
    x7 = backdrop(x6)
    O = fill(x1, x5, x7)
    return O



def solve_c59eb873_c9f8e694(I):
    x1 = upscale(I, TWO)
    x2 = height(x1)
    x3 = width(x1)
    x4 = ofcolor(x1, ZERO)
    x5 = astuple(x2, ONE)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hupscale(x6, x3)
    O = fill(x7, ZERO, x4)
    return O



def solve_c59eb873_d23f8c26(I):
    x1 = upscale(I, TWO)
    x2 = asindices(x1)
    x3 = width(x1)
    x4 = halve(x3)
    x5 = matcher(last, x4)
    x6 = compose(flip, x5)
    x7 = sfilter(x2, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_c59eb873_d5d6de2d(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = sfilter(x2, square)
    x4 = difference(x2, x3)
    x5 = compose(backdrop, inbox)
    x6 = mapply(x5, x4)
    x7 = replace(x1, TWO, ZERO)
    O = fill(x7, THREE, x6)
    return O



def solve_c59eb873_dbc1a6ce(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, ONE)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_c59eb873_ded97339(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, EIGHT)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_c59eb873_ea786f4a(I):
    x1 = upscale(I, TWO)
    x2 = width(x1)
    x3 = shoot(ORIGIN, UNITY)
    x4 = decrement(x2)
    x5 = tojvec(x4)
    x6 = shoot(x5, DOWN_LEFT)
    x7 = combine(x3, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_c59eb873_08ed6ac7(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = order(x2, height)
    x5 = size(x3)
    x6 = interval(x5, ZERO, NEG_ONE)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_c59eb873_40853293(I):
    x1 = upscale(I, TWO)
    x2 = partition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    x6 = mfilter(x4, vline)
    x7 = paint(x1, x5)
    O = paint(x7, x6)
    return O



def solve_c59eb873_5521c0d9(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = cover(x1, x3)
    x5 = chain(toivec, invert, height)
    x6 = fork(shift, identity, x5)
    x7 = mapply(x6, x2)
    O = paint(x4, x7)
    return O



def solve_c59eb873_f8ff0b80(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = rbind(canvas, UNITY)
    x6 = apply(x5, x4)
    x7 = merge(x6)
    O = hmirror(x7)
    return O



def solve_c59eb873_85c4e7cd(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, F)
    x3 = compose(invert, size)
    x4 = order(x2, size)
    x5 = order(x2, x3)
    x6 = apply(color, x5)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_c59eb873_d2abd087(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = matcher(size, SIX)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x3)
    x6 = mfilter(x2, x4)
    x7 = fill(x1, TWO, x5)
    O = fill(x7, ONE, x6)
    return O



def solve_c59eb873_363442ee(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, ONE)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = asobject(x3)
    x5 = lbind(shift, x4)
    x6 = compose(x5, decrement)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_c59eb873_5168d44c(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, THREE)
    x3 = height(x2)
    x4 = equality(x3, ONE)
    x5 = branch(x4, ZERO_BY_TWO, TWO_BY_ZERO)
    x6 = ofcolor(x1, TWO)
    x7 = recolor(TWO, x6)
    O = move(x1, x7, x5)
    return O



def solve_c59eb873_e9614598(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, ONE)
    x3 = fork(add, first, last)
    x4 = x3(x2)
    x5 = halve(x4)
    x6 = dneighbors(x5)
    x7 = insert(x5, x6)
    O = fill(x1, THREE, x7)
    return O



def solve_c59eb873_d9fac9be(I):
    x1 = upscale(I, TWO)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = color(x4)
    x6 = remove(ZERO, x2)
    x7 = other(x6, x5)
    O = canvas(x7, UNITY)
    return O



def solve_c59eb873_e50d258f(I):
    x1 = upscale(I, TWO)
    x2 = width(x1)
    x3 = astuple(NINE, x2)
    x4 = canvas(ZERO, x3)
    x5 = vconcat(x1, x4)
    x6 = objects(x5, F, F, T)
    x7 = rbind(colorcount, TWO)
    x8 = argmax(x6, x7)
    O = subgrid(x8, x1)
    return O



def solve_c59eb873_810b9b61(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = apply(toindices, x2)
    x4 = fork(either, vline, hline)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = fork(equality, identity, box)
    x8 = mfilter(x6, x7)
    O = fill(x1, THREE, x8)
    return O



def solve_c59eb873_54d82841(I):
    x1 = upscale(I, TWO)
    x2 = height(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(last, center)
    x5 = apply(x4, x3)
    x6 = decrement(x2)
    x7 = lbind(astuple, x6)
    x8 = apply(x7, x5)
    O = fill(x1, FOUR, x8)
    return O



def solve_c59eb873_60b61512(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = mapply(delta, x2)
    O = fill(x1, SEVEN, x3)
    return O



def solve_c59eb873_25d8a9c8(I):
    x1 = upscale(I, TWO)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, THREE)
    x5 = mfilter(x4, hline)
    x6 = toindices(x5)
    x7 = difference(x2, x6)
    x8 = fill(x1, FIVE, x6)
    O = fill(x8, ZERO, x7)
    return O



def solve_c59eb873_239be575(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, F, T, T)
    x3 = lbind(contained, TWO)
    x4 = compose(x3, palette)
    x5 = sfilter(x2, x4)
    x6 = size(x5)
    x7 = greater(x6, ONE)
    x8 = branch(x7, ZERO, EIGHT)
    O = canvas(x8, UNITY)
    return O



def solve_c59eb873_5c0a986e(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, ONE)
    x4 = lrcorner(x2)
    x5 = ulcorner(x3)
    x6 = shoot(x4, UNITY)
    x7 = shoot(x5, NEG_UNITY)
    x8 = fill(x1, TWO, x6)
    O = fill(x8, ONE, x7)
    return O



def solve_c59eb873_6430c8c4(I):
    x1 = upscale(I, TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(FOUR, FOUR)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, THREE, x7)
    return O



def solve_c59eb873_94f9d214(I):
    x1 = upscale(I, TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = astuple(FOUR, FOUR)
    x7 = canvas(ZERO, x6)
    x8 = intersection(x4, x5)
    O = fill(x7, TWO, x8)
    return O



def solve_c59eb873_ce4f8723(I):
    x1 = upscale(I, TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = astuple(FOUR, FOUR)
    x8 = canvas(THREE, x7)
    O = fill(x8, ZERO, x6)
    return O



def solve_c59eb873_d13f3404(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, UNITY)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = astuple(SIX, SIX)
    x8 = canvas(ZERO, x7)
    O = paint(x8, x6)
    return O



def solve_c59eb873_f2829549(I):
    x1 = upscale(I, TWO)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = shape(x2)
    x8 = canvas(ZERO, x7)
    O = fill(x8, THREE, x6)
    return O



def solve_c59eb873_fafffa47(I):
    x1 = upscale(I, TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = shape(x3)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, TWO, x7)
    return O



def solve_c59eb873_fcb5c309(I):
    x1 = upscale(I, TWO)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = colorfilter(x3, x2)
    x5 = difference(x3, x4)
    x6 = argmax(x5, size)
    x7 = color(x6)
    x8 = subgrid(x6, x1)
    O = replace(x8, x7, x2)
    return O



def solve_c59eb873_ff805c23(I):
    x1 = upscale(I, TWO)
    x2 = hmirror(x1)
    x3 = vmirror(x1)
    x4 = ofcolor(x1, ONE)
    x5 = subgrid(x4, x2)
    x6 = subgrid(x4, x3)
    x7 = palette(x5)
    x8 = contained(ONE, x7)
    O = branch(x8, x6, x5)
    return O



def solve_c59eb873_e76a88a6(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, F, F, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = remove(x3, x2)
    x6 = apply(ulcorner, x5)
    x7 = lbind(shift, x4)
    x8 = mapply(x7, x6)
    O = paint(x1, x8)
    return O



def solve_c59eb873_7f4411dc(I):
    x1 = upscale(I, TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = rbind(difference, x3)
    x5 = rbind(greater, TWO)
    x6 = chain(x5, size, x4)
    x7 = compose(x6, dneighbors)
    x8 = sfilter(x3, x7)
    O = fill(x1, ZERO, x8)
    return O



def solve_c59eb873_b230c067(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(normalize, x3)
    x5 = leastcommon(x4)
    x6 = matcher(normalize, x5)
    x7 = extract(x2, x6)
    x8 = replace(x1, EIGHT, ONE)
    O = fill(x8, TWO, x7)
    return O



def solve_c59eb873_e8593010(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = sizefilter(x2, TWO)
    x5 = merge(x3)
    x6 = fill(x1, THREE, x5)
    x7 = merge(x4)
    x8 = fill(x6, TWO, x7)
    O = replace(x8, ZERO, ONE)
    return O



def solve_c59eb873_6d75e8bb(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = ulcorner(x3)
    x5 = subgrid(x3, x1)
    x6 = replace(x5, ZERO, TWO)
    x7 = asobject(x6)
    x8 = shift(x7, x4)
    O = paint(x1, x8)
    return O



def solve_c59eb873_1190e5a7(I):
    x1 = upscale(I, TWO)
    x2 = mostcolor(x1)
    x3 = frontiers(x1)
    x4 = sfilter(x3, vline)
    x5 = difference(x3, x4)
    x6 = astuple(x5, x4)
    x7 = apply(size, x6)
    x8 = increment(x7)
    O = canvas(x2, x8)
    return O



def solve_c59eb873_6e02f1e3(I):
    x1 = upscale(I, TWO)
    x2 = numcolors(x1)
    x3 = canvas(ZERO, THREE_BY_THREE)
    x4 = equality(x2, THREE)
    x5 = equality(x2, TWO)
    x6 = branch(x4, TWO_BY_ZERO, ORIGIN)
    x7 = branch(x5, TWO_BY_TWO, ZERO_BY_TWO)
    x8 = connect(x6, x7)
    O = fill(x3, FIVE, x8)
    return O



def solve_c59eb873_a61f2674(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = replace(x1, FIVE, ZERO)
    x6 = recolor(ONE, x3)
    x7 = recolor(TWO, x4)
    x8 = combine(x6, x7)
    O = paint(x5, x8)
    return O



def solve_c59eb873_fcc82909(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, F, T, T)
    x3 = rbind(add, DOWN)
    x4 = compose(x3, llcorner)
    x5 = compose(toivec, numcolors)
    x6 = fork(add, lrcorner, x5)
    x7 = fork(astuple, x4, x6)
    x8 = compose(box, x7)
    x9 = mapply(x8, x2)
    O = fill(x1, THREE, x9)
    return O



def solve_c59eb873_72ca375d(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = rbind(subgrid, x1)
    x5 = apply(x4, x3)
    x6 = apply(vmirror, x5)
    x7 = papply(equality, x5, x6)
    x8 = pair(x5, x7)
    x9 = extract(x8, last)
    O = first(x9)
    return O



def solve_c59eb873_253bf280(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, EIGHT)
    x3 = prapply(connect, x2, x2)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = fork(either, vline, hline)
    x8 = mfilter(x6, x7)
    x9 = fill(x1, THREE, x8)
    O = fill(x9, EIGHT, x2)
    return O



def solve_c59eb873_1f642eb9(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = rbind(gravitate, x5)
    x7 = compose(crement, x6)
    x8 = fork(shift, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_c59eb873_31aa019c(I):
    x1 = upscale(I, TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = first(x3)
    x5 = neighbors(x4)
    x6 = astuple(TEN, TEN)
    x7 = canvas(ZERO, x6)
    x8 = initset(x4)
    x9 = fill(x7, x2, x8)
    O = fill(x9, TWO, x5)
    return O



def solve_c59eb873_27a28665(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, F)
    x3 = valmax(x2, size)
    x4 = equality(x3, ONE)
    x5 = equality(x3, FOUR)
    x6 = equality(x3, FIVE)
    x7 = branch(x4, TWO, ONE)
    x8 = branch(x5, THREE, x7)
    x9 = branch(x6, SIX, x8)
    O = canvas(x9, UNITY)
    return O



def solve_c59eb873_7ddcd7ec(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = color(x5)
    x7 = lbind(position, x5)
    x8 = fork(shoot, center, x7)
    x9 = mapply(x8, x3)
    O = fill(x1, x6, x9)
    return O



def solve_c59eb873_3bd67248(I):
    x1 = upscale(I, TWO)
    x2 = height(x1)
    x3 = decrement(x2)
    x4 = decrement(x3)
    x5 = astuple(x4, ONE)
    x6 = astuple(x3, ONE)
    x7 = shoot(x5, UP_RIGHT)
    x8 = shoot(x6, RIGHT)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_c59eb873_73251a56(I):
    x1 = upscale(I, TWO)
    x2 = dmirror(x1)
    x3 = papply(pair, x1, x2)
    x4 = lbind(apply, maximum)
    x5 = apply(x4, x3)
    x6 = mostcolor(x5)
    x7 = replace(x5, ZERO, x6)
    x8 = index(x7, ORIGIN)
    x9 = shoot(ORIGIN, UNITY)
    O = fill(x7, x8, x9)
    return O



def solve_c59eb873_25d487eb(I):
    x1 = upscale(I, TWO)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = ofcolor(x1, x2)
    x5 = center(x4)
    x6 = merge(x3)
    x7 = center(x6)
    x8 = subtract(x7, x5)
    x9 = shoot(x5, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_c59eb873_8f2ea7aa(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    O = cellwise(x5, x9, ZERO)
    return O



def solve_c59eb873_b8825c91(I):
    x1 = upscale(I, TWO)
    x2 = replace(x1, FOUR, ZERO)
    x3 = dmirror(x2)
    x4 = papply(pair, x2, x3)
    x5 = lbind(apply, maximum)
    x6 = apply(x5, x4)
    x7 = cmirror(x6)
    x8 = papply(pair, x6, x7)
    x9 = apply(x5, x8)
    O = cmirror(x9)
    return O



def solve_c59eb873_cce03e0d(I):
    x1 = upscale(I, TWO)
    x2 = upscale(x1, THREE)
    x3 = hconcat(x1, x1)
    x4 = hconcat(x3, x1)
    x5 = vconcat(x4, x4)
    x6 = vconcat(x5, x4)
    x7 = ofcolor(x2, ZERO)
    x8 = ofcolor(x2, ONE)
    x9 = combine(x7, x8)
    O = fill(x6, ZERO, x9)
    return O



def solve_c59eb873_d364b489(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, DOWN)
    x4 = fill(x1, EIGHT, x3)
    x5 = shift(x2, UP)
    x6 = fill(x4, TWO, x5)
    x7 = shift(x2, RIGHT)
    x8 = fill(x6, SIX, x7)
    x9 = shift(x2, LEFT)
    O = fill(x8, SEVEN, x9)
    return O



def solve_c59eb873_a5f85a15(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = interval(ONE, NINE, ONE)
    x4 = apply(double, x3)
    x5 = apply(decrement, x4)
    x6 = papply(astuple, x5, x5)
    x7 = apply(ulcorner, x2)
    x8 = lbind(shift, x6)
    x9 = mapply(x8, x7)
    O = fill(x1, FOUR, x9)
    return O



def solve_c59eb873_3ac3eb23(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = chain(ineighbors, last, first)
    x4 = fork(recolor, color, x3)
    x5 = mapply(x4, x2)
    x6 = paint(x1, x5)
    x7 = vsplit(x6, THREE)
    x8 = first(x7)
    x9 = vconcat(x8, x8)
    O = vconcat(x8, x9)
    return O



def solve_c59eb873_22168020(I):
    x1 = upscale(I, TWO)
    x2 = palette(x1)
    x3 = remove(ZERO, x2)
    x4 = lbind(ofcolor, x1)
    x5 = lbind(prapply, connect)
    x6 = fork(x5, x4, x4)
    x7 = compose(merge, x6)
    x8 = fork(recolor, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_c59eb873_6e82a1ae(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sizefilter, x2)
    x4 = compose(merge, x3)
    x5 = x4(TWO)
    x6 = x4(THREE)
    x7 = x4(FOUR)
    x8 = fill(x1, THREE, x5)
    x9 = fill(x8, TWO, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_c59eb873_868de0fa(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, F)
    x3 = sfilter(x2, square)
    x4 = compose(even, height)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = merge(x5)
    x8 = merge(x6)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, SEVEN, x8)
    return O



def solve_c59eb873_681b3aeb(I):
    x1 = upscale(I, TWO)
    x2 = rot270(x1)
    x3 = objects(x2, T, F, T)
    x4 = argmax(x3, size)
    x5 = argmin(x3, size)
    x6 = color(x5)
    x7 = canvas(x6, THREE_BY_THREE)
    x8 = normalize(x4)
    x9 = paint(x7, x8)
    O = rot90(x9)
    return O



def solve_c59eb873_8e5a5113(I):
    x1 = upscale(I, TWO)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = rot90(x2)
    x4 = rot180(x2)
    x5 = astuple(x3, x4)
    x6 = astuple(FOUR, EIGHT)
    x7 = apply(tojvec, x6)
    x8 = apply(asobject, x5)
    x9 = mpapply(shift, x8, x7)
    O = paint(x1, x9)
    return O



def solve_c59eb873_025d127b(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = apply(color, x2)
    x4 = merge(x2)
    x5 = lbind(colorfilter, x2)
    x6 = rbind(argmax, rightmost)
    x7 = compose(x6, x5)
    x8 = mapply(x7, x3)
    x9 = difference(x4, x8)
    O = move(x1, x9, RIGHT)
    return O



def solve_c59eb873_2281f1f4(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, FIVE)
    x3 = product(x2, x2)
    x4 = power(first, TWO)
    x5 = power(last, TWO)
    x6 = fork(astuple, x4, x5)
    x7 = apply(x6, x3)
    x8 = urcorner(x2)
    x9 = remove(x8, x7)
    O = underfill(x1, TWO, x9)
    return O



def solve_c59eb873_cf98881b(I):
    x1 = upscale(I, TWO)
    x2 = hsplit(x1, THREE)
    x3 = first(x2)
    x4 = remove(x3, x2)
    x5 = first(x4)
    x6 = last(x4)
    x7 = ofcolor(x5, NINE)
    x8 = ofcolor(x3, FOUR)
    x9 = fill(x6, NINE, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_c59eb873_bda2d7a6(I):
    x1 = upscale(I, TWO)
    x2 = partition(x1)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = last(x3)
    x6 = remove(x5, x3)
    x7 = repeat(x5, ONE)
    x8 = combine(x7, x6)
    x9 = mpapply(recolor, x4, x8)
    O = paint(x1, x9)
    return O



def solve_c59eb873_6455b5f5(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = argmax(x2, size)
    x5 = valmin(x2, size)
    x6 = sizefilter(x3, x5)
    x7 = recolor(ONE, x4)
    x8 = merge(x6)
    x9 = paint(x1, x7)
    O = fill(x9, EIGHT, x8)
    return O



def solve_c59eb873_b8cdaf2b(I):
    x1 = upscale(I, TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = shift(x3, UP)
    x5 = ulcorner(x4)
    x6 = urcorner(x4)
    x7 = shoot(x5, NEG_UNITY)
    x8 = shoot(x6, UP_RIGHT)
    x9 = combine(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_c59eb873_bd4472b8(I):
    x1 = upscale(I, TWO)
    x2 = width(x1)
    x3 = astuple(TWO, x2)
    x4 = crop(x1, ORIGIN, x3)
    x5 = tophalf(x4)
    x6 = dmirror(x5)
    x7 = hupscale(x6, x2)
    x8 = repeat(x7, TWO)
    x9 = merge(x8)
    O = vconcat(x4, x9)
    return O



def solve_c59eb873_4be741c5(I):
    x1 = upscale(I, TWO)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = branch(x2, height, width)
    x5 = x4(x1)
    x6 = astuple(ONE, x5)
    x7 = x3(x1)
    x8 = crop(x7, ORIGIN, x6)
    x9 = apply(dedupe, x8)
    O = x3(x9)
    return O



def solve_c59eb873_bbc9ae5d(I):
    x1 = upscale(I, TWO)
    x2 = width(x1)
    x3 = palette(x1)
    x4 = halve(x2)
    x5 = vupscale(x1, x4)
    x6 = rbind(shoot, UNITY)
    x7 = other(x3, ZERO)
    x8 = ofcolor(x5, x7)
    x9 = mapply(x6, x8)
    O = fill(x5, x7, x9)
    return O



def solve_c59eb873_d90796e8(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, F, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = lbind(contained, TWO)
    x5 = compose(x4, palette)
    x6 = mfilter(x3, x5)
    x7 = cover(x1, x6)
    x8 = matcher(first, THREE)
    x9 = sfilter(x6, x8)
    O = fill(x7, EIGHT, x9)
    return O



def solve_c59eb873_2c608aff(I):
    x1 = upscale(I, TWO)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = toindices(x4)
    x6 = ofcolor(x1, x2)
    x7 = prapply(connect, x5, x6)
    x8 = fork(either, vline, hline)
    x9 = mfilter(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_c59eb873_f8b3ba0a(I):
    x1 = upscale(I, TWO)
    x2 = compress(x1)
    x3 = astuple(THREE, ONE)
    x4 = palette(x2)
    x5 = lbind(colorcount, x2)
    x6 = compose(invert, x5)
    x7 = order(x4, x6)
    x8 = rbind(canvas, UNITY)
    x9 = apply(x8, x7)
    x10 = merge(x9)
    O = crop(x10, DOWN, x3)
    return O



def solve_c59eb873_80af3007(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    x10 = cellwise(x5, x9, ZERO)
    O = downscale(x10, THREE)
    return O



def solve_c59eb873_83302e8f(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = sfilter(x3, square)
    x5 = difference(x3, x4)
    x6 = merge(x4)
    x7 = recolor(THREE, x6)
    x8 = merge(x5)
    x9 = recolor(FOUR, x8)
    x10 = paint(x1, x7)
    O = paint(x10, x9)
    return O



def solve_c59eb873_1fad071e(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, ONE)
    x4 = sizefilter(x3, FOUR)
    x5 = size(x4)
    x6 = subtract(FIVE, x5)
    x7 = astuple(ONE, x5)
    x8 = canvas(ONE, x7)
    x9 = astuple(ONE, x6)
    x10 = canvas(ZERO, x9)
    O = hconcat(x8, x10)
    return O



def solve_c59eb873_11852cab(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = hmirror(x3)
    x5 = vmirror(x3)
    x6 = dmirror(x3)
    x7 = cmirror(x3)
    x8 = paint(x1, x4)
    x9 = paint(x8, x5)
    x10 = paint(x9, x6)
    O = paint(x10, x7)
    return O



def solve_c59eb873_3428a4f5(I):
    x1 = upscale(I, TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(SIX, FIVE)
    x5 = ofcolor(x2, TWO)
    x6 = ofcolor(x3, TWO)
    x7 = combine(x5, x6)
    x8 = intersection(x5, x6)
    x9 = difference(x7, x8)
    x10 = canvas(ZERO, x4)
    O = fill(x10, THREE, x9)
    return O



def solve_c59eb873_178fcbfb(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(vfrontier, x3)
    x5 = fill(x1, TWO, x4)
    x6 = colorfilter(x2, TWO)
    x7 = difference(x2, x6)
    x8 = compose(hfrontier, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x7)
    O = paint(x5, x10)
    return O



def solve_c59eb873_54d9e175(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = compose(neighbors, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x3)
    x7 = paint(x1, x6)
    x8 = replace(x7, ONE, SIX)
    x9 = replace(x8, TWO, SEVEN)
    x10 = replace(x9, THREE, EIGHT)
    O = replace(x10, FOUR, NINE)
    return O



def solve_c59eb873_623ea044(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = center(x3)
    x5 = color(x3)
    x6 = astuple(UNITY, NEG_UNITY)
    x7 = astuple(UP_RIGHT, DOWN_LEFT)
    x8 = combine(x6, x7)
    x9 = lbind(shoot, x4)
    x10 = mapply(x9, x8)
    O = fill(x1, x5, x10)
    return O



def solve_c59eb873_6b9890af(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, TWO)
    x4 = argmin(x2, size)
    x5 = subgrid(x3, x1)
    x6 = width(x5)
    x7 = divide(x6, THREE)
    x8 = upscale(x4, x7)
    x9 = normalize(x8)
    x10 = shift(x9, UNITY)
    O = paint(x5, x10)
    return O



def solve_c59eb873_794b24be(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, ONE)
    x3 = size(x2)
    x4 = decrement(x3)
    x5 = canvas(ZERO, THREE_BY_THREE)
    x6 = tojvec(x4)
    x7 = connect(ORIGIN, x6)
    x8 = equality(x3, FOUR)
    x9 = insert(UNITY, x7)
    x10 = branch(x8, x9, x7)
    O = fill(x5, TWO, x10)
    return O



def solve_c59eb873_88a62173(I):
    x1 = upscale(I, TWO)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = tophalf(x3)
    x6 = bottomhalf(x2)
    x7 = bottomhalf(x3)
    x8 = astuple(x4, x5)
    x9 = astuple(x6, x7)
    x10 = combine(x8, x9)
    O = leastcommon(x10)
    return O



def solve_c59eb873_890034e9(I):
    x1 = upscale(I, TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = inbox(x3)
    x5 = recolor(ZERO, x4)
    x6 = occurrences(x1, x5)
    x7 = normalize(x3)
    x8 = shift(x7, NEG_UNITY)
    x9 = lbind(shift, x8)
    x10 = mapply(x9, x6)
    O = fill(x1, x2, x10)
    return O



def solve_c59eb873_99b1bc43(I):
    x1 = upscale(I, TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = combine(x4, x5)
    x7 = intersection(x4, x5)
    x8 = difference(x6, x7)
    x9 = shape(x2)
    x10 = canvas(ZERO, x9)
    O = fill(x10, THREE, x8)
    return O



def solve_c59eb873_a9f96cdd(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = shift(x2, NEG_UNITY)
    x5 = fill(x3, THREE, x4)
    x6 = shift(x2, UP_RIGHT)
    x7 = fill(x5, SIX, x6)
    x8 = shift(x2, DOWN_LEFT)
    x9 = fill(x7, EIGHT, x8)
    x10 = shift(x2, UNITY)
    O = fill(x9, SEVEN, x10)
    return O



def solve_c59eb873_af902bf9(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, FOUR)
    x3 = prapply(connect, x2, x2)
    x4 = fork(either, vline, hline)
    x5 = mfilter(x3, x4)
    x6 = underfill(x1, NEG_ONE, x5)
    x7 = objects(x6, F, F, T)
    x8 = compose(backdrop, inbox)
    x9 = mapply(x8, x7)
    x10 = fill(x6, TWO, x9)
    O = replace(x10, NEG_ONE, ZERO)
    return O



def solve_c59eb873_b548a754(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, EIGHT, ZERO)
    x4 = leastcolor(x3)
    x5 = replace(x3, x4, ZERO)
    x6 = leastcolor(x5)
    x7 = merge(x2)
    x8 = backdrop(x7)
    x9 = box(x7)
    x10 = fill(x1, x4, x8)
    O = fill(x10, x6, x9)
    return O



def solve_c59eb873_c3e719e8(I):
    x1 = upscale(I, TWO)
    x2 = mostcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = upscale(x1, THREE)
    x5 = ofcolor(x4, x2)
    x6 = asindices(x4)
    x7 = difference(x6, x5)
    x8 = hconcat(x3, x1)
    x9 = vconcat(x8, x8)
    x10 = vconcat(x9, x8)
    O = fill(x10, ZERO, x7)
    return O



def solve_c59eb873_de1cd16c(I):
    x1 = upscale(I, TWO)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = rbind(subgrid, x1)
    x7 = apply(x6, x5)
    x8 = rbind(colorcount, x2)
    x9 = argmax(x7, x8)
    x10 = mostcolor(x9)
    O = canvas(x10, UNITY)
    return O



def solve_c59eb873_d8c310e9(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = hperiod(x3)
    x5 = multiply(x4, THREE)
    x6 = tojvec(x4)
    x7 = tojvec(x5)
    x8 = shift(x3, x6)
    x9 = shift(x3, x7)
    x10 = paint(x1, x8)
    O = paint(x10, x9)
    return O



def solve_c59eb873_a3325580(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = valmax(x2, size)
    x4 = sizefilter(x2, x3)
    x5 = order(x4, leftmost)
    x6 = apply(color, x5)
    x7 = astuple(ONE, x3)
    x8 = rbind(canvas, x7)
    x9 = apply(x8, x6)
    x10 = merge(x9)
    O = dmirror(x10)
    return O



def solve_c59eb873_8eb1be9a(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = interval(NEG_TWO, FOUR, ONE)
    x5 = lbind(shift, x3)
    x6 = height(x3)
    x7 = rbind(multiply, x6)
    x8 = apply(x7, x4)
    x9 = apply(toivec, x8)
    x10 = mapply(x5, x9)
    O = paint(x1, x10)
    return O



def solve_c59eb873_321b1fc6(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, F, F, T)
    x3 = colorfilter(x2, EIGHT)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = cover(x1, x5)
    x7 = normalize(x5)
    x8 = lbind(shift, x7)
    x9 = apply(ulcorner, x3)
    x10 = mapply(x8, x9)
    O = paint(x6, x10)
    return O



def solve_c59eb873_1caeab9d(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, ONE)
    x4 = lowermost(x3)
    x5 = lbind(subtract, x4)
    x6 = chain(toivec, x5, lowermost)
    x7 = fork(shift, identity, x6)
    x8 = merge(x2)
    x9 = cover(x1, x8)
    x10 = mapply(x7, x2)
    O = paint(x9, x10)
    return O



def solve_c59eb873_1b60fb0c(I):
    x1 = upscale(I, TWO)
    x2 = rot90(x1)
    x3 = ofcolor(x1, ONE)
    x4 = ofcolor(x2, ONE)
    x5 = neighbors(ORIGIN)
    x6 = mapply(neighbors, x5)
    x7 = lbind(shift, x4)
    x8 = apply(x7, x6)
    x9 = lbind(intersection, x3)
    x10 = compose(size, x9)
    x11 = argmax(x8, x10)
    O = underfill(x1, TWO, x11)
    return O



def solve_c59eb873_ddf7fa4f(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = colorfilter(x2, FIVE)
    x5 = product(x3, x4)
    x6 = fork(vmatching, first, last)
    x7 = sfilter(x5, x6)
    x8 = compose(color, first)
    x9 = fork(recolor, x8, last)
    x10 = mapply(x9, x7)
    O = paint(x1, x10)
    return O



def solve_c59eb873_47c1f68c(I):
    x1 = upscale(I, TWO)
    x2 = leastcolor(x1)
    x3 = vmirror(x1)
    x4 = objects(x1, T, T, T)
    x5 = merge(x4)
    x6 = mostcolor(x5)
    x7 = cellwise(x1, x3, x2)
    x8 = hmirror(x7)
    x9 = cellwise(x7, x8, x2)
    x10 = compress(x9)
    O = replace(x10, x2, x6)
    return O



def solve_c59eb873_6c434453(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, EIGHT)
    x4 = dneighbors(UNITY)
    x5 = insert(UNITY, x4)
    x6 = merge(x3)
    x7 = cover(x1, x6)
    x8 = apply(ulcorner, x3)
    x9 = lbind(shift, x5)
    x10 = mapply(x9, x8)
    O = fill(x7, TWO, x10)
    return O



def solve_c59eb873_23581191(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = paint(x1, x6)
    x8 = fork(intersection, first, last)
    x9 = apply(x4, x2)
    x10 = x8(x9)
    O = fill(x7, TWO, x10)
    return O



def solve_c59eb873_c8cbb738(I):
    x1 = upscale(I, TWO)
    x2 = mostcolor(x1)
    x3 = fgpartition(x1)
    x4 = valmax(x3, shape)
    x5 = canvas(x2, x4)
    x6 = apply(normalize, x3)
    x7 = lbind(subtract, x4)
    x8 = chain(halve, x7, shape)
    x9 = fork(shift, identity, x8)
    x10 = mapply(x9, x6)
    O = paint(x5, x10)
    return O



def solve_c59eb873_d4469b4b(I):
    x1 = upscale(I, TWO)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = equality(x3, ONE)
    x5 = equality(x3, TWO)
    x6 = branch(x4, UNITY, TWO_BY_TWO)
    x7 = branch(x5, RIGHT, x6)
    x8 = fork(combine, vfrontier, hfrontier)
    x9 = x8(x7)
    x10 = canvas(ZERO, THREE_BY_THREE)
    O = fill(x10, FIVE, x9)
    return O



def solve_c59eb873_6ecd11f4(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = subgrid(x3, x1)
    x6 = subgrid(x4, x1)
    x7 = width(x5)
    x8 = width(x6)
    x9 = divide(x7, x8)
    x10 = downscale(x5, x9)
    x11 = ofcolor(x10, ZERO)
    O = fill(x6, ZERO, x11)
    return O



def solve_c59eb873_eb281b96(I):
    x1 = upscale(I, TWO)
    x2 = height(x1)
    x3 = width(x1)
    x4 = decrement(x2)
    x5 = astuple(x4, x3)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    x8 = vconcat(x1, x7)
    x9 = double(x4)
    x10 = astuple(x9, x3)
    x11 = crop(x8, DOWN, x10)
    O = vconcat(x8, x11)
    return O



def solve_c59eb873_ff28f65a(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = double(x3)
    x5 = interval(ZERO, x4, TWO)
    x6 = apply(tojvec, x5)
    x7 = astuple(ONE, NINE)
    x8 = canvas(ZERO, x7)
    x9 = fill(x8, ONE, x6)
    x10 = hsplit(x9, THREE)
    O = merge(x10)
    return O



def solve_c59eb873_7e0986d6(I):
    x1 = upscale(I, TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = replace(x1, x2, ZERO)
    x5 = leastcolor(x4)
    x6 = rbind(colorcount, x5)
    x7 = chain(positive, decrement, x6)
    x8 = rbind(toobject, x4)
    x9 = chain(x7, x8, dneighbors)
    x10 = sfilter(x3, x9)
    O = fill(x4, x5, x10)
    return O



def solve_c59eb873_09629e4f(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, F, T, T)
    x3 = argmin(x2, numcolors)
    x4 = normalize(x3)
    x5 = upscale(x4, FOUR)
    x6 = paint(x1, x5)
    x7 = ofcolor(x1, FIVE)
    O = fill(x6, FIVE, x7)
    return O



def solve_c59eb873_a85d4709(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, FIVE)
    x3 = lbind(matcher, last)
    x4 = lbind(sfilter, x2)
    x5 = lbind(mapply, hfrontier)
    x6 = chain(x5, x4, x3)
    x7 = x6(ZERO)
    x8 = x6(TWO)
    x9 = x6(ONE)
    x10 = fill(x1, TWO, x7)
    x11 = fill(x10, THREE, x8)
    O = fill(x11, FOUR, x9)
    return O



def solve_c59eb873_feca6190(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = multiply(x3, FIVE)
    x5 = astuple(x4, x4)
    x6 = canvas(ZERO, x5)
    x7 = rbind(shoot, UNITY)
    x8 = compose(x7, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x2)
    x11 = paint(x6, x10)
    O = hmirror(x11)
    return O



def solve_c59eb873_a68b268e(I):
    x1 = upscale(I, TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = lefthalf(x2)
    x5 = righthalf(x2)
    x6 = lefthalf(x3)
    x7 = righthalf(x3)
    x8 = ofcolor(x5, FOUR)
    x9 = ofcolor(x4, SEVEN)
    x10 = ofcolor(x6, EIGHT)
    x11 = fill(x7, EIGHT, x10)
    x12 = fill(x11, FOUR, x8)
    O = fill(x12, SEVEN, x9)
    return O



def solve_c59eb873_beb8660c(I):
    x1 = upscale(I, TWO)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(invert, size)
    x5 = order(x3, x4)
    x6 = apply(normalize, x5)
    x7 = size(x6)
    x8 = interval(ZERO, x7, ONE)
    x9 = apply(toivec, x8)
    x10 = mpapply(shift, x6, x9)
    x11 = canvas(ZERO, x2)
    x12 = paint(x11, x10)
    O = rot180(x12)
    return O



def solve_c59eb873_913fb3ed(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, THREE)
    x3 = ofcolor(x1, EIGHT)
    x4 = ofcolor(x1, TWO)
    x5 = mapply(neighbors, x2)
    x6 = mapply(neighbors, x3)
    x7 = mapply(neighbors, x4)
    x8 = fill(x1, SIX, x5)
    x9 = fill(x8, FOUR, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_c59eb873_0962bcdd(I):
    x1 = upscale(I, TWO)
    x2 = leastcolor(x1)
    x3 = replace(x1, ZERO, x2)
    x4 = leastcolor(x3)
    x5 = ofcolor(x1, x4)
    x6 = mapply(dneighbors, x5)
    x7 = fill(x1, x4, x6)
    x8 = objects(x7, F, T, T)
    x9 = fork(connect, ulcorner, lrcorner)
    x10 = fork(connect, llcorner, urcorner)
    x11 = fork(combine, x9, x10)
    x12 = mapply(x11, x8)
    O = fill(x7, x2, x12)
    return O



def solve_c59eb873_3631a71a(I):
    x1 = upscale(I, TWO)
    x2 = shape(x1)
    x3 = replace(x1, NINE, ZERO)
    x4 = lbind(apply, maximum)
    x5 = dmirror(x3)
    x6 = papply(pair, x3, x5)
    x7 = apply(x4, x6)
    x8 = subtract(x2, TWO_BY_TWO)
    x9 = crop(x7, TWO_BY_TWO, x8)
    x10 = vmirror(x9)
    x11 = objects(x10, T, F, T)
    x12 = merge(x11)
    x13 = shift(x12, TWO_BY_TWO)
    O = paint(x7, x13)
    return O



def solve_c59eb873_05269061(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = neighbors(ORIGIN)
    x4 = mapply(neighbors, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = merge(x2)
    x8 = lbind(shift, x7)
    x9 = mapply(x8, x6)
    x10 = shift(x9, UP_RIGHT)
    x11 = shift(x9, DOWN_LEFT)
    x12 = paint(x1, x9)
    x13 = paint(x12, x10)
    O = paint(x13, x11)
    return O



def solve_c59eb873_95990924(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = apply(ulcorner, x3)
    x5 = apply(urcorner, x3)
    x6 = apply(llcorner, x3)
    x7 = apply(lrcorner, x3)
    x8 = fill(x1, ONE, x4)
    x9 = fill(x8, TWO, x5)
    x10 = fill(x9, THREE, x6)
    O = fill(x10, FOUR, x7)
    return O



def solve_c59eb873_e509e548(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = rbind(subgrid, x1)
    x4 = chain(palette, trim, x3)
    x5 = lbind(contained, THREE)
    x6 = compose(x5, x4)
    x7 = fork(add, height, width)
    x8 = compose(decrement, x7)
    x9 = fork(equality, size, x8)
    x10 = mfilter(x2, x6)
    x11 = mfilter(x2, x9)
    x12 = replace(x1, THREE, SIX)
    x13 = fill(x12, TWO, x10)
    O = fill(x13, ONE, x11)
    return O



def solve_c59eb873_d43fd935(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, THREE)
    x4 = sizefilter(x2, ONE)
    x5 = rbind(vmatching, x3)
    x6 = rbind(hmatching, x3)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = rbind(gravitate, x3)
    x10 = fork(add, center, x9)
    x11 = fork(connect, center, x10)
    x12 = fork(recolor, color, x11)
    x13 = mapply(x12, x8)
    O = paint(x1, x13)
    return O



def solve_c59eb873_e73095fd(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = fork(equality, toindices, backdrop)
    x5 = sfilter(x3, x4)
    x6 = lbind(mapply, dneighbors)
    x7 = chain(x6, corners, outbox)
    x8 = fork(difference, x7, outbox)
    x9 = ofcolor(x1, FIVE)
    x10 = rbind(intersection, x9)
    x11 = matcher(size, ZERO)
    x12 = chain(x11, x10, x8)
    x13 = mfilter(x5, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_c59eb873_1bfc4729(I):
    x1 = upscale(I, TWO)
    x2 = asindices(x1)
    x3 = tophalf(x1)
    x4 = bottomhalf(x1)
    x5 = leastcolor(x3)
    x6 = leastcolor(x4)
    x7 = hfrontier(TWO_BY_ZERO)
    x8 = box(x2)
    x9 = combine(x7, x8)
    x10 = fill(x3, x5, x9)
    x11 = hmirror(x10)
    x12 = replace(x11, x5, x6)
    O = vconcat(x10, x12)
    return O



def solve_c59eb873_93b581b8(I):
    x1 = upscale(I, TWO)
    x2 = fgpartition(x1)
    x3 = chain(cmirror, dmirror, merge)
    x4 = x3(x2)
    x5 = upscale(x4, THREE)
    x6 = astuple(NEG_TWO, NEG_TWO)
    x7 = shift(x5, x6)
    x8 = underpaint(x1, x7)
    x9 = toindices(x4)
    x10 = fork(combine, hfrontier, vfrontier)
    x11 = mapply(x10, x9)
    x12 = difference(x11, x9)
    O = fill(x8, ZERO, x12)
    return O



def solve_c59eb873_9edfc990(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = ofcolor(x1, ONE)
    x5 = rbind(adjacent, x4)
    x6 = mfilter(x3, x5)
    x7 = recolor(ONE, x6)
    O = paint(x1, x7)
    return O



def solve_c59eb873_a65b410d(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, TWO)
    x3 = urcorner(x2)
    x4 = shoot(x3, UP_RIGHT)
    x5 = shoot(x3, DOWN_LEFT)
    x6 = underfill(x1, THREE, x4)
    x7 = underfill(x6, ONE, x5)
    x8 = rbind(shoot, LEFT)
    x9 = mapply(x8, x4)
    x10 = mapply(x8, x5)
    x11 = underfill(x7, ONE, x10)
    O = underfill(x11, THREE, x9)
    return O



def solve_c59eb873_7447852a(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = compose(last, center)
    x5 = order(x3, x4)
    x6 = size(x5)
    x7 = interval(ZERO, x6, THREE)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = interval(ZERO, x6, ONE)
    x11 = pair(x5, x10)
    x12 = sfilter(x11, x9)
    x13 = mapply(first, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_c59eb873_97999447(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = apply(toindices, x2)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    x8 = paint(x1, x7)
    x9 = interval(ZERO, FIVE, ONE)
    x10 = apply(double, x9)
    x11 = apply(increment, x10)
    x12 = apply(tojvec, x11)
    x13 = prapply(shift, x3, x12)
    x14 = merge(x13)
    O = fill(x8, FIVE, x14)
    return O



def solve_c59eb873_91714a58(I):
    x1 = upscale(I, TWO)
    x2 = shape(x1)
    x3 = asindices(x1)
    x4 = objects(x1, T, F, T)
    x5 = argmax(x4, size)
    x6 = mostcolor(x5)
    x7 = canvas(ZERO, x2)
    x8 = paint(x7, x5)
    x9 = rbind(toobject, x8)
    x10 = rbind(colorcount, x6)
    x11 = chain(x10, x9, neighbors)
    x12 = lbind(greater, THREE)
    x13 = compose(x12, x11)
    x14 = sfilter(x3, x13)
    O = fill(x8, ZERO, x14)
    return O



def solve_c59eb873_8e1813be(I):
    x1 = upscale(I, TWO)
    x2 = replace(x1, FIVE, ZERO)
    x3 = objects(x2, T, T, T)
    x4 = first(x3)
    x5 = vline(x4)
    x6 = branch(x5, dmirror, identity)
    x7 = x6(x2)
    x8 = objects(x7, T, T, T)
    x9 = order(x8, uppermost)
    x10 = apply(color, x9)
    x11 = dedupe(x10)
    x12 = size(x11)
    x13 = rbind(repeat, x12)
    x14 = apply(x13, x11)
    O = x6(x14)
    return O



def solve_c59eb873_bc1d5164(I):
    x1 = upscale(I, TWO)
    x2 = leastcolor(x1)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = crop(x1, TWO_BY_ZERO, THREE_BY_THREE)
    x5 = tojvec(FOUR)
    x6 = crop(x1, x5, THREE_BY_THREE)
    x7 = astuple(TWO, FOUR)
    x8 = crop(x1, x7, THREE_BY_THREE)
    x9 = canvas(ZERO, THREE_BY_THREE)
    x10 = rbind(ofcolor, x2)
    x11 = astuple(x3, x4)
    x12 = astuple(x6, x8)
    x13 = combine(x11, x12)
    x14 = mapply(x10, x13)
    O = fill(x9, x2, x14)
    return O



def solve_c59eb873_ce602527(I):
    x1 = upscale(I, TWO)
    x2 = vmirror(x1)
    x3 = fgpartition(x2)
    x4 = order(x3, size)
    x5 = last(x4)
    x6 = remove(x5, x4)
    x7 = compose(toindices, normalize)
    x8 = rbind(upscale, TWO)
    x9 = chain(toindices, x8, normalize)
    x10 = x7(x5)
    x11 = rbind(intersection, x10)
    x12 = chain(size, x11, x9)
    x13 = argmax(x6, x12)
    x14 = subgrid(x13, x2)
    O = vmirror(x14)
    return O



def solve_c59eb873_5c2c9af4(I):
    x1 = upscale(I, TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = center(x3)
    x5 = ulcorner(x3)
    x6 = subtract(x4, x5)
    x7 = multiply(NEG_ONE, NINE)
    x8 = interval(ZERO, NINE, ONE)
    x9 = interval(ZERO, x7, NEG_ONE)
    x10 = lbind(multiply, x6)
    x11 = apply(x10, x8)
    x12 = apply(x10, x9)
    x13 = pair(x11, x12)
    x14 = mapply(box, x13)
    x15 = shift(x14, x4)
    O = fill(x1, x2, x15)
    return O



def solve_c59eb873_75b8110e(I):
    x1 = upscale(I, TWO)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = bottomhalf(x2)
    x6 = tophalf(x3)
    x7 = bottomhalf(x3)
    x8 = rbind(ofcolor, ZERO)
    x9 = fork(difference, asindices, x8)
    x10 = fork(toobject, x9, identity)
    x11 = x10(x6)
    x12 = x10(x5)
    x13 = x10(x7)
    x14 = paint(x4, x13)
    x15 = paint(x14, x12)
    O = paint(x15, x11)
    return O



def solve_c59eb873_c3f564a4(I):
    x1 = upscale(I, TWO)
    x2 = asindices(x1)
    x3 = dmirror(x1)
    x4 = invert(NINE)
    x5 = papply(pair, x1, x3)
    x6 = lbind(apply, maximum)
    x7 = apply(x6, x5)
    x8 = ofcolor(x7, ZERO)
    x9 = difference(x2, x8)
    x10 = toobject(x9, x7)
    x11 = interval(x4, NINE, ONE)
    x12 = interval(NINE, x4, NEG_ONE)
    x13 = pair(x11, x12)
    x14 = lbind(shift, x10)
    x15 = mapply(x14, x13)
    O = paint(x7, x15)
    return O



def solve_c59eb873_1a07d186(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = mapply(x12, x8)
    x14 = merge(x3)
    x15 = cover(x1, x14)
    O = paint(x15, x13)
    return O



def solve_c59eb873_d687bc17(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = merge(x3)
    x14 = mapply(x12, x8)
    x15 = cover(x1, x13)
    O = paint(x15, x14)
    return O



def solve_c59eb873_9af7a82c(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, F)
    x3 = order(x2, size)
    x4 = valmax(x2, size)
    x5 = rbind(astuple, ONE)
    x6 = lbind(subtract, x4)
    x7 = compose(x5, size)
    x8 = chain(x5, x6, size)
    x9 = fork(canvas, color, x7)
    x10 = lbind(canvas, ZERO)
    x11 = compose(x10, x8)
    x12 = fork(vconcat, x9, x11)
    x13 = compose(cmirror, x12)
    x14 = apply(x13, x3)
    x15 = merge(x14)
    O = cmirror(x15)
    return O



def solve_c59eb873_ef135b50(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, ZERO)
    x4 = product(x2, x2)
    x5 = power(first, TWO)
    x6 = compose(first, last)
    x7 = fork(equality, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = fork(connect, first, last)
    x10 = mapply(x9, x8)
    x11 = intersection(x10, x3)
    x12 = fill(x1, NINE, x11)
    x13 = trim(x12)
    x14 = asobject(x13)
    x15 = shift(x14, UNITY)
    O = paint(x1, x15)
    return O



def solve_c59eb873_cbded52d(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = product(x3, x3)
    x5 = fork(vmatching, first, last)
    x6 = fork(hmatching, first, last)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = compose(center, first)
    x10 = compose(center, last)
    x11 = fork(connect, x9, x10)
    x12 = chain(initset, center, x11)
    x13 = compose(color, first)
    x14 = fork(recolor, x13, x12)
    x15 = mapply(x14, x8)
    O = paint(x1, x15)
    return O



def solve_c59eb873_e26a3af2(I):
    x1 = upscale(I, TWO)
    x2 = rot90(x1)
    x3 = apply(mostcommon, x1)
    x4 = apply(mostcommon, x2)
    x5 = repeat(x3, ONE)
    x6 = repeat(x4, ONE)
    x7 = compose(size, dedupe)
    x8 = x7(x3)
    x9 = x7(x4)
    x10 = greater(x9, x8)
    x11 = branch(x10, height, width)
    x12 = x11(x1)
    x13 = rot90(x5)
    x14 = branch(x10, x6, x13)
    x15 = branch(x10, vupscale, hupscale)
    O = x15(x14, x12)
    return O



def solve_c59eb873_6cf79266(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, ZERO)
    x3 = astuple(ZERO, ORIGIN)
    x4 = initset(x3)
    x5 = upscale(x4, THREE)
    x6 = toindices(x5)
    x7 = lbind(shift, x6)
    x8 = rbind(difference, x2)
    x9 = chain(size, x8, x7)
    x10 = matcher(x9, ZERO)
    x11 = lbind(add, NEG_UNITY)
    x12 = chain(flip, x10, x11)
    x13 = fork(both, x10, x12)
    x14 = sfilter(x2, x13)
    x15 = mapply(x7, x14)
    O = fill(x1, ONE, x15)
    return O



def solve_c59eb873_a87f7484(I):
    x1 = upscale(I, TWO)
    x2 = numcolors(x1)
    x3 = portrait(x1)
    x4 = branch(x3, dmirror, identity)
    x5 = x4(x1)
    x6 = decrement(x2)
    x7 = hsplit(x5, x6)
    x8 = rbind(ofcolor, ZERO)
    x9 = apply(x8, x7)
    x10 = leastcommon(x9)
    x11 = matcher(x8, x10)
    x12 = extract(x7, x11)
    O = x4(x12)
    return O



def solve_c59eb873_4093f84a(I):
    x1 = upscale(I, TWO)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, FIVE)
    x4 = ofcolor(x1, FIVE)
    x5 = portrait(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x3)
    x8 = lefthalf(x7)
    x9 = righthalf(x7)
    x10 = rbind(order, identity)
    x11 = rbind(order, invert)
    x12 = apply(x10, x8)
    x13 = apply(x11, x9)
    x14 = hconcat(x12, x13)
    O = x6(x14)
    return O



def solve_c59eb873_ba26e723(I):
    x1 = upscale(I, TWO)
    x2 = rbind(divide, THREE)
    x3 = rbind(multiply, THREE)
    x4 = compose(x3, x2)
    x5 = fork(equality, identity, x4)
    x6 = compose(x5, last)
    x7 = ofcolor(x1, FOUR)
    x8 = sfilter(x7, x6)
    O = fill(x1, SIX, x8)
    return O



def solve_c59eb873_4612dd53(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, ONE)
    x3 = box(x2)
    x4 = fill(x1, TWO, x3)
    x5 = subgrid(x2, x4)
    x6 = ofcolor(x5, ONE)
    x7 = mapply(vfrontier, x6)
    x8 = mapply(hfrontier, x6)
    x9 = size(x7)
    x10 = size(x8)
    x11 = greater(x9, x10)
    x12 = branch(x11, x8, x7)
    x13 = fill(x5, TWO, x12)
    x14 = ofcolor(x13, TWO)
    x15 = ulcorner(x2)
    x16 = shift(x14, x15)
    O = underfill(x1, TWO, x16)
    return O



def solve_c59eb873_29c11459(I):
    x1 = upscale(I, TWO)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = objects(x3, T, F, T)
    x5 = objects(x2, T, F, T)
    x6 = compose(hfrontier, center)
    x7 = fork(recolor, color, x6)
    x8 = mapply(x7, x5)
    x9 = paint(x2, x8)
    x10 = mapply(x7, x4)
    x11 = paint(x1, x10)
    x12 = objects(x9, T, F, T)
    x13 = apply(urcorner, x12)
    x14 = shift(x13, RIGHT)
    x15 = merge(x12)
    x16 = paint(x11, x15)
    O = fill(x16, FIVE, x14)
    return O



def solve_c59eb873_963e52fc(I):
    x1 = upscale(I, TWO)
    x2 = width(x1)
    x3 = asobject(x1)
    x4 = hperiod(x3)
    x5 = height(x3)
    x6 = astuple(x5, x4)
    x7 = ulcorner(x3)
    x8 = crop(x1, x7, x6)
    x9 = rot90(x8)
    x10 = double(x2)
    x11 = divide(x10, x4)
    x12 = increment(x11)
    x13 = repeat(x9, x12)
    x14 = merge(x13)
    x15 = rot270(x14)
    x16 = astuple(x5, x10)
    O = crop(x15, ORIGIN, x16)
    return O



def solve_c59eb873_1f0c79e5(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = leastcolor(x3)
    x5 = ofcolor(x3, x4)
    x6 = combine(x2, x5)
    x7 = recolor(x4, x6)
    x8 = compose(decrement, double)
    x9 = ulcorner(x6)
    x10 = invert(x9)
    x11 = shift(x2, x10)
    x12 = apply(x8, x11)
    x13 = interval(ZERO, NINE, ONE)
    x14 = prapply(multiply, x12, x13)
    x15 = lbind(shift, x7)
    x16 = mapply(x15, x14)
    O = paint(x1, x16)
    return O



def solve_c59eb873_6773b310(I):
    x1 = upscale(I, TWO)
    x2 = compress(x1)
    x3 = neighbors(ORIGIN)
    x4 = insert(ORIGIN, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = astuple(FOUR, FOUR)
    x8 = shift(x6, x7)
    x9 = fork(insert, identity, neighbors)
    x10 = apply(x9, x8)
    x11 = rbind(toobject, x2)
    x12 = apply(x11, x10)
    x13 = rbind(colorcount, SIX)
    x14 = matcher(x13, TWO)
    x15 = mfilter(x12, x14)
    x16 = fill(x2, ONE, x15)
    x17 = replace(x16, SIX, ZERO)
    O = downscale(x17, THREE)
    return O



def solve_c59eb873_780d0b14(I):
    x1 = upscale(I, TWO)
    x2 = asindices(x1)
    x3 = objects(x1, T, T, T)
    x4 = rbind(greater, TWO)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = totuple(x6)
    x8 = apply(color, x7)
    x9 = apply(center, x7)
    x10 = pair(x8, x9)
    x11 = fill(x1, ZERO, x2)
    x12 = paint(x11, x10)
    x13 = rbind(greater, ONE)
    x14 = compose(dedupe, totuple)
    x15 = chain(x13, size, x14)
    x16 = sfilter(x12, x15)
    x17 = rot90(x16)
    x18 = sfilter(x17, x15)
    O = rot270(x18)
    return O



def solve_c59eb873_2204b7a8(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sfilter, x2)
    x4 = compose(size, x3)
    x5 = x4(vline)
    x6 = x4(hline)
    x7 = greater(x5, x6)
    x8 = branch(x7, lefthalf, tophalf)
    x9 = branch(x7, righthalf, bottomhalf)
    x10 = branch(x7, hconcat, vconcat)
    x11 = x8(x1)
    x12 = x9(x1)
    x13 = index(x11, ORIGIN)
    x14 = shape(x12)
    x15 = decrement(x14)
    x16 = index(x12, x15)
    x17 = replace(x11, THREE, x13)
    x18 = replace(x12, THREE, x16)
    O = x10(x17, x18)
    return O



def solve_c59eb873_d9f24cd1(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, FIVE)
    x4 = prapply(connect, x2, x3)
    x5 = mfilter(x4, vline)
    x6 = underfill(x1, TWO, x5)
    x7 = matcher(numcolors, TWO)
    x8 = objects(x6, F, F, T)
    x9 = sfilter(x8, x7)
    x10 = difference(x8, x9)
    x11 = colorfilter(x10, TWO)
    x12 = mapply(toindices, x11)
    x13 = apply(urcorner, x9)
    x14 = shift(x13, UNITY)
    x15 = rbind(shoot, UP)
    x16 = mapply(x15, x14)
    x17 = fill(x6, TWO, x16)
    x18 = mapply(vfrontier, x12)
    O = fill(x17, TWO, x18)
    return O



def solve_c59eb873_b782dc8a(I):
    x1 = upscale(I, TWO)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = ofcolor(x1, x2)
    x5 = first(x4)
    x6 = dneighbors(x5)
    x7 = toobject(x6, x1)
    x8 = mostcolor(x7)
    x9 = ofcolor(x1, x8)
    x10 = colorfilter(x3, ZERO)
    x11 = rbind(adjacent, x9)
    x12 = mfilter(x10, x11)
    x13 = toindices(x12)
    x14 = rbind(manhattan, x4)
    x15 = chain(even, x14, initset)
    x16 = sfilter(x13, x15)
    x17 = difference(x13, x16)
    x18 = fill(x1, x2, x16)
    O = fill(x18, x8, x17)
    return O



def solve_c59eb873_673ef223(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, EIGHT)
    x4 = replace(x1, EIGHT, FOUR)
    x5 = colorfilter(x2, TWO)
    x6 = argmin(x2, uppermost)
    x7 = apply(uppermost, x5)
    x8 = fork(subtract, maximum, minimum)
    x9 = x8(x7)
    x10 = toivec(x9)
    x11 = leftmost(x6)
    x12 = equality(x11, ZERO)
    x13 = branch(x12, LEFT, RIGHT)
    x14 = rbind(shoot, x13)
    x15 = mapply(x14, x3)
    x16 = underfill(x4, EIGHT, x15)
    x17 = shift(x3, x10)
    x18 = mapply(hfrontier, x17)
    O = underfill(x16, EIGHT, x18)
    return O



def solve_c59eb873_f5b8619d(I):
    x1 = upscale(I, TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = mapply(vfrontier, x3)
    x5 = underfill(x1, EIGHT, x4)
    x6 = hconcat(x5, x5)
    O = vconcat(x6, x6)
    return O



def solve_c59eb873_f8c80d96(I):
    x1 = upscale(I, TWO)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = colorfilter(x3, x2)
    x5 = argmax(x4, size)
    x6 = argmin(x3, width)
    x7 = size(x6)
    x8 = equality(x7, ONE)
    x9 = branch(x8, identity, outbox)
    x10 = chain(outbox, outbox, x9)
    x11 = power(x10, TWO)
    x12 = power(x10, THREE)
    x13 = x10(x5)
    x14 = x11(x5)
    x15 = x12(x5)
    x16 = fill(x1, x2, x13)
    x17 = fill(x16, x2, x14)
    x18 = fill(x17, x2, x15)
    O = replace(x18, ZERO, FIVE)
    return O



def solve_c59eb873_ecdecbb3(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = colorfilter(x2, EIGHT)
    x5 = product(x3, x4)
    x6 = fork(gravitate, first, last)
    x7 = compose(crement, x6)
    x8 = compose(center, first)
    x9 = fork(add, x8, x7)
    x10 = fork(connect, x8, x9)
    x11 = apply(x10, x5)
    x12 = lbind(greater, EIGHT)
    x13 = compose(x12, size)
    x14 = mfilter(x11, x13)
    x15 = fill(x1, TWO, x14)
    x16 = apply(x9, x5)
    x17 = intersection(x14, x16)
    x18 = mapply(neighbors, x17)
    O = fill(x15, EIGHT, x18)
    return O



def solve_c59eb873_e5062a87(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, TWO)
    x3 = recolor(ZERO, x2)
    x4 = normalize(x3)
    x5 = occurrences(x1, x3)
    x6 = lbind(shift, x4)
    x7 = apply(x6, x5)
    x8 = astuple(ONE, THREE)
    x9 = astuple(FIVE, ONE)
    x10 = astuple(TWO, SIX)
    x11 = initset(x8)
    x12 = insert(x9, x11)
    x13 = insert(x10, x12)
    x14 = rbind(contained, x13)
    x15 = chain(flip, x14, ulcorner)
    x16 = sfilter(x7, x15)
    x17 = merge(x16)
    x18 = recolor(TWO, x17)
    O = paint(x1, x18)
    return O



def solve_c59eb873_a8d7556c(I):
    x1 = upscale(I, TWO)
    x2 = initset(ORIGIN)
    x3 = recolor(ZERO, x2)
    x4 = upscale(x3, TWO)
    x5 = occurrences(x1, x4)
    x6 = lbind(shift, x4)
    x7 = mapply(x6, x5)
    x8 = fill(x1, TWO, x7)
    x9 = add(SIX, SIX)
    x10 = astuple(EIGHT, x9)
    x11 = index(x8, x10)
    x12 = equality(x11, TWO)
    x13 = initset(x10)
    x14 = add(x10, DOWN)
    x15 = insert(x14, x13)
    x16 = toobject(x15, x8)
    x17 = toobject(x15, x1)
    x18 = branch(x12, x17, x16)
    O = paint(x8, x18)
    return O



def solve_c59eb873_4938f0c2(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, TWO)
    x4 = vmirror(x3)
    x5 = height(x3)
    x6 = width(x3)
    x7 = toivec(x5)
    x8 = tojvec(x6)
    x9 = add(x8, ZERO_BY_TWO)
    x10 = add(x7, TWO_BY_ZERO)
    x11 = shift(x4, x9)
    x12 = fill(x1, TWO, x11)
    x13 = ofcolor(x12, TWO)
    x14 = hmirror(x13)
    x15 = shift(x14, x10)
    x16 = fill(x12, TWO, x15)
    x17 = size(x2)
    x18 = greater(x17, FOUR)
    O = branch(x18, x1, x16)
    return O



def solve_c59eb873_834ec97d(I):
    x1 = upscale(I, TWO)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = shift(x4, DOWN)
    x6 = fill(x1, ZERO, x4)
    x7 = paint(x6, x5)
    x8 = uppermost(x5)
    x9 = leftmost(x5)
    x10 = subtract(x9, TEN)
    x11 = add(x9, TEN)
    x12 = interval(x10, x11, TWO)
    x13 = lbind(greater, x8)
    x14 = compose(x13, first)
    x15 = rbind(contained, x12)
    x16 = compose(x15, last)
    x17 = sfilter(x2, x14)
    x18 = sfilter(x17, x16)
    O = fill(x7, FOUR, x18)
    return O



def solve_c59eb873_90f3ed37(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, uppermost)
    x4 = first(x3)
    x5 = remove(x4, x3)
    x6 = normalize(x4)
    x7 = lbind(shift, x6)
    x8 = compose(x7, ulcorner)
    x9 = interval(TWO, NEG_ONE, NEG_ONE)
    x10 = apply(tojvec, x9)
    x11 = rbind(apply, x10)
    x12 = lbind(compose, size)
    x13 = lbind(lbind, intersection)
    x14 = compose(x12, x13)
    x15 = lbind(lbind, shift)
    x16 = chain(x11, x15, x8)
    x17 = fork(argmax, x16, x14)
    x18 = mapply(x17, x5)
    O = underfill(x1, ONE, x18)
    return O



def solve_c59eb873_8403a5d5(I):
    x1 = upscale(I, TWO)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = color(x4)
    x6 = leftmost(x4)
    x7 = interval(x6, TEN, TWO)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = sfilter(x2, x9)
    x11 = increment(x6)
    x12 = add(x6, THREE)
    x13 = interval(x11, TEN, FOUR)
    x14 = interval(x12, TEN, FOUR)
    x15 = lbind(astuple, NINE)
    x16 = apply(tojvec, x13)
    x17 = apply(x15, x14)
    x18 = fill(x1, x5, x10)
    x19 = fill(x18, FIVE, x16)
    O = fill(x19, FIVE, x17)
    return O



def solve_c59eb873_539a4f51(I):
    x1 = upscale(I, TWO)
    x2 = shape(x1)
    x3 = index(x1, ORIGIN)
    x4 = colorcount(x1, ZERO)
    x5 = decrement(x2)
    x6 = positive(x4)
    x7 = branch(x6, x5, x2)
    x8 = crop(x1, ORIGIN, x7)
    x9 = width(x8)
    x10 = astuple(ONE, x9)
    x11 = crop(x8, ORIGIN, x10)
    x12 = vupscale(x11, x9)
    x13 = dmirror(x12)
    x14 = hconcat(x8, x12)
    x15 = hconcat(x13, x8)
    x16 = vconcat(x14, x15)
    x17 = asobject(x16)
    x18 = multiply(UNITY, TEN)
    x19 = canvas(x3, x18)
    O = paint(x19, x17)
    return O



def solve_c59eb873_3bdb4ada(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = compose(increment, ulcorner)
    x5 = compose(decrement, lrcorner)
    x6 = apply(x4, x3)
    x7 = apply(x5, x3)
    x8 = papply(connect, x6, x7)
    x9 = apply(last, x6)
    x10 = compose(last, first)
    x11 = power(last, TWO)
    x12 = fork(subtract, x10, x11)
    x13 = compose(even, x12)
    x14 = lbind(rbind, astuple)
    x15 = lbind(compose, x13)
    x16 = compose(x15, x14)
    x17 = fork(sfilter, first, x16)
    x18 = pair(x8, x9)
    x19 = mapply(x17, x18)
    O = fill(x1, ZERO, x19)
    return O



def solve_c59eb873_ec883f72(I):
    x1 = upscale(I, TWO)
    x2 = palette(x1)
    x3 = objects(x1, T, T, T)
    x4 = fork(multiply, height, width)
    x5 = argmax(x3, x4)
    x6 = color(x5)
    x7 = remove(ZERO, x2)
    x8 = other(x7, x6)
    x9 = lrcorner(x5)
    x10 = llcorner(x5)
    x11 = urcorner(x5)
    x12 = ulcorner(x5)
    x13 = shoot(x9, UNITY)
    x14 = shoot(x10, DOWN_LEFT)
    x15 = shoot(x11, UP_RIGHT)
    x16 = shoot(x12, NEG_UNITY)
    x17 = combine(x13, x14)
    x18 = combine(x15, x16)
    x19 = combine(x17, x18)
    O = underfill(x1, x8, x19)
    return O



def solve_c59eb873_2bee17df(I):
    x1 = upscale(I, TWO)
    x2 = height(x1)
    x3 = rot90(x1)
    x4 = subtract(x2, TWO)
    x5 = interval(ZERO, x2, ONE)
    x6 = rbind(colorcount, ZERO)
    x7 = matcher(x6, x4)
    x8 = rbind(vsplit, x2)
    x9 = lbind(apply, x7)
    x10 = compose(x9, x8)
    x11 = x10(x1)
    x12 = pair(x5, x11)
    x13 = sfilter(x12, last)
    x14 = mapply(hfrontier, x13)
    x15 = x10(x3)
    x16 = pair(x15, x5)
    x17 = sfilter(x16, first)
    x18 = mapply(vfrontier, x17)
    x19 = astuple(x14, x18)
    x20 = merge(x19)
    O = underfill(x1, THREE, x20)
    return O



def solve_c59eb873_29623171(I):
    x1 = upscale(I, TWO)
    x2 = leastcolor(x1)
    x3 = interval(ZERO, NINE, FOUR)
    x4 = product(x3, x3)
    x5 = rbind(add, THREE)
    x6 = rbind(interval, ONE)
    x7 = fork(x6, identity, x5)
    x8 = compose(x7, first)
    x9 = compose(x7, last)
    x10 = fork(product, x8, x9)
    x11 = rbind(colorcount, x2)
    x12 = rbind(toobject, x1)
    x13 = compose(x11, x12)
    x14 = apply(x10, x4)
    x15 = valmax(x14, x13)
    x16 = matcher(x13, x15)
    x17 = compose(flip, x16)
    x18 = mfilter(x14, x16)
    x19 = mfilter(x14, x17)
    x20 = fill(x1, x2, x18)
    O = fill(x20, ZERO, x19)
    return O



def solve_c59eb873_b0c4d837(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, FIVE)
    x3 = ofcolor(x1, EIGHT)
    x4 = height(x2)
    x5 = decrement(x4)
    x6 = height(x3)
    x7 = subtract(x5, x6)
    x8 = astuple(ONE, x7)
    x9 = canvas(EIGHT, x8)
    x10 = subtract(SIX, x7)
    x11 = astuple(ONE, x10)
    x12 = canvas(ZERO, x11)
    x13 = hconcat(x9, x12)
    x14 = hsplit(x13, TWO)
    x15 = first(x14)
    x16 = last(x14)
    x17 = vmirror(x16)
    x18 = vconcat(x15, x17)
    x19 = astuple(ONE, THREE)
    x20 = canvas(ZERO, x19)
    O = vconcat(x18, x20)
    return O



def solve_c59eb873_8731374e(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = height(x4)
    x6 = width(x4)
    x7 = vsplit(x4, x5)
    x8 = lbind(greater, FOUR)
    x9 = compose(x8, numcolors)
    x10 = sfilter(x7, x9)
    x11 = merge(x10)
    x12 = rot90(x11)
    x13 = vsplit(x12, x6)
    x14 = sfilter(x13, x9)
    x15 = merge(x14)
    x16 = rot270(x15)
    x17 = leastcolor(x16)
    x18 = ofcolor(x16, x17)
    x19 = fork(combine, vfrontier, hfrontier)
    x20 = mapply(x19, x18)
    O = fill(x16, x17, x20)
    return O



def solve_c59eb873_db93a21d(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, NINE)
    x4 = colorfilter(x2, NINE)
    x5 = rbind(shoot, DOWN)
    x6 = mapply(x5, x3)
    x7 = underfill(x1, ONE, x6)
    x8 = compose(halve, width)
    x9 = rbind(greater, ONE)
    x10 = compose(x9, x8)
    x11 = matcher(x8, THREE)
    x12 = power(outbox, TWO)
    x13 = power(outbox, THREE)
    x14 = mapply(outbox, x4)
    x15 = sfilter(x4, x10)
    x16 = sfilter(x4, x11)
    x17 = mapply(x12, x15)
    x18 = mapply(x13, x16)
    x19 = fill(x7, THREE, x14)
    x20 = fill(x19, THREE, x17)
    O = fill(x20, THREE, x18)
    return O



def solve_c59eb873_53b68214(I):
    x1 = upscale(I, TWO)
    x2 = width(x1)
    x3 = objects(x1, T, T, T)
    x4 = first(x3)
    x5 = vperiod(x4)
    x6 = toivec(x5)
    x7 = interval(ZERO, NINE, ONE)
    x8 = lbind(multiply, x6)
    x9 = apply(x8, x7)
    x10 = lbind(shift, x4)
    x11 = mapply(x10, x9)
    x12 = astuple(x2, x2)
    x13 = portrait(x4)
    x14 = shape(x4)
    x15 = add(DOWN, x14)
    x16 = decrement(x15)
    x17 = shift(x4, x16)
    x18 = branch(x13, x11, x17)
    x19 = canvas(ZERO, x12)
    x20 = paint(x19, x4)
    O = paint(x20, x18)
    return O



def solve_c59eb873_d6ad076f(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = argmin(x2, size)
    x4 = argmax(x2, size)
    x5 = vmatching(x3, x4)
    x6 = branch(x5, DOWN, RIGHT)
    x7 = branch(x5, uppermost, leftmost)
    x8 = valmax(x2, x7)
    x9 = x7(x3)
    x10 = equality(x8, x9)
    x11 = branch(x10, NEG_ONE, ONE)
    x12 = multiply(x6, x11)
    x13 = inbox(x3)
    x14 = rbind(shoot, x12)
    x15 = mapply(x14, x13)
    x16 = underfill(x1, EIGHT, x15)
    x17 = objects(x16, T, F, T)
    x18 = colorfilter(x17, EIGHT)
    x19 = rbind(bordering, x1)
    x20 = mfilter(x18, x19)
    O = cover(x16, x20)
    return O



def solve_c59eb873_6cdd2623(I):
    x1 = upscale(I, TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = prapply(connect, x3, x3)
    x5 = fgpartition(x1)
    x6 = merge(x5)
    x7 = cover(x1, x6)
    x8 = fork(either, hline, vline)
    x9 = box(x6)
    x10 = rbind(difference, x9)
    x11 = chain(positive, size, x10)
    x12 = fork(both, x8, x11)
    x13 = mfilter(x4, x12)
    O = fill(x7, x2, x13)
    return O



def solve_c59eb873_a3df8b1e(I):
    x1 = upscale(I, TWO)
    x2 = shape(x1)
    x3 = ofcolor(x1, ONE)
    x4 = first(x3)
    x5 = shoot(x4, UP_RIGHT)
    x6 = fill(x1, ONE, x5)
    x7 = ofcolor(x6, ONE)
    x8 = urcorner(x7)
    x9 = shoot(x8, NEG_UNITY)
    x10 = fill(x6, ONE, x9)
    x11 = objects(x10, T, T, T)
    x12 = first(x11)
    x13 = subgrid(x12, x10)
    x14 = shape(x13)
    x15 = subtract(x14, DOWN)
    x16 = crop(x13, DOWN, x15)
    x17 = vconcat(x16, x16)
    x18 = vconcat(x17, x17)
    x19 = vconcat(x18, x18)
    x20 = hmirror(x19)
    x21 = crop(x20, ORIGIN, x2)
    O = hmirror(x21)
    return O



def solve_c59eb873_cdecee7f(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = astuple(ONE, THREE)
    x4 = size(x2)
    x5 = order(x2, leftmost)
    x6 = apply(color, x5)
    x7 = rbind(canvas, UNITY)
    x8 = apply(x7, x6)
    x9 = merge(x8)
    x10 = dmirror(x9)
    x11 = subtract(NINE, x4)
    x12 = astuple(ONE, x11)
    x13 = canvas(ZERO, x12)
    x14 = hconcat(x10, x13)
    x15 = hsplit(x14, THREE)
    x16 = merge(x15)
    x17 = crop(x16, ORIGIN, x3)
    x18 = crop(x16, DOWN, x3)
    x19 = crop(x16, TWO_BY_ZERO, x3)
    x20 = vmirror(x18)
    x21 = vconcat(x17, x20)
    O = vconcat(x21, x19)
    return O



def solve_c59eb873_3345333e(I):
    x1 = upscale(I, TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = cover(x1, x3)
    x5 = leastcolor(x4)
    x6 = ofcolor(x4, x5)
    x7 = neighbors(ORIGIN)
    x8 = mapply(neighbors, x7)
    x9 = vmirror(x6)
    x10 = lbind(shift, x9)
    x11 = apply(x10, x8)
    x12 = rbind(intersection, x6)
    x13 = compose(size, x12)
    x14 = argmax(x11, x13)
    O = fill(x4, x5, x14)
    return O



def solve_c59eb873_b190f7f5(I):
    x1 = upscale(I, TWO)
    x2 = portrait(x1)
    x3 = branch(x2, vsplit, hsplit)
    x4 = x3(x1, TWO)
    x5 = argmin(x4, numcolors)
    x6 = argmax(x4, numcolors)
    x7 = width(x6)
    x8 = rbind(repeat, x7)
    x9 = chain(dmirror, merge, x8)
    x10 = upscale(x6, x7)
    x11 = x9(x5)
    x12 = x9(x11)
    x13 = ofcolor(x12, ZERO)
    O = fill(x10, ZERO, x13)
    return O



def solve_c59eb873_caa06a1f(I):
    x1 = upscale(I, TWO)
    x2 = asobject(x1)
    x3 = shape(x1)
    x4 = decrement(x3)
    x5 = index(x1, x4)
    x6 = double(x3)
    x7 = canvas(x5, x6)
    x8 = paint(x7, x2)
    x9 = objects(x8, F, F, T)
    x10 = first(x9)
    x11 = shift(x10, LEFT)
    x12 = vperiod(x11)
    x13 = hperiod(x11)
    x14 = neighbors(ORIGIN)
    x15 = lbind(mapply, neighbors)
    x16 = power(x15, TWO)
    x17 = x16(x14)
    x18 = astuple(x12, x13)
    x19 = lbind(multiply, x18)
    x20 = apply(x19, x17)
    x21 = lbind(shift, x11)
    x22 = mapply(x21, x20)
    O = paint(x1, x22)
    return O



def solve_c59eb873_e21d9049(I):
    x1 = upscale(I, TWO)
    x2 = asindices(x1)
    x3 = leastcolor(x1)
    x4 = objects(x1, T, F, T)
    x5 = ofcolor(x1, x3)
    x6 = merge(x4)
    x7 = shape(x6)
    x8 = neighbors(ORIGIN)
    x9 = lbind(mapply, neighbors)
    x10 = power(x9, TWO)
    x11 = x10(x8)
    x12 = lbind(multiply, x7)
    x13 = lbind(shift, x6)
    x14 = apply(x12, x11)
    x15 = mapply(x13, x14)
    x16 = lbind(hmatching, x5)
    x17 = lbind(vmatching, x5)
    x18 = fork(either, x16, x17)
    x19 = compose(x18, initset)
    x20 = paint(x1, x15)
    x21 = sfilter(x2, x19)
    x22 = difference(x2, x21)
    O = cover(x20, x22)
    return O



def solve_c59eb873_d89b689b(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, EIGHT)
    x4 = sizefilter(x2, ONE)
    x5 = apply(initset, x3)
    x6 = lbind(argmin, x5)
    x7 = lbind(rbind, manhattan)
    x8 = compose(x6, x7)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x4)
    x11 = merge(x4)
    x12 = cover(x1, x11)
    O = paint(x12, x10)
    return O



def solve_c59eb873_746b3537(I):
    x1 = upscale(I, TWO)
    x2 = chain(size, dedupe, first)
    x3 = x2(x1)
    x4 = equality(x3, ONE)
    x5 = branch(x4, dmirror, identity)
    x6 = x5(x1)
    x7 = objects(x6, T, F, F)
    x8 = order(x7, leftmost)
    x9 = apply(color, x8)
    x10 = repeat(x9, ONE)
    O = x5(x10)
    return O



def solve_c59eb873_63613498(I):
    x1 = upscale(I, TWO)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = ofcolor(x2, ZERO)
    x4 = asindices(x2)
    x5 = difference(x4, x3)
    x6 = normalize(x5)
    x7 = objects(x1, T, F, T)
    x8 = compose(toindices, normalize)
    x9 = matcher(x8, x6)
    x10 = mfilter(x7, x9)
    x11 = fill(x1, FIVE, x10)
    x12 = asobject(x2)
    O = paint(x11, x12)
    return O



def solve_c59eb873_06df4c85(I):
    x1 = upscale(I, TWO)
    x2 = partition(x1)
    x3 = mostcolor(x1)
    x4 = ofcolor(x1, x3)
    x5 = colorfilter(x2, ZERO)
    x6 = argmax(x2, size)
    x7 = difference(x2, x5)
    x8 = remove(x6, x7)
    x9 = merge(x8)
    x10 = product(x9, x9)
    x11 = power(first, TWO)
    x12 = compose(first, last)
    x13 = fork(equality, x11, x12)
    x14 = sfilter(x10, x13)
    x15 = compose(last, first)
    x16 = power(last, TWO)
    x17 = fork(connect, x15, x16)
    x18 = fork(recolor, color, x17)
    x19 = apply(x18, x14)
    x20 = fork(either, vline, hline)
    x21 = mfilter(x19, x20)
    x22 = paint(x1, x21)
    O = fill(x22, x3, x4)
    return O



def solve_c59eb873_4522001f(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = toindices(x3)
    x5 = contained(ZERO_BY_TWO, x4)
    x6 = contained(TWO_BY_TWO, x4)
    x7 = contained(TWO_BY_ZERO, x4)
    x8 = astuple(NINE, NINE)
    x9 = canvas(ZERO, x8)
    x10 = astuple(THREE, ORIGIN)
    x11 = initset(x10)
    x12 = upscale(x11, TWO)
    x13 = upscale(x12, TWO)
    x14 = shape(x13)
    x15 = shift(x13, x14)
    x16 = combine(x13, x15)
    x17 = paint(x9, x16)
    x18 = rot90(x17)
    x19 = rot180(x17)
    x20 = rot270(x17)
    x21 = branch(x5, x18, x17)
    x22 = branch(x6, x19, x21)
    O = branch(x7, x20, x22)
    return O



def solve_c59eb873_a48eeaf7(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, TWO)
    x3 = outbox(x2)
    x4 = apply(initset, x3)
    x5 = ofcolor(x1, FIVE)
    x6 = lbind(argmin, x4)
    x7 = lbind(lbind, manhattan)
    x8 = compose(x7, initset)
    x9 = compose(x6, x8)
    x10 = mapply(x9, x5)
    x11 = cover(x1, x5)
    O = fill(x11, FIVE, x10)
    return O



def solve_c59eb873_eb5a1d5d(I):
    x1 = upscale(I, TWO)
    x2 = compose(dmirror, dedupe)
    x3 = x2(x1)
    x4 = x2(x3)
    x5 = fork(remove, last, identity)
    x6 = compose(hmirror, x5)
    x7 = fork(vconcat, identity, x6)
    x8 = x7(x4)
    x9 = dmirror(x8)
    O = x7(x9)
    return O



def solve_c59eb873_e179c5f4(I):
    x1 = upscale(I, TWO)
    x2 = height(x1)
    x3 = ofcolor(x1, ONE)
    x4 = first(x3)
    x5 = shoot(x4, UP_RIGHT)
    x6 = fill(x1, ONE, x5)
    x7 = ofcolor(x6, ONE)
    x8 = urcorner(x7)
    x9 = shoot(x8, NEG_UNITY)
    x10 = fill(x6, ONE, x9)
    x11 = ofcolor(x10, ONE)
    x12 = subgrid(x11, x10)
    x13 = height(x12)
    x14 = width(x12)
    x15 = decrement(x13)
    x16 = astuple(x15, x14)
    x17 = ulcorner(x11)
    x18 = crop(x10, x17, x16)
    x19 = repeat(x18, NINE)
    x20 = merge(x19)
    x21 = astuple(x2, x14)
    x22 = crop(x20, ORIGIN, x21)
    x23 = hmirror(x22)
    O = replace(x23, ZERO, EIGHT)
    return O



def solve_c59eb873_995c5fa3(I):
    x1 = upscale(I, TWO)
    x2 = hsplit(x1, THREE)
    x3 = astuple(TWO, ONE)
    x4 = rbind(ofcolor, ZERO)
    x5 = compose(ulcorner, x4)
    x6 = compose(size, x4)
    x7 = matcher(x6, ZERO)
    x8 = matcher(x5, UNITY)
    x9 = matcher(x5, DOWN)
    x10 = matcher(x5, x3)
    x11 = rbind(multiply, THREE)
    x12 = power(double, TWO)
    x13 = compose(double, x7)
    x14 = chain(x12, double, x8)
    x15 = compose(x11, x9)
    x16 = compose(x12, x10)
    x17 = fork(add, x13, x14)
    x18 = fork(add, x15, x16)
    x19 = fork(add, x17, x18)
    x20 = rbind(canvas, UNITY)
    x21 = compose(x20, x19)
    x22 = apply(x21, x2)
    x23 = merge(x22)
    O = hupscale(x23, THREE)
    return O



def solve_c59eb873_36fdfd69(I):
    x1 = upscale(I, TWO)
    x2 = upscale(x1, TWO)
    x3 = objects(x2, T, T, T)
    x4 = colorfilter(x3, TWO)
    x5 = fork(manhattan, first, last)
    x6 = lbind(greater, FIVE)
    x7 = compose(x6, x5)
    x8 = product(x4, x4)
    x9 = sfilter(x8, x7)
    x10 = apply(merge, x9)
    x11 = mapply(delta, x10)
    x12 = fill(x2, FOUR, x11)
    x13 = merge(x4)
    x14 = paint(x12, x13)
    O = downscale(x14, TWO)
    return O



def solve_c59eb873_0a938d79(I):
    x1 = upscale(I, TWO)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = x3(x1)
    x5 = fgpartition(x4)
    x6 = merge(x5)
    x7 = chain(double, decrement, width)
    x8 = x7(x6)
    x9 = compose(vfrontier, tojvec)
    x10 = lbind(mapply, x9)
    x11 = rbind(interval, x8)
    x12 = width(x4)
    x13 = rbind(x11, x12)
    x14 = chain(x10, x13, leftmost)
    x15 = fork(recolor, color, x14)
    x16 = mapply(x15, x5)
    x17 = paint(x4, x16)
    O = x3(x17)
    return O



def solve_c59eb873_045e512c(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = lbind(shift, x3)
    x6 = lbind(mapply, x5)
    x7 = double(TEN)
    x8 = interval(FOUR, x7, FOUR)
    x9 = rbind(apply, x8)
    x10 = lbind(position, x3)
    x11 = lbind(rbind, multiply)
    x12 = chain(x9, x11, x10)
    x13 = compose(x6, x12)
    x14 = fork(recolor, color, x13)
    x15 = mapply(x14, x4)
    O = paint(x1, x15)
    return O



def solve_c59eb873_99fa7670(I):
    x1 = upscale(I, TWO)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x3)
    x8 = paint(x1, x7)
    x9 = add(x2, DOWN_LEFT)
    x10 = initset(x9)
    x11 = recolor(ZERO, x10)
    x12 = objects(x8, T, F, T)
    x13 = insert(x11, x12)
    x14 = order(x13, uppermost)
    x15 = first(x14)
    x16 = remove(x11, x14)
    x17 = remove(x15, x14)
    x18 = compose(lrcorner, first)
    x19 = compose(lrcorner, last)
    x20 = fork(connect, x18, x19)
    x21 = compose(color, first)
    x22 = fork(recolor, x21, x20)
    x23 = pair(x16, x17)
    x24 = mapply(x22, x23)
    O = underpaint(x8, x24)
    return O



def solve_c59eb873_72322fa7(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, F, T, T)
    x3 = matcher(numcolors, ONE)
    x4 = sfilter(x2, x3)
    x5 = difference(x2, x4)
    x6 = lbind(matcher, first)
    x7 = compose(x6, mostcolor)
    x8 = fork(sfilter, identity, x7)
    x9 = fork(difference, identity, x8)
    x10 = lbind(occurrences, x1)
    x11 = compose(x10, x8)
    x12 = compose(x10, x9)
    x13 = compose(ulcorner, x9)
    x14 = fork(subtract, ulcorner, x13)
    x15 = lbind(rbind, add)
    x16 = compose(x15, x14)
    x17 = fork(apply, x16, x12)
    x18 = lbind(lbind, shift)
    x19 = compose(x18, normalize)
    x20 = fork(mapply, x19, x11)
    x21 = fork(mapply, x19, x17)
    x22 = mapply(x20, x5)
    x23 = mapply(x21, x5)
    x24 = paint(x1, x22)
    O = paint(x24, x23)
    return O



def solve_c59eb873_855e0971(I):
    x1 = upscale(I, TWO)
    x2 = frontiers(x1)
    x3 = sfilter(x2, hline)
    x4 = size(x3)
    x5 = positive(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x1)
    x8 = rbind(subgrid, x7)
    x9 = matcher(color, ZERO)
    x10 = compose(flip, x9)
    x11 = partition(x7)
    x12 = sfilter(x11, x10)
    x13 = rbind(ofcolor, ZERO)
    x14 = lbind(mapply, vfrontier)
    x15 = chain(x14, x13, x8)
    x16 = fork(shift, x15, ulcorner)
    x17 = fork(intersection, toindices, x16)
    x18 = mapply(x17, x12)
    x19 = fill(x7, ZERO, x18)
    O = x6(x19)
    return O



def solve_c59eb873_a78176bb(I):
    x1 = upscale(I, TWO)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = remove(ZERO, x2)
    x5 = other(x4, FIVE)
    x6 = colorfilter(x3, FIVE)
    x7 = lbind(index, x1)
    x8 = compose(x7, urcorner)
    x9 = matcher(x8, FIVE)
    x10 = sfilter(x6, x9)
    x11 = difference(x6, x10)
    x12 = apply(urcorner, x10)
    x13 = apply(llcorner, x11)
    x14 = rbind(add, UP_RIGHT)
    x15 = rbind(add, DOWN_LEFT)
    x16 = apply(x14, x12)
    x17 = apply(x15, x13)
    x18 = rbind(shoot, UNITY)
    x19 = rbind(shoot, NEG_UNITY)
    x20 = fork(combine, x18, x19)
    x21 = mapply(x20, x16)
    x22 = mapply(x20, x17)
    x23 = combine(x21, x22)
    x24 = fill(x1, x5, x23)
    O = replace(x24, FIVE, ZERO)
    return O



def solve_c59eb873_6d58a25d(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = merge(x4)
    x6 = color(x5)
    x7 = uppermost(x3)
    x8 = rbind(greater, x7)
    x9 = compose(x8, uppermost)
    x10 = rbind(vmatching, x3)
    x11 = fork(both, x10, x9)
    x12 = sfilter(x4, x11)
    x13 = increment(x7)
    x14 = rbind(greater, x13)
    x15 = compose(x14, first)
    x16 = rbind(sfilter, x15)
    x17 = chain(x16, vfrontier, center)
    x18 = mapply(x17, x12)
    O = underfill(x1, x6, x18)
    return O



def solve_c59eb873_6aa20dc0(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(rbind, upscale)
    x10 = interval(ONE, FOUR, ONE)
    x11 = apply(x9, x10)
    x12 = initset(identity)
    x13 = insert(vmirror, x12)
    x14 = insert(hmirror, x13)
    x15 = insert(cmirror, x14)
    x16 = insert(dmirror, x15)
    x17 = fork(compose, first, last)
    x18 = lbind(occurrences, x1)
    x19 = lbind(lbind, shift)
    x20 = compose(x18, x8)
    x21 = product(x16, x11)
    x22 = apply(x17, x21)
    x23 = rapply(x22, x4)
    x24 = fork(mapply, x19, x20)
    x25 = mapply(x24, x23)
    O = paint(x1, x25)
    return O



def solve_c59eb873_2bcee788(I):
    x1 = upscale(I, TWO)
    x2 = mostcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = replace(x1, x2, THREE)
    x5 = argmax(x3, size)
    x6 = argmin(x3, size)
    x7 = position(x5, x6)
    x8 = first(x7)
    x9 = last(x7)
    x10 = subgrid(x5, x4)
    x11 = hline(x6)
    x12 = hmirror(x10)
    x13 = vmirror(x10)
    x14 = branch(x11, x12, x13)
    x15 = branch(x11, x8, ZERO)
    x16 = branch(x11, ZERO, x9)
    x17 = asobject(x14)
    x18 = matcher(first, THREE)
    x19 = compose(flip, x18)
    x20 = sfilter(x17, x19)
    x21 = ulcorner(x5)
    x22 = shape(x5)
    x23 = astuple(x15, x16)
    x24 = multiply(x22, x23)
    x25 = add(x21, x24)
    x26 = shift(x20, x25)
    O = paint(x4, x26)
    return O



def solve_c59eb873_f35d900a(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, F, T)
    x3 = palette(x1)
    x4 = remove(ZERO, x3)
    x5 = lbind(other, x4)
    x6 = compose(x5, color)
    x7 = fork(recolor, x6, outbox)
    x8 = mapply(x7, x2)
    x9 = mapply(toindices, x2)
    x10 = box(x9)
    x11 = difference(x10, x9)
    x12 = lbind(argmin, x9)
    x13 = rbind(compose, initset)
    x14 = lbind(rbind, manhattan)
    x15 = chain(x13, x14, initset)
    x16 = chain(initset, x12, x15)
    x17 = fork(manhattan, initset, x16)
    x18 = compose(even, x17)
    x19 = sfilter(x11, x18)
    x20 = paint(x1, x8)
    O = fill(x20, FIVE, x19)
    return O



def solve_c59eb873_0dfd9992(I):
    x1 = upscale(I, TWO)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_c59eb873_29ec7d0e(I):
    x1 = upscale(I, TWO)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_c59eb873_469497ad(I):
    x1 = upscale(I, TWO)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    x4 = upscale(x1, x3)
    x5 = objects(x4, F, F, T)
    x6 = argmin(x5, size)
    x7 = ulcorner(x6)
    x8 = llcorner(x6)
    x9 = shoot(x7, NEG_UNITY)
    x10 = shoot(x7, UNITY)
    x11 = shoot(x8, DOWN_LEFT)
    x12 = shoot(x8, UP_RIGHT)
    x13 = combine(x9, x10)
    x14 = combine(x11, x12)
    x15 = combine(x13, x14)
    x16 = underfill(x4, TWO, x15)
    x17 = objects(x16, T, F, T)
    x18 = argmax(x17, lrcorner)
    O = paint(x16, x18)
    return O



def solve_c59eb873_484b58aa(I):
    x1 = upscale(I, TWO)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, TWO)
    x9 = astuple(TWO, x3)
    x10 = power(decrement, TWO)
    x11 = x10(x2)
    x12 = x10(x3)
    x13 = toivec(x12)
    x14 = tojvec(x11)
    x15 = crop(x1, x13, x9)
    x16 = crop(x1, x14, x8)
    x17 = asobject(x16)
    x18 = asobject(x15)
    x19 = vperiod(x17)
    x20 = hperiod(x18)
    x21 = astuple(x19, x20)
    x22 = lbind(multiply, x21)
    x23 = neighbors(ORIGIN)
    x24 = mapply(neighbors, x23)
    x25 = apply(x22, x24)
    x26 = lbind(shift, x7)
    x27 = mapply(x26, x25)
    O = paint(x1, x27)
    return O



def solve_c59eb873_3befdf3e(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, F, F, T)
    x3 = leastcolor(x1)
    x4 = palette(x1)
    x5 = remove(ZERO, x4)
    x6 = other(x5, x3)
    x7 = switch(x1, x3, x6)
    x8 = compose(width, inbox)
    x9 = lbind(power, outbox)
    x10 = compose(x9, x8)
    x11 = initset(x10)
    x12 = lbind(rapply, x11)
    x13 = chain(initset, first, x12)
    x14 = fork(rapply, x13, identity)
    x15 = compose(first, x14)
    x16 = compose(backdrop, x15)
    x17 = lbind(chain, backdrop)
    x18 = lbind(x17, inbox)
    x19 = compose(x18, x10)
    x20 = lbind(apply, initset)
    x21 = chain(x20, corners, x16)
    x22 = fork(mapply, x19, x21)
    x23 = fork(intersection, x16, x22)
    x24 = mapply(x16, x2)
    x25 = mapply(x23, x2)
    x26 = underfill(x7, x6, x24)
    O = fill(x26, ZERO, x25)
    return O



def solve_c59eb873_49d1d64f(I):
    x1 = upscale(I, TWO)
    x2 = shape(x1)
    x3 = add(x2, TWO)
    x4 = canvas(ZERO, x3)
    x5 = asobject(x1)
    x6 = shift(x5, UNITY)
    x7 = paint(x4, x6)
    x8 = asindices(x4)
    x9 = fork(difference, box, corners)
    x10 = x9(x8)
    x11 = lbind(lbind, manhattan)
    x12 = rbind(compose, initset)
    x13 = chain(x12, x11, initset)
    x14 = lbind(argmin, x6)
    x15 = chain(first, x14, x13)
    x16 = fork(astuple, x15, identity)
    x17 = apply(x16, x10)
    O = paint(x7, x17)
    return O



def solve_c59eb873_57aa92db(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, F, T, T)
    x3 = objects(x1, T, F, T)
    x4 = lbind(lbind, colorcount)
    x5 = fork(apply, x4, palette)
    x6 = compose(maximum, x5)
    x7 = compose(minimum, x5)
    x8 = fork(subtract, x6, x7)
    x9 = argmax(x2, x8)
    x10 = leastcolor(x9)
    x11 = normalize(x9)
    x12 = matcher(first, x10)
    x13 = sfilter(x11, x12)
    x14 = ulcorner(x13)
    x15 = colorfilter(x3, x10)
    x16 = rbind(toobject, x1)
    x17 = lbind(remove, ZERO)
    x18 = chain(first, x17, palette)
    x19 = chain(x18, x16, outbox)
    x20 = lbind(multiply, x14)
    x21 = compose(x20, width)
    x22 = fork(subtract, ulcorner, x21)
    x23 = lbind(shift, x11)
    x24 = compose(x23, x22)
    x25 = fork(upscale, x24, width)
    x26 = fork(recolor, x19, x25)
    x27 = mapply(x26, x15)
    x28 = paint(x1, x27)
    x29 = merge(x3)
    O = paint(x28, x29)
    return O



def solve_c59eb873_f1cefba8(I):
    x1 = upscale(I, TWO)
    x2 = palette(x1)
    x3 = objects(x1, F, F, T)
    x4 = ofcolor(x1, ZERO)
    x5 = first(x3)
    x6 = ulcorner(x5)
    x7 = subgrid(x5, x1)
    x8 = power(trim, TWO)
    x9 = x8(x7)
    x10 = asindices(x9)
    x11 = shift(x10, TWO_BY_TWO)
    x12 = fill(x7, ZERO, x11)
    x13 = leastcolor(x12)
    x14 = remove(ZERO, x2)
    x15 = other(x14, x13)
    x16 = ofcolor(x12, x13)
    x17 = shift(x16, x6)
    x18 = ofcolor(x1, x13)
    x19 = uppermost(x18)
    x20 = lowermost(x18)
    x21 = matcher(first, x19)
    x22 = matcher(first, x20)
    x23 = fork(either, x21, x22)
    x24 = sfilter(x17, x23)
    x25 = difference(x17, x24)
    x26 = mapply(vfrontier, x24)
    x27 = mapply(hfrontier, x25)
    x28 = combine(x26, x27)
    x29 = intersection(x4, x28)
    x30 = fill(x1, x15, x28)
    O = fill(x30, x13, x29)
    return O



def solve_c59eb873_0e206a2e(I):
    x1 = upscale(I, TWO)
    x2 = palette(x1)
    x3 = objects(x1, F, F, T)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, numcolors)
    x6 = sfilter(x3, x5)
    x7 = remove(ZERO, x2)
    x8 = lbind(colorcount, x1)
    x9 = argmax(x7, x8)
    x10 = remove(x9, x7)
    x11 = rbind(contained, x10)
    x12 = compose(x11, first)
    x13 = rbind(sfilter, x12)
    x14 = lbind(rbind, subtract)
    x15 = lbind(occurrences, x1)
    x16 = lbind(lbind, shift)
    x17 = compose(x14, ulcorner)
    x18 = chain(x17, x13, normalize)
    x19 = chain(x15, x13, normalize)
    x20 = fork(apply, x18, x19)
    x21 = compose(x16, normalize)
    x22 = fork(mapply, x21, x20)
    x23 = astuple(cmirror, dmirror)
    x24 = astuple(hmirror, vmirror)
    x25 = combine(x23, x24)
    x26 = product(x25, x25)
    x27 = fork(compose, first, last)
    x28 = apply(x27, x26)
    x29 = totuple(x28)
    x30 = combine(x25, x29)
    x31 = lbind(rapply, x30)
    x32 = mapply(x31, x6)
    x33 = mapply(x22, x32)
    x34 = paint(x1, x33)
    x35 = merge(x6)
    O = cover(x34, x35)
    return O



def solve_c59eb873_d22278a0(I):
    x1 = upscale(I, TWO)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = fork(multiply, sign, identity)
    x5 = lbind(apply, x4)
    x6 = chain(even, maximum, x5)
    x7 = lbind(sfilter, x2)
    x8 = fork(add, first, last)
    x9 = rbind(remove, x3)
    x10 = compose(center, last)
    x11 = fork(subtract, first, x10)
    x12 = compose(x6, x11)
    x13 = lbind(rbind, equality)
    x14 = lbind(argmin, x3)
    x15 = chain(x8, x5, x11)
    x16 = lbind(lbind, astuple)
    x17 = lbind(rbind, astuple)
    x18 = lbind(compose, x12)
    x19 = lbind(compose, x15)
    x20 = compose(x19, x16)
    x21 = compose(x19, x17)
    x22 = compose(x14, x20)
    x23 = rbind(compose, x22)
    x24 = lbind(lbind, valmin)
    x25 = rbind(compose, x20)
    x26 = chain(x25, x24, x9)
    x27 = lbind(fork, greater)
    x28 = fork(x27, x26, x21)
    x29 = chain(x7, x18, x17)
    x30 = chain(x7, x23, x13)
    x31 = fork(intersection, x29, x30)
    x32 = compose(x7, x28)
    x33 = fork(intersection, x31, x32)
    x34 = fork(recolor, color, x33)
    x35 = mapply(x34, x3)
    O = paint(x1, x35)
    return O



def solve_c59eb873_50846271(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, TWO)
    x3 = prapply(connect, x2, x2)
    x4 = lbind(greater, SIX)
    x5 = compose(x4, size)
    x6 = fork(either, vline, hline)
    x7 = fork(both, x5, x6)
    x8 = mfilter(x3, x7)
    x9 = fill(x1, TWO, x8)
    x10 = objects(x9, T, F, F)
    x11 = colorfilter(x10, TWO)
    x12 = valmax(x11, width)
    x13 = halve(x12)
    x14 = toivec(x13)
    x15 = tojvec(x13)
    x16 = rbind(add, ZERO_BY_TWO)
    x17 = rbind(add, TWO_BY_ZERO)
    x18 = rbind(subtract, ZERO_BY_TWO)
    x19 = rbind(subtract, TWO_BY_ZERO)
    x20 = rbind(colorcount, TWO)
    x21 = rbind(toobject, x9)
    x22 = compose(initset, x16)
    x23 = fork(insert, x17, x22)
    x24 = fork(insert, x18, x23)
    x25 = fork(insert, x19, x24)
    x26 = fork(combine, dneighbors, x25)
    x27 = chain(x20, x21, x26)
    x28 = rbind(argmax, x27)
    x29 = compose(x28, toindices)
    x30 = apply(x29, x11)
    x31 = rbind(add, x14)
    x32 = rbind(subtract, x14)
    x33 = rbind(add, x15)
    x34 = rbind(subtract, x15)
    x35 = fork(connect, x31, x32)
    x36 = fork(connect, x33, x34)
    x37 = fork(combine, x35, x36)
    x38 = mapply(x37, x30)
    x39 = fill(x9, EIGHT, x38)
    O = fill(x39, TWO, x2)
    return O



def solve_c59eb873_150deff5(I):
    x1 = upscale(I, TWO)
    x2 = canvas(FIVE, TWO_BY_TWO)
    x3 = asobject(x2)
    x4 = occurrences(x1, x3)
    x5 = lbind(shift, x3)
    x6 = mapply(x5, x4)
    x7 = fill(x1, EIGHT, x6)
    x8 = canvas(FIVE, UNITY)
    x9 = astuple(TWO, ONE)
    x10 = canvas(EIGHT, x9)
    x11 = vconcat(x10, x8)
    x12 = asobject(x11)
    x13 = occurrences(x7, x12)
    x14 = lbind(shift, x12)
    x15 = mapply(x14, x13)
    x16 = fill(x7, TWO, x15)
    x17 = astuple(ONE, THREE)
    x18 = canvas(FIVE, x17)
    x19 = asobject(x18)
    x20 = occurrences(x16, x19)
    x21 = lbind(shift, x19)
    x22 = mapply(x21, x20)
    x23 = fill(x16, TWO, x22)
    x24 = hmirror(x11)
    x25 = asobject(x24)
    x26 = occurrences(x23, x25)
    x27 = lbind(shift, x25)
    x28 = mapply(x27, x26)
    x29 = fill(x23, TWO, x28)
    x30 = dmirror(x11)
    x31 = asobject(x30)
    x32 = occurrences(x29, x31)
    x33 = lbind(shift, x31)
    x34 = mapply(x33, x32)
    x35 = fill(x29, TWO, x34)
    x36 = vmirror(x30)
    x37 = asobject(x36)
    x38 = occurrences(x35, x37)
    x39 = lbind(shift, x37)
    x40 = mapply(x39, x38)
    O = fill(x35, TWO, x40)
    return O



def solve_c59eb873_9d9215db(I):
    x1 = upscale(I, TWO)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = initset(x1)
    x6 = chain(numcolors, lefthalf, tophalf)
    x7 = insert(x2, x5)
    x8 = insert(x3, x7)
    x9 = insert(x4, x8)
    x10 = argmax(x9, x6)
    x11 = vmirror(x10)
    x12 = papply(pair, x10, x11)
    x13 = lbind(apply, maximum)
    x14 = apply(x13, x12)
    x15 = partition(x14)
    x16 = sizefilter(x15, FOUR)
    x17 = apply(llcorner, x16)
    x18 = apply(lrcorner, x16)
    x19 = combine(x17, x18)
    x20 = cover(x14, x19)
    x21 = tojvec(NEG_TWO)
    x22 = rbind(add, ZERO_BY_TWO)
    x23 = rbind(add, x21)
    x24 = compose(x22, ulcorner)
    x25 = compose(x23, urcorner)
    x26 = fork(connect, x24, x25)
    x27 = compose(even, last)
    x28 = rbind(sfilter, x27)
    x29 = chain(normalize, x28, x26)
    x30 = fork(shift, x29, x24)
    x31 = fork(recolor, color, x30)
    x32 = mapply(x31, x16)
    x33 = paint(x20, x32)
    x34 = rot90(x33)
    x35 = rot180(x33)
    x36 = rot270(x33)
    x37 = papply(pair, x33, x34)
    x38 = apply(x13, x37)
    x39 = papply(pair, x38, x35)
    x40 = apply(x13, x39)
    x41 = papply(pair, x40, x36)
    O = apply(x13, x41)
    return O



def solve_c59eb873_264363fd(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, F, F, T)
    x3 = argmin(x2, size)
    x4 = normalize(x3)
    x5 = height(x3)
    x6 = width(x3)
    x7 = equality(x5, FIVE)
    x8 = equality(x6, FIVE)
    x9 = astuple(x7, x8)
    x10 = add(UNITY, x9)
    x11 = invert(x10)
    x12 = center(x3)
    x13 = index(x1, x12)
    x14 = branch(x7, UP, RIGHT)
    x15 = add(x14, x12)
    x16 = index(x1, x15)
    x17 = astuple(x13, ORIGIN)
    x18 = initset(x17)
    x19 = cover(x1, x3)
    x20 = mostcolor(x19)
    x21 = ofcolor(x19, x20)
    x22 = occurrences(x19, x18)
    x23 = objects(x19, F, F, T)
    x24 = rbind(occurrences, x18)
    x25 = rbind(subgrid, x19)
    x26 = compose(x24, x25)
    x27 = lbind(mapply, vfrontier)
    x28 = lbind(mapply, hfrontier)
    x29 = compose(x27, x26)
    x30 = compose(x28, x26)
    x31 = branch(x7, x29, x30)
    x32 = branch(x8, x30, x29)
    x33 = fork(combine, x31, x32)
    x34 = lbind(recolor, x16)
    x35 = compose(x34, x33)
    x36 = fork(paint, x25, x35)
    x37 = compose(asobject, x36)
    x38 = fork(shift, x37, ulcorner)
    x39 = mapply(x38, x23)
    x40 = paint(x19, x39)
    x41 = shift(x4, x11)
    x42 = lbind(shift, x41)
    x43 = mapply(x42, x22)
    x44 = paint(x40, x43)
    O = fill(x44, x20, x21)
    return O



def solve_c59eb873_7df24a62(I):
    x1 = upscale(I, TWO)
    x2 = height(x1)
    x3 = width(x1)
    x4 = ofcolor(x1, ONE)
    x5 = ofcolor(x1, FOUR)
    x6 = ulcorner(x4)
    x7 = subgrid(x4, x1)
    x8 = rot90(x7)
    x9 = rot180(x7)
    x10 = rot270(x7)
    x11 = matcher(size, ZERO)
    x12 = rbind(ofcolor, ONE)
    x13 = compose(normalize, x12)
    x14 = rbind(ofcolor, FOUR)
    x15 = rbind(shift, x6)
    x16 = compose(x15, x14)
    x17 = lbind(subtract, x2)
    x18 = chain(increment, x17, height)
    x19 = lbind(subtract, x3)
    x20 = chain(increment, x19, width)
    x21 = rbind(interval, ONE)
    x22 = lbind(x21, ZERO)
    x23 = compose(x22, x18)
    x24 = compose(x22, x20)
    x25 = fork(product, x23, x24)
    x26 = rbind(shift, NEG_UNITY)
    x27 = lbind(lbind, shift)
    x28 = chain(x27, x26, x13)
    x29 = astuple(x7, x8)
    x30 = astuple(x9, x10)
    x31 = combine(x29, x30)
    x32 = apply(x16, x31)
    x33 = lbind(difference, x5)
    x34 = apply(x33, x32)
    x35 = apply(normalize, x32)
    x36 = apply(x25, x35)
    x37 = lbind(rbind, difference)
    x38 = apply(x27, x35)
    x39 = apply(x37, x34)
    x40 = papply(compose, x39, x38)
    x41 = lbind(compose, x11)
    x42 = apply(x41, x40)
    x43 = papply(sfilter, x36, x42)
    x44 = apply(x28, x31)
    x45 = mpapply(mapply, x44, x43)
    O = fill(x1, ONE, x45)
    return O



def solve_c59eb873_234bbc79(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, F, F, T)
    x3 = rbind(other, FIVE)
    x4 = compose(x3, palette)
    x5 = fork(recolor, x4, identity)
    x6 = apply(x5, x2)
    x7 = order(x6, leftmost)
    x8 = compose(last, last)
    x9 = lbind(matcher, x8)
    x10 = compose(x9, leftmost)
    x11 = compose(x9, rightmost)
    x12 = fork(sfilter, identity, x10)
    x13 = fork(sfilter, identity, x11)
    x14 = compose(dneighbors, last)
    x15 = rbind(chain, x14)
    x16 = lbind(x15, size)
    x17 = lbind(rbind, intersection)
    x18 = chain(x16, x17, toindices)
    x19 = fork(argmin, x12, x18)
    x20 = fork(argmin, x13, x18)
    x21 = compose(last, x19)
    x22 = compose(last, x20)
    x23 = astuple(ZERO, DOWN_LEFT)
    x24 = initset(x23)
    x25 = lbind(add, RIGHT)
    x26 = chain(x21, first, last)
    x27 = compose(x22, first)
    x28 = fork(subtract, x27, x26)
    x29 = compose(first, last)
    x30 = compose(x25, x28)
    x31 = fork(shift, x29, x30)
    x32 = fork(combine, first, x31)
    x33 = fork(remove, x29, last)
    x34 = fork(astuple, x32, x33)
    x35 = size(x2)
    x36 = power(x34, x35)
    x37 = astuple(x24, x7)
    x38 = x36(x37)
    x39 = first(x38)
    x40 = width(x39)
    x41 = decrement(x40)
    x42 = astuple(THREE, x41)
    x43 = canvas(ZERO, x42)
    O = paint(x43, x39)
    return O



def solve_c59eb873_22233c11(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = rbind(upscale, TWO)
    x4 = chain(invert, halve, shape)
    x5 = fork(combine, hfrontier, vfrontier)
    x6 = compose(x3, vmirror)
    x7 = fork(shift, x6, x4)
    x8 = compose(toindices, x7)
    x9 = lbind(mapply, x5)
    x10 = compose(x9, toindices)
    x11 = fork(difference, x8, x10)
    x12 = mapply(x11, x2)
    O = fill(x1, EIGHT, x12)
    return O



def solve_c59eb873_a64e4611(I):
    x1 = upscale(I, TWO)
    x2 = asindices(x1)
    x3 = fork(product, identity, identity)
    x4 = lbind(canvas, ZERO)
    x5 = compose(asobject, x4)
    x6 = fork(multiply, first, last)
    x7 = compose(positive, size)
    x8 = lbind(lbind, shift)
    x9 = rbind(fork, x6)
    x10 = lbind(x9, multiply)
    x11 = lbind(chain, x7)
    x12 = rbind(x11, x5)
    x13 = lbind(lbind, occurrences)
    x14 = chain(x10, x12, x13)
    x15 = compose(x3, first)
    x16 = compose(x14, last)
    x17 = fork(argmax, x15, x16)
    x18 = chain(x8, x5, x17)
    x19 = compose(x5, x17)
    x20 = fork(occurrences, last, x19)
    x21 = fork(mapply, x18, x20)
    x22 = multiply(TWO, SIX)
    x23 = interval(THREE, x22, ONE)
    x24 = astuple(x23, x1)
    x25 = x21(x24)
    x26 = fill(x1, THREE, x25)
    x27 = interval(THREE, TEN, ONE)
    x28 = astuple(x27, x26)
    x29 = x21(x28)
    x30 = fill(x26, THREE, x29)
    x31 = astuple(x27, x30)
    x32 = x21(x31)
    x33 = fill(x30, THREE, x32)
    x34 = rbind(toobject, x33)
    x35 = rbind(colorcount, THREE)
    x36 = chain(x35, x34, neighbors)
    x37 = matcher(x36, EIGHT)
    x38 = sfilter(x2, x37)
    x39 = fill(x1, THREE, x38)
    x40 = ofcolor(x39, ZERO)
    x41 = rbind(bordering, x39)
    x42 = compose(x41, initset)
    x43 = lbind(contained, THREE)
    x44 = rbind(toobject, x39)
    x45 = chain(x43, palette, x44)
    x46 = compose(x45, dneighbors)
    x47 = fork(both, x46, x42)
    x48 = sfilter(x40, x47)
    O = fill(x39, THREE, x48)
    return O



def solve_c59eb873_97a05b5b(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = rbind(greater, ONE)
    x6 = compose(x5, numcolors)
    x7 = sfilter(x2, x6)
    x8 = lbind(rbind, subtract)
    x9 = switch(x4, TWO, ZERO)
    x10 = lbind(occurrences, x9)
    x11 = lbind(lbind, shift)
    x12 = compose(x8, ulcorner)
    x13 = matcher(first, TWO)
    x14 = compose(flip, x13)
    x15 = rbind(sfilter, x13)
    x16 = rbind(sfilter, x14)
    x17 = lbind(recolor, ZERO)
    x18 = compose(x17, x16)
    x19 = fork(combine, x18, x15)
    x20 = chain(x12, x19, normalize)
    x21 = objects(x9, T, T, T)
    x22 = apply(toindices, x21)
    x23 = chain(x10, x19, normalize)
    x24 = rbind(colorcount, TWO)
    x25 = lbind(sfilter, x22)
    x26 = chain(size, first, x25)
    x27 = compose(positive, size)
    x28 = lbind(lbind, contained)
    x29 = chain(x27, x25, x28)
    x30 = compose(x26, x28)
    x31 = rbind(sfilter, x29)
    x32 = compose(x31, x23)
    x33 = lbind(rbind, equality)
    x34 = rbind(compose, x30)
    x35 = chain(x34, x33, x24)
    x36 = fork(sfilter, x32, x35)
    x37 = fork(apply, x20, x36)
    x38 = compose(x11, normalize)
    x39 = fork(mapply, x38, x37)
    x40 = astuple(cmirror, dmirror)
    x41 = astuple(hmirror, vmirror)
    x42 = combine(x40, x41)
    x43 = product(x42, x42)
    x44 = fork(compose, first, last)
    x45 = apply(x44, x43)
    x46 = lbind(rapply, x45)
    x47 = mapply(x46, x7)
    x48 = mapply(x39, x47)
    x49 = paint(x4, x48)
    x50 = palette(x48)
    x51 = lbind(remove, TWO)
    x52 = x51(x50)
    x53 = chain(first, x51, palette)
    x54 = rbind(contained, x52)
    x55 = chain(flip, x54, x53)
    x56 = sfilter(x7, x55)
    x57 = fork(apply, x20, x23)
    x58 = fork(mapply, x38, x57)
    x59 = mapply(x46, x56)
    x60 = mapply(x58, x59)
    O = paint(x49, x60)
    return O



def solve_c59eb873_3e980e27(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, F, T, T)
    x3 = astuple(TEN, TEN)
    x4 = invert(x3)
    x5 = astuple(TWO, x4)
    x6 = astuple(THREE, x4)
    x7 = initset(x5)
    x8 = insert(x6, x7)
    x9 = insert(x8, x2)
    x10 = lbind(contained, TWO)
    x11 = lbind(contained, THREE)
    x12 = compose(invert, ulcorner)
    x13 = lbind(compose, x12)
    x14 = lbind(rbind, sfilter)
    x15 = compose(x13, x14)
    x16 = rbind(compose, center)
    x17 = lbind(lbind, shift)
    x18 = x15(x10)
    x19 = x15(x11)
    x20 = fork(shift, identity, x18)
    x21 = fork(shift, identity, x19)
    x22 = compose(x10, palette)
    x23 = compose(x11, palette)
    x24 = sfilter(x9, x22)
    x25 = argmax(x24, size)
    x26 = remove(x25, x24)
    x27 = vmirror(x25)
    x28 = chain(x16, x17, x20)
    x29 = x28(x27)
    x30 = mapply(x29, x26)
    x31 = sfilter(x9, x23)
    x32 = argmax(x31, size)
    x33 = remove(x32, x31)
    x34 = chain(x16, x17, x21)
    x35 = x34(x32)
    x36 = mapply(x35, x33)
    x37 = combine(x30, x36)
    O = paint(x1, x37)
    return O



def solve_c8f0f002_67a3c6ac(I):
    x1 = replace(I, SEVEN, FIVE)
    O = vmirror(x1)
    return O



def solve_c8f0f002_68b16354(I):
    x1 = replace(I, SEVEN, FIVE)
    O = hmirror(x1)
    return O



def solve_c8f0f002_74dd1130(I):
    x1 = replace(I, SEVEN, FIVE)
    O = dmirror(x1)
    return O



def solve_c8f0f002_3c9b0459(I):
    x1 = replace(I, SEVEN, FIVE)
    O = rot180(x1)
    return O



def solve_c8f0f002_6150a2bd(I):
    x1 = replace(I, SEVEN, FIVE)
    O = rot180(x1)
    return O



def solve_c8f0f002_9172f3a0(I):
    x1 = replace(I, SEVEN, FIVE)
    O = upscale(x1, THREE)
    return O



def solve_c8f0f002_9dfd6313(I):
    x1 = replace(I, SEVEN, FIVE)
    O = dmirror(x1)
    return O



def solve_c8f0f002_a416b8f3(I):
    x1 = replace(I, SEVEN, FIVE)
    O = hconcat(x1, x1)
    return O



def solve_c8f0f002_b1948b0a(I):
    x1 = replace(I, SEVEN, FIVE)
    O = replace(x1, SIX, TWO)
    return O



def solve_c8f0f002_c59eb873(I):
    x1 = replace(I, SEVEN, FIVE)
    O = upscale(x1, TWO)
    return O



def solve_c8f0f002_d10ecb37(I):
    x1 = replace(I, SEVEN, FIVE)
    O = crop(x1, ORIGIN, TWO_BY_TWO)
    return O



def solve_c8f0f002_d511f180(I):
    x1 = replace(I, SEVEN, FIVE)
    O = switch(x1, FIVE, EIGHT)
    return O



def solve_c8f0f002_ed36ccf7(I):
    x1 = replace(I, SEVEN, FIVE)
    O = rot270(x1)
    return O



def solve_c8f0f002_4c4377d9(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = hmirror(x1)
    O = vconcat(x2, x1)
    return O



def solve_c8f0f002_6d0aefbc(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_c8f0f002_6fa7a44f(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_c8f0f002_5614dbcf(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = replace(x1, FIVE, ZERO)
    O = downscale(x2, THREE)
    return O



def solve_c8f0f002_5bd6f4ac(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = tojvec(SIX)
    O = crop(x1, x2, THREE_BY_THREE)
    return O



def solve_c8f0f002_5582e5ca(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = mostcolor(x1)
    O = canvas(x2, THREE_BY_THREE)
    return O



def solve_c8f0f002_8be77c9e(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_c8f0f002_c9e6f938(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_c8f0f002_2dee498d(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = hsplit(x1, THREE)
    O = first(x2)
    return O



def solve_c8f0f002_1cf80156(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = subgrid(x3, x1)
    return O



def solve_c8f0f002_32597951(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, EIGHT)
    x3 = delta(x2)
    O = fill(x1, THREE, x3)
    return O



def solve_c8f0f002_25ff71a9(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = move(x1, x3, DOWN)
    return O



def solve_c8f0f002_0b148d64(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = partition(x1)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_c8f0f002_1f85a75f(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_c8f0f002_23b5c85d(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_c8f0f002_ac0a08a4(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = colorcount(x1, ZERO)
    x3 = subtract(NINE, x2)
    O = upscale(x1, x3)
    return O



def solve_c8f0f002_be94b721(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_c8f0f002_c909285e(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    O = subgrid(x3, x1)
    return O



def solve_c8f0f002_f25ffba3(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = bottomhalf(x1)
    x3 = hmirror(x2)
    O = vconcat(x3, x2)
    return O



def solve_c8f0f002_c1d99e64(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = frontiers(x1)
    x3 = merge(x2)
    O = fill(x1, TWO, x3)
    return O



def solve_c8f0f002_b91ae062(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    O = upscale(x1, x3)
    return O



def solve_c8f0f002_3aa6fb7a(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = mapply(corners, x2)
    O = underfill(x1, ONE, x3)
    return O



def solve_c8f0f002_7b7f7511(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = portrait(x1)
    x3 = branch(x2, tophalf, lefthalf)
    O = x3(x1)
    return O



def solve_c8f0f002_4258a5f9(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, FIVE)
    x3 = mapply(neighbors, x2)
    O = fill(x1, ONE, x3)
    return O



def solve_c8f0f002_2dc579da(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = vsplit(x1, TWO)
    x3 = rbind(hsplit, TWO)
    x4 = mapply(x3, x2)
    O = argmax(x4, numcolors)
    return O



def solve_c8f0f002_28bf18c6(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = hconcat(x4, x4)
    return O



def solve_c8f0f002_3af2c5a8(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_c8f0f002_44f52bb0(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = vmirror(x1)
    x3 = equality(x2, x1)
    x4 = branch(x3, ONE, SEVEN)
    O = canvas(x4, UNITY)
    return O



def solve_c8f0f002_62c24649(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_c8f0f002_67e8384a(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_c8f0f002_7468f01a(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = vmirror(x4)
    return O



def solve_c8f0f002_662c240a(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = vsplit(x1, THREE)
    x3 = fork(equality, dmirror, identity)
    x4 = compose(flip, x3)
    O = extract(x2, x4)
    return O



def solve_c8f0f002_42a50994(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = cover(x1, x4)
    return O



def solve_c8f0f002_56ff96f3(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = mapply(x3, x2)
    O = paint(x1, x4)
    return O



def solve_c8f0f002_50cb2852(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = compose(backdrop, inbox)
    x4 = mapply(x3, x2)
    O = fill(x1, EIGHT, x4)
    return O



def solve_c8f0f002_4347f46a(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = fork(difference, toindices, box)
    x4 = mapply(x3, x2)
    O = fill(x1, ZERO, x4)
    return O



def solve_c8f0f002_46f33fce(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = rot180(x1)
    x3 = downscale(x2, TWO)
    x4 = rot180(x3)
    O = upscale(x4, FOUR)
    return O



def solve_c8f0f002_a740d043(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    O = replace(x4, ONE, ZERO)
    return O



def solve_c8f0f002_a79310a0(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = move(x1, x3, DOWN)
    O = replace(x4, EIGHT, TWO)
    return O



def solve_c8f0f002_aabf363d(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, ZERO)
    x4 = leastcolor(x3)
    O = replace(x3, x4, x2)
    return O



def solve_c8f0f002_ae4f1146(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, F, F, T)
    x3 = rbind(colorcount, ONE)
    x4 = argmax(x2, x3)
    O = subgrid(x4, x1)
    return O



def solve_c8f0f002_b27ca6d3(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, THREE, x4)
    return O



def solve_c8f0f002_ce22a75a(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = mapply(backdrop, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_c8f0f002_dc1df850(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_c8f0f002_f25fbde4(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = upscale(x4, TWO)
    return O



def solve_c8f0f002_44d8ac46(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = apply(delta, x2)
    x4 = mfilter(x3, square)
    O = fill(x1, TWO, x4)
    return O



def solve_c8f0f002_1e0a9b12(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = apply(x3, x2)
    O = rot90(x4)
    return O



def solve_c8f0f002_0d3d703e(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = switch(x1, THREE, FOUR)
    x3 = switch(x2, EIGHT, NINE)
    x4 = switch(x3, TWO, SIX)
    O = switch(x4, ONE, FIVE)
    return O



def solve_c8f0f002_3618c87e(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = move(x1, x4, TWO_BY_ZERO)
    return O



def solve_c8f0f002_1c786137(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, height)
    x4 = subgrid(x3, x1)
    O = trim(x4)
    return O



def solve_c8f0f002_8efcae92(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ONE)
    x4 = compose(size, delta)
    x5 = argmax(x3, x4)
    O = subgrid(x5, x1)
    return O



def solve_c8f0f002_445eab21(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = fork(multiply, height, width)
    x4 = argmax(x2, x3)
    x5 = color(x4)
    O = canvas(x5, TWO_BY_TWO)
    return O



def solve_c8f0f002_6f8cd79b(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = asindices(x1)
    x3 = apply(initset, x2)
    x4 = rbind(bordering, x1)
    x5 = mfilter(x3, x4)
    O = fill(x1, EIGHT, x5)
    return O



def solve_c8f0f002_2013d3e2(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = lefthalf(x4)
    O = tophalf(x5)
    return O



def solve_c8f0f002_41e4d17e(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = mapply(x4, x2)
    O = underfill(x1, SIX, x5)
    return O



def solve_c8f0f002_9565186b(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = shape(x1)
    x3 = objects(x1, T, F, F)
    x4 = argmax(x3, size)
    x5 = canvas(FIVE, x2)
    O = paint(x5, x4)
    return O



def solve_c8f0f002_aedd82e4(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, TWO)
    x4 = sizefilter(x3, ONE)
    x5 = merge(x4)
    O = fill(x1, ONE, x5)
    return O



def solve_c8f0f002_bb43febb(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, FIVE)
    x4 = compose(backdrop, inbox)
    x5 = mapply(x4, x3)
    O = fill(x1, TWO, x5)
    return O



def solve_c8f0f002_e98196ab(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = objects(x2, T, F, T)
    x5 = merge(x4)
    O = paint(x3, x5)
    return O



def solve_c8f0f002_f76d97a5(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = palette(x1)
    x3 = first(x2)
    x4 = last(x2)
    x5 = switch(x1, x3, x4)
    O = replace(x5, FIVE, ZERO)
    return O



def solve_c8f0f002_ce9e57f2(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = fork(connect, ulcorner, centerofmass)
    x4 = mapply(x3, x2)
    x5 = fill(x1, EIGHT, x4)
    O = switch(x5, EIGHT, TWO)
    return O



def solve_c8f0f002_22eb0ac0(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    O = paint(x1, x5)
    return O



def solve_c8f0f002_9f236235(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = compress(x1)
    x3 = objects(x1, T, F, F)
    x4 = vmirror(x2)
    x5 = valmin(x3, width)
    O = downscale(x4, x5)
    return O



def solve_c8f0f002_a699fb00(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, RIGHT)
    x4 = shift(x2, LEFT)
    x5 = intersection(x3, x4)
    O = fill(x1, TWO, x5)
    return O



def solve_c8f0f002_46442a0e(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_c8f0f002_7fe24cdd(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_c8f0f002_0ca9ddb6(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, ONE)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x3)
    x6 = fill(x1, SEVEN, x4)
    O = fill(x6, FOUR, x5)
    return O



def solve_c8f0f002_543a7ed5(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, SIX)
    x4 = mapply(outbox, x3)
    x5 = fill(x1, THREE, x4)
    x6 = mapply(delta, x3)
    O = fill(x5, FOUR, x6)
    return O



def solve_c8f0f002_0520fde7(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = vmirror(x1)
    x3 = lefthalf(x2)
    x4 = righthalf(x2)
    x5 = vmirror(x4)
    x6 = cellwise(x3, x5, ZERO)
    O = replace(x6, ONE, TWO)
    return O



def solve_c8f0f002_dae9d2b5(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, FOUR)
    x5 = ofcolor(x3, THREE)
    x6 = combine(x4, x5)
    O = fill(x2, SIX, x6)
    return O



def solve_c8f0f002_8d5021e8(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = vmirror(x1)
    x3 = hconcat(x2, x1)
    x4 = hmirror(x3)
    x5 = vconcat(x3, x4)
    x6 = vconcat(x5, x3)
    O = hmirror(x6)
    return O



def solve_c8f0f002_928ad970(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, FIVE)
    x3 = subgrid(x2, x1)
    x4 = trim(x3)
    x5 = leastcolor(x4)
    x6 = inbox(x2)
    O = fill(x1, x5, x6)
    return O



def solve_c8f0f002_b60334d2(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, FIVE)
    x3 = replace(x1, FIVE, ZERO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x2)
    x6 = fill(x3, ONE, x4)
    O = fill(x6, FIVE, x5)
    return O



def solve_c8f0f002_b94a9452(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = leastcolor(x4)
    x6 = mostcolor(x4)
    O = switch(x4, x5, x6)
    return O



def solve_c8f0f002_d037b0a7(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, DOWN)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    O = paint(x1, x6)
    return O



def solve_c8f0f002_d0f5fe59(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = astuple(x3, x3)
    x5 = canvas(ZERO, x4)
    x6 = shoot(ORIGIN, UNITY)
    O = fill(x5, EIGHT, x6)
    return O



def solve_c8f0f002_e3497940(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = vmirror(x3)
    x5 = objects(x4, T, F, T)
    x6 = merge(x5)
    O = paint(x2, x6)
    return O



def solve_c8f0f002_e9afcf9a(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = astuple(TWO, ONE)
    x3 = crop(x1, ORIGIN, x2)
    x4 = hmirror(x3)
    x5 = hconcat(x3, x4)
    x6 = hconcat(x5, x5)
    O = hconcat(x6, x5)
    return O



def solve_c8f0f002_d406998b(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = vmirror(x1)
    x3 = ofcolor(x2, FIVE)
    x4 = compose(even, last)
    x5 = sfilter(x3, x4)
    x6 = fill(x2, THREE, x5)
    O = vmirror(x6)
    return O



def solve_c8f0f002_5117e062(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, F, T, T)
    x3 = matcher(numcolors, TWO)
    x4 = extract(x2, x3)
    x5 = subgrid(x4, x1)
    x6 = mostcolor(x4)
    O = replace(x5, EIGHT, x6)
    return O



def solve_c8f0f002_3906de3d(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = switch(x2, ONE, TWO)
    x5 = apply(x3, x4)
    x6 = switch(x5, ONE, TWO)
    O = cmirror(x6)
    return O



def solve_c8f0f002_00d62c1b(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, FOUR, x6)
    return O



def solve_c8f0f002_7b6016b9(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, F)
    x3 = rbind(bordering, x1)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x4)
    x6 = fill(x1, TWO, x5)
    O = replace(x6, ZERO, THREE)
    return O



def solve_c8f0f002_67385a82(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, THREE)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = merge(x5)
    O = fill(x1, EIGHT, x6)
    return O



def solve_c8f0f002_a5313dff(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, ONE, x6)
    return O



def solve_c8f0f002_ea32f347(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, FIVE, FOUR)
    x4 = argmin(x2, size)
    x5 = argmax(x2, size)
    x6 = fill(x3, ONE, x5)
    O = fill(x6, TWO, x4)
    return O



def solve_c8f0f002_d631b094(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = ofcolor(x1, x3)
    x5 = size(x4)
    x6 = astuple(ONE, x5)
    O = canvas(x3, x6)
    return O



def solve_c8f0f002_10fcaaa3(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = leastcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = vconcat(x3, x3)
    x5 = ofcolor(x4, x2)
    x6 = mapply(ineighbors, x5)
    O = underfill(x4, EIGHT, x6)
    return O



def solve_c8f0f002_007bbfb7(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = hupscale(x1, THREE)
    x3 = vupscale(x2, THREE)
    x4 = hconcat(x1, x1)
    x5 = hconcat(x4, x1)
    x6 = vconcat(x5, x5)
    x7 = vconcat(x6, x5)
    O = cellwise(x3, x7, ZERO)
    return O



def solve_c8f0f002_496994bd(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = width(x1)
    x3 = height(x1)
    x4 = halve(x3)
    x5 = astuple(x4, x2)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    O = vconcat(x6, x7)
    return O



def solve_c8f0f002_1f876c06(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = fgpartition(x1)
    x3 = compose(last, first)
    x4 = power(last, TWO)
    x5 = fork(connect, x3, x4)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_c8f0f002_39a8645d(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = matcher(color, x5)
    x7 = extract(x2, x6)
    O = subgrid(x7, x1)
    return O



def solve_c8f0f002_1b2d62fb(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = replace(x2, NINE, ZERO)
    O = fill(x7, EIGHT, x6)
    return O



def solve_c8f0f002_90c28cc7(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = dedupe(x4)
    x6 = rot90(x5)
    x7 = dedupe(x6)
    O = rot270(x7)
    return O



def solve_c8f0f002_b6afb2da(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, F)
    x3 = replace(x1, FIVE, TWO)
    x4 = colorfilter(x2, FIVE)
    x5 = mapply(box, x4)
    x6 = fill(x3, FOUR, x5)
    x7 = mapply(corners, x4)
    O = fill(x6, ONE, x7)
    return O



def solve_c8f0f002_b9b7f026(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, F)
    x3 = argmin(x2, size)
    x4 = rbind(adjacent, x3)
    x5 = remove(x3, x2)
    x6 = extract(x5, x4)
    x7 = color(x6)
    O = canvas(x7, UNITY)
    return O



def solve_c8f0f002_ba97ae07(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = ofcolor(x1, x5)
    x7 = backdrop(x6)
    O = fill(x1, x5, x7)
    return O



def solve_c8f0f002_c9f8e694(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = height(x1)
    x3 = width(x1)
    x4 = ofcolor(x1, ZERO)
    x5 = astuple(x2, ONE)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hupscale(x6, x3)
    O = fill(x7, ZERO, x4)
    return O



def solve_c8f0f002_d23f8c26(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = asindices(x1)
    x3 = width(x1)
    x4 = halve(x3)
    x5 = matcher(last, x4)
    x6 = compose(flip, x5)
    x7 = sfilter(x2, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_c8f0f002_d5d6de2d(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = sfilter(x2, square)
    x4 = difference(x2, x3)
    x5 = compose(backdrop, inbox)
    x6 = mapply(x5, x4)
    x7 = replace(x1, TWO, ZERO)
    O = fill(x7, THREE, x6)
    return O



def solve_c8f0f002_dbc1a6ce(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, ONE)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_c8f0f002_ded97339(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, EIGHT)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_c8f0f002_ea786f4a(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = width(x1)
    x3 = shoot(ORIGIN, UNITY)
    x4 = decrement(x2)
    x5 = tojvec(x4)
    x6 = shoot(x5, DOWN_LEFT)
    x7 = combine(x3, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_c8f0f002_08ed6ac7(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = order(x2, height)
    x5 = size(x3)
    x6 = interval(x5, ZERO, NEG_ONE)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_c8f0f002_40853293(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = partition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    x6 = mfilter(x4, vline)
    x7 = paint(x1, x5)
    O = paint(x7, x6)
    return O



def solve_c8f0f002_5521c0d9(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = cover(x1, x3)
    x5 = chain(toivec, invert, height)
    x6 = fork(shift, identity, x5)
    x7 = mapply(x6, x2)
    O = paint(x4, x7)
    return O



def solve_c8f0f002_f8ff0b80(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = rbind(canvas, UNITY)
    x6 = apply(x5, x4)
    x7 = merge(x6)
    O = hmirror(x7)
    return O



def solve_c8f0f002_85c4e7cd(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, F)
    x3 = compose(invert, size)
    x4 = order(x2, size)
    x5 = order(x2, x3)
    x6 = apply(color, x5)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_c8f0f002_d2abd087(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = matcher(size, SIX)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x3)
    x6 = mfilter(x2, x4)
    x7 = fill(x1, TWO, x5)
    O = fill(x7, ONE, x6)
    return O



def solve_c8f0f002_363442ee(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, ONE)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = asobject(x3)
    x5 = lbind(shift, x4)
    x6 = compose(x5, decrement)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_c8f0f002_5168d44c(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, THREE)
    x3 = height(x2)
    x4 = equality(x3, ONE)
    x5 = branch(x4, ZERO_BY_TWO, TWO_BY_ZERO)
    x6 = ofcolor(x1, TWO)
    x7 = recolor(TWO, x6)
    O = move(x1, x7, x5)
    return O



def solve_c8f0f002_e9614598(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, ONE)
    x3 = fork(add, first, last)
    x4 = x3(x2)
    x5 = halve(x4)
    x6 = dneighbors(x5)
    x7 = insert(x5, x6)
    O = fill(x1, THREE, x7)
    return O



def solve_c8f0f002_d9fac9be(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = color(x4)
    x6 = remove(ZERO, x2)
    x7 = other(x6, x5)
    O = canvas(x7, UNITY)
    return O



def solve_c8f0f002_e50d258f(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = width(x1)
    x3 = astuple(NINE, x2)
    x4 = canvas(ZERO, x3)
    x5 = vconcat(x1, x4)
    x6 = objects(x5, F, F, T)
    x7 = rbind(colorcount, TWO)
    x8 = argmax(x6, x7)
    O = subgrid(x8, x1)
    return O



def solve_c8f0f002_810b9b61(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = apply(toindices, x2)
    x4 = fork(either, vline, hline)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = fork(equality, identity, box)
    x8 = mfilter(x6, x7)
    O = fill(x1, THREE, x8)
    return O



def solve_c8f0f002_54d82841(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = height(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(last, center)
    x5 = apply(x4, x3)
    x6 = decrement(x2)
    x7 = lbind(astuple, x6)
    x8 = apply(x7, x5)
    O = fill(x1, FOUR, x8)
    return O



def solve_c8f0f002_60b61512(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = mapply(delta, x2)
    O = fill(x1, SEVEN, x3)
    return O



def solve_c8f0f002_25d8a9c8(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, THREE)
    x5 = mfilter(x4, hline)
    x6 = toindices(x5)
    x7 = difference(x2, x6)
    x8 = fill(x1, FIVE, x6)
    O = fill(x8, ZERO, x7)
    return O



def solve_c8f0f002_239be575(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, F, T, T)
    x3 = lbind(contained, TWO)
    x4 = compose(x3, palette)
    x5 = sfilter(x2, x4)
    x6 = size(x5)
    x7 = greater(x6, ONE)
    x8 = branch(x7, ZERO, EIGHT)
    O = canvas(x8, UNITY)
    return O



def solve_c8f0f002_6430c8c4(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(FOUR, FOUR)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, THREE, x7)
    return O



def solve_c8f0f002_94f9d214(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = astuple(FOUR, FOUR)
    x7 = canvas(ZERO, x6)
    x8 = intersection(x4, x5)
    O = fill(x7, TWO, x8)
    return O



def solve_c8f0f002_ce4f8723(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = astuple(FOUR, FOUR)
    x8 = canvas(THREE, x7)
    O = fill(x8, ZERO, x6)
    return O



def solve_c8f0f002_d13f3404(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, UNITY)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = astuple(SIX, SIX)
    x8 = canvas(ZERO, x7)
    O = paint(x8, x6)
    return O



def solve_c8f0f002_f2829549(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = shape(x2)
    x8 = canvas(ZERO, x7)
    O = fill(x8, THREE, x6)
    return O



def solve_c8f0f002_fafffa47(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = shape(x3)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, TWO, x7)
    return O



def solve_c8f0f002_fcb5c309(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = colorfilter(x3, x2)
    x5 = difference(x3, x4)
    x6 = argmax(x5, size)
    x7 = color(x6)
    x8 = subgrid(x6, x1)
    O = replace(x8, x7, x2)
    return O



def solve_c8f0f002_ff805c23(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = hmirror(x1)
    x3 = vmirror(x1)
    x4 = ofcolor(x1, ONE)
    x5 = subgrid(x4, x2)
    x6 = subgrid(x4, x3)
    x7 = palette(x5)
    x8 = contained(ONE, x7)
    O = branch(x8, x6, x5)
    return O



def solve_c8f0f002_e76a88a6(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, F, F, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = remove(x3, x2)
    x6 = apply(ulcorner, x5)
    x7 = lbind(shift, x4)
    x8 = mapply(x7, x6)
    O = paint(x1, x8)
    return O



def solve_c8f0f002_7f4411dc(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = rbind(difference, x3)
    x5 = rbind(greater, TWO)
    x6 = chain(x5, size, x4)
    x7 = compose(x6, dneighbors)
    x8 = sfilter(x3, x7)
    O = fill(x1, ZERO, x8)
    return O



def solve_c8f0f002_b230c067(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(normalize, x3)
    x5 = leastcommon(x4)
    x6 = matcher(normalize, x5)
    x7 = extract(x2, x6)
    x8 = replace(x1, EIGHT, ONE)
    O = fill(x8, TWO, x7)
    return O



def solve_c8f0f002_e8593010(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = sizefilter(x2, TWO)
    x5 = merge(x3)
    x6 = fill(x1, THREE, x5)
    x7 = merge(x4)
    x8 = fill(x6, TWO, x7)
    O = replace(x8, ZERO, ONE)
    return O



def solve_c8f0f002_6d75e8bb(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = ulcorner(x3)
    x5 = subgrid(x3, x1)
    x6 = replace(x5, ZERO, TWO)
    x7 = asobject(x6)
    x8 = shift(x7, x4)
    O = paint(x1, x8)
    return O



def solve_c8f0f002_1190e5a7(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = mostcolor(x1)
    x3 = frontiers(x1)
    x4 = sfilter(x3, vline)
    x5 = difference(x3, x4)
    x6 = astuple(x5, x4)
    x7 = apply(size, x6)
    x8 = increment(x7)
    O = canvas(x2, x8)
    return O



def solve_c8f0f002_6e02f1e3(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = numcolors(x1)
    x3 = canvas(ZERO, THREE_BY_THREE)
    x4 = equality(x2, THREE)
    x5 = equality(x2, TWO)
    x6 = branch(x4, TWO_BY_ZERO, ORIGIN)
    x7 = branch(x5, TWO_BY_TWO, ZERO_BY_TWO)
    x8 = connect(x6, x7)
    O = fill(x3, FIVE, x8)
    return O



def solve_c8f0f002_a61f2674(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = replace(x1, FIVE, ZERO)
    x6 = recolor(ONE, x3)
    x7 = recolor(TWO, x4)
    x8 = combine(x6, x7)
    O = paint(x5, x8)
    return O



def solve_c8f0f002_fcc82909(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, F, T, T)
    x3 = rbind(add, DOWN)
    x4 = compose(x3, llcorner)
    x5 = compose(toivec, numcolors)
    x6 = fork(add, lrcorner, x5)
    x7 = fork(astuple, x4, x6)
    x8 = compose(box, x7)
    x9 = mapply(x8, x2)
    O = fill(x1, THREE, x9)
    return O



def solve_c8f0f002_72ca375d(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = rbind(subgrid, x1)
    x5 = apply(x4, x3)
    x6 = apply(vmirror, x5)
    x7 = papply(equality, x5, x6)
    x8 = pair(x5, x7)
    x9 = extract(x8, last)
    O = first(x9)
    return O



def solve_c8f0f002_253bf280(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, EIGHT)
    x3 = prapply(connect, x2, x2)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = fork(either, vline, hline)
    x8 = mfilter(x6, x7)
    x9 = fill(x1, THREE, x8)
    O = fill(x9, EIGHT, x2)
    return O



def solve_c8f0f002_1f642eb9(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = rbind(gravitate, x5)
    x7 = compose(crement, x6)
    x8 = fork(shift, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_c8f0f002_31aa019c(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = first(x3)
    x5 = neighbors(x4)
    x6 = astuple(TEN, TEN)
    x7 = canvas(ZERO, x6)
    x8 = initset(x4)
    x9 = fill(x7, x2, x8)
    O = fill(x9, TWO, x5)
    return O



def solve_c8f0f002_27a28665(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, F)
    x3 = valmax(x2, size)
    x4 = equality(x3, ONE)
    x5 = equality(x3, FOUR)
    x6 = equality(x3, FIVE)
    x7 = branch(x4, TWO, ONE)
    x8 = branch(x5, THREE, x7)
    x9 = branch(x6, SIX, x8)
    O = canvas(x9, UNITY)
    return O



def solve_c8f0f002_7ddcd7ec(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = color(x5)
    x7 = lbind(position, x5)
    x8 = fork(shoot, center, x7)
    x9 = mapply(x8, x3)
    O = fill(x1, x6, x9)
    return O



def solve_c8f0f002_3bd67248(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = height(x1)
    x3 = decrement(x2)
    x4 = decrement(x3)
    x5 = astuple(x4, ONE)
    x6 = astuple(x3, ONE)
    x7 = shoot(x5, UP_RIGHT)
    x8 = shoot(x6, RIGHT)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_c8f0f002_73251a56(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = dmirror(x1)
    x3 = papply(pair, x1, x2)
    x4 = lbind(apply, maximum)
    x5 = apply(x4, x3)
    x6 = mostcolor(x5)
    x7 = replace(x5, ZERO, x6)
    x8 = index(x7, ORIGIN)
    x9 = shoot(ORIGIN, UNITY)
    O = fill(x7, x8, x9)
    return O



def solve_c8f0f002_25d487eb(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = ofcolor(x1, x2)
    x5 = center(x4)
    x6 = merge(x3)
    x7 = center(x6)
    x8 = subtract(x7, x5)
    x9 = shoot(x5, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_c8f0f002_8f2ea7aa(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    O = cellwise(x5, x9, ZERO)
    return O



def solve_c8f0f002_b8825c91(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = replace(x1, FOUR, ZERO)
    x3 = dmirror(x2)
    x4 = papply(pair, x2, x3)
    x5 = lbind(apply, maximum)
    x6 = apply(x5, x4)
    x7 = cmirror(x6)
    x8 = papply(pair, x6, x7)
    x9 = apply(x5, x8)
    O = cmirror(x9)
    return O



def solve_c8f0f002_cce03e0d(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = upscale(x1, THREE)
    x3 = hconcat(x1, x1)
    x4 = hconcat(x3, x1)
    x5 = vconcat(x4, x4)
    x6 = vconcat(x5, x4)
    x7 = ofcolor(x2, ZERO)
    x8 = ofcolor(x2, ONE)
    x9 = combine(x7, x8)
    O = fill(x6, ZERO, x9)
    return O



def solve_c8f0f002_d364b489(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, DOWN)
    x4 = fill(x1, EIGHT, x3)
    x5 = shift(x2, UP)
    x6 = fill(x4, TWO, x5)
    x7 = shift(x2, RIGHT)
    x8 = fill(x6, SIX, x7)
    x9 = shift(x2, LEFT)
    O = fill(x8, SEVEN, x9)
    return O



def solve_c8f0f002_a5f85a15(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = interval(ONE, NINE, ONE)
    x4 = apply(double, x3)
    x5 = apply(decrement, x4)
    x6 = papply(astuple, x5, x5)
    x7 = apply(ulcorner, x2)
    x8 = lbind(shift, x6)
    x9 = mapply(x8, x7)
    O = fill(x1, FOUR, x9)
    return O



def solve_c8f0f002_3ac3eb23(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = chain(ineighbors, last, first)
    x4 = fork(recolor, color, x3)
    x5 = mapply(x4, x2)
    x6 = paint(x1, x5)
    x7 = vsplit(x6, THREE)
    x8 = first(x7)
    x9 = vconcat(x8, x8)
    O = vconcat(x8, x9)
    return O



def solve_c8f0f002_22168020(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = palette(x1)
    x3 = remove(ZERO, x2)
    x4 = lbind(ofcolor, x1)
    x5 = lbind(prapply, connect)
    x6 = fork(x5, x4, x4)
    x7 = compose(merge, x6)
    x8 = fork(recolor, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_c8f0f002_6e82a1ae(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sizefilter, x2)
    x4 = compose(merge, x3)
    x5 = x4(TWO)
    x6 = x4(THREE)
    x7 = x4(FOUR)
    x8 = fill(x1, THREE, x5)
    x9 = fill(x8, TWO, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_c8f0f002_868de0fa(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, F)
    x3 = sfilter(x2, square)
    x4 = compose(even, height)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = merge(x5)
    x8 = merge(x6)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, SEVEN, x8)
    return O



def solve_c8f0f002_681b3aeb(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = rot270(x1)
    x3 = objects(x2, T, F, T)
    x4 = argmax(x3, size)
    x5 = argmin(x3, size)
    x6 = color(x5)
    x7 = canvas(x6, THREE_BY_THREE)
    x8 = normalize(x4)
    x9 = paint(x7, x8)
    O = rot90(x9)
    return O



def solve_c8f0f002_8e5a5113(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = rot90(x2)
    x4 = rot180(x2)
    x5 = astuple(x3, x4)
    x6 = astuple(FOUR, EIGHT)
    x7 = apply(tojvec, x6)
    x8 = apply(asobject, x5)
    x9 = mpapply(shift, x8, x7)
    O = paint(x1, x9)
    return O



def solve_c8f0f002_025d127b(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = apply(color, x2)
    x4 = merge(x2)
    x5 = lbind(colorfilter, x2)
    x6 = rbind(argmax, rightmost)
    x7 = compose(x6, x5)
    x8 = mapply(x7, x3)
    x9 = difference(x4, x8)
    O = move(x1, x9, RIGHT)
    return O



def solve_c8f0f002_2281f1f4(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, FIVE)
    x3 = product(x2, x2)
    x4 = power(first, TWO)
    x5 = power(last, TWO)
    x6 = fork(astuple, x4, x5)
    x7 = apply(x6, x3)
    x8 = urcorner(x2)
    x9 = remove(x8, x7)
    O = underfill(x1, TWO, x9)
    return O



def solve_c8f0f002_cf98881b(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = hsplit(x1, THREE)
    x3 = first(x2)
    x4 = remove(x3, x2)
    x5 = first(x4)
    x6 = last(x4)
    x7 = ofcolor(x5, NINE)
    x8 = ofcolor(x3, FOUR)
    x9 = fill(x6, NINE, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_c8f0f002_d4f3cd78(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, FIVE)
    x3 = delta(x2)
    x4 = fill(x1, EIGHT, x3)
    x5 = box(x2)
    x6 = difference(x5, x2)
    x7 = position(x5, x6)
    x8 = first(x6)
    x9 = shoot(x8, x7)
    O = fill(x4, EIGHT, x9)
    return O



def solve_c8f0f002_bda2d7a6(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = partition(x1)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = last(x3)
    x6 = remove(x5, x3)
    x7 = repeat(x5, ONE)
    x8 = combine(x7, x6)
    x9 = mpapply(recolor, x4, x8)
    O = paint(x1, x9)
    return O



def solve_c8f0f002_6455b5f5(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = argmax(x2, size)
    x5 = valmin(x2, size)
    x6 = sizefilter(x3, x5)
    x7 = recolor(ONE, x4)
    x8 = merge(x6)
    x9 = paint(x1, x7)
    O = fill(x9, EIGHT, x8)
    return O



def solve_c8f0f002_b8cdaf2b(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = shift(x3, UP)
    x5 = ulcorner(x4)
    x6 = urcorner(x4)
    x7 = shoot(x5, NEG_UNITY)
    x8 = shoot(x6, UP_RIGHT)
    x9 = combine(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_c8f0f002_bd4472b8(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = width(x1)
    x3 = astuple(TWO, x2)
    x4 = crop(x1, ORIGIN, x3)
    x5 = tophalf(x4)
    x6 = dmirror(x5)
    x7 = hupscale(x6, x2)
    x8 = repeat(x7, TWO)
    x9 = merge(x8)
    O = vconcat(x4, x9)
    return O



def solve_c8f0f002_4be741c5(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = branch(x2, height, width)
    x5 = x4(x1)
    x6 = astuple(ONE, x5)
    x7 = x3(x1)
    x8 = crop(x7, ORIGIN, x6)
    x9 = apply(dedupe, x8)
    O = x3(x9)
    return O



def solve_c8f0f002_bbc9ae5d(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = width(x1)
    x3 = palette(x1)
    x4 = halve(x2)
    x5 = vupscale(x1, x4)
    x6 = rbind(shoot, UNITY)
    x7 = other(x3, ZERO)
    x8 = ofcolor(x5, x7)
    x9 = mapply(x6, x8)
    O = fill(x5, x7, x9)
    return O



def solve_c8f0f002_d90796e8(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, F, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = lbind(contained, TWO)
    x5 = compose(x4, palette)
    x6 = mfilter(x3, x5)
    x7 = cover(x1, x6)
    x8 = matcher(first, THREE)
    x9 = sfilter(x6, x8)
    O = fill(x7, EIGHT, x9)
    return O



def solve_c8f0f002_2c608aff(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = toindices(x4)
    x6 = ofcolor(x1, x2)
    x7 = prapply(connect, x5, x6)
    x8 = fork(either, vline, hline)
    x9 = mfilter(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_c8f0f002_f8b3ba0a(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = compress(x1)
    x3 = astuple(THREE, ONE)
    x4 = palette(x2)
    x5 = lbind(colorcount, x2)
    x6 = compose(invert, x5)
    x7 = order(x4, x6)
    x8 = rbind(canvas, UNITY)
    x9 = apply(x8, x7)
    x10 = merge(x9)
    O = crop(x10, DOWN, x3)
    return O



def solve_c8f0f002_80af3007(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    x10 = cellwise(x5, x9, ZERO)
    O = downscale(x10, THREE)
    return O



def solve_c8f0f002_83302e8f(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = sfilter(x3, square)
    x5 = difference(x3, x4)
    x6 = merge(x4)
    x7 = recolor(THREE, x6)
    x8 = merge(x5)
    x9 = recolor(FOUR, x8)
    x10 = paint(x1, x7)
    O = paint(x10, x9)
    return O



def solve_c8f0f002_1fad071e(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, ONE)
    x4 = sizefilter(x3, FOUR)
    x5 = size(x4)
    x6 = subtract(FIVE, x5)
    x7 = astuple(ONE, x5)
    x8 = canvas(ONE, x7)
    x9 = astuple(ONE, x6)
    x10 = canvas(ZERO, x9)
    O = hconcat(x8, x10)
    return O



def solve_c8f0f002_11852cab(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = hmirror(x3)
    x5 = vmirror(x3)
    x6 = dmirror(x3)
    x7 = cmirror(x3)
    x8 = paint(x1, x4)
    x9 = paint(x8, x5)
    x10 = paint(x9, x6)
    O = paint(x10, x7)
    return O



def solve_c8f0f002_3428a4f5(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(SIX, FIVE)
    x5 = ofcolor(x2, TWO)
    x6 = ofcolor(x3, TWO)
    x7 = combine(x5, x6)
    x8 = intersection(x5, x6)
    x9 = difference(x7, x8)
    x10 = canvas(ZERO, x4)
    O = fill(x10, THREE, x9)
    return O



def solve_c8f0f002_178fcbfb(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(vfrontier, x3)
    x5 = fill(x1, TWO, x4)
    x6 = colorfilter(x2, TWO)
    x7 = difference(x2, x6)
    x8 = compose(hfrontier, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x7)
    O = paint(x5, x10)
    return O



def solve_c8f0f002_54d9e175(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = compose(neighbors, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x3)
    x7 = paint(x1, x6)
    x8 = replace(x7, ONE, SIX)
    x9 = replace(x8, TWO, SEVEN)
    x10 = replace(x9, THREE, EIGHT)
    O = replace(x10, FOUR, NINE)
    return O



def solve_c8f0f002_5ad4f10b(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = color(x3)
    x5 = subgrid(x3, x1)
    x6 = leastcolor(x5)
    x7 = replace(x5, x6, ZERO)
    x8 = replace(x7, x4, x6)
    x9 = height(x8)
    x10 = divide(x9, THREE)
    O = downscale(x8, x10)
    return O



def solve_c8f0f002_623ea044(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = center(x3)
    x5 = color(x3)
    x6 = astuple(UNITY, NEG_UNITY)
    x7 = astuple(UP_RIGHT, DOWN_LEFT)
    x8 = combine(x6, x7)
    x9 = lbind(shoot, x4)
    x10 = mapply(x9, x8)
    O = fill(x1, x5, x10)
    return O



def solve_c8f0f002_794b24be(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, ONE)
    x3 = size(x2)
    x4 = decrement(x3)
    x5 = canvas(ZERO, THREE_BY_THREE)
    x6 = tojvec(x4)
    x7 = connect(ORIGIN, x6)
    x8 = equality(x3, FOUR)
    x9 = insert(UNITY, x7)
    x10 = branch(x8, x9, x7)
    O = fill(x5, TWO, x10)
    return O



def solve_c8f0f002_88a62173(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = tophalf(x3)
    x6 = bottomhalf(x2)
    x7 = bottomhalf(x3)
    x8 = astuple(x4, x5)
    x9 = astuple(x6, x7)
    x10 = combine(x8, x9)
    O = leastcommon(x10)
    return O



def solve_c8f0f002_890034e9(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = inbox(x3)
    x5 = recolor(ZERO, x4)
    x6 = occurrences(x1, x5)
    x7 = normalize(x3)
    x8 = shift(x7, NEG_UNITY)
    x9 = lbind(shift, x8)
    x10 = mapply(x9, x6)
    O = fill(x1, x2, x10)
    return O



def solve_c8f0f002_99b1bc43(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = combine(x4, x5)
    x7 = intersection(x4, x5)
    x8 = difference(x6, x7)
    x9 = shape(x2)
    x10 = canvas(ZERO, x9)
    O = fill(x10, THREE, x8)
    return O



def solve_c8f0f002_a9f96cdd(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = shift(x2, NEG_UNITY)
    x5 = fill(x3, THREE, x4)
    x6 = shift(x2, UP_RIGHT)
    x7 = fill(x5, SIX, x6)
    x8 = shift(x2, DOWN_LEFT)
    x9 = fill(x7, EIGHT, x8)
    x10 = shift(x2, UNITY)
    O = fill(x9, SEVEN, x10)
    return O



def solve_c8f0f002_af902bf9(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, FOUR)
    x3 = prapply(connect, x2, x2)
    x4 = fork(either, vline, hline)
    x5 = mfilter(x3, x4)
    x6 = underfill(x1, NEG_ONE, x5)
    x7 = objects(x6, F, F, T)
    x8 = compose(backdrop, inbox)
    x9 = mapply(x8, x7)
    x10 = fill(x6, TWO, x9)
    O = replace(x10, NEG_ONE, ZERO)
    return O



def solve_c8f0f002_b548a754(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, EIGHT, ZERO)
    x4 = leastcolor(x3)
    x5 = replace(x3, x4, ZERO)
    x6 = leastcolor(x5)
    x7 = merge(x2)
    x8 = backdrop(x7)
    x9 = box(x7)
    x10 = fill(x1, x4, x8)
    O = fill(x10, x6, x9)
    return O



def solve_c8f0f002_c3e719e8(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = mostcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = upscale(x1, THREE)
    x5 = ofcolor(x4, x2)
    x6 = asindices(x4)
    x7 = difference(x6, x5)
    x8 = hconcat(x3, x1)
    x9 = vconcat(x8, x8)
    x10 = vconcat(x9, x8)
    O = fill(x10, ZERO, x7)
    return O



def solve_c8f0f002_de1cd16c(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = rbind(subgrid, x1)
    x7 = apply(x6, x5)
    x8 = rbind(colorcount, x2)
    x9 = argmax(x7, x8)
    x10 = mostcolor(x9)
    O = canvas(x10, UNITY)
    return O



def solve_c8f0f002_d8c310e9(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = hperiod(x3)
    x5 = multiply(x4, THREE)
    x6 = tojvec(x4)
    x7 = tojvec(x5)
    x8 = shift(x3, x6)
    x9 = shift(x3, x7)
    x10 = paint(x1, x8)
    O = paint(x10, x9)
    return O



def solve_c8f0f002_a3325580(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = valmax(x2, size)
    x4 = sizefilter(x2, x3)
    x5 = order(x4, leftmost)
    x6 = apply(color, x5)
    x7 = astuple(ONE, x3)
    x8 = rbind(canvas, x7)
    x9 = apply(x8, x6)
    x10 = merge(x9)
    O = dmirror(x10)
    return O



def solve_c8f0f002_8eb1be9a(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = interval(NEG_TWO, FOUR, ONE)
    x5 = lbind(shift, x3)
    x6 = height(x3)
    x7 = rbind(multiply, x6)
    x8 = apply(x7, x4)
    x9 = apply(toivec, x8)
    x10 = mapply(x5, x9)
    O = paint(x1, x10)
    return O



def solve_c8f0f002_321b1fc6(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, F, F, T)
    x3 = colorfilter(x2, EIGHT)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = cover(x1, x5)
    x7 = normalize(x5)
    x8 = lbind(shift, x7)
    x9 = apply(ulcorner, x3)
    x10 = mapply(x8, x9)
    O = paint(x6, x10)
    return O



def solve_c8f0f002_1caeab9d(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, ONE)
    x4 = lowermost(x3)
    x5 = lbind(subtract, x4)
    x6 = chain(toivec, x5, lowermost)
    x7 = fork(shift, identity, x6)
    x8 = merge(x2)
    x9 = cover(x1, x8)
    x10 = mapply(x7, x2)
    O = paint(x9, x10)
    return O



def solve_c8f0f002_1b60fb0c(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = rot90(x1)
    x3 = ofcolor(x1, ONE)
    x4 = ofcolor(x2, ONE)
    x5 = neighbors(ORIGIN)
    x6 = mapply(neighbors, x5)
    x7 = lbind(shift, x4)
    x8 = apply(x7, x6)
    x9 = lbind(intersection, x3)
    x10 = compose(size, x9)
    x11 = argmax(x8, x10)
    O = underfill(x1, TWO, x11)
    return O



def solve_c8f0f002_ddf7fa4f(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = colorfilter(x2, FIVE)
    x5 = product(x3, x4)
    x6 = fork(vmatching, first, last)
    x7 = sfilter(x5, x6)
    x8 = compose(color, first)
    x9 = fork(recolor, x8, last)
    x10 = mapply(x9, x7)
    O = paint(x1, x10)
    return O



def solve_c8f0f002_47c1f68c(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = leastcolor(x1)
    x3 = vmirror(x1)
    x4 = objects(x1, T, T, T)
    x5 = merge(x4)
    x6 = mostcolor(x5)
    x7 = cellwise(x1, x3, x2)
    x8 = hmirror(x7)
    x9 = cellwise(x7, x8, x2)
    x10 = compress(x9)
    O = replace(x10, x2, x6)
    return O



def solve_c8f0f002_6c434453(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, EIGHT)
    x4 = dneighbors(UNITY)
    x5 = insert(UNITY, x4)
    x6 = merge(x3)
    x7 = cover(x1, x6)
    x8 = apply(ulcorner, x3)
    x9 = lbind(shift, x5)
    x10 = mapply(x9, x8)
    O = fill(x7, TWO, x10)
    return O



def solve_c8f0f002_23581191(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = paint(x1, x6)
    x8 = fork(intersection, first, last)
    x9 = apply(x4, x2)
    x10 = x8(x9)
    O = fill(x7, TWO, x10)
    return O



def solve_c8f0f002_c8cbb738(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = mostcolor(x1)
    x3 = fgpartition(x1)
    x4 = valmax(x3, shape)
    x5 = canvas(x2, x4)
    x6 = apply(normalize, x3)
    x7 = lbind(subtract, x4)
    x8 = chain(halve, x7, shape)
    x9 = fork(shift, identity, x8)
    x10 = mapply(x9, x6)
    O = paint(x5, x10)
    return O



def solve_c8f0f002_d4469b4b(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = equality(x3, ONE)
    x5 = equality(x3, TWO)
    x6 = branch(x4, UNITY, TWO_BY_TWO)
    x7 = branch(x5, RIGHT, x6)
    x8 = fork(combine, vfrontier, hfrontier)
    x9 = x8(x7)
    x10 = canvas(ZERO, THREE_BY_THREE)
    O = fill(x10, FIVE, x9)
    return O



def solve_c8f0f002_6ecd11f4(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = subgrid(x3, x1)
    x6 = subgrid(x4, x1)
    x7 = width(x5)
    x8 = width(x6)
    x9 = divide(x7, x8)
    x10 = downscale(x5, x9)
    x11 = ofcolor(x10, ZERO)
    O = fill(x6, ZERO, x11)
    return O



def solve_c8f0f002_eb281b96(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = height(x1)
    x3 = width(x1)
    x4 = decrement(x2)
    x5 = astuple(x4, x3)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    x8 = vconcat(x1, x7)
    x9 = double(x4)
    x10 = astuple(x9, x3)
    x11 = crop(x8, DOWN, x10)
    O = vconcat(x8, x11)
    return O



def solve_c8f0f002_ff28f65a(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = double(x3)
    x5 = interval(ZERO, x4, TWO)
    x6 = apply(tojvec, x5)
    x7 = astuple(ONE, NINE)
    x8 = canvas(ZERO, x7)
    x9 = fill(x8, ONE, x6)
    x10 = hsplit(x9, THREE)
    O = merge(x10)
    return O



def solve_c8f0f002_7e0986d6(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = replace(x1, x2, ZERO)
    x5 = leastcolor(x4)
    x6 = rbind(colorcount, x5)
    x7 = chain(positive, decrement, x6)
    x8 = rbind(toobject, x4)
    x9 = chain(x7, x8, dneighbors)
    x10 = sfilter(x3, x9)
    O = fill(x4, x5, x10)
    return O



def solve_c8f0f002_09629e4f(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, F, T, T)
    x3 = argmin(x2, numcolors)
    x4 = normalize(x3)
    x5 = upscale(x4, FOUR)
    x6 = paint(x1, x5)
    x7 = ofcolor(x1, FIVE)
    O = fill(x6, FIVE, x7)
    return O



def solve_c8f0f002_a85d4709(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, FIVE)
    x3 = lbind(matcher, last)
    x4 = lbind(sfilter, x2)
    x5 = lbind(mapply, hfrontier)
    x6 = chain(x5, x4, x3)
    x7 = x6(ZERO)
    x8 = x6(TWO)
    x9 = x6(ONE)
    x10 = fill(x1, TWO, x7)
    x11 = fill(x10, THREE, x8)
    O = fill(x11, FOUR, x9)
    return O



def solve_c8f0f002_feca6190(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = multiply(x3, FIVE)
    x5 = astuple(x4, x4)
    x6 = canvas(ZERO, x5)
    x7 = rbind(shoot, UNITY)
    x8 = compose(x7, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x2)
    x11 = paint(x6, x10)
    O = hmirror(x11)
    return O



def solve_c8f0f002_a68b268e(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = lefthalf(x2)
    x5 = righthalf(x2)
    x6 = lefthalf(x3)
    x7 = righthalf(x3)
    x8 = ofcolor(x5, FOUR)
    x9 = ofcolor(x4, SEVEN)
    x10 = ofcolor(x6, EIGHT)
    x11 = fill(x7, EIGHT, x10)
    x12 = fill(x11, FOUR, x8)
    O = fill(x12, SEVEN, x9)
    return O



def solve_c8f0f002_beb8660c(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(invert, size)
    x5 = order(x3, x4)
    x6 = apply(normalize, x5)
    x7 = size(x6)
    x8 = interval(ZERO, x7, ONE)
    x9 = apply(toivec, x8)
    x10 = mpapply(shift, x6, x9)
    x11 = canvas(ZERO, x2)
    x12 = paint(x11, x10)
    O = rot180(x12)
    return O



def solve_c8f0f002_913fb3ed(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, THREE)
    x3 = ofcolor(x1, EIGHT)
    x4 = ofcolor(x1, TWO)
    x5 = mapply(neighbors, x2)
    x6 = mapply(neighbors, x3)
    x7 = mapply(neighbors, x4)
    x8 = fill(x1, SIX, x5)
    x9 = fill(x8, FOUR, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_c8f0f002_0962bcdd(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = leastcolor(x1)
    x3 = replace(x1, ZERO, x2)
    x4 = leastcolor(x3)
    x5 = ofcolor(x1, x4)
    x6 = mapply(dneighbors, x5)
    x7 = fill(x1, x4, x6)
    x8 = objects(x7, F, T, T)
    x9 = fork(connect, ulcorner, lrcorner)
    x10 = fork(connect, llcorner, urcorner)
    x11 = fork(combine, x9, x10)
    x12 = mapply(x11, x8)
    O = fill(x7, x2, x12)
    return O



def solve_c8f0f002_3631a71a(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = shape(x1)
    x3 = replace(x1, NINE, ZERO)
    x4 = lbind(apply, maximum)
    x5 = dmirror(x3)
    x6 = papply(pair, x3, x5)
    x7 = apply(x4, x6)
    x8 = subtract(x2, TWO_BY_TWO)
    x9 = crop(x7, TWO_BY_TWO, x8)
    x10 = vmirror(x9)
    x11 = objects(x10, T, F, T)
    x12 = merge(x11)
    x13 = shift(x12, TWO_BY_TWO)
    O = paint(x7, x13)
    return O



def solve_c8f0f002_05269061(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = neighbors(ORIGIN)
    x4 = mapply(neighbors, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = merge(x2)
    x8 = lbind(shift, x7)
    x9 = mapply(x8, x6)
    x10 = shift(x9, UP_RIGHT)
    x11 = shift(x9, DOWN_LEFT)
    x12 = paint(x1, x9)
    x13 = paint(x12, x10)
    O = paint(x13, x11)
    return O



def solve_c8f0f002_95990924(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = apply(ulcorner, x3)
    x5 = apply(urcorner, x3)
    x6 = apply(llcorner, x3)
    x7 = apply(lrcorner, x3)
    x8 = fill(x1, ONE, x4)
    x9 = fill(x8, TWO, x5)
    x10 = fill(x9, THREE, x6)
    O = fill(x10, FOUR, x7)
    return O



def solve_c8f0f002_e509e548(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = rbind(subgrid, x1)
    x4 = chain(palette, trim, x3)
    x5 = lbind(contained, THREE)
    x6 = compose(x5, x4)
    x7 = fork(add, height, width)
    x8 = compose(decrement, x7)
    x9 = fork(equality, size, x8)
    x10 = mfilter(x2, x6)
    x11 = mfilter(x2, x9)
    x12 = replace(x1, THREE, SIX)
    x13 = fill(x12, TWO, x10)
    O = fill(x13, ONE, x11)
    return O



def solve_c8f0f002_d43fd935(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, THREE)
    x4 = sizefilter(x2, ONE)
    x5 = rbind(vmatching, x3)
    x6 = rbind(hmatching, x3)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = rbind(gravitate, x3)
    x10 = fork(add, center, x9)
    x11 = fork(connect, center, x10)
    x12 = fork(recolor, color, x11)
    x13 = mapply(x12, x8)
    O = paint(x1, x13)
    return O



def solve_c8f0f002_e73095fd(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = fork(equality, toindices, backdrop)
    x5 = sfilter(x3, x4)
    x6 = lbind(mapply, dneighbors)
    x7 = chain(x6, corners, outbox)
    x8 = fork(difference, x7, outbox)
    x9 = ofcolor(x1, FIVE)
    x10 = rbind(intersection, x9)
    x11 = matcher(size, ZERO)
    x12 = chain(x11, x10, x8)
    x13 = mfilter(x5, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_c8f0f002_1bfc4729(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = asindices(x1)
    x3 = tophalf(x1)
    x4 = bottomhalf(x1)
    x5 = leastcolor(x3)
    x6 = leastcolor(x4)
    x7 = hfrontier(TWO_BY_ZERO)
    x8 = box(x2)
    x9 = combine(x7, x8)
    x10 = fill(x3, x5, x9)
    x11 = hmirror(x10)
    x12 = replace(x11, x5, x6)
    O = vconcat(x10, x12)
    return O



def solve_c8f0f002_93b581b8(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = fgpartition(x1)
    x3 = chain(cmirror, dmirror, merge)
    x4 = x3(x2)
    x5 = upscale(x4, THREE)
    x6 = astuple(NEG_TWO, NEG_TWO)
    x7 = shift(x5, x6)
    x8 = underpaint(x1, x7)
    x9 = toindices(x4)
    x10 = fork(combine, hfrontier, vfrontier)
    x11 = mapply(x10, x9)
    x12 = difference(x11, x9)
    O = fill(x8, ZERO, x12)
    return O



def solve_c8f0f002_9edfc990(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = ofcolor(x1, ONE)
    x5 = rbind(adjacent, x4)
    x6 = mfilter(x3, x5)
    x7 = recolor(ONE, x6)
    O = paint(x1, x7)
    return O



def solve_c8f0f002_7447852a(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = compose(last, center)
    x5 = order(x3, x4)
    x6 = size(x5)
    x7 = interval(ZERO, x6, THREE)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = interval(ZERO, x6, ONE)
    x11 = pair(x5, x10)
    x12 = sfilter(x11, x9)
    x13 = mapply(first, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_c8f0f002_97999447(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = apply(toindices, x2)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    x8 = paint(x1, x7)
    x9 = interval(ZERO, FIVE, ONE)
    x10 = apply(double, x9)
    x11 = apply(increment, x10)
    x12 = apply(tojvec, x11)
    x13 = prapply(shift, x3, x12)
    x14 = merge(x13)
    O = fill(x8, FIVE, x14)
    return O



def solve_c8f0f002_91714a58(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = shape(x1)
    x3 = asindices(x1)
    x4 = objects(x1, T, F, T)
    x5 = argmax(x4, size)
    x6 = mostcolor(x5)
    x7 = canvas(ZERO, x2)
    x8 = paint(x7, x5)
    x9 = rbind(toobject, x8)
    x10 = rbind(colorcount, x6)
    x11 = chain(x10, x9, neighbors)
    x12 = lbind(greater, THREE)
    x13 = compose(x12, x11)
    x14 = sfilter(x3, x13)
    O = fill(x8, ZERO, x14)
    return O



def solve_c8f0f002_8e1813be(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = replace(x1, FIVE, ZERO)
    x3 = objects(x2, T, T, T)
    x4 = first(x3)
    x5 = vline(x4)
    x6 = branch(x5, dmirror, identity)
    x7 = x6(x2)
    x8 = objects(x7, T, T, T)
    x9 = order(x8, uppermost)
    x10 = apply(color, x9)
    x11 = dedupe(x10)
    x12 = size(x11)
    x13 = rbind(repeat, x12)
    x14 = apply(x13, x11)
    O = x6(x14)
    return O



def solve_c8f0f002_bc1d5164(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = leastcolor(x1)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = crop(x1, TWO_BY_ZERO, THREE_BY_THREE)
    x5 = tojvec(FOUR)
    x6 = crop(x1, x5, THREE_BY_THREE)
    x7 = astuple(TWO, FOUR)
    x8 = crop(x1, x7, THREE_BY_THREE)
    x9 = canvas(ZERO, THREE_BY_THREE)
    x10 = rbind(ofcolor, x2)
    x11 = astuple(x3, x4)
    x12 = astuple(x6, x8)
    x13 = combine(x11, x12)
    x14 = mapply(x10, x13)
    O = fill(x9, x2, x14)
    return O



def solve_c8f0f002_ce602527(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = vmirror(x1)
    x3 = fgpartition(x2)
    x4 = order(x3, size)
    x5 = last(x4)
    x6 = remove(x5, x4)
    x7 = compose(toindices, normalize)
    x8 = rbind(upscale, TWO)
    x9 = chain(toindices, x8, normalize)
    x10 = x7(x5)
    x11 = rbind(intersection, x10)
    x12 = chain(size, x11, x9)
    x13 = argmax(x6, x12)
    x14 = subgrid(x13, x2)
    O = vmirror(x14)
    return O



def solve_c8f0f002_5c2c9af4(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = center(x3)
    x5 = ulcorner(x3)
    x6 = subtract(x4, x5)
    x7 = multiply(NEG_ONE, NINE)
    x8 = interval(ZERO, NINE, ONE)
    x9 = interval(ZERO, x7, NEG_ONE)
    x10 = lbind(multiply, x6)
    x11 = apply(x10, x8)
    x12 = apply(x10, x9)
    x13 = pair(x11, x12)
    x14 = mapply(box, x13)
    x15 = shift(x14, x4)
    O = fill(x1, x2, x15)
    return O



def solve_c8f0f002_75b8110e(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = bottomhalf(x2)
    x6 = tophalf(x3)
    x7 = bottomhalf(x3)
    x8 = rbind(ofcolor, ZERO)
    x9 = fork(difference, asindices, x8)
    x10 = fork(toobject, x9, identity)
    x11 = x10(x6)
    x12 = x10(x5)
    x13 = x10(x7)
    x14 = paint(x4, x13)
    x15 = paint(x14, x12)
    O = paint(x15, x11)
    return O



def solve_c8f0f002_c3f564a4(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = asindices(x1)
    x3 = dmirror(x1)
    x4 = invert(NINE)
    x5 = papply(pair, x1, x3)
    x6 = lbind(apply, maximum)
    x7 = apply(x6, x5)
    x8 = ofcolor(x7, ZERO)
    x9 = difference(x2, x8)
    x10 = toobject(x9, x7)
    x11 = interval(x4, NINE, ONE)
    x12 = interval(NINE, x4, NEG_ONE)
    x13 = pair(x11, x12)
    x14 = lbind(shift, x10)
    x15 = mapply(x14, x13)
    O = paint(x7, x15)
    return O



def solve_c8f0f002_1a07d186(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = mapply(x12, x8)
    x14 = merge(x3)
    x15 = cover(x1, x14)
    O = paint(x15, x13)
    return O



def solve_c8f0f002_d687bc17(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = merge(x3)
    x14 = mapply(x12, x8)
    x15 = cover(x1, x13)
    O = paint(x15, x14)
    return O



def solve_c8f0f002_9af7a82c(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, F)
    x3 = order(x2, size)
    x4 = valmax(x2, size)
    x5 = rbind(astuple, ONE)
    x6 = lbind(subtract, x4)
    x7 = compose(x5, size)
    x8 = chain(x5, x6, size)
    x9 = fork(canvas, color, x7)
    x10 = lbind(canvas, ZERO)
    x11 = compose(x10, x8)
    x12 = fork(vconcat, x9, x11)
    x13 = compose(cmirror, x12)
    x14 = apply(x13, x3)
    x15 = merge(x14)
    O = cmirror(x15)
    return O



def solve_c8f0f002_ef135b50(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, ZERO)
    x4 = product(x2, x2)
    x5 = power(first, TWO)
    x6 = compose(first, last)
    x7 = fork(equality, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = fork(connect, first, last)
    x10 = mapply(x9, x8)
    x11 = intersection(x10, x3)
    x12 = fill(x1, NINE, x11)
    x13 = trim(x12)
    x14 = asobject(x13)
    x15 = shift(x14, UNITY)
    O = paint(x1, x15)
    return O



def solve_c8f0f002_cbded52d(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = product(x3, x3)
    x5 = fork(vmatching, first, last)
    x6 = fork(hmatching, first, last)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = compose(center, first)
    x10 = compose(center, last)
    x11 = fork(connect, x9, x10)
    x12 = chain(initset, center, x11)
    x13 = compose(color, first)
    x14 = fork(recolor, x13, x12)
    x15 = mapply(x14, x8)
    O = paint(x1, x15)
    return O



def solve_c8f0f002_e26a3af2(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = rot90(x1)
    x3 = apply(mostcommon, x1)
    x4 = apply(mostcommon, x2)
    x5 = repeat(x3, ONE)
    x6 = repeat(x4, ONE)
    x7 = compose(size, dedupe)
    x8 = x7(x3)
    x9 = x7(x4)
    x10 = greater(x9, x8)
    x11 = branch(x10, height, width)
    x12 = x11(x1)
    x13 = rot90(x5)
    x14 = branch(x10, x6, x13)
    x15 = branch(x10, vupscale, hupscale)
    O = x15(x14, x12)
    return O



def solve_c8f0f002_6cf79266(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, ZERO)
    x3 = astuple(ZERO, ORIGIN)
    x4 = initset(x3)
    x5 = upscale(x4, THREE)
    x6 = toindices(x5)
    x7 = lbind(shift, x6)
    x8 = rbind(difference, x2)
    x9 = chain(size, x8, x7)
    x10 = matcher(x9, ZERO)
    x11 = lbind(add, NEG_UNITY)
    x12 = chain(flip, x10, x11)
    x13 = fork(both, x10, x12)
    x14 = sfilter(x2, x13)
    x15 = mapply(x7, x14)
    O = fill(x1, ONE, x15)
    return O



def solve_c8f0f002_a87f7484(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = numcolors(x1)
    x3 = portrait(x1)
    x4 = branch(x3, dmirror, identity)
    x5 = x4(x1)
    x6 = decrement(x2)
    x7 = hsplit(x5, x6)
    x8 = rbind(ofcolor, ZERO)
    x9 = apply(x8, x7)
    x10 = leastcommon(x9)
    x11 = matcher(x8, x10)
    x12 = extract(x7, x11)
    O = x4(x12)
    return O



def solve_c8f0f002_4093f84a(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, FIVE)
    x4 = ofcolor(x1, FIVE)
    x5 = portrait(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x3)
    x8 = lefthalf(x7)
    x9 = righthalf(x7)
    x10 = rbind(order, identity)
    x11 = rbind(order, invert)
    x12 = apply(x10, x8)
    x13 = apply(x11, x9)
    x14 = hconcat(x12, x13)
    O = x6(x14)
    return O



def solve_c8f0f002_ba26e723(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = rbind(divide, THREE)
    x3 = rbind(multiply, THREE)
    x4 = compose(x3, x2)
    x5 = fork(equality, identity, x4)
    x6 = compose(x5, last)
    x7 = ofcolor(x1, FOUR)
    x8 = sfilter(x7, x6)
    O = fill(x1, SIX, x8)
    return O



def solve_c8f0f002_4612dd53(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, ONE)
    x3 = box(x2)
    x4 = fill(x1, TWO, x3)
    x5 = subgrid(x2, x4)
    x6 = ofcolor(x5, ONE)
    x7 = mapply(vfrontier, x6)
    x8 = mapply(hfrontier, x6)
    x9 = size(x7)
    x10 = size(x8)
    x11 = greater(x9, x10)
    x12 = branch(x11, x8, x7)
    x13 = fill(x5, TWO, x12)
    x14 = ofcolor(x13, TWO)
    x15 = ulcorner(x2)
    x16 = shift(x14, x15)
    O = underfill(x1, TWO, x16)
    return O



def solve_c8f0f002_29c11459(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = objects(x3, T, F, T)
    x5 = objects(x2, T, F, T)
    x6 = compose(hfrontier, center)
    x7 = fork(recolor, color, x6)
    x8 = mapply(x7, x5)
    x9 = paint(x2, x8)
    x10 = mapply(x7, x4)
    x11 = paint(x1, x10)
    x12 = objects(x9, T, F, T)
    x13 = apply(urcorner, x12)
    x14 = shift(x13, RIGHT)
    x15 = merge(x12)
    x16 = paint(x11, x15)
    O = fill(x16, FIVE, x14)
    return O



def solve_c8f0f002_963e52fc(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = width(x1)
    x3 = asobject(x1)
    x4 = hperiod(x3)
    x5 = height(x3)
    x6 = astuple(x5, x4)
    x7 = ulcorner(x3)
    x8 = crop(x1, x7, x6)
    x9 = rot90(x8)
    x10 = double(x2)
    x11 = divide(x10, x4)
    x12 = increment(x11)
    x13 = repeat(x9, x12)
    x14 = merge(x13)
    x15 = rot270(x14)
    x16 = astuple(x5, x10)
    O = crop(x15, ORIGIN, x16)
    return O



def solve_c8f0f002_1f0c79e5(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = leastcolor(x3)
    x5 = ofcolor(x3, x4)
    x6 = combine(x2, x5)
    x7 = recolor(x4, x6)
    x8 = compose(decrement, double)
    x9 = ulcorner(x6)
    x10 = invert(x9)
    x11 = shift(x2, x10)
    x12 = apply(x8, x11)
    x13 = interval(ZERO, NINE, ONE)
    x14 = prapply(multiply, x12, x13)
    x15 = lbind(shift, x7)
    x16 = mapply(x15, x14)
    O = paint(x1, x16)
    return O



def solve_c8f0f002_6773b310(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = compress(x1)
    x3 = neighbors(ORIGIN)
    x4 = insert(ORIGIN, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = astuple(FOUR, FOUR)
    x8 = shift(x6, x7)
    x9 = fork(insert, identity, neighbors)
    x10 = apply(x9, x8)
    x11 = rbind(toobject, x2)
    x12 = apply(x11, x10)
    x13 = rbind(colorcount, SIX)
    x14 = matcher(x13, TWO)
    x15 = mfilter(x12, x14)
    x16 = fill(x2, ONE, x15)
    x17 = replace(x16, SIX, ZERO)
    O = downscale(x17, THREE)
    return O



def solve_c8f0f002_780d0b14(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = asindices(x1)
    x3 = objects(x1, T, T, T)
    x4 = rbind(greater, TWO)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = totuple(x6)
    x8 = apply(color, x7)
    x9 = apply(center, x7)
    x10 = pair(x8, x9)
    x11 = fill(x1, ZERO, x2)
    x12 = paint(x11, x10)
    x13 = rbind(greater, ONE)
    x14 = compose(dedupe, totuple)
    x15 = chain(x13, size, x14)
    x16 = sfilter(x12, x15)
    x17 = rot90(x16)
    x18 = sfilter(x17, x15)
    O = rot270(x18)
    return O



def solve_c8f0f002_2204b7a8(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sfilter, x2)
    x4 = compose(size, x3)
    x5 = x4(vline)
    x6 = x4(hline)
    x7 = greater(x5, x6)
    x8 = branch(x7, lefthalf, tophalf)
    x9 = branch(x7, righthalf, bottomhalf)
    x10 = branch(x7, hconcat, vconcat)
    x11 = x8(x1)
    x12 = x9(x1)
    x13 = index(x11, ORIGIN)
    x14 = shape(x12)
    x15 = decrement(x14)
    x16 = index(x12, x15)
    x17 = replace(x11, THREE, x13)
    x18 = replace(x12, THREE, x16)
    O = x10(x17, x18)
    return O



def solve_c8f0f002_d9f24cd1(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, FIVE)
    x4 = prapply(connect, x2, x3)
    x5 = mfilter(x4, vline)
    x6 = underfill(x1, TWO, x5)
    x7 = matcher(numcolors, TWO)
    x8 = objects(x6, F, F, T)
    x9 = sfilter(x8, x7)
    x10 = difference(x8, x9)
    x11 = colorfilter(x10, TWO)
    x12 = mapply(toindices, x11)
    x13 = apply(urcorner, x9)
    x14 = shift(x13, UNITY)
    x15 = rbind(shoot, UP)
    x16 = mapply(x15, x14)
    x17 = fill(x6, TWO, x16)
    x18 = mapply(vfrontier, x12)
    O = fill(x17, TWO, x18)
    return O



def solve_c8f0f002_b782dc8a(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = ofcolor(x1, x2)
    x5 = first(x4)
    x6 = dneighbors(x5)
    x7 = toobject(x6, x1)
    x8 = mostcolor(x7)
    x9 = ofcolor(x1, x8)
    x10 = colorfilter(x3, ZERO)
    x11 = rbind(adjacent, x9)
    x12 = mfilter(x10, x11)
    x13 = toindices(x12)
    x14 = rbind(manhattan, x4)
    x15 = chain(even, x14, initset)
    x16 = sfilter(x13, x15)
    x17 = difference(x13, x16)
    x18 = fill(x1, x2, x16)
    O = fill(x18, x8, x17)
    return O



def solve_c8f0f002_673ef223(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, EIGHT)
    x4 = replace(x1, EIGHT, FOUR)
    x5 = colorfilter(x2, TWO)
    x6 = argmin(x2, uppermost)
    x7 = apply(uppermost, x5)
    x8 = fork(subtract, maximum, minimum)
    x9 = x8(x7)
    x10 = toivec(x9)
    x11 = leftmost(x6)
    x12 = equality(x11, ZERO)
    x13 = branch(x12, LEFT, RIGHT)
    x14 = rbind(shoot, x13)
    x15 = mapply(x14, x3)
    x16 = underfill(x4, EIGHT, x15)
    x17 = shift(x3, x10)
    x18 = mapply(hfrontier, x17)
    O = underfill(x16, EIGHT, x18)
    return O



def solve_c8f0f002_f5b8619d(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = mapply(vfrontier, x3)
    x5 = underfill(x1, EIGHT, x4)
    x6 = hconcat(x5, x5)
    O = vconcat(x6, x6)
    return O



def solve_c8f0f002_f8c80d96(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = colorfilter(x3, x2)
    x5 = argmax(x4, size)
    x6 = argmin(x3, width)
    x7 = size(x6)
    x8 = equality(x7, ONE)
    x9 = branch(x8, identity, outbox)
    x10 = chain(outbox, outbox, x9)
    x11 = power(x10, TWO)
    x12 = power(x10, THREE)
    x13 = x10(x5)
    x14 = x11(x5)
    x15 = x12(x5)
    x16 = fill(x1, x2, x13)
    x17 = fill(x16, x2, x14)
    x18 = fill(x17, x2, x15)
    O = replace(x18, ZERO, FIVE)
    return O



def solve_c8f0f002_ecdecbb3(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = colorfilter(x2, EIGHT)
    x5 = product(x3, x4)
    x6 = fork(gravitate, first, last)
    x7 = compose(crement, x6)
    x8 = compose(center, first)
    x9 = fork(add, x8, x7)
    x10 = fork(connect, x8, x9)
    x11 = apply(x10, x5)
    x12 = lbind(greater, EIGHT)
    x13 = compose(x12, size)
    x14 = mfilter(x11, x13)
    x15 = fill(x1, TWO, x14)
    x16 = apply(x9, x5)
    x17 = intersection(x14, x16)
    x18 = mapply(neighbors, x17)
    O = fill(x15, EIGHT, x18)
    return O



def solve_c8f0f002_e5062a87(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, TWO)
    x3 = recolor(ZERO, x2)
    x4 = normalize(x3)
    x5 = occurrences(x1, x3)
    x6 = lbind(shift, x4)
    x7 = apply(x6, x5)
    x8 = astuple(ONE, THREE)
    x9 = astuple(FIVE, ONE)
    x10 = astuple(TWO, SIX)
    x11 = initset(x8)
    x12 = insert(x9, x11)
    x13 = insert(x10, x12)
    x14 = rbind(contained, x13)
    x15 = chain(flip, x14, ulcorner)
    x16 = sfilter(x7, x15)
    x17 = merge(x16)
    x18 = recolor(TWO, x17)
    O = paint(x1, x18)
    return O



def solve_c8f0f002_a8d7556c(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = initset(ORIGIN)
    x3 = recolor(ZERO, x2)
    x4 = upscale(x3, TWO)
    x5 = occurrences(x1, x4)
    x6 = lbind(shift, x4)
    x7 = mapply(x6, x5)
    x8 = fill(x1, TWO, x7)
    x9 = add(SIX, SIX)
    x10 = astuple(EIGHT, x9)
    x11 = index(x8, x10)
    x12 = equality(x11, TWO)
    x13 = initset(x10)
    x14 = add(x10, DOWN)
    x15 = insert(x14, x13)
    x16 = toobject(x15, x8)
    x17 = toobject(x15, x1)
    x18 = branch(x12, x17, x16)
    O = paint(x8, x18)
    return O



def solve_c8f0f002_834ec97d(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = shift(x4, DOWN)
    x6 = fill(x1, ZERO, x4)
    x7 = paint(x6, x5)
    x8 = uppermost(x5)
    x9 = leftmost(x5)
    x10 = subtract(x9, TEN)
    x11 = add(x9, TEN)
    x12 = interval(x10, x11, TWO)
    x13 = lbind(greater, x8)
    x14 = compose(x13, first)
    x15 = rbind(contained, x12)
    x16 = compose(x15, last)
    x17 = sfilter(x2, x14)
    x18 = sfilter(x17, x16)
    O = fill(x7, FOUR, x18)
    return O



def solve_c8f0f002_90f3ed37(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, uppermost)
    x4 = first(x3)
    x5 = remove(x4, x3)
    x6 = normalize(x4)
    x7 = lbind(shift, x6)
    x8 = compose(x7, ulcorner)
    x9 = interval(TWO, NEG_ONE, NEG_ONE)
    x10 = apply(tojvec, x9)
    x11 = rbind(apply, x10)
    x12 = lbind(compose, size)
    x13 = lbind(lbind, intersection)
    x14 = compose(x12, x13)
    x15 = lbind(lbind, shift)
    x16 = chain(x11, x15, x8)
    x17 = fork(argmax, x16, x14)
    x18 = mapply(x17, x5)
    O = underfill(x1, ONE, x18)
    return O



def solve_c8f0f002_8403a5d5(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = color(x4)
    x6 = leftmost(x4)
    x7 = interval(x6, TEN, TWO)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = sfilter(x2, x9)
    x11 = increment(x6)
    x12 = add(x6, THREE)
    x13 = interval(x11, TEN, FOUR)
    x14 = interval(x12, TEN, FOUR)
    x15 = lbind(astuple, NINE)
    x16 = apply(tojvec, x13)
    x17 = apply(x15, x14)
    x18 = fill(x1, x5, x10)
    x19 = fill(x18, FIVE, x16)
    O = fill(x19, FIVE, x17)
    return O



def solve_c8f0f002_539a4f51(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = shape(x1)
    x3 = index(x1, ORIGIN)
    x4 = colorcount(x1, ZERO)
    x5 = decrement(x2)
    x6 = positive(x4)
    x7 = branch(x6, x5, x2)
    x8 = crop(x1, ORIGIN, x7)
    x9 = width(x8)
    x10 = astuple(ONE, x9)
    x11 = crop(x8, ORIGIN, x10)
    x12 = vupscale(x11, x9)
    x13 = dmirror(x12)
    x14 = hconcat(x8, x12)
    x15 = hconcat(x13, x8)
    x16 = vconcat(x14, x15)
    x17 = asobject(x16)
    x18 = multiply(UNITY, TEN)
    x19 = canvas(x3, x18)
    O = paint(x19, x17)
    return O



def solve_c8f0f002_3bdb4ada(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = compose(increment, ulcorner)
    x5 = compose(decrement, lrcorner)
    x6 = apply(x4, x3)
    x7 = apply(x5, x3)
    x8 = papply(connect, x6, x7)
    x9 = apply(last, x6)
    x10 = compose(last, first)
    x11 = power(last, TWO)
    x12 = fork(subtract, x10, x11)
    x13 = compose(even, x12)
    x14 = lbind(rbind, astuple)
    x15 = lbind(compose, x13)
    x16 = compose(x15, x14)
    x17 = fork(sfilter, first, x16)
    x18 = pair(x8, x9)
    x19 = mapply(x17, x18)
    O = fill(x1, ZERO, x19)
    return O



def solve_c8f0f002_ec883f72(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = palette(x1)
    x3 = objects(x1, T, T, T)
    x4 = fork(multiply, height, width)
    x5 = argmax(x3, x4)
    x6 = color(x5)
    x7 = remove(ZERO, x2)
    x8 = other(x7, x6)
    x9 = lrcorner(x5)
    x10 = llcorner(x5)
    x11 = urcorner(x5)
    x12 = ulcorner(x5)
    x13 = shoot(x9, UNITY)
    x14 = shoot(x10, DOWN_LEFT)
    x15 = shoot(x11, UP_RIGHT)
    x16 = shoot(x12, NEG_UNITY)
    x17 = combine(x13, x14)
    x18 = combine(x15, x16)
    x19 = combine(x17, x18)
    O = underfill(x1, x8, x19)
    return O



def solve_c8f0f002_2bee17df(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = height(x1)
    x3 = rot90(x1)
    x4 = subtract(x2, TWO)
    x5 = interval(ZERO, x2, ONE)
    x6 = rbind(colorcount, ZERO)
    x7 = matcher(x6, x4)
    x8 = rbind(vsplit, x2)
    x9 = lbind(apply, x7)
    x10 = compose(x9, x8)
    x11 = x10(x1)
    x12 = pair(x5, x11)
    x13 = sfilter(x12, last)
    x14 = mapply(hfrontier, x13)
    x15 = x10(x3)
    x16 = pair(x15, x5)
    x17 = sfilter(x16, first)
    x18 = mapply(vfrontier, x17)
    x19 = astuple(x14, x18)
    x20 = merge(x19)
    O = underfill(x1, THREE, x20)
    return O



def solve_c8f0f002_29623171(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = leastcolor(x1)
    x3 = interval(ZERO, NINE, FOUR)
    x4 = product(x3, x3)
    x5 = rbind(add, THREE)
    x6 = rbind(interval, ONE)
    x7 = fork(x6, identity, x5)
    x8 = compose(x7, first)
    x9 = compose(x7, last)
    x10 = fork(product, x8, x9)
    x11 = rbind(colorcount, x2)
    x12 = rbind(toobject, x1)
    x13 = compose(x11, x12)
    x14 = apply(x10, x4)
    x15 = valmax(x14, x13)
    x16 = matcher(x13, x15)
    x17 = compose(flip, x16)
    x18 = mfilter(x14, x16)
    x19 = mfilter(x14, x17)
    x20 = fill(x1, x2, x18)
    O = fill(x20, ZERO, x19)
    return O



def solve_c8f0f002_b0c4d837(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, FIVE)
    x3 = ofcolor(x1, EIGHT)
    x4 = height(x2)
    x5 = decrement(x4)
    x6 = height(x3)
    x7 = subtract(x5, x6)
    x8 = astuple(ONE, x7)
    x9 = canvas(EIGHT, x8)
    x10 = subtract(SIX, x7)
    x11 = astuple(ONE, x10)
    x12 = canvas(ZERO, x11)
    x13 = hconcat(x9, x12)
    x14 = hsplit(x13, TWO)
    x15 = first(x14)
    x16 = last(x14)
    x17 = vmirror(x16)
    x18 = vconcat(x15, x17)
    x19 = astuple(ONE, THREE)
    x20 = canvas(ZERO, x19)
    O = vconcat(x18, x20)
    return O



def solve_c8f0f002_8731374e(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = height(x4)
    x6 = width(x4)
    x7 = vsplit(x4, x5)
    x8 = lbind(greater, FOUR)
    x9 = compose(x8, numcolors)
    x10 = sfilter(x7, x9)
    x11 = merge(x10)
    x12 = rot90(x11)
    x13 = vsplit(x12, x6)
    x14 = sfilter(x13, x9)
    x15 = merge(x14)
    x16 = rot270(x15)
    x17 = leastcolor(x16)
    x18 = ofcolor(x16, x17)
    x19 = fork(combine, vfrontier, hfrontier)
    x20 = mapply(x19, x18)
    O = fill(x16, x17, x20)
    return O



def solve_c8f0f002_db93a21d(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, NINE)
    x4 = colorfilter(x2, NINE)
    x5 = rbind(shoot, DOWN)
    x6 = mapply(x5, x3)
    x7 = underfill(x1, ONE, x6)
    x8 = compose(halve, width)
    x9 = rbind(greater, ONE)
    x10 = compose(x9, x8)
    x11 = matcher(x8, THREE)
    x12 = power(outbox, TWO)
    x13 = power(outbox, THREE)
    x14 = mapply(outbox, x4)
    x15 = sfilter(x4, x10)
    x16 = sfilter(x4, x11)
    x17 = mapply(x12, x15)
    x18 = mapply(x13, x16)
    x19 = fill(x7, THREE, x14)
    x20 = fill(x19, THREE, x17)
    O = fill(x20, THREE, x18)
    return O



def solve_c8f0f002_53b68214(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = width(x1)
    x3 = objects(x1, T, T, T)
    x4 = first(x3)
    x5 = vperiod(x4)
    x6 = toivec(x5)
    x7 = interval(ZERO, NINE, ONE)
    x8 = lbind(multiply, x6)
    x9 = apply(x8, x7)
    x10 = lbind(shift, x4)
    x11 = mapply(x10, x9)
    x12 = astuple(x2, x2)
    x13 = portrait(x4)
    x14 = shape(x4)
    x15 = add(DOWN, x14)
    x16 = decrement(x15)
    x17 = shift(x4, x16)
    x18 = branch(x13, x11, x17)
    x19 = canvas(ZERO, x12)
    x20 = paint(x19, x4)
    O = paint(x20, x18)
    return O



def solve_c8f0f002_d6ad076f(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = argmin(x2, size)
    x4 = argmax(x2, size)
    x5 = vmatching(x3, x4)
    x6 = branch(x5, DOWN, RIGHT)
    x7 = branch(x5, uppermost, leftmost)
    x8 = valmax(x2, x7)
    x9 = x7(x3)
    x10 = equality(x8, x9)
    x11 = branch(x10, NEG_ONE, ONE)
    x12 = multiply(x6, x11)
    x13 = inbox(x3)
    x14 = rbind(shoot, x12)
    x15 = mapply(x14, x13)
    x16 = underfill(x1, EIGHT, x15)
    x17 = objects(x16, T, F, T)
    x18 = colorfilter(x17, EIGHT)
    x19 = rbind(bordering, x1)
    x20 = mfilter(x18, x19)
    O = cover(x16, x20)
    return O



def solve_c8f0f002_6cdd2623(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = prapply(connect, x3, x3)
    x5 = fgpartition(x1)
    x6 = merge(x5)
    x7 = cover(x1, x6)
    x8 = fork(either, hline, vline)
    x9 = box(x6)
    x10 = rbind(difference, x9)
    x11 = chain(positive, size, x10)
    x12 = fork(both, x8, x11)
    x13 = mfilter(x4, x12)
    O = fill(x7, x2, x13)
    return O



def solve_c8f0f002_a3df8b1e(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = shape(x1)
    x3 = ofcolor(x1, ONE)
    x4 = first(x3)
    x5 = shoot(x4, UP_RIGHT)
    x6 = fill(x1, ONE, x5)
    x7 = ofcolor(x6, ONE)
    x8 = urcorner(x7)
    x9 = shoot(x8, NEG_UNITY)
    x10 = fill(x6, ONE, x9)
    x11 = objects(x10, T, T, T)
    x12 = first(x11)
    x13 = subgrid(x12, x10)
    x14 = shape(x13)
    x15 = subtract(x14, DOWN)
    x16 = crop(x13, DOWN, x15)
    x17 = vconcat(x16, x16)
    x18 = vconcat(x17, x17)
    x19 = vconcat(x18, x18)
    x20 = hmirror(x19)
    x21 = crop(x20, ORIGIN, x2)
    O = hmirror(x21)
    return O



def solve_c8f0f002_8d510a79(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, ONE)
    x3 = ofcolor(x1, TWO)
    x4 = ofcolor(x1, FIVE)
    x5 = uppermost(x4)
    x6 = chain(toivec, decrement, double)
    x7 = lbind(greater, x5)
    x8 = compose(x7, first)
    x9 = chain(invert, x6, x8)
    x10 = fork(shoot, identity, x9)
    x11 = compose(x6, x8)
    x12 = fork(shoot, identity, x11)
    x13 = lbind(matcher, x8)
    x14 = compose(x13, x8)
    x15 = fork(sfilter, x12, x14)
    x16 = mapply(x10, x2)
    x17 = mapply(x15, x3)
    x18 = underfill(x1, TWO, x17)
    O = fill(x18, ONE, x16)
    return O



def solve_c8f0f002_cdecee7f(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = astuple(ONE, THREE)
    x4 = size(x2)
    x5 = order(x2, leftmost)
    x6 = apply(color, x5)
    x7 = rbind(canvas, UNITY)
    x8 = apply(x7, x6)
    x9 = merge(x8)
    x10 = dmirror(x9)
    x11 = subtract(NINE, x4)
    x12 = astuple(ONE, x11)
    x13 = canvas(ZERO, x12)
    x14 = hconcat(x10, x13)
    x15 = hsplit(x14, THREE)
    x16 = merge(x15)
    x17 = crop(x16, ORIGIN, x3)
    x18 = crop(x16, DOWN, x3)
    x19 = crop(x16, TWO_BY_ZERO, x3)
    x20 = vmirror(x18)
    x21 = vconcat(x17, x20)
    O = vconcat(x21, x19)
    return O



def solve_c8f0f002_3345333e(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = cover(x1, x3)
    x5 = leastcolor(x4)
    x6 = ofcolor(x4, x5)
    x7 = neighbors(ORIGIN)
    x8 = mapply(neighbors, x7)
    x9 = vmirror(x6)
    x10 = lbind(shift, x9)
    x11 = apply(x10, x8)
    x12 = rbind(intersection, x6)
    x13 = compose(size, x12)
    x14 = argmax(x11, x13)
    O = fill(x4, x5, x14)
    return O



def solve_c8f0f002_b190f7f5(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = portrait(x1)
    x3 = branch(x2, vsplit, hsplit)
    x4 = x3(x1, TWO)
    x5 = argmin(x4, numcolors)
    x6 = argmax(x4, numcolors)
    x7 = width(x6)
    x8 = rbind(repeat, x7)
    x9 = chain(dmirror, merge, x8)
    x10 = upscale(x6, x7)
    x11 = x9(x5)
    x12 = x9(x11)
    x13 = ofcolor(x12, ZERO)
    O = fill(x10, ZERO, x13)
    return O



def solve_c8f0f002_caa06a1f(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = asobject(x1)
    x3 = shape(x1)
    x4 = decrement(x3)
    x5 = index(x1, x4)
    x6 = double(x3)
    x7 = canvas(x5, x6)
    x8 = paint(x7, x2)
    x9 = objects(x8, F, F, T)
    x10 = first(x9)
    x11 = shift(x10, LEFT)
    x12 = vperiod(x11)
    x13 = hperiod(x11)
    x14 = neighbors(ORIGIN)
    x15 = lbind(mapply, neighbors)
    x16 = power(x15, TWO)
    x17 = x16(x14)
    x18 = astuple(x12, x13)
    x19 = lbind(multiply, x18)
    x20 = apply(x19, x17)
    x21 = lbind(shift, x11)
    x22 = mapply(x21, x20)
    O = paint(x1, x22)
    return O



def solve_c8f0f002_e21d9049(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = asindices(x1)
    x3 = leastcolor(x1)
    x4 = objects(x1, T, F, T)
    x5 = ofcolor(x1, x3)
    x6 = merge(x4)
    x7 = shape(x6)
    x8 = neighbors(ORIGIN)
    x9 = lbind(mapply, neighbors)
    x10 = power(x9, TWO)
    x11 = x10(x8)
    x12 = lbind(multiply, x7)
    x13 = lbind(shift, x6)
    x14 = apply(x12, x11)
    x15 = mapply(x13, x14)
    x16 = lbind(hmatching, x5)
    x17 = lbind(vmatching, x5)
    x18 = fork(either, x16, x17)
    x19 = compose(x18, initset)
    x20 = paint(x1, x15)
    x21 = sfilter(x2, x19)
    x22 = difference(x2, x21)
    O = cover(x20, x22)
    return O



def solve_c8f0f002_d89b689b(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, EIGHT)
    x4 = sizefilter(x2, ONE)
    x5 = apply(initset, x3)
    x6 = lbind(argmin, x5)
    x7 = lbind(rbind, manhattan)
    x8 = compose(x6, x7)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x4)
    x11 = merge(x4)
    x12 = cover(x1, x11)
    O = paint(x12, x10)
    return O



def solve_c8f0f002_746b3537(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = chain(size, dedupe, first)
    x3 = x2(x1)
    x4 = equality(x3, ONE)
    x5 = branch(x4, dmirror, identity)
    x6 = x5(x1)
    x7 = objects(x6, T, F, F)
    x8 = order(x7, leftmost)
    x9 = apply(color, x8)
    x10 = repeat(x9, ONE)
    O = x5(x10)
    return O



def solve_c8f0f002_63613498(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = ofcolor(x2, ZERO)
    x4 = asindices(x2)
    x5 = difference(x4, x3)
    x6 = normalize(x5)
    x7 = objects(x1, T, F, T)
    x8 = compose(toindices, normalize)
    x9 = matcher(x8, x6)
    x10 = mfilter(x7, x9)
    x11 = fill(x1, FIVE, x10)
    x12 = asobject(x2)
    O = paint(x11, x12)
    return O



def solve_c8f0f002_06df4c85(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = partition(x1)
    x3 = mostcolor(x1)
    x4 = ofcolor(x1, x3)
    x5 = colorfilter(x2, ZERO)
    x6 = argmax(x2, size)
    x7 = difference(x2, x5)
    x8 = remove(x6, x7)
    x9 = merge(x8)
    x10 = product(x9, x9)
    x11 = power(first, TWO)
    x12 = compose(first, last)
    x13 = fork(equality, x11, x12)
    x14 = sfilter(x10, x13)
    x15 = compose(last, first)
    x16 = power(last, TWO)
    x17 = fork(connect, x15, x16)
    x18 = fork(recolor, color, x17)
    x19 = apply(x18, x14)
    x20 = fork(either, vline, hline)
    x21 = mfilter(x19, x20)
    x22 = paint(x1, x21)
    O = fill(x22, x3, x4)
    return O



def solve_c8f0f002_4522001f(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = toindices(x3)
    x5 = contained(ZERO_BY_TWO, x4)
    x6 = contained(TWO_BY_TWO, x4)
    x7 = contained(TWO_BY_ZERO, x4)
    x8 = astuple(NINE, NINE)
    x9 = canvas(ZERO, x8)
    x10 = astuple(THREE, ORIGIN)
    x11 = initset(x10)
    x12 = upscale(x11, TWO)
    x13 = upscale(x12, TWO)
    x14 = shape(x13)
    x15 = shift(x13, x14)
    x16 = combine(x13, x15)
    x17 = paint(x9, x16)
    x18 = rot90(x17)
    x19 = rot180(x17)
    x20 = rot270(x17)
    x21 = branch(x5, x18, x17)
    x22 = branch(x6, x19, x21)
    O = branch(x7, x20, x22)
    return O



def solve_c8f0f002_eb5a1d5d(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = compose(dmirror, dedupe)
    x3 = x2(x1)
    x4 = x2(x3)
    x5 = fork(remove, last, identity)
    x6 = compose(hmirror, x5)
    x7 = fork(vconcat, identity, x6)
    x8 = x7(x4)
    x9 = dmirror(x8)
    O = x7(x9)
    return O



def solve_c8f0f002_e179c5f4(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = height(x1)
    x3 = ofcolor(x1, ONE)
    x4 = first(x3)
    x5 = shoot(x4, UP_RIGHT)
    x6 = fill(x1, ONE, x5)
    x7 = ofcolor(x6, ONE)
    x8 = urcorner(x7)
    x9 = shoot(x8, NEG_UNITY)
    x10 = fill(x6, ONE, x9)
    x11 = ofcolor(x10, ONE)
    x12 = subgrid(x11, x10)
    x13 = height(x12)
    x14 = width(x12)
    x15 = decrement(x13)
    x16 = astuple(x15, x14)
    x17 = ulcorner(x11)
    x18 = crop(x10, x17, x16)
    x19 = repeat(x18, NINE)
    x20 = merge(x19)
    x21 = astuple(x2, x14)
    x22 = crop(x20, ORIGIN, x21)
    x23 = hmirror(x22)
    O = replace(x23, ZERO, EIGHT)
    return O



def solve_c8f0f002_995c5fa3(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = hsplit(x1, THREE)
    x3 = astuple(TWO, ONE)
    x4 = rbind(ofcolor, ZERO)
    x5 = compose(ulcorner, x4)
    x6 = compose(size, x4)
    x7 = matcher(x6, ZERO)
    x8 = matcher(x5, UNITY)
    x9 = matcher(x5, DOWN)
    x10 = matcher(x5, x3)
    x11 = rbind(multiply, THREE)
    x12 = power(double, TWO)
    x13 = compose(double, x7)
    x14 = chain(x12, double, x8)
    x15 = compose(x11, x9)
    x16 = compose(x12, x10)
    x17 = fork(add, x13, x14)
    x18 = fork(add, x15, x16)
    x19 = fork(add, x17, x18)
    x20 = rbind(canvas, UNITY)
    x21 = compose(x20, x19)
    x22 = apply(x21, x2)
    x23 = merge(x22)
    O = hupscale(x23, THREE)
    return O



def solve_c8f0f002_d06dbe63(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = ofcolor(x1, EIGHT)
    x3 = center(x2)
    x4 = connect(ORIGIN, DOWN)
    x5 = connect(ORIGIN, ZERO_BY_TWO)
    x6 = combine(x4, x5)
    x7 = subtract(x3, TWO_BY_ZERO)
    x8 = shift(x6, x7)
    x9 = astuple(NEG_TWO, TWO)
    x10 = interval(ZERO, FIVE, ONE)
    x11 = lbind(multiply, x9)
    x12 = apply(x11, x10)
    x13 = lbind(shift, x8)
    x14 = mapply(x13, x12)
    x15 = fill(x1, FIVE, x14)
    x16 = rot180(x15)
    x17 = ofcolor(x16, EIGHT)
    x18 = center(x17)
    x19 = subtract(x18, x7)
    x20 = shift(x14, x19)
    x21 = toivec(NEG_TWO)
    x22 = shift(x20, x21)
    x23 = fill(x16, FIVE, x22)
    O = rot180(x23)
    return O



def solve_c8f0f002_36fdfd69(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = upscale(x1, TWO)
    x3 = objects(x2, T, T, T)
    x4 = colorfilter(x3, TWO)
    x5 = fork(manhattan, first, last)
    x6 = lbind(greater, FIVE)
    x7 = compose(x6, x5)
    x8 = product(x4, x4)
    x9 = sfilter(x8, x7)
    x10 = apply(merge, x9)
    x11 = mapply(delta, x10)
    x12 = fill(x2, FOUR, x11)
    x13 = merge(x4)
    x14 = paint(x12, x13)
    O = downscale(x14, TWO)
    return O



def solve_c8f0f002_0a938d79(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = x3(x1)
    x5 = fgpartition(x4)
    x6 = merge(x5)
    x7 = chain(double, decrement, width)
    x8 = x7(x6)
    x9 = compose(vfrontier, tojvec)
    x10 = lbind(mapply, x9)
    x11 = rbind(interval, x8)
    x12 = width(x4)
    x13 = rbind(x11, x12)
    x14 = chain(x10, x13, leftmost)
    x15 = fork(recolor, color, x14)
    x16 = mapply(x15, x5)
    x17 = paint(x4, x16)
    O = x3(x17)
    return O



def solve_c8f0f002_045e512c(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = lbind(shift, x3)
    x6 = lbind(mapply, x5)
    x7 = double(TEN)
    x8 = interval(FOUR, x7, FOUR)
    x9 = rbind(apply, x8)
    x10 = lbind(position, x3)
    x11 = lbind(rbind, multiply)
    x12 = chain(x9, x11, x10)
    x13 = compose(x6, x12)
    x14 = fork(recolor, color, x13)
    x15 = mapply(x14, x4)
    O = paint(x1, x15)
    return O



def solve_c8f0f002_99fa7670(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x3)
    x8 = paint(x1, x7)
    x9 = add(x2, DOWN_LEFT)
    x10 = initset(x9)
    x11 = recolor(ZERO, x10)
    x12 = objects(x8, T, F, T)
    x13 = insert(x11, x12)
    x14 = order(x13, uppermost)
    x15 = first(x14)
    x16 = remove(x11, x14)
    x17 = remove(x15, x14)
    x18 = compose(lrcorner, first)
    x19 = compose(lrcorner, last)
    x20 = fork(connect, x18, x19)
    x21 = compose(color, first)
    x22 = fork(recolor, x21, x20)
    x23 = pair(x16, x17)
    x24 = mapply(x22, x23)
    O = underpaint(x8, x24)
    return O



def solve_c8f0f002_72322fa7(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, F, T, T)
    x3 = matcher(numcolors, ONE)
    x4 = sfilter(x2, x3)
    x5 = difference(x2, x4)
    x6 = lbind(matcher, first)
    x7 = compose(x6, mostcolor)
    x8 = fork(sfilter, identity, x7)
    x9 = fork(difference, identity, x8)
    x10 = lbind(occurrences, x1)
    x11 = compose(x10, x8)
    x12 = compose(x10, x9)
    x13 = compose(ulcorner, x9)
    x14 = fork(subtract, ulcorner, x13)
    x15 = lbind(rbind, add)
    x16 = compose(x15, x14)
    x17 = fork(apply, x16, x12)
    x18 = lbind(lbind, shift)
    x19 = compose(x18, normalize)
    x20 = fork(mapply, x19, x11)
    x21 = fork(mapply, x19, x17)
    x22 = mapply(x20, x5)
    x23 = mapply(x21, x5)
    x24 = paint(x1, x22)
    O = paint(x24, x23)
    return O



def solve_c8f0f002_855e0971(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = frontiers(x1)
    x3 = sfilter(x2, hline)
    x4 = size(x3)
    x5 = positive(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x1)
    x8 = rbind(subgrid, x7)
    x9 = matcher(color, ZERO)
    x10 = compose(flip, x9)
    x11 = partition(x7)
    x12 = sfilter(x11, x10)
    x13 = rbind(ofcolor, ZERO)
    x14 = lbind(mapply, vfrontier)
    x15 = chain(x14, x13, x8)
    x16 = fork(shift, x15, ulcorner)
    x17 = fork(intersection, toindices, x16)
    x18 = mapply(x17, x12)
    x19 = fill(x7, ZERO, x18)
    O = x6(x19)
    return O



def solve_c8f0f002_a78176bb(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = remove(ZERO, x2)
    x5 = other(x4, FIVE)
    x6 = colorfilter(x3, FIVE)
    x7 = lbind(index, x1)
    x8 = compose(x7, urcorner)
    x9 = matcher(x8, FIVE)
    x10 = sfilter(x6, x9)
    x11 = difference(x6, x10)
    x12 = apply(urcorner, x10)
    x13 = apply(llcorner, x11)
    x14 = rbind(add, UP_RIGHT)
    x15 = rbind(add, DOWN_LEFT)
    x16 = apply(x14, x12)
    x17 = apply(x15, x13)
    x18 = rbind(shoot, UNITY)
    x19 = rbind(shoot, NEG_UNITY)
    x20 = fork(combine, x18, x19)
    x21 = mapply(x20, x16)
    x22 = mapply(x20, x17)
    x23 = combine(x21, x22)
    x24 = fill(x1, x5, x23)
    O = replace(x24, FIVE, ZERO)
    return O



def solve_c8f0f002_952a094c(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = argmax(x2, size)
    x5 = outbox(x4)
    x6 = corners(x5)
    x7 = lbind(rbind, manhattan)
    x8 = lbind(argmax, x3)
    x9 = chain(x8, x7, initset)
    x10 = compose(color, x9)
    x11 = fork(astuple, x10, identity)
    x12 = apply(x11, x6)
    x13 = merge(x3)
    x14 = cover(x1, x13)
    O = paint(x14, x12)
    return O



def solve_c8f0f002_6d58a25d(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = merge(x4)
    x6 = color(x5)
    x7 = uppermost(x3)
    x8 = rbind(greater, x7)
    x9 = compose(x8, uppermost)
    x10 = rbind(vmatching, x3)
    x11 = fork(both, x10, x9)
    x12 = sfilter(x4, x11)
    x13 = increment(x7)
    x14 = rbind(greater, x13)
    x15 = compose(x14, first)
    x16 = rbind(sfilter, x15)
    x17 = chain(x16, vfrontier, center)
    x18 = mapply(x17, x12)
    O = underfill(x1, x6, x18)
    return O



def solve_c8f0f002_6aa20dc0(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(rbind, upscale)
    x10 = interval(ONE, FOUR, ONE)
    x11 = apply(x9, x10)
    x12 = initset(identity)
    x13 = insert(vmirror, x12)
    x14 = insert(hmirror, x13)
    x15 = insert(cmirror, x14)
    x16 = insert(dmirror, x15)
    x17 = fork(compose, first, last)
    x18 = lbind(occurrences, x1)
    x19 = lbind(lbind, shift)
    x20 = compose(x18, x8)
    x21 = product(x16, x11)
    x22 = apply(x17, x21)
    x23 = rapply(x22, x4)
    x24 = fork(mapply, x19, x20)
    x25 = mapply(x24, x23)
    O = paint(x1, x25)
    return O



def solve_c8f0f002_447fd412(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(rbind, upscale)
    x10 = interval(ONE, FOUR, ONE)
    x11 = apply(x9, x10)
    x12 = lbind(recolor, ZERO)
    x13 = compose(x12, outbox)
    x14 = fork(combine, identity, x13)
    x15 = lbind(occurrences, x1)
    x16 = lbind(rbind, subtract)
    x17 = lbind(apply, increment)
    x18 = lbind(lbind, shift)
    x19 = chain(x16, ulcorner, x8)
    x20 = chain(x15, x14, x8)
    x21 = fork(apply, x19, x20)
    x22 = compose(x17, x21)
    x23 = fork(mapply, x18, x22)
    x24 = rapply(x11, x4)
    x25 = mapply(x23, x24)
    O = paint(x1, x25)
    return O



def solve_c8f0f002_2bcee788(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = mostcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = replace(x1, x2, THREE)
    x5 = argmax(x3, size)
    x6 = argmin(x3, size)
    x7 = position(x5, x6)
    x8 = first(x7)
    x9 = last(x7)
    x10 = subgrid(x5, x4)
    x11 = hline(x6)
    x12 = hmirror(x10)
    x13 = vmirror(x10)
    x14 = branch(x11, x12, x13)
    x15 = branch(x11, x8, ZERO)
    x16 = branch(x11, ZERO, x9)
    x17 = asobject(x14)
    x18 = matcher(first, THREE)
    x19 = compose(flip, x18)
    x20 = sfilter(x17, x19)
    x21 = ulcorner(x5)
    x22 = shape(x5)
    x23 = astuple(x15, x16)
    x24 = multiply(x22, x23)
    x25 = add(x21, x24)
    x26 = shift(x20, x25)
    O = paint(x4, x26)
    return O



def solve_c8f0f002_f35d900a(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = palette(x1)
    x4 = remove(ZERO, x3)
    x5 = lbind(other, x4)
    x6 = compose(x5, color)
    x7 = fork(recolor, x6, outbox)
    x8 = mapply(x7, x2)
    x9 = mapply(toindices, x2)
    x10 = box(x9)
    x11 = difference(x10, x9)
    x12 = lbind(argmin, x9)
    x13 = rbind(compose, initset)
    x14 = lbind(rbind, manhattan)
    x15 = chain(x13, x14, initset)
    x16 = chain(initset, x12, x15)
    x17 = fork(manhattan, initset, x16)
    x18 = compose(even, x17)
    x19 = sfilter(x11, x18)
    x20 = paint(x1, x8)
    O = fill(x20, FIVE, x19)
    return O



def solve_c8f0f002_0dfd9992(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_c8f0f002_29ec7d0e(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_c8f0f002_469497ad(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    x4 = upscale(x1, x3)
    x5 = objects(x4, F, F, T)
    x6 = argmin(x5, size)
    x7 = ulcorner(x6)
    x8 = llcorner(x6)
    x9 = shoot(x7, NEG_UNITY)
    x10 = shoot(x7, UNITY)
    x11 = shoot(x8, DOWN_LEFT)
    x12 = shoot(x8, UP_RIGHT)
    x13 = combine(x9, x10)
    x14 = combine(x11, x12)
    x15 = combine(x13, x14)
    x16 = underfill(x4, TWO, x15)
    x17 = objects(x16, T, F, T)
    x18 = argmax(x17, lrcorner)
    O = paint(x16, x18)
    return O



def solve_c8f0f002_484b58aa(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, TWO)
    x9 = astuple(TWO, x3)
    x10 = power(decrement, TWO)
    x11 = x10(x2)
    x12 = x10(x3)
    x13 = toivec(x12)
    x14 = tojvec(x11)
    x15 = crop(x1, x13, x9)
    x16 = crop(x1, x14, x8)
    x17 = asobject(x16)
    x18 = asobject(x15)
    x19 = vperiod(x17)
    x20 = hperiod(x18)
    x21 = astuple(x19, x20)
    x22 = lbind(multiply, x21)
    x23 = neighbors(ORIGIN)
    x24 = mapply(neighbors, x23)
    x25 = apply(x22, x24)
    x26 = lbind(shift, x7)
    x27 = mapply(x26, x25)
    O = paint(x1, x27)
    return O



def solve_c8f0f002_3befdf3e(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, F, F, T)
    x3 = leastcolor(x1)
    x4 = palette(x1)
    x5 = remove(ZERO, x4)
    x6 = other(x5, x3)
    x7 = switch(x1, x3, x6)
    x8 = compose(width, inbox)
    x9 = lbind(power, outbox)
    x10 = compose(x9, x8)
    x11 = initset(x10)
    x12 = lbind(rapply, x11)
    x13 = chain(initset, first, x12)
    x14 = fork(rapply, x13, identity)
    x15 = compose(first, x14)
    x16 = compose(backdrop, x15)
    x17 = lbind(chain, backdrop)
    x18 = lbind(x17, inbox)
    x19 = compose(x18, x10)
    x20 = lbind(apply, initset)
    x21 = chain(x20, corners, x16)
    x22 = fork(mapply, x19, x21)
    x23 = fork(intersection, x16, x22)
    x24 = mapply(x16, x2)
    x25 = mapply(x23, x2)
    x26 = underfill(x7, x6, x24)
    O = fill(x26, ZERO, x25)
    return O



def solve_c8f0f002_49d1d64f(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = shape(x1)
    x3 = add(x2, TWO)
    x4 = canvas(ZERO, x3)
    x5 = asobject(x1)
    x6 = shift(x5, UNITY)
    x7 = paint(x4, x6)
    x8 = asindices(x4)
    x9 = fork(difference, box, corners)
    x10 = x9(x8)
    x11 = lbind(lbind, manhattan)
    x12 = rbind(compose, initset)
    x13 = chain(x12, x11, initset)
    x14 = lbind(argmin, x6)
    x15 = chain(first, x14, x13)
    x16 = fork(astuple, x15, identity)
    x17 = apply(x16, x10)
    O = paint(x7, x17)
    return O



def solve_c8f0f002_57aa92db(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, F, T, T)
    x3 = objects(x1, T, F, T)
    x4 = lbind(lbind, colorcount)
    x5 = fork(apply, x4, palette)
    x6 = compose(maximum, x5)
    x7 = compose(minimum, x5)
    x8 = fork(subtract, x6, x7)
    x9 = argmax(x2, x8)
    x10 = leastcolor(x9)
    x11 = normalize(x9)
    x12 = matcher(first, x10)
    x13 = sfilter(x11, x12)
    x14 = ulcorner(x13)
    x15 = colorfilter(x3, x10)
    x16 = rbind(toobject, x1)
    x17 = lbind(remove, ZERO)
    x18 = chain(first, x17, palette)
    x19 = chain(x18, x16, outbox)
    x20 = lbind(multiply, x14)
    x21 = compose(x20, width)
    x22 = fork(subtract, ulcorner, x21)
    x23 = lbind(shift, x11)
    x24 = compose(x23, x22)
    x25 = fork(upscale, x24, width)
    x26 = fork(recolor, x19, x25)
    x27 = mapply(x26, x15)
    x28 = paint(x1, x27)
    x29 = merge(x3)
    O = paint(x28, x29)
    return O



def solve_c8f0f002_aba27056(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, T)
    x3 = mapply(toindices, x2)
    x4 = box(x3)
    x5 = difference(x4, x3)
    x6 = delta(x3)
    x7 = position(x6, x5)
    x8 = interval(ZERO, NINE, ONE)
    x9 = lbind(multiply, x7)
    x10 = apply(x9, x8)
    x11 = lbind(shift, x5)
    x12 = mapply(x11, x10)
    x13 = fill(x1, FOUR, x6)
    x14 = fill(x13, FOUR, x12)
    x15 = corners(x5)
    x16 = ofcolor(x14, ZERO)
    x17 = rbind(toobject, x14)
    x18 = rbind(colorcount, ZERO)
    x19 = chain(x18, x17, dneighbors)
    x20 = matcher(x19, TWO)
    x21 = rbind(adjacent, x3)
    x22 = rbind(adjacent, x12)
    x23 = fork(both, x21, x22)
    x24 = compose(x23, initset)
    x25 = sfilter(x16, x20)
    x26 = sfilter(x25, x24)
    x27 = product(x15, x26)
    x28 = fork(subtract, last, first)
    x29 = fork(shoot, first, x28)
    x30 = mapply(x29, x27)
    O = fill(x14, FOUR, x30)
    return O



def solve_c8f0f002_f1cefba8(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = palette(x1)
    x3 = objects(x1, F, F, T)
    x4 = ofcolor(x1, ZERO)
    x5 = first(x3)
    x6 = ulcorner(x5)
    x7 = subgrid(x5, x1)
    x8 = power(trim, TWO)
    x9 = x8(x7)
    x10 = asindices(x9)
    x11 = shift(x10, TWO_BY_TWO)
    x12 = fill(x7, ZERO, x11)
    x13 = leastcolor(x12)
    x14 = remove(ZERO, x2)
    x15 = other(x14, x13)
    x16 = ofcolor(x12, x13)
    x17 = shift(x16, x6)
    x18 = ofcolor(x1, x13)
    x19 = uppermost(x18)
    x20 = lowermost(x18)
    x21 = matcher(first, x19)
    x22 = matcher(first, x20)
    x23 = fork(either, x21, x22)
    x24 = sfilter(x17, x23)
    x25 = difference(x17, x24)
    x26 = mapply(vfrontier, x24)
    x27 = mapply(hfrontier, x25)
    x28 = combine(x26, x27)
    x29 = intersection(x4, x28)
    x30 = fill(x1, x15, x28)
    O = fill(x30, x13, x29)
    return O



def solve_c8f0f002_508bd3b6(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = width(x1)
    x3 = objects(x1, T, T, T)
    x4 = argmin(x3, size)
    x5 = argmax(x3, size)
    x6 = ulcorner(x4)
    x7 = urcorner(x4)
    x8 = index(x1, x6)
    x9 = equality(x8, EIGHT)
    x10 = branch(x9, x6, x7)
    x11 = branch(x9, UNITY, DOWN_LEFT)
    x12 = multiply(x11, x2)
    x13 = double(x12)
    x14 = add(x10, x13)
    x15 = subtract(x10, x13)
    x16 = connect(x14, x15)
    x17 = fill(x1, THREE, x16)
    x18 = paint(x17, x5)
    x19 = objects(x18, T, F, T)
    x20 = rbind(adjacent, x5)
    x21 = extract(x19, x20)
    x22 = first(x21)
    x23 = last(x22)
    x24 = flip(x9)
    x25 = branch(x24, UNITY, DOWN_LEFT)
    x26 = multiply(x25, x2)
    x27 = double(x26)
    x28 = add(x23, x27)
    x29 = subtract(x23, x27)
    x30 = connect(x28, x29)
    x31 = fill(x18, THREE, x30)
    x32 = paint(x31, x4)
    O = paint(x32, x5)
    return O



def solve_c8f0f002_d07ae81c(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, F, F)
    x3 = sizefilter(x2, ONE)
    x4 = apply(color, x3)
    x5 = difference(x2, x3)
    x6 = apply(color, x5)
    x7 = first(x6)
    x8 = last(x6)
    x9 = ofcolor(x1, x7)
    x10 = ofcolor(x1, x8)
    x11 = rbind(shoot, UNITY)
    x12 = rbind(shoot, NEG_UNITY)
    x13 = rbind(shoot, DOWN_LEFT)
    x14 = rbind(shoot, UP_RIGHT)
    x15 = fork(combine, x11, x12)
    x16 = fork(combine, x13, x14)
    x17 = fork(combine, x15, x16)
    x18 = compose(x17, center)
    x19 = mapply(x18, x3)
    x20 = intersection(x9, x19)
    x21 = intersection(x10, x19)
    x22 = first(x3)
    x23 = color(x22)
    x24 = center(x22)
    x25 = neighbors(x24)
    x26 = toobject(x25, x1)
    x27 = mostcolor(x26)
    x28 = other(x4, x23)
    x29 = equality(x27, x7)
    x30 = branch(x29, x23, x28)
    x31 = branch(x29, x28, x23)
    x32 = fill(x1, x30, x20)
    O = fill(x32, x31, x21)
    return O



def solve_c8f0f002_0e206a2e(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = palette(x1)
    x3 = objects(x1, F, F, T)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, numcolors)
    x6 = sfilter(x3, x5)
    x7 = remove(ZERO, x2)
    x8 = lbind(colorcount, x1)
    x9 = argmax(x7, x8)
    x10 = remove(x9, x7)
    x11 = rbind(contained, x10)
    x12 = compose(x11, first)
    x13 = rbind(sfilter, x12)
    x14 = lbind(rbind, subtract)
    x15 = lbind(occurrences, x1)
    x16 = lbind(lbind, shift)
    x17 = compose(x14, ulcorner)
    x18 = chain(x17, x13, normalize)
    x19 = chain(x15, x13, normalize)
    x20 = fork(apply, x18, x19)
    x21 = compose(x16, normalize)
    x22 = fork(mapply, x21, x20)
    x23 = astuple(cmirror, dmirror)
    x24 = astuple(hmirror, vmirror)
    x25 = combine(x23, x24)
    x26 = product(x25, x25)
    x27 = fork(compose, first, last)
    x28 = apply(x27, x26)
    x29 = totuple(x28)
    x30 = combine(x25, x29)
    x31 = lbind(rapply, x30)
    x32 = mapply(x31, x6)
    x33 = mapply(x22, x32)
    x34 = paint(x1, x33)
    x35 = merge(x6)
    O = cover(x34, x35)
    return O



def solve_c8f0f002_d22278a0(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = fork(multiply, sign, identity)
    x5 = lbind(apply, x4)
    x6 = chain(even, maximum, x5)
    x7 = lbind(sfilter, x2)
    x8 = fork(add, first, last)
    x9 = rbind(remove, x3)
    x10 = compose(center, last)
    x11 = fork(subtract, first, x10)
    x12 = compose(x6, x11)
    x13 = lbind(rbind, equality)
    x14 = lbind(argmin, x3)
    x15 = chain(x8, x5, x11)
    x16 = lbind(lbind, astuple)
    x17 = lbind(rbind, astuple)
    x18 = lbind(compose, x12)
    x19 = lbind(compose, x15)
    x20 = compose(x19, x16)
    x21 = compose(x19, x17)
    x22 = compose(x14, x20)
    x23 = rbind(compose, x22)
    x24 = lbind(lbind, valmin)
    x25 = rbind(compose, x20)
    x26 = chain(x25, x24, x9)
    x27 = lbind(fork, greater)
    x28 = fork(x27, x26, x21)
    x29 = chain(x7, x18, x17)
    x30 = chain(x7, x23, x13)
    x31 = fork(intersection, x29, x30)
    x32 = compose(x7, x28)
    x33 = fork(intersection, x31, x32)
    x34 = fork(recolor, color, x33)
    x35 = mapply(x34, x3)
    O = paint(x1, x35)
    return O



def solve_c8f0f002_150deff5(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = canvas(FIVE, TWO_BY_TWO)
    x3 = asobject(x2)
    x4 = occurrences(x1, x3)
    x5 = lbind(shift, x3)
    x6 = mapply(x5, x4)
    x7 = fill(x1, EIGHT, x6)
    x8 = canvas(FIVE, UNITY)
    x9 = astuple(TWO, ONE)
    x10 = canvas(EIGHT, x9)
    x11 = vconcat(x10, x8)
    x12 = asobject(x11)
    x13 = occurrences(x7, x12)
    x14 = lbind(shift, x12)
    x15 = mapply(x14, x13)
    x16 = fill(x7, TWO, x15)
    x17 = astuple(ONE, THREE)
    x18 = canvas(FIVE, x17)
    x19 = asobject(x18)
    x20 = occurrences(x16, x19)
    x21 = lbind(shift, x19)
    x22 = mapply(x21, x20)
    x23 = fill(x16, TWO, x22)
    x24 = hmirror(x11)
    x25 = asobject(x24)
    x26 = occurrences(x23, x25)
    x27 = lbind(shift, x25)
    x28 = mapply(x27, x26)
    x29 = fill(x23, TWO, x28)
    x30 = dmirror(x11)
    x31 = asobject(x30)
    x32 = occurrences(x29, x31)
    x33 = lbind(shift, x31)
    x34 = mapply(x33, x32)
    x35 = fill(x29, TWO, x34)
    x36 = vmirror(x30)
    x37 = asobject(x36)
    x38 = occurrences(x35, x37)
    x39 = lbind(shift, x37)
    x40 = mapply(x39, x38)
    O = fill(x35, TWO, x40)
    return O



def solve_c8f0f002_9d9215db(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = initset(x1)
    x6 = chain(numcolors, lefthalf, tophalf)
    x7 = insert(x2, x5)
    x8 = insert(x3, x7)
    x9 = insert(x4, x8)
    x10 = argmax(x9, x6)
    x11 = vmirror(x10)
    x12 = papply(pair, x10, x11)
    x13 = lbind(apply, maximum)
    x14 = apply(x13, x12)
    x15 = partition(x14)
    x16 = sizefilter(x15, FOUR)
    x17 = apply(llcorner, x16)
    x18 = apply(lrcorner, x16)
    x19 = combine(x17, x18)
    x20 = cover(x14, x19)
    x21 = tojvec(NEG_TWO)
    x22 = rbind(add, ZERO_BY_TWO)
    x23 = rbind(add, x21)
    x24 = compose(x22, ulcorner)
    x25 = compose(x23, urcorner)
    x26 = fork(connect, x24, x25)
    x27 = compose(even, last)
    x28 = rbind(sfilter, x27)
    x29 = chain(normalize, x28, x26)
    x30 = fork(shift, x29, x24)
    x31 = fork(recolor, color, x30)
    x32 = mapply(x31, x16)
    x33 = paint(x20, x32)
    x34 = rot90(x33)
    x35 = rot180(x33)
    x36 = rot270(x33)
    x37 = papply(pair, x33, x34)
    x38 = apply(x13, x37)
    x39 = papply(pair, x38, x35)
    x40 = apply(x13, x39)
    x41 = papply(pair, x40, x36)
    O = apply(x13, x41)
    return O



def solve_c8f0f002_264363fd(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, F, F, T)
    x3 = argmin(x2, size)
    x4 = normalize(x3)
    x5 = height(x3)
    x6 = width(x3)
    x7 = equality(x5, FIVE)
    x8 = equality(x6, FIVE)
    x9 = astuple(x7, x8)
    x10 = add(UNITY, x9)
    x11 = invert(x10)
    x12 = center(x3)
    x13 = index(x1, x12)
    x14 = branch(x7, UP, RIGHT)
    x15 = add(x14, x12)
    x16 = index(x1, x15)
    x17 = astuple(x13, ORIGIN)
    x18 = initset(x17)
    x19 = cover(x1, x3)
    x20 = mostcolor(x19)
    x21 = ofcolor(x19, x20)
    x22 = occurrences(x19, x18)
    x23 = objects(x19, F, F, T)
    x24 = rbind(occurrences, x18)
    x25 = rbind(subgrid, x19)
    x26 = compose(x24, x25)
    x27 = lbind(mapply, vfrontier)
    x28 = lbind(mapply, hfrontier)
    x29 = compose(x27, x26)
    x30 = compose(x28, x26)
    x31 = branch(x7, x29, x30)
    x32 = branch(x8, x30, x29)
    x33 = fork(combine, x31, x32)
    x34 = lbind(recolor, x16)
    x35 = compose(x34, x33)
    x36 = fork(paint, x25, x35)
    x37 = compose(asobject, x36)
    x38 = fork(shift, x37, ulcorner)
    x39 = mapply(x38, x23)
    x40 = paint(x19, x39)
    x41 = shift(x4, x11)
    x42 = lbind(shift, x41)
    x43 = mapply(x42, x22)
    x44 = paint(x40, x43)
    O = fill(x44, x20, x21)
    return O



def solve_c8f0f002_7df24a62(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = height(x1)
    x3 = width(x1)
    x4 = ofcolor(x1, ONE)
    x5 = ofcolor(x1, FOUR)
    x6 = ulcorner(x4)
    x7 = subgrid(x4, x1)
    x8 = rot90(x7)
    x9 = rot180(x7)
    x10 = rot270(x7)
    x11 = matcher(size, ZERO)
    x12 = rbind(ofcolor, ONE)
    x13 = compose(normalize, x12)
    x14 = rbind(ofcolor, FOUR)
    x15 = rbind(shift, x6)
    x16 = compose(x15, x14)
    x17 = lbind(subtract, x2)
    x18 = chain(increment, x17, height)
    x19 = lbind(subtract, x3)
    x20 = chain(increment, x19, width)
    x21 = rbind(interval, ONE)
    x22 = lbind(x21, ZERO)
    x23 = compose(x22, x18)
    x24 = compose(x22, x20)
    x25 = fork(product, x23, x24)
    x26 = rbind(shift, NEG_UNITY)
    x27 = lbind(lbind, shift)
    x28 = chain(x27, x26, x13)
    x29 = astuple(x7, x8)
    x30 = astuple(x9, x10)
    x31 = combine(x29, x30)
    x32 = apply(x16, x31)
    x33 = lbind(difference, x5)
    x34 = apply(x33, x32)
    x35 = apply(normalize, x32)
    x36 = apply(x25, x35)
    x37 = lbind(rbind, difference)
    x38 = apply(x27, x35)
    x39 = apply(x37, x34)
    x40 = papply(compose, x39, x38)
    x41 = lbind(compose, x11)
    x42 = apply(x41, x40)
    x43 = papply(sfilter, x36, x42)
    x44 = apply(x28, x31)
    x45 = mpapply(mapply, x44, x43)
    O = fill(x1, ONE, x45)
    return O



def solve_c8f0f002_22233c11(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, T, T, T)
    x3 = rbind(upscale, TWO)
    x4 = chain(invert, halve, shape)
    x5 = fork(combine, hfrontier, vfrontier)
    x6 = compose(x3, vmirror)
    x7 = fork(shift, x6, x4)
    x8 = compose(toindices, x7)
    x9 = lbind(mapply, x5)
    x10 = compose(x9, toindices)
    x11 = fork(difference, x8, x10)
    x12 = mapply(x11, x2)
    O = fill(x1, EIGHT, x12)
    return O



def solve_c8f0f002_a64e4611(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = asindices(x1)
    x3 = fork(product, identity, identity)
    x4 = lbind(canvas, ZERO)
    x5 = compose(asobject, x4)
    x6 = fork(multiply, first, last)
    x7 = compose(positive, size)
    x8 = lbind(lbind, shift)
    x9 = rbind(fork, x6)
    x10 = lbind(x9, multiply)
    x11 = lbind(chain, x7)
    x12 = rbind(x11, x5)
    x13 = lbind(lbind, occurrences)
    x14 = chain(x10, x12, x13)
    x15 = compose(x3, first)
    x16 = compose(x14, last)
    x17 = fork(argmax, x15, x16)
    x18 = chain(x8, x5, x17)
    x19 = compose(x5, x17)
    x20 = fork(occurrences, last, x19)
    x21 = fork(mapply, x18, x20)
    x22 = multiply(TWO, SIX)
    x23 = interval(THREE, x22, ONE)
    x24 = astuple(x23, x1)
    x25 = x21(x24)
    x26 = fill(x1, THREE, x25)
    x27 = interval(THREE, TEN, ONE)
    x28 = astuple(x27, x26)
    x29 = x21(x28)
    x30 = fill(x26, THREE, x29)
    x31 = astuple(x27, x30)
    x32 = x21(x31)
    x33 = fill(x30, THREE, x32)
    x34 = rbind(toobject, x33)
    x35 = rbind(colorcount, THREE)
    x36 = chain(x35, x34, neighbors)
    x37 = matcher(x36, EIGHT)
    x38 = sfilter(x2, x37)
    x39 = fill(x1, THREE, x38)
    x40 = ofcolor(x39, ZERO)
    x41 = rbind(bordering, x39)
    x42 = compose(x41, initset)
    x43 = lbind(contained, THREE)
    x44 = rbind(toobject, x39)
    x45 = chain(x43, palette, x44)
    x46 = compose(x45, dneighbors)
    x47 = fork(both, x46, x42)
    x48 = sfilter(x40, x47)
    O = fill(x39, THREE, x48)
    return O



def solve_c8f0f002_97a05b5b(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = rbind(greater, ONE)
    x6 = compose(x5, numcolors)
    x7 = sfilter(x2, x6)
    x8 = lbind(rbind, subtract)
    x9 = switch(x4, TWO, ZERO)
    x10 = lbind(occurrences, x9)
    x11 = lbind(lbind, shift)
    x12 = compose(x8, ulcorner)
    x13 = matcher(first, TWO)
    x14 = compose(flip, x13)
    x15 = rbind(sfilter, x13)
    x16 = rbind(sfilter, x14)
    x17 = lbind(recolor, ZERO)
    x18 = compose(x17, x16)
    x19 = fork(combine, x18, x15)
    x20 = chain(x12, x19, normalize)
    x21 = objects(x9, T, T, T)
    x22 = apply(toindices, x21)
    x23 = chain(x10, x19, normalize)
    x24 = rbind(colorcount, TWO)
    x25 = lbind(sfilter, x22)
    x26 = chain(size, first, x25)
    x27 = compose(positive, size)
    x28 = lbind(lbind, contained)
    x29 = chain(x27, x25, x28)
    x30 = compose(x26, x28)
    x31 = rbind(sfilter, x29)
    x32 = compose(x31, x23)
    x33 = lbind(rbind, equality)
    x34 = rbind(compose, x30)
    x35 = chain(x34, x33, x24)
    x36 = fork(sfilter, x32, x35)
    x37 = fork(apply, x20, x36)
    x38 = compose(x11, normalize)
    x39 = fork(mapply, x38, x37)
    x40 = astuple(cmirror, dmirror)
    x41 = astuple(hmirror, vmirror)
    x42 = combine(x40, x41)
    x43 = product(x42, x42)
    x44 = fork(compose, first, last)
    x45 = apply(x44, x43)
    x46 = lbind(rapply, x45)
    x47 = mapply(x46, x7)
    x48 = mapply(x39, x47)
    x49 = paint(x4, x48)
    x50 = palette(x48)
    x51 = lbind(remove, TWO)
    x52 = x51(x50)
    x53 = chain(first, x51, palette)
    x54 = rbind(contained, x52)
    x55 = chain(flip, x54, x53)
    x56 = sfilter(x7, x55)
    x57 = fork(apply, x20, x23)
    x58 = fork(mapply, x38, x57)
    x59 = mapply(x46, x56)
    x60 = mapply(x58, x59)
    O = paint(x49, x60)
    return O



def solve_c8f0f002_3e980e27(I):
    x1 = replace(I, SEVEN, FIVE)
    x2 = objects(x1, F, T, T)
    x3 = astuple(TEN, TEN)
    x4 = invert(x3)
    x5 = astuple(TWO, x4)
    x6 = astuple(THREE, x4)
    x7 = initset(x5)
    x8 = insert(x6, x7)
    x9 = insert(x8, x2)
    x10 = lbind(contained, TWO)
    x11 = lbind(contained, THREE)
    x12 = compose(invert, ulcorner)
    x13 = lbind(compose, x12)
    x14 = lbind(rbind, sfilter)
    x15 = compose(x13, x14)
    x16 = rbind(compose, center)
    x17 = lbind(lbind, shift)
    x18 = x15(x10)
    x19 = x15(x11)
    x20 = fork(shift, identity, x18)
    x21 = fork(shift, identity, x19)
    x22 = compose(x10, palette)
    x23 = compose(x11, palette)
    x24 = sfilter(x9, x22)
    x25 = argmax(x24, size)
    x26 = remove(x25, x24)
    x27 = vmirror(x25)
    x28 = chain(x16, x17, x20)
    x29 = x28(x27)
    x30 = mapply(x29, x26)
    x31 = sfilter(x9, x23)
    x32 = argmax(x31, size)
    x33 = remove(x32, x31)
    x34 = chain(x16, x17, x21)
    x35 = x34(x32)
    x36 = mapply(x35, x33)
    x37 = combine(x30, x36)
    O = paint(x1, x37)
    return O



def solve_d10ecb37_67a3c6ac(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    O = vmirror(x1)
    return O



def solve_d10ecb37_68b16354(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    O = hmirror(x1)
    return O



def solve_d10ecb37_74dd1130(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    O = dmirror(x1)
    return O



def solve_d10ecb37_3c9b0459(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    O = rot180(x1)
    return O



def solve_d10ecb37_6150a2bd(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    O = rot180(x1)
    return O



def solve_d10ecb37_9172f3a0(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    O = upscale(x1, THREE)
    return O



def solve_d10ecb37_9dfd6313(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    O = dmirror(x1)
    return O



def solve_d10ecb37_a416b8f3(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    O = hconcat(x1, x1)
    return O



def solve_d10ecb37_b1948b0a(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    O = replace(x1, SIX, TWO)
    return O



def solve_d10ecb37_c59eb873(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    O = upscale(x1, TWO)
    return O



def solve_d10ecb37_c8f0f002(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    O = replace(x1, SEVEN, FIVE)
    return O



def solve_d10ecb37_d511f180(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    O = switch(x1, FIVE, EIGHT)
    return O



def solve_d10ecb37_ed36ccf7(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    O = rot270(x1)
    return O



def solve_d10ecb37_4c4377d9(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = hmirror(x1)
    O = vconcat(x2, x1)
    return O



def solve_d10ecb37_6d0aefbc(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_d10ecb37_6fa7a44f(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_d10ecb37_5614dbcf(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = replace(x1, FIVE, ZERO)
    O = downscale(x2, THREE)
    return O



def solve_d10ecb37_5bd6f4ac(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = tojvec(SIX)
    O = crop(x1, x2, THREE_BY_THREE)
    return O



def solve_d10ecb37_5582e5ca(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = mostcolor(x1)
    O = canvas(x2, THREE_BY_THREE)
    return O



def solve_d10ecb37_8be77c9e(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_d10ecb37_c9e6f938(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_d10ecb37_2dee498d(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = hsplit(x1, THREE)
    O = first(x2)
    return O



def solve_d10ecb37_1cf80156(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = subgrid(x3, x1)
    return O



def solve_d10ecb37_32597951(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = ofcolor(x1, EIGHT)
    x3 = delta(x2)
    O = fill(x1, THREE, x3)
    return O



def solve_d10ecb37_25ff71a9(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = move(x1, x3, DOWN)
    return O



def solve_d10ecb37_0b148d64(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = partition(x1)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_d10ecb37_1f85a75f(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_d10ecb37_23b5c85d(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_d10ecb37_ac0a08a4(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = colorcount(x1, ZERO)
    x3 = subtract(NINE, x2)
    O = upscale(x1, x3)
    return O



def solve_d10ecb37_be94b721(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_d10ecb37_c909285e(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    O = subgrid(x3, x1)
    return O



def solve_d10ecb37_f25ffba3(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = bottomhalf(x1)
    x3 = hmirror(x2)
    O = vconcat(x3, x2)
    return O



def solve_d10ecb37_c1d99e64(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = frontiers(x1)
    x3 = merge(x2)
    O = fill(x1, TWO, x3)
    return O



def solve_d10ecb37_b91ae062(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    O = upscale(x1, x3)
    return O



def solve_d10ecb37_3aa6fb7a(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = mapply(corners, x2)
    O = underfill(x1, ONE, x3)
    return O



def solve_d10ecb37_7b7f7511(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = portrait(x1)
    x3 = branch(x2, tophalf, lefthalf)
    O = x3(x1)
    return O



def solve_d10ecb37_4258a5f9(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = ofcolor(x1, FIVE)
    x3 = mapply(neighbors, x2)
    O = fill(x1, ONE, x3)
    return O



def solve_d10ecb37_2dc579da(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = vsplit(x1, TWO)
    x3 = rbind(hsplit, TWO)
    x4 = mapply(x3, x2)
    O = argmax(x4, numcolors)
    return O



def solve_d10ecb37_28bf18c6(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = hconcat(x4, x4)
    return O



def solve_d10ecb37_3af2c5a8(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_d10ecb37_44f52bb0(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = vmirror(x1)
    x3 = equality(x2, x1)
    x4 = branch(x3, ONE, SEVEN)
    O = canvas(x4, UNITY)
    return O



def solve_d10ecb37_62c24649(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_d10ecb37_67e8384a(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_d10ecb37_7468f01a(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = vmirror(x4)
    return O



def solve_d10ecb37_42a50994(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = cover(x1, x4)
    return O



def solve_d10ecb37_56ff96f3(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = mapply(x3, x2)
    O = paint(x1, x4)
    return O



def solve_d10ecb37_50cb2852(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = compose(backdrop, inbox)
    x4 = mapply(x3, x2)
    O = fill(x1, EIGHT, x4)
    return O



def solve_d10ecb37_4347f46a(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = fork(difference, toindices, box)
    x4 = mapply(x3, x2)
    O = fill(x1, ZERO, x4)
    return O



def solve_d10ecb37_46f33fce(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = rot180(x1)
    x3 = downscale(x2, TWO)
    x4 = rot180(x3)
    O = upscale(x4, FOUR)
    return O



def solve_d10ecb37_a740d043(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    O = replace(x4, ONE, ZERO)
    return O



def solve_d10ecb37_a79310a0(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = move(x1, x3, DOWN)
    O = replace(x4, EIGHT, TWO)
    return O



def solve_d10ecb37_aabf363d(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, ZERO)
    x4 = leastcolor(x3)
    O = replace(x3, x4, x2)
    return O



def solve_d10ecb37_ae4f1146(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, F, T)
    x3 = rbind(colorcount, ONE)
    x4 = argmax(x2, x3)
    O = subgrid(x4, x1)
    return O



def solve_d10ecb37_b27ca6d3(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, THREE, x4)
    return O



def solve_d10ecb37_ce22a75a(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = mapply(backdrop, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_d10ecb37_dc1df850(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_d10ecb37_f25fbde4(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = upscale(x4, TWO)
    return O



def solve_d10ecb37_44d8ac46(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = apply(delta, x2)
    x4 = mfilter(x3, square)
    O = fill(x1, TWO, x4)
    return O



def solve_d10ecb37_1e0a9b12(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = apply(x3, x2)
    O = rot90(x4)
    return O



def solve_d10ecb37_0d3d703e(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = switch(x1, THREE, FOUR)
    x3 = switch(x2, EIGHT, NINE)
    x4 = switch(x3, TWO, SIX)
    O = switch(x4, ONE, FIVE)
    return O



def solve_d10ecb37_3618c87e(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = move(x1, x4, TWO_BY_ZERO)
    return O



def solve_d10ecb37_1c786137(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, height)
    x4 = subgrid(x3, x1)
    O = trim(x4)
    return O



def solve_d10ecb37_445eab21(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = fork(multiply, height, width)
    x4 = argmax(x2, x3)
    x5 = color(x4)
    O = canvas(x5, TWO_BY_TWO)
    return O



def solve_d10ecb37_6f8cd79b(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = asindices(x1)
    x3 = apply(initset, x2)
    x4 = rbind(bordering, x1)
    x5 = mfilter(x3, x4)
    O = fill(x1, EIGHT, x5)
    return O



def solve_d10ecb37_2013d3e2(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = lefthalf(x4)
    O = tophalf(x5)
    return O



def solve_d10ecb37_41e4d17e(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = mapply(x4, x2)
    O = underfill(x1, SIX, x5)
    return O



def solve_d10ecb37_9565186b(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = shape(x1)
    x3 = objects(x1, T, F, F)
    x4 = argmax(x3, size)
    x5 = canvas(FIVE, x2)
    O = paint(x5, x4)
    return O



def solve_d10ecb37_aedd82e4(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, TWO)
    x4 = sizefilter(x3, ONE)
    x5 = merge(x4)
    O = fill(x1, ONE, x5)
    return O



def solve_d10ecb37_bb43febb(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, FIVE)
    x4 = compose(backdrop, inbox)
    x5 = mapply(x4, x3)
    O = fill(x1, TWO, x5)
    return O



def solve_d10ecb37_e98196ab(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = objects(x2, T, F, T)
    x5 = merge(x4)
    O = paint(x3, x5)
    return O



def solve_d10ecb37_f76d97a5(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = palette(x1)
    x3 = first(x2)
    x4 = last(x2)
    x5 = switch(x1, x3, x4)
    O = replace(x5, FIVE, ZERO)
    return O



def solve_d10ecb37_ce9e57f2(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = fork(connect, ulcorner, centerofmass)
    x4 = mapply(x3, x2)
    x5 = fill(x1, EIGHT, x4)
    O = switch(x5, EIGHT, TWO)
    return O



def solve_d10ecb37_22eb0ac0(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    O = paint(x1, x5)
    return O



def solve_d10ecb37_9f236235(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = compress(x1)
    x3 = objects(x1, T, F, F)
    x4 = vmirror(x2)
    x5 = valmin(x3, width)
    O = downscale(x4, x5)
    return O



def solve_d10ecb37_a699fb00(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, RIGHT)
    x4 = shift(x2, LEFT)
    x5 = intersection(x3, x4)
    O = fill(x1, TWO, x5)
    return O



def solve_d10ecb37_46442a0e(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_d10ecb37_7fe24cdd(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_d10ecb37_0ca9ddb6(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = ofcolor(x1, ONE)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x3)
    x6 = fill(x1, SEVEN, x4)
    O = fill(x6, FOUR, x5)
    return O



def solve_d10ecb37_543a7ed5(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, SIX)
    x4 = mapply(outbox, x3)
    x5 = fill(x1, THREE, x4)
    x6 = mapply(delta, x3)
    O = fill(x5, FOUR, x6)
    return O



def solve_d10ecb37_0520fde7(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = vmirror(x1)
    x3 = lefthalf(x2)
    x4 = righthalf(x2)
    x5 = vmirror(x4)
    x6 = cellwise(x3, x5, ZERO)
    O = replace(x6, ONE, TWO)
    return O



def solve_d10ecb37_dae9d2b5(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, FOUR)
    x5 = ofcolor(x3, THREE)
    x6 = combine(x4, x5)
    O = fill(x2, SIX, x6)
    return O



def solve_d10ecb37_8d5021e8(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = vmirror(x1)
    x3 = hconcat(x2, x1)
    x4 = hmirror(x3)
    x5 = vconcat(x3, x4)
    x6 = vconcat(x5, x3)
    O = hmirror(x6)
    return O



def solve_d10ecb37_b60334d2(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = ofcolor(x1, FIVE)
    x3 = replace(x1, FIVE, ZERO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x2)
    x6 = fill(x3, ONE, x4)
    O = fill(x6, FIVE, x5)
    return O



def solve_d10ecb37_b94a9452(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = leastcolor(x4)
    x6 = mostcolor(x4)
    O = switch(x4, x5, x6)
    return O



def solve_d10ecb37_d037b0a7(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, DOWN)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    O = paint(x1, x6)
    return O



def solve_d10ecb37_d0f5fe59(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = astuple(x3, x3)
    x5 = canvas(ZERO, x4)
    x6 = shoot(ORIGIN, UNITY)
    O = fill(x5, EIGHT, x6)
    return O



def solve_d10ecb37_e3497940(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = vmirror(x3)
    x5 = objects(x4, T, F, T)
    x6 = merge(x5)
    O = paint(x2, x6)
    return O



def solve_d10ecb37_e9afcf9a(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = astuple(TWO, ONE)
    x3 = crop(x1, ORIGIN, x2)
    x4 = hmirror(x3)
    x5 = hconcat(x3, x4)
    x6 = hconcat(x5, x5)
    O = hconcat(x6, x5)
    return O



def solve_d10ecb37_d406998b(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = vmirror(x1)
    x3 = ofcolor(x2, FIVE)
    x4 = compose(even, last)
    x5 = sfilter(x3, x4)
    x6 = fill(x2, THREE, x5)
    O = vmirror(x6)
    return O



def solve_d10ecb37_3906de3d(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = switch(x2, ONE, TWO)
    x5 = apply(x3, x4)
    x6 = switch(x5, ONE, TWO)
    O = cmirror(x6)
    return O



def solve_d10ecb37_00d62c1b(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, FOUR, x6)
    return O



def solve_d10ecb37_7b6016b9(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, F)
    x3 = rbind(bordering, x1)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x4)
    x6 = fill(x1, TWO, x5)
    O = replace(x6, ZERO, THREE)
    return O



def solve_d10ecb37_67385a82(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, THREE)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = merge(x5)
    O = fill(x1, EIGHT, x6)
    return O



def solve_d10ecb37_a5313dff(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, ONE, x6)
    return O



def solve_d10ecb37_ea32f347(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, FIVE, FOUR)
    x4 = argmin(x2, size)
    x5 = argmax(x2, size)
    x6 = fill(x3, ONE, x5)
    O = fill(x6, TWO, x4)
    return O



def solve_d10ecb37_d631b094(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = ofcolor(x1, x3)
    x5 = size(x4)
    x6 = astuple(ONE, x5)
    O = canvas(x3, x6)
    return O



def solve_d10ecb37_10fcaaa3(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = leastcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = vconcat(x3, x3)
    x5 = ofcolor(x4, x2)
    x6 = mapply(ineighbors, x5)
    O = underfill(x4, EIGHT, x6)
    return O



def solve_d10ecb37_007bbfb7(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = hupscale(x1, THREE)
    x3 = vupscale(x2, THREE)
    x4 = hconcat(x1, x1)
    x5 = hconcat(x4, x1)
    x6 = vconcat(x5, x5)
    x7 = vconcat(x6, x5)
    O = cellwise(x3, x7, ZERO)
    return O



def solve_d10ecb37_496994bd(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = width(x1)
    x3 = height(x1)
    x4 = halve(x3)
    x5 = astuple(x4, x2)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    O = vconcat(x6, x7)
    return O



def solve_d10ecb37_1f876c06(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = fgpartition(x1)
    x3 = compose(last, first)
    x4 = power(last, TWO)
    x5 = fork(connect, x3, x4)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_d10ecb37_39a8645d(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = matcher(color, x5)
    x7 = extract(x2, x6)
    O = subgrid(x7, x1)
    return O



def solve_d10ecb37_1b2d62fb(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = replace(x2, NINE, ZERO)
    O = fill(x7, EIGHT, x6)
    return O



def solve_d10ecb37_90c28cc7(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = dedupe(x4)
    x6 = rot90(x5)
    x7 = dedupe(x6)
    O = rot270(x7)
    return O



def solve_d10ecb37_b6afb2da(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, F)
    x3 = replace(x1, FIVE, TWO)
    x4 = colorfilter(x2, FIVE)
    x5 = mapply(box, x4)
    x6 = fill(x3, FOUR, x5)
    x7 = mapply(corners, x4)
    O = fill(x6, ONE, x7)
    return O



def solve_d10ecb37_b9b7f026(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, F)
    x3 = argmin(x2, size)
    x4 = rbind(adjacent, x3)
    x5 = remove(x3, x2)
    x6 = extract(x5, x4)
    x7 = color(x6)
    O = canvas(x7, UNITY)
    return O



def solve_d10ecb37_ba97ae07(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = ofcolor(x1, x5)
    x7 = backdrop(x6)
    O = fill(x1, x5, x7)
    return O



def solve_d10ecb37_c9f8e694(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = height(x1)
    x3 = width(x1)
    x4 = ofcolor(x1, ZERO)
    x5 = astuple(x2, ONE)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hupscale(x6, x3)
    O = fill(x7, ZERO, x4)
    return O



def solve_d10ecb37_d23f8c26(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = asindices(x1)
    x3 = width(x1)
    x4 = halve(x3)
    x5 = matcher(last, x4)
    x6 = compose(flip, x5)
    x7 = sfilter(x2, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_d10ecb37_d5d6de2d(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = sfilter(x2, square)
    x4 = difference(x2, x3)
    x5 = compose(backdrop, inbox)
    x6 = mapply(x5, x4)
    x7 = replace(x1, TWO, ZERO)
    O = fill(x7, THREE, x6)
    return O



def solve_d10ecb37_dbc1a6ce(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = ofcolor(x1, ONE)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_d10ecb37_ded97339(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = ofcolor(x1, EIGHT)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_d10ecb37_ea786f4a(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = width(x1)
    x3 = shoot(ORIGIN, UNITY)
    x4 = decrement(x2)
    x5 = tojvec(x4)
    x6 = shoot(x5, DOWN_LEFT)
    x7 = combine(x3, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_d10ecb37_08ed6ac7(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = order(x2, height)
    x5 = size(x3)
    x6 = interval(x5, ZERO, NEG_ONE)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_d10ecb37_40853293(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = partition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    x6 = mfilter(x4, vline)
    x7 = paint(x1, x5)
    O = paint(x7, x6)
    return O



def solve_d10ecb37_5521c0d9(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = cover(x1, x3)
    x5 = chain(toivec, invert, height)
    x6 = fork(shift, identity, x5)
    x7 = mapply(x6, x2)
    O = paint(x4, x7)
    return O



def solve_d10ecb37_f8ff0b80(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = rbind(canvas, UNITY)
    x6 = apply(x5, x4)
    x7 = merge(x6)
    O = hmirror(x7)
    return O



def solve_d10ecb37_85c4e7cd(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, F)
    x3 = compose(invert, size)
    x4 = order(x2, size)
    x5 = order(x2, x3)
    x6 = apply(color, x5)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_d10ecb37_d2abd087(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = matcher(size, SIX)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x3)
    x6 = mfilter(x2, x4)
    x7 = fill(x1, TWO, x5)
    O = fill(x7, ONE, x6)
    return O



def solve_d10ecb37_017c7c7b(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = equality(x2, x3)
    x5 = crop(x1, TWO_BY_ZERO, THREE_BY_THREE)
    x6 = branch(x4, x3, x5)
    x7 = vconcat(x1, x6)
    O = replace(x7, ONE, TWO)
    return O



def solve_d10ecb37_363442ee(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = ofcolor(x1, ONE)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = asobject(x3)
    x5 = lbind(shift, x4)
    x6 = compose(x5, decrement)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_d10ecb37_5168d44c(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = ofcolor(x1, THREE)
    x3 = height(x2)
    x4 = equality(x3, ONE)
    x5 = branch(x4, ZERO_BY_TWO, TWO_BY_ZERO)
    x6 = ofcolor(x1, TWO)
    x7 = recolor(TWO, x6)
    O = move(x1, x7, x5)
    return O



def solve_d10ecb37_d9fac9be(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = color(x4)
    x6 = remove(ZERO, x2)
    x7 = other(x6, x5)
    O = canvas(x7, UNITY)
    return O



def solve_d10ecb37_e50d258f(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = width(x1)
    x3 = astuple(NINE, x2)
    x4 = canvas(ZERO, x3)
    x5 = vconcat(x1, x4)
    x6 = objects(x5, F, F, T)
    x7 = rbind(colorcount, TWO)
    x8 = argmax(x6, x7)
    O = subgrid(x8, x1)
    return O



def solve_d10ecb37_810b9b61(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = apply(toindices, x2)
    x4 = fork(either, vline, hline)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = fork(equality, identity, box)
    x8 = mfilter(x6, x7)
    O = fill(x1, THREE, x8)
    return O



def solve_d10ecb37_54d82841(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = height(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(last, center)
    x5 = apply(x4, x3)
    x6 = decrement(x2)
    x7 = lbind(astuple, x6)
    x8 = apply(x7, x5)
    O = fill(x1, FOUR, x8)
    return O



def solve_d10ecb37_60b61512(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = mapply(delta, x2)
    O = fill(x1, SEVEN, x3)
    return O



def solve_d10ecb37_25d8a9c8(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, THREE)
    x5 = mfilter(x4, hline)
    x6 = toindices(x5)
    x7 = difference(x2, x6)
    x8 = fill(x1, FIVE, x6)
    O = fill(x8, ZERO, x7)
    return O



def solve_d10ecb37_239be575(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, T, T)
    x3 = lbind(contained, TWO)
    x4 = compose(x3, palette)
    x5 = sfilter(x2, x4)
    x6 = size(x5)
    x7 = greater(x6, ONE)
    x8 = branch(x7, ZERO, EIGHT)
    O = canvas(x8, UNITY)
    return O



def solve_d10ecb37_6430c8c4(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(FOUR, FOUR)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, THREE, x7)
    return O



def solve_d10ecb37_94f9d214(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = astuple(FOUR, FOUR)
    x7 = canvas(ZERO, x6)
    x8 = intersection(x4, x5)
    O = fill(x7, TWO, x8)
    return O



def solve_d10ecb37_ce4f8723(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = astuple(FOUR, FOUR)
    x8 = canvas(THREE, x7)
    O = fill(x8, ZERO, x6)
    return O



def solve_d10ecb37_d13f3404(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, UNITY)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = astuple(SIX, SIX)
    x8 = canvas(ZERO, x7)
    O = paint(x8, x6)
    return O



def solve_d10ecb37_f2829549(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = shape(x2)
    x8 = canvas(ZERO, x7)
    O = fill(x8, THREE, x6)
    return O



def solve_d10ecb37_fafffa47(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = shape(x3)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, TWO, x7)
    return O



def solve_d10ecb37_fcb5c309(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = colorfilter(x3, x2)
    x5 = difference(x3, x4)
    x6 = argmax(x5, size)
    x7 = color(x6)
    x8 = subgrid(x6, x1)
    O = replace(x8, x7, x2)
    return O



def solve_d10ecb37_e76a88a6(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, F, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = remove(x3, x2)
    x6 = apply(ulcorner, x5)
    x7 = lbind(shift, x4)
    x8 = mapply(x7, x6)
    O = paint(x1, x8)
    return O



def solve_d10ecb37_7f4411dc(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = rbind(difference, x3)
    x5 = rbind(greater, TWO)
    x6 = chain(x5, size, x4)
    x7 = compose(x6, dneighbors)
    x8 = sfilter(x3, x7)
    O = fill(x1, ZERO, x8)
    return O



def solve_d10ecb37_b230c067(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(normalize, x3)
    x5 = leastcommon(x4)
    x6 = matcher(normalize, x5)
    x7 = extract(x2, x6)
    x8 = replace(x1, EIGHT, ONE)
    O = fill(x8, TWO, x7)
    return O



def solve_d10ecb37_e8593010(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = sizefilter(x2, TWO)
    x5 = merge(x3)
    x6 = fill(x1, THREE, x5)
    x7 = merge(x4)
    x8 = fill(x6, TWO, x7)
    O = replace(x8, ZERO, ONE)
    return O



def solve_d10ecb37_6d75e8bb(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = ulcorner(x3)
    x5 = subgrid(x3, x1)
    x6 = replace(x5, ZERO, TWO)
    x7 = asobject(x6)
    x8 = shift(x7, x4)
    O = paint(x1, x8)
    return O



def solve_d10ecb37_1190e5a7(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = mostcolor(x1)
    x3 = frontiers(x1)
    x4 = sfilter(x3, vline)
    x5 = difference(x3, x4)
    x6 = astuple(x5, x4)
    x7 = apply(size, x6)
    x8 = increment(x7)
    O = canvas(x2, x8)
    return O



def solve_d10ecb37_6e02f1e3(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = numcolors(x1)
    x3 = canvas(ZERO, THREE_BY_THREE)
    x4 = equality(x2, THREE)
    x5 = equality(x2, TWO)
    x6 = branch(x4, TWO_BY_ZERO, ORIGIN)
    x7 = branch(x5, TWO_BY_TWO, ZERO_BY_TWO)
    x8 = connect(x6, x7)
    O = fill(x3, FIVE, x8)
    return O



def solve_d10ecb37_a61f2674(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = replace(x1, FIVE, ZERO)
    x6 = recolor(ONE, x3)
    x7 = recolor(TWO, x4)
    x8 = combine(x6, x7)
    O = paint(x5, x8)
    return O



def solve_d10ecb37_fcc82909(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, T, T)
    x3 = rbind(add, DOWN)
    x4 = compose(x3, llcorner)
    x5 = compose(toivec, numcolors)
    x6 = fork(add, lrcorner, x5)
    x7 = fork(astuple, x4, x6)
    x8 = compose(box, x7)
    x9 = mapply(x8, x2)
    O = fill(x1, THREE, x9)
    return O



def solve_d10ecb37_72ca375d(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = rbind(subgrid, x1)
    x5 = apply(x4, x3)
    x6 = apply(vmirror, x5)
    x7 = papply(equality, x5, x6)
    x8 = pair(x5, x7)
    x9 = extract(x8, last)
    O = first(x9)
    return O



def solve_d10ecb37_253bf280(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = ofcolor(x1, EIGHT)
    x3 = prapply(connect, x2, x2)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = fork(either, vline, hline)
    x8 = mfilter(x6, x7)
    x9 = fill(x1, THREE, x8)
    O = fill(x9, EIGHT, x2)
    return O



def solve_d10ecb37_31aa019c(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = first(x3)
    x5 = neighbors(x4)
    x6 = astuple(TEN, TEN)
    x7 = canvas(ZERO, x6)
    x8 = initset(x4)
    x9 = fill(x7, x2, x8)
    O = fill(x9, TWO, x5)
    return O



def solve_d10ecb37_27a28665(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, F)
    x3 = valmax(x2, size)
    x4 = equality(x3, ONE)
    x5 = equality(x3, FOUR)
    x6 = equality(x3, FIVE)
    x7 = branch(x4, TWO, ONE)
    x8 = branch(x5, THREE, x7)
    x9 = branch(x6, SIX, x8)
    O = canvas(x9, UNITY)
    return O



def solve_d10ecb37_3bd67248(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = height(x1)
    x3 = decrement(x2)
    x4 = decrement(x3)
    x5 = astuple(x4, ONE)
    x6 = astuple(x3, ONE)
    x7 = shoot(x5, UP_RIGHT)
    x8 = shoot(x6, RIGHT)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_d10ecb37_73251a56(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = dmirror(x1)
    x3 = papply(pair, x1, x2)
    x4 = lbind(apply, maximum)
    x5 = apply(x4, x3)
    x6 = mostcolor(x5)
    x7 = replace(x5, ZERO, x6)
    x8 = index(x7, ORIGIN)
    x9 = shoot(ORIGIN, UNITY)
    O = fill(x7, x8, x9)
    return O



def solve_d10ecb37_25d487eb(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = ofcolor(x1, x2)
    x5 = center(x4)
    x6 = merge(x3)
    x7 = center(x6)
    x8 = subtract(x7, x5)
    x9 = shoot(x5, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_d10ecb37_8f2ea7aa(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    O = cellwise(x5, x9, ZERO)
    return O



def solve_d10ecb37_b8825c91(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = replace(x1, FOUR, ZERO)
    x3 = dmirror(x2)
    x4 = papply(pair, x2, x3)
    x5 = lbind(apply, maximum)
    x6 = apply(x5, x4)
    x7 = cmirror(x6)
    x8 = papply(pair, x6, x7)
    x9 = apply(x5, x8)
    O = cmirror(x9)
    return O



def solve_d10ecb37_cce03e0d(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = upscale(x1, THREE)
    x3 = hconcat(x1, x1)
    x4 = hconcat(x3, x1)
    x5 = vconcat(x4, x4)
    x6 = vconcat(x5, x4)
    x7 = ofcolor(x2, ZERO)
    x8 = ofcolor(x2, ONE)
    x9 = combine(x7, x8)
    O = fill(x6, ZERO, x9)
    return O



def solve_d10ecb37_d364b489(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, DOWN)
    x4 = fill(x1, EIGHT, x3)
    x5 = shift(x2, UP)
    x6 = fill(x4, TWO, x5)
    x7 = shift(x2, RIGHT)
    x8 = fill(x6, SIX, x7)
    x9 = shift(x2, LEFT)
    O = fill(x8, SEVEN, x9)
    return O



def solve_d10ecb37_a5f85a15(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = interval(ONE, NINE, ONE)
    x4 = apply(double, x3)
    x5 = apply(decrement, x4)
    x6 = papply(astuple, x5, x5)
    x7 = apply(ulcorner, x2)
    x8 = lbind(shift, x6)
    x9 = mapply(x8, x7)
    O = fill(x1, FOUR, x9)
    return O



def solve_d10ecb37_3ac3eb23(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = chain(ineighbors, last, first)
    x4 = fork(recolor, color, x3)
    x5 = mapply(x4, x2)
    x6 = paint(x1, x5)
    x7 = vsplit(x6, THREE)
    x8 = first(x7)
    x9 = vconcat(x8, x8)
    O = vconcat(x8, x9)
    return O



def solve_d10ecb37_444801d8(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, ONE)
    x4 = rbind(toobject, x1)
    x5 = chain(leastcolor, x4, delta)
    x6 = rbind(shift, UP)
    x7 = compose(x6, backdrop)
    x8 = fork(recolor, x5, x7)
    x9 = mapply(x8, x3)
    O = underpaint(x1, x9)
    return O



def solve_d10ecb37_22168020(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = palette(x1)
    x3 = remove(ZERO, x2)
    x4 = lbind(ofcolor, x1)
    x5 = lbind(prapply, connect)
    x6 = fork(x5, x4, x4)
    x7 = compose(merge, x6)
    x8 = fork(recolor, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_d10ecb37_6e82a1ae(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sizefilter, x2)
    x4 = compose(merge, x3)
    x5 = x4(TWO)
    x6 = x4(THREE)
    x7 = x4(FOUR)
    x8 = fill(x1, THREE, x5)
    x9 = fill(x8, TWO, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_d10ecb37_868de0fa(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, F)
    x3 = sfilter(x2, square)
    x4 = compose(even, height)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = merge(x5)
    x8 = merge(x6)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, SEVEN, x8)
    return O



def solve_d10ecb37_681b3aeb(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = rot270(x1)
    x3 = objects(x2, T, F, T)
    x4 = argmax(x3, size)
    x5 = argmin(x3, size)
    x6 = color(x5)
    x7 = canvas(x6, THREE_BY_THREE)
    x8 = normalize(x4)
    x9 = paint(x7, x8)
    O = rot90(x9)
    return O



def solve_d10ecb37_8e5a5113(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = rot90(x2)
    x4 = rot180(x2)
    x5 = astuple(x3, x4)
    x6 = astuple(FOUR, EIGHT)
    x7 = apply(tojvec, x6)
    x8 = apply(asobject, x5)
    x9 = mpapply(shift, x8, x7)
    O = paint(x1, x9)
    return O



def solve_d10ecb37_025d127b(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = apply(color, x2)
    x4 = merge(x2)
    x5 = lbind(colorfilter, x2)
    x6 = rbind(argmax, rightmost)
    x7 = compose(x6, x5)
    x8 = mapply(x7, x3)
    x9 = difference(x4, x8)
    O = move(x1, x9, RIGHT)
    return O



def solve_d10ecb37_2281f1f4(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = ofcolor(x1, FIVE)
    x3 = product(x2, x2)
    x4 = power(first, TWO)
    x5 = power(last, TWO)
    x6 = fork(astuple, x4, x5)
    x7 = apply(x6, x3)
    x8 = urcorner(x2)
    x9 = remove(x8, x7)
    O = underfill(x1, TWO, x9)
    return O



def solve_d10ecb37_bda2d7a6(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = partition(x1)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = last(x3)
    x6 = remove(x5, x3)
    x7 = repeat(x5, ONE)
    x8 = combine(x7, x6)
    x9 = mpapply(recolor, x4, x8)
    O = paint(x1, x9)
    return O



def solve_d10ecb37_6455b5f5(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = argmax(x2, size)
    x5 = valmin(x2, size)
    x6 = sizefilter(x3, x5)
    x7 = recolor(ONE, x4)
    x8 = merge(x6)
    x9 = paint(x1, x7)
    O = fill(x9, EIGHT, x8)
    return O



def solve_d10ecb37_b8cdaf2b(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = shift(x3, UP)
    x5 = ulcorner(x4)
    x6 = urcorner(x4)
    x7 = shoot(x5, NEG_UNITY)
    x8 = shoot(x6, UP_RIGHT)
    x9 = combine(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_d10ecb37_bd4472b8(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = width(x1)
    x3 = astuple(TWO, x2)
    x4 = crop(x1, ORIGIN, x3)
    x5 = tophalf(x4)
    x6 = dmirror(x5)
    x7 = hupscale(x6, x2)
    x8 = repeat(x7, TWO)
    x9 = merge(x8)
    O = vconcat(x4, x9)
    return O



def solve_d10ecb37_4be741c5(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = branch(x2, height, width)
    x5 = x4(x1)
    x6 = astuple(ONE, x5)
    x7 = x3(x1)
    x8 = crop(x7, ORIGIN, x6)
    x9 = apply(dedupe, x8)
    O = x3(x9)
    return O



def solve_d10ecb37_bbc9ae5d(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = width(x1)
    x3 = palette(x1)
    x4 = halve(x2)
    x5 = vupscale(x1, x4)
    x6 = rbind(shoot, UNITY)
    x7 = other(x3, ZERO)
    x8 = ofcolor(x5, x7)
    x9 = mapply(x6, x8)
    O = fill(x5, x7, x9)
    return O



def solve_d10ecb37_d90796e8(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = lbind(contained, TWO)
    x5 = compose(x4, palette)
    x6 = mfilter(x3, x5)
    x7 = cover(x1, x6)
    x8 = matcher(first, THREE)
    x9 = sfilter(x6, x8)
    O = fill(x7, EIGHT, x9)
    return O



def solve_d10ecb37_2c608aff(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = toindices(x4)
    x6 = ofcolor(x1, x2)
    x7 = prapply(connect, x5, x6)
    x8 = fork(either, vline, hline)
    x9 = mfilter(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_d10ecb37_f8b3ba0a(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = compress(x1)
    x3 = astuple(THREE, ONE)
    x4 = palette(x2)
    x5 = lbind(colorcount, x2)
    x6 = compose(invert, x5)
    x7 = order(x4, x6)
    x8 = rbind(canvas, UNITY)
    x9 = apply(x8, x7)
    x10 = merge(x9)
    O = crop(x10, DOWN, x3)
    return O



def solve_d10ecb37_80af3007(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    x10 = cellwise(x5, x9, ZERO)
    O = downscale(x10, THREE)
    return O



def solve_d10ecb37_83302e8f(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = sfilter(x3, square)
    x5 = difference(x3, x4)
    x6 = merge(x4)
    x7 = recolor(THREE, x6)
    x8 = merge(x5)
    x9 = recolor(FOUR, x8)
    x10 = paint(x1, x7)
    O = paint(x10, x9)
    return O



def solve_d10ecb37_1fad071e(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, ONE)
    x4 = sizefilter(x3, FOUR)
    x5 = size(x4)
    x6 = subtract(FIVE, x5)
    x7 = astuple(ONE, x5)
    x8 = canvas(ONE, x7)
    x9 = astuple(ONE, x6)
    x10 = canvas(ZERO, x9)
    O = hconcat(x8, x10)
    return O



def solve_d10ecb37_11852cab(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = hmirror(x3)
    x5 = vmirror(x3)
    x6 = dmirror(x3)
    x7 = cmirror(x3)
    x8 = paint(x1, x4)
    x9 = paint(x8, x5)
    x10 = paint(x9, x6)
    O = paint(x10, x7)
    return O



def solve_d10ecb37_3428a4f5(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(SIX, FIVE)
    x5 = ofcolor(x2, TWO)
    x6 = ofcolor(x3, TWO)
    x7 = combine(x5, x6)
    x8 = intersection(x5, x6)
    x9 = difference(x7, x8)
    x10 = canvas(ZERO, x4)
    O = fill(x10, THREE, x9)
    return O



def solve_d10ecb37_178fcbfb(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(vfrontier, x3)
    x5 = fill(x1, TWO, x4)
    x6 = colorfilter(x2, TWO)
    x7 = difference(x2, x6)
    x8 = compose(hfrontier, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x7)
    O = paint(x5, x10)
    return O



def solve_d10ecb37_54d9e175(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = compose(neighbors, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x3)
    x7 = paint(x1, x6)
    x8 = replace(x7, ONE, SIX)
    x9 = replace(x8, TWO, SEVEN)
    x10 = replace(x9, THREE, EIGHT)
    O = replace(x10, FOUR, NINE)
    return O



def solve_d10ecb37_623ea044(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = center(x3)
    x5 = color(x3)
    x6 = astuple(UNITY, NEG_UNITY)
    x7 = astuple(UP_RIGHT, DOWN_LEFT)
    x8 = combine(x6, x7)
    x9 = lbind(shoot, x4)
    x10 = mapply(x9, x8)
    O = fill(x1, x5, x10)
    return O



def solve_d10ecb37_794b24be(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = ofcolor(x1, ONE)
    x3 = size(x2)
    x4 = decrement(x3)
    x5 = canvas(ZERO, THREE_BY_THREE)
    x6 = tojvec(x4)
    x7 = connect(ORIGIN, x6)
    x8 = equality(x3, FOUR)
    x9 = insert(UNITY, x7)
    x10 = branch(x8, x9, x7)
    O = fill(x5, TWO, x10)
    return O



def solve_d10ecb37_88a62173(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = tophalf(x3)
    x6 = bottomhalf(x2)
    x7 = bottomhalf(x3)
    x8 = astuple(x4, x5)
    x9 = astuple(x6, x7)
    x10 = combine(x8, x9)
    O = leastcommon(x10)
    return O



def solve_d10ecb37_890034e9(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = inbox(x3)
    x5 = recolor(ZERO, x4)
    x6 = occurrences(x1, x5)
    x7 = normalize(x3)
    x8 = shift(x7, NEG_UNITY)
    x9 = lbind(shift, x8)
    x10 = mapply(x9, x6)
    O = fill(x1, x2, x10)
    return O



def solve_d10ecb37_99b1bc43(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = combine(x4, x5)
    x7 = intersection(x4, x5)
    x8 = difference(x6, x7)
    x9 = shape(x2)
    x10 = canvas(ZERO, x9)
    O = fill(x10, THREE, x8)
    return O



def solve_d10ecb37_a9f96cdd(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = shift(x2, NEG_UNITY)
    x5 = fill(x3, THREE, x4)
    x6 = shift(x2, UP_RIGHT)
    x7 = fill(x5, SIX, x6)
    x8 = shift(x2, DOWN_LEFT)
    x9 = fill(x7, EIGHT, x8)
    x10 = shift(x2, UNITY)
    O = fill(x9, SEVEN, x10)
    return O



def solve_d10ecb37_af902bf9(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = ofcolor(x1, FOUR)
    x3 = prapply(connect, x2, x2)
    x4 = fork(either, vline, hline)
    x5 = mfilter(x3, x4)
    x6 = underfill(x1, NEG_ONE, x5)
    x7 = objects(x6, F, F, T)
    x8 = compose(backdrop, inbox)
    x9 = mapply(x8, x7)
    x10 = fill(x6, TWO, x9)
    O = replace(x10, NEG_ONE, ZERO)
    return O



def solve_d10ecb37_b548a754(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, EIGHT, ZERO)
    x4 = leastcolor(x3)
    x5 = replace(x3, x4, ZERO)
    x6 = leastcolor(x5)
    x7 = merge(x2)
    x8 = backdrop(x7)
    x9 = box(x7)
    x10 = fill(x1, x4, x8)
    O = fill(x10, x6, x9)
    return O



def solve_d10ecb37_c3e719e8(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = mostcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = upscale(x1, THREE)
    x5 = ofcolor(x4, x2)
    x6 = asindices(x4)
    x7 = difference(x6, x5)
    x8 = hconcat(x3, x1)
    x9 = vconcat(x8, x8)
    x10 = vconcat(x9, x8)
    O = fill(x10, ZERO, x7)
    return O



def solve_d10ecb37_d8c310e9(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = hperiod(x3)
    x5 = multiply(x4, THREE)
    x6 = tojvec(x4)
    x7 = tojvec(x5)
    x8 = shift(x3, x6)
    x9 = shift(x3, x7)
    x10 = paint(x1, x8)
    O = paint(x10, x9)
    return O



def solve_d10ecb37_a3325580(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = valmax(x2, size)
    x4 = sizefilter(x2, x3)
    x5 = order(x4, leftmost)
    x6 = apply(color, x5)
    x7 = astuple(ONE, x3)
    x8 = rbind(canvas, x7)
    x9 = apply(x8, x6)
    x10 = merge(x9)
    O = dmirror(x10)
    return O



def solve_d10ecb37_8eb1be9a(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = interval(NEG_TWO, FOUR, ONE)
    x5 = lbind(shift, x3)
    x6 = height(x3)
    x7 = rbind(multiply, x6)
    x8 = apply(x7, x4)
    x9 = apply(toivec, x8)
    x10 = mapply(x5, x9)
    O = paint(x1, x10)
    return O



def solve_d10ecb37_321b1fc6(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, F, T)
    x3 = colorfilter(x2, EIGHT)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = cover(x1, x5)
    x7 = normalize(x5)
    x8 = lbind(shift, x7)
    x9 = apply(ulcorner, x3)
    x10 = mapply(x8, x9)
    O = paint(x6, x10)
    return O



def solve_d10ecb37_1b60fb0c(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = rot90(x1)
    x3 = ofcolor(x1, ONE)
    x4 = ofcolor(x2, ONE)
    x5 = neighbors(ORIGIN)
    x6 = mapply(neighbors, x5)
    x7 = lbind(shift, x4)
    x8 = apply(x7, x6)
    x9 = lbind(intersection, x3)
    x10 = compose(size, x9)
    x11 = argmax(x8, x10)
    O = underfill(x1, TWO, x11)
    return O



def solve_d10ecb37_ddf7fa4f(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = colorfilter(x2, FIVE)
    x5 = product(x3, x4)
    x6 = fork(vmatching, first, last)
    x7 = sfilter(x5, x6)
    x8 = compose(color, first)
    x9 = fork(recolor, x8, last)
    x10 = mapply(x9, x7)
    O = paint(x1, x10)
    return O



def solve_d10ecb37_47c1f68c(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = leastcolor(x1)
    x3 = vmirror(x1)
    x4 = objects(x1, T, T, T)
    x5 = merge(x4)
    x6 = mostcolor(x5)
    x7 = cellwise(x1, x3, x2)
    x8 = hmirror(x7)
    x9 = cellwise(x7, x8, x2)
    x10 = compress(x9)
    O = replace(x10, x2, x6)
    return O



def solve_d10ecb37_6c434453(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, EIGHT)
    x4 = dneighbors(UNITY)
    x5 = insert(UNITY, x4)
    x6 = merge(x3)
    x7 = cover(x1, x6)
    x8 = apply(ulcorner, x3)
    x9 = lbind(shift, x5)
    x10 = mapply(x9, x8)
    O = fill(x7, TWO, x10)
    return O



def solve_d10ecb37_23581191(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = paint(x1, x6)
    x8 = fork(intersection, first, last)
    x9 = apply(x4, x2)
    x10 = x8(x9)
    O = fill(x7, TWO, x10)
    return O



def solve_d10ecb37_c8cbb738(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = mostcolor(x1)
    x3 = fgpartition(x1)
    x4 = valmax(x3, shape)
    x5 = canvas(x2, x4)
    x6 = apply(normalize, x3)
    x7 = lbind(subtract, x4)
    x8 = chain(halve, x7, shape)
    x9 = fork(shift, identity, x8)
    x10 = mapply(x9, x6)
    O = paint(x5, x10)
    return O



def solve_d10ecb37_d4469b4b(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = equality(x3, ONE)
    x5 = equality(x3, TWO)
    x6 = branch(x4, UNITY, TWO_BY_TWO)
    x7 = branch(x5, RIGHT, x6)
    x8 = fork(combine, vfrontier, hfrontier)
    x9 = x8(x7)
    x10 = canvas(ZERO, THREE_BY_THREE)
    O = fill(x10, FIVE, x9)
    return O



def solve_d10ecb37_6ecd11f4(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = subgrid(x3, x1)
    x6 = subgrid(x4, x1)
    x7 = width(x5)
    x8 = width(x6)
    x9 = divide(x7, x8)
    x10 = downscale(x5, x9)
    x11 = ofcolor(x10, ZERO)
    O = fill(x6, ZERO, x11)
    return O



def solve_d10ecb37_eb281b96(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = height(x1)
    x3 = width(x1)
    x4 = decrement(x2)
    x5 = astuple(x4, x3)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    x8 = vconcat(x1, x7)
    x9 = double(x4)
    x10 = astuple(x9, x3)
    x11 = crop(x8, DOWN, x10)
    O = vconcat(x8, x11)
    return O



def solve_d10ecb37_ff28f65a(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = double(x3)
    x5 = interval(ZERO, x4, TWO)
    x6 = apply(tojvec, x5)
    x7 = astuple(ONE, NINE)
    x8 = canvas(ZERO, x7)
    x9 = fill(x8, ONE, x6)
    x10 = hsplit(x9, THREE)
    O = merge(x10)
    return O



def solve_d10ecb37_7e0986d6(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = replace(x1, x2, ZERO)
    x5 = leastcolor(x4)
    x6 = rbind(colorcount, x5)
    x7 = chain(positive, decrement, x6)
    x8 = rbind(toobject, x4)
    x9 = chain(x7, x8, dneighbors)
    x10 = sfilter(x3, x9)
    O = fill(x4, x5, x10)
    return O



def solve_d10ecb37_09629e4f(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, T, T)
    x3 = argmin(x2, numcolors)
    x4 = normalize(x3)
    x5 = upscale(x4, FOUR)
    x6 = paint(x1, x5)
    x7 = ofcolor(x1, FIVE)
    O = fill(x6, FIVE, x7)
    return O



def solve_d10ecb37_a85d4709(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = ofcolor(x1, FIVE)
    x3 = lbind(matcher, last)
    x4 = lbind(sfilter, x2)
    x5 = lbind(mapply, hfrontier)
    x6 = chain(x5, x4, x3)
    x7 = x6(ZERO)
    x8 = x6(TWO)
    x9 = x6(ONE)
    x10 = fill(x1, TWO, x7)
    x11 = fill(x10, THREE, x8)
    O = fill(x11, FOUR, x9)
    return O



def solve_d10ecb37_feca6190(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = multiply(x3, FIVE)
    x5 = astuple(x4, x4)
    x6 = canvas(ZERO, x5)
    x7 = rbind(shoot, UNITY)
    x8 = compose(x7, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x2)
    x11 = paint(x6, x10)
    O = hmirror(x11)
    return O



def solve_d10ecb37_a68b268e(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = lefthalf(x2)
    x5 = righthalf(x2)
    x6 = lefthalf(x3)
    x7 = righthalf(x3)
    x8 = ofcolor(x5, FOUR)
    x9 = ofcolor(x4, SEVEN)
    x10 = ofcolor(x6, EIGHT)
    x11 = fill(x7, EIGHT, x10)
    x12 = fill(x11, FOUR, x8)
    O = fill(x12, SEVEN, x9)
    return O



def solve_d10ecb37_beb8660c(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(invert, size)
    x5 = order(x3, x4)
    x6 = apply(normalize, x5)
    x7 = size(x6)
    x8 = interval(ZERO, x7, ONE)
    x9 = apply(toivec, x8)
    x10 = mpapply(shift, x6, x9)
    x11 = canvas(ZERO, x2)
    x12 = paint(x11, x10)
    O = rot180(x12)
    return O



def solve_d10ecb37_913fb3ed(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = ofcolor(x1, THREE)
    x3 = ofcolor(x1, EIGHT)
    x4 = ofcolor(x1, TWO)
    x5 = mapply(neighbors, x2)
    x6 = mapply(neighbors, x3)
    x7 = mapply(neighbors, x4)
    x8 = fill(x1, SIX, x5)
    x9 = fill(x8, FOUR, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_d10ecb37_0962bcdd(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = leastcolor(x1)
    x3 = replace(x1, ZERO, x2)
    x4 = leastcolor(x3)
    x5 = ofcolor(x1, x4)
    x6 = mapply(dneighbors, x5)
    x7 = fill(x1, x4, x6)
    x8 = objects(x7, F, T, T)
    x9 = fork(connect, ulcorner, lrcorner)
    x10 = fork(connect, llcorner, urcorner)
    x11 = fork(combine, x9, x10)
    x12 = mapply(x11, x8)
    O = fill(x7, x2, x12)
    return O



def solve_d10ecb37_05269061(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = neighbors(ORIGIN)
    x4 = mapply(neighbors, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = merge(x2)
    x8 = lbind(shift, x7)
    x9 = mapply(x8, x6)
    x10 = shift(x9, UP_RIGHT)
    x11 = shift(x9, DOWN_LEFT)
    x12 = paint(x1, x9)
    x13 = paint(x12, x10)
    O = paint(x13, x11)
    return O



def solve_d10ecb37_95990924(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = apply(ulcorner, x3)
    x5 = apply(urcorner, x3)
    x6 = apply(llcorner, x3)
    x7 = apply(lrcorner, x3)
    x8 = fill(x1, ONE, x4)
    x9 = fill(x8, TWO, x5)
    x10 = fill(x9, THREE, x6)
    O = fill(x10, FOUR, x7)
    return O



def solve_d10ecb37_e509e548(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = rbind(subgrid, x1)
    x4 = chain(palette, trim, x3)
    x5 = lbind(contained, THREE)
    x6 = compose(x5, x4)
    x7 = fork(add, height, width)
    x8 = compose(decrement, x7)
    x9 = fork(equality, size, x8)
    x10 = mfilter(x2, x6)
    x11 = mfilter(x2, x9)
    x12 = replace(x1, THREE, SIX)
    x13 = fill(x12, TWO, x10)
    O = fill(x13, ONE, x11)
    return O



def solve_d10ecb37_d43fd935(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, THREE)
    x4 = sizefilter(x2, ONE)
    x5 = rbind(vmatching, x3)
    x6 = rbind(hmatching, x3)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = rbind(gravitate, x3)
    x10 = fork(add, center, x9)
    x11 = fork(connect, center, x10)
    x12 = fork(recolor, color, x11)
    x13 = mapply(x12, x8)
    O = paint(x1, x13)
    return O



def solve_d10ecb37_e73095fd(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = fork(equality, toindices, backdrop)
    x5 = sfilter(x3, x4)
    x6 = lbind(mapply, dneighbors)
    x7 = chain(x6, corners, outbox)
    x8 = fork(difference, x7, outbox)
    x9 = ofcolor(x1, FIVE)
    x10 = rbind(intersection, x9)
    x11 = matcher(size, ZERO)
    x12 = chain(x11, x10, x8)
    x13 = mfilter(x5, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_d10ecb37_1bfc4729(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = asindices(x1)
    x3 = tophalf(x1)
    x4 = bottomhalf(x1)
    x5 = leastcolor(x3)
    x6 = leastcolor(x4)
    x7 = hfrontier(TWO_BY_ZERO)
    x8 = box(x2)
    x9 = combine(x7, x8)
    x10 = fill(x3, x5, x9)
    x11 = hmirror(x10)
    x12 = replace(x11, x5, x6)
    O = vconcat(x10, x12)
    return O



def solve_d10ecb37_93b581b8(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = fgpartition(x1)
    x3 = chain(cmirror, dmirror, merge)
    x4 = x3(x2)
    x5 = upscale(x4, THREE)
    x6 = astuple(NEG_TWO, NEG_TWO)
    x7 = shift(x5, x6)
    x8 = underpaint(x1, x7)
    x9 = toindices(x4)
    x10 = fork(combine, hfrontier, vfrontier)
    x11 = mapply(x10, x9)
    x12 = difference(x11, x9)
    O = fill(x8, ZERO, x12)
    return O



def solve_d10ecb37_7447852a(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = compose(last, center)
    x5 = order(x3, x4)
    x6 = size(x5)
    x7 = interval(ZERO, x6, THREE)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = interval(ZERO, x6, ONE)
    x11 = pair(x5, x10)
    x12 = sfilter(x11, x9)
    x13 = mapply(first, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_d10ecb37_97999447(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = apply(toindices, x2)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    x8 = paint(x1, x7)
    x9 = interval(ZERO, FIVE, ONE)
    x10 = apply(double, x9)
    x11 = apply(increment, x10)
    x12 = apply(tojvec, x11)
    x13 = prapply(shift, x3, x12)
    x14 = merge(x13)
    O = fill(x8, FIVE, x14)
    return O



def solve_d10ecb37_91714a58(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = shape(x1)
    x3 = asindices(x1)
    x4 = objects(x1, T, F, T)
    x5 = argmax(x4, size)
    x6 = mostcolor(x5)
    x7 = canvas(ZERO, x2)
    x8 = paint(x7, x5)
    x9 = rbind(toobject, x8)
    x10 = rbind(colorcount, x6)
    x11 = chain(x10, x9, neighbors)
    x12 = lbind(greater, THREE)
    x13 = compose(x12, x11)
    x14 = sfilter(x3, x13)
    O = fill(x8, ZERO, x14)
    return O



def solve_d10ecb37_8e1813be(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = replace(x1, FIVE, ZERO)
    x3 = objects(x2, T, T, T)
    x4 = first(x3)
    x5 = vline(x4)
    x6 = branch(x5, dmirror, identity)
    x7 = x6(x2)
    x8 = objects(x7, T, T, T)
    x9 = order(x8, uppermost)
    x10 = apply(color, x9)
    x11 = dedupe(x10)
    x12 = size(x11)
    x13 = rbind(repeat, x12)
    x14 = apply(x13, x11)
    O = x6(x14)
    return O



def solve_d10ecb37_bc1d5164(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = leastcolor(x1)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = crop(x1, TWO_BY_ZERO, THREE_BY_THREE)
    x5 = tojvec(FOUR)
    x6 = crop(x1, x5, THREE_BY_THREE)
    x7 = astuple(TWO, FOUR)
    x8 = crop(x1, x7, THREE_BY_THREE)
    x9 = canvas(ZERO, THREE_BY_THREE)
    x10 = rbind(ofcolor, x2)
    x11 = astuple(x3, x4)
    x12 = astuple(x6, x8)
    x13 = combine(x11, x12)
    x14 = mapply(x10, x13)
    O = fill(x9, x2, x14)
    return O



def solve_d10ecb37_ce602527(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = vmirror(x1)
    x3 = fgpartition(x2)
    x4 = order(x3, size)
    x5 = last(x4)
    x6 = remove(x5, x4)
    x7 = compose(toindices, normalize)
    x8 = rbind(upscale, TWO)
    x9 = chain(toindices, x8, normalize)
    x10 = x7(x5)
    x11 = rbind(intersection, x10)
    x12 = chain(size, x11, x9)
    x13 = argmax(x6, x12)
    x14 = subgrid(x13, x2)
    O = vmirror(x14)
    return O



def solve_d10ecb37_5c2c9af4(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = center(x3)
    x5 = ulcorner(x3)
    x6 = subtract(x4, x5)
    x7 = multiply(NEG_ONE, NINE)
    x8 = interval(ZERO, NINE, ONE)
    x9 = interval(ZERO, x7, NEG_ONE)
    x10 = lbind(multiply, x6)
    x11 = apply(x10, x8)
    x12 = apply(x10, x9)
    x13 = pair(x11, x12)
    x14 = mapply(box, x13)
    x15 = shift(x14, x4)
    O = fill(x1, x2, x15)
    return O



def solve_d10ecb37_75b8110e(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = bottomhalf(x2)
    x6 = tophalf(x3)
    x7 = bottomhalf(x3)
    x8 = rbind(ofcolor, ZERO)
    x9 = fork(difference, asindices, x8)
    x10 = fork(toobject, x9, identity)
    x11 = x10(x6)
    x12 = x10(x5)
    x13 = x10(x7)
    x14 = paint(x4, x13)
    x15 = paint(x14, x12)
    O = paint(x15, x11)
    return O



def solve_d10ecb37_c3f564a4(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = asindices(x1)
    x3 = dmirror(x1)
    x4 = invert(NINE)
    x5 = papply(pair, x1, x3)
    x6 = lbind(apply, maximum)
    x7 = apply(x6, x5)
    x8 = ofcolor(x7, ZERO)
    x9 = difference(x2, x8)
    x10 = toobject(x9, x7)
    x11 = interval(x4, NINE, ONE)
    x12 = interval(NINE, x4, NEG_ONE)
    x13 = pair(x11, x12)
    x14 = lbind(shift, x10)
    x15 = mapply(x14, x13)
    O = paint(x7, x15)
    return O



def solve_d10ecb37_1a07d186(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = mapply(x12, x8)
    x14 = merge(x3)
    x15 = cover(x1, x14)
    O = paint(x15, x13)
    return O



def solve_d10ecb37_d687bc17(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = merge(x3)
    x14 = mapply(x12, x8)
    x15 = cover(x1, x13)
    O = paint(x15, x14)
    return O



def solve_d10ecb37_9af7a82c(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, F)
    x3 = order(x2, size)
    x4 = valmax(x2, size)
    x5 = rbind(astuple, ONE)
    x6 = lbind(subtract, x4)
    x7 = compose(x5, size)
    x8 = chain(x5, x6, size)
    x9 = fork(canvas, color, x7)
    x10 = lbind(canvas, ZERO)
    x11 = compose(x10, x8)
    x12 = fork(vconcat, x9, x11)
    x13 = compose(cmirror, x12)
    x14 = apply(x13, x3)
    x15 = merge(x14)
    O = cmirror(x15)
    return O



def solve_d10ecb37_ef135b50(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, ZERO)
    x4 = product(x2, x2)
    x5 = power(first, TWO)
    x6 = compose(first, last)
    x7 = fork(equality, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = fork(connect, first, last)
    x10 = mapply(x9, x8)
    x11 = intersection(x10, x3)
    x12 = fill(x1, NINE, x11)
    x13 = trim(x12)
    x14 = asobject(x13)
    x15 = shift(x14, UNITY)
    O = paint(x1, x15)
    return O



def solve_d10ecb37_cbded52d(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = product(x3, x3)
    x5 = fork(vmatching, first, last)
    x6 = fork(hmatching, first, last)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = compose(center, first)
    x10 = compose(center, last)
    x11 = fork(connect, x9, x10)
    x12 = chain(initset, center, x11)
    x13 = compose(color, first)
    x14 = fork(recolor, x13, x12)
    x15 = mapply(x14, x8)
    O = paint(x1, x15)
    return O



def solve_d10ecb37_e26a3af2(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = rot90(x1)
    x3 = apply(mostcommon, x1)
    x4 = apply(mostcommon, x2)
    x5 = repeat(x3, ONE)
    x6 = repeat(x4, ONE)
    x7 = compose(size, dedupe)
    x8 = x7(x3)
    x9 = x7(x4)
    x10 = greater(x9, x8)
    x11 = branch(x10, height, width)
    x12 = x11(x1)
    x13 = rot90(x5)
    x14 = branch(x10, x6, x13)
    x15 = branch(x10, vupscale, hupscale)
    O = x15(x14, x12)
    return O



def solve_d10ecb37_6cf79266(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = ofcolor(x1, ZERO)
    x3 = astuple(ZERO, ORIGIN)
    x4 = initset(x3)
    x5 = upscale(x4, THREE)
    x6 = toindices(x5)
    x7 = lbind(shift, x6)
    x8 = rbind(difference, x2)
    x9 = chain(size, x8, x7)
    x10 = matcher(x9, ZERO)
    x11 = lbind(add, NEG_UNITY)
    x12 = chain(flip, x10, x11)
    x13 = fork(both, x10, x12)
    x14 = sfilter(x2, x13)
    x15 = mapply(x7, x14)
    O = fill(x1, ONE, x15)
    return O



def solve_d10ecb37_a87f7484(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = numcolors(x1)
    x3 = portrait(x1)
    x4 = branch(x3, dmirror, identity)
    x5 = x4(x1)
    x6 = decrement(x2)
    x7 = hsplit(x5, x6)
    x8 = rbind(ofcolor, ZERO)
    x9 = apply(x8, x7)
    x10 = leastcommon(x9)
    x11 = matcher(x8, x10)
    x12 = extract(x7, x11)
    O = x4(x12)
    return O



def solve_d10ecb37_4093f84a(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, FIVE)
    x4 = ofcolor(x1, FIVE)
    x5 = portrait(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x3)
    x8 = lefthalf(x7)
    x9 = righthalf(x7)
    x10 = rbind(order, identity)
    x11 = rbind(order, invert)
    x12 = apply(x10, x8)
    x13 = apply(x11, x9)
    x14 = hconcat(x12, x13)
    O = x6(x14)
    return O



def solve_d10ecb37_ba26e723(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = rbind(divide, THREE)
    x3 = rbind(multiply, THREE)
    x4 = compose(x3, x2)
    x5 = fork(equality, identity, x4)
    x6 = compose(x5, last)
    x7 = ofcolor(x1, FOUR)
    x8 = sfilter(x7, x6)
    O = fill(x1, SIX, x8)
    return O



def solve_d10ecb37_29c11459(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = objects(x3, T, F, T)
    x5 = objects(x2, T, F, T)
    x6 = compose(hfrontier, center)
    x7 = fork(recolor, color, x6)
    x8 = mapply(x7, x5)
    x9 = paint(x2, x8)
    x10 = mapply(x7, x4)
    x11 = paint(x1, x10)
    x12 = objects(x9, T, F, T)
    x13 = apply(urcorner, x12)
    x14 = shift(x13, RIGHT)
    x15 = merge(x12)
    x16 = paint(x11, x15)
    O = fill(x16, FIVE, x14)
    return O



def solve_d10ecb37_963e52fc(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = width(x1)
    x3 = asobject(x1)
    x4 = hperiod(x3)
    x5 = height(x3)
    x6 = astuple(x5, x4)
    x7 = ulcorner(x3)
    x8 = crop(x1, x7, x6)
    x9 = rot90(x8)
    x10 = double(x2)
    x11 = divide(x10, x4)
    x12 = increment(x11)
    x13 = repeat(x9, x12)
    x14 = merge(x13)
    x15 = rot270(x14)
    x16 = astuple(x5, x10)
    O = crop(x15, ORIGIN, x16)
    return O



def solve_d10ecb37_1f0c79e5(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = leastcolor(x3)
    x5 = ofcolor(x3, x4)
    x6 = combine(x2, x5)
    x7 = recolor(x4, x6)
    x8 = compose(decrement, double)
    x9 = ulcorner(x6)
    x10 = invert(x9)
    x11 = shift(x2, x10)
    x12 = apply(x8, x11)
    x13 = interval(ZERO, NINE, ONE)
    x14 = prapply(multiply, x12, x13)
    x15 = lbind(shift, x7)
    x16 = mapply(x15, x14)
    O = paint(x1, x16)
    return O



def solve_d10ecb37_6773b310(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = compress(x1)
    x3 = neighbors(ORIGIN)
    x4 = insert(ORIGIN, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = astuple(FOUR, FOUR)
    x8 = shift(x6, x7)
    x9 = fork(insert, identity, neighbors)
    x10 = apply(x9, x8)
    x11 = rbind(toobject, x2)
    x12 = apply(x11, x10)
    x13 = rbind(colorcount, SIX)
    x14 = matcher(x13, TWO)
    x15 = mfilter(x12, x14)
    x16 = fill(x2, ONE, x15)
    x17 = replace(x16, SIX, ZERO)
    O = downscale(x17, THREE)
    return O



def solve_d10ecb37_780d0b14(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = asindices(x1)
    x3 = objects(x1, T, T, T)
    x4 = rbind(greater, TWO)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = totuple(x6)
    x8 = apply(color, x7)
    x9 = apply(center, x7)
    x10 = pair(x8, x9)
    x11 = fill(x1, ZERO, x2)
    x12 = paint(x11, x10)
    x13 = rbind(greater, ONE)
    x14 = compose(dedupe, totuple)
    x15 = chain(x13, size, x14)
    x16 = sfilter(x12, x15)
    x17 = rot90(x16)
    x18 = sfilter(x17, x15)
    O = rot270(x18)
    return O



def solve_d10ecb37_2204b7a8(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sfilter, x2)
    x4 = compose(size, x3)
    x5 = x4(vline)
    x6 = x4(hline)
    x7 = greater(x5, x6)
    x8 = branch(x7, lefthalf, tophalf)
    x9 = branch(x7, righthalf, bottomhalf)
    x10 = branch(x7, hconcat, vconcat)
    x11 = x8(x1)
    x12 = x9(x1)
    x13 = index(x11, ORIGIN)
    x14 = shape(x12)
    x15 = decrement(x14)
    x16 = index(x12, x15)
    x17 = replace(x11, THREE, x13)
    x18 = replace(x12, THREE, x16)
    O = x10(x17, x18)
    return O



def solve_d10ecb37_d9f24cd1(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, FIVE)
    x4 = prapply(connect, x2, x3)
    x5 = mfilter(x4, vline)
    x6 = underfill(x1, TWO, x5)
    x7 = matcher(numcolors, TWO)
    x8 = objects(x6, F, F, T)
    x9 = sfilter(x8, x7)
    x10 = difference(x8, x9)
    x11 = colorfilter(x10, TWO)
    x12 = mapply(toindices, x11)
    x13 = apply(urcorner, x9)
    x14 = shift(x13, UNITY)
    x15 = rbind(shoot, UP)
    x16 = mapply(x15, x14)
    x17 = fill(x6, TWO, x16)
    x18 = mapply(vfrontier, x12)
    O = fill(x17, TWO, x18)
    return O



def solve_d10ecb37_b782dc8a(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = ofcolor(x1, x2)
    x5 = first(x4)
    x6 = dneighbors(x5)
    x7 = toobject(x6, x1)
    x8 = mostcolor(x7)
    x9 = ofcolor(x1, x8)
    x10 = colorfilter(x3, ZERO)
    x11 = rbind(adjacent, x9)
    x12 = mfilter(x10, x11)
    x13 = toindices(x12)
    x14 = rbind(manhattan, x4)
    x15 = chain(even, x14, initset)
    x16 = sfilter(x13, x15)
    x17 = difference(x13, x16)
    x18 = fill(x1, x2, x16)
    O = fill(x18, x8, x17)
    return O



def solve_d10ecb37_673ef223(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, EIGHT)
    x4 = replace(x1, EIGHT, FOUR)
    x5 = colorfilter(x2, TWO)
    x6 = argmin(x2, uppermost)
    x7 = apply(uppermost, x5)
    x8 = fork(subtract, maximum, minimum)
    x9 = x8(x7)
    x10 = toivec(x9)
    x11 = leftmost(x6)
    x12 = equality(x11, ZERO)
    x13 = branch(x12, LEFT, RIGHT)
    x14 = rbind(shoot, x13)
    x15 = mapply(x14, x3)
    x16 = underfill(x4, EIGHT, x15)
    x17 = shift(x3, x10)
    x18 = mapply(hfrontier, x17)
    O = underfill(x16, EIGHT, x18)
    return O



def solve_d10ecb37_f5b8619d(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = mapply(vfrontier, x3)
    x5 = underfill(x1, EIGHT, x4)
    x6 = hconcat(x5, x5)
    O = vconcat(x6, x6)
    return O



def solve_d10ecb37_f8c80d96(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = colorfilter(x3, x2)
    x5 = argmax(x4, size)
    x6 = argmin(x3, width)
    x7 = size(x6)
    x8 = equality(x7, ONE)
    x9 = branch(x8, identity, outbox)
    x10 = chain(outbox, outbox, x9)
    x11 = power(x10, TWO)
    x12 = power(x10, THREE)
    x13 = x10(x5)
    x14 = x11(x5)
    x15 = x12(x5)
    x16 = fill(x1, x2, x13)
    x17 = fill(x16, x2, x14)
    x18 = fill(x17, x2, x15)
    O = replace(x18, ZERO, FIVE)
    return O



def solve_d10ecb37_ecdecbb3(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = colorfilter(x2, EIGHT)
    x5 = product(x3, x4)
    x6 = fork(gravitate, first, last)
    x7 = compose(crement, x6)
    x8 = compose(center, first)
    x9 = fork(add, x8, x7)
    x10 = fork(connect, x8, x9)
    x11 = apply(x10, x5)
    x12 = lbind(greater, EIGHT)
    x13 = compose(x12, size)
    x14 = mfilter(x11, x13)
    x15 = fill(x1, TWO, x14)
    x16 = apply(x9, x5)
    x17 = intersection(x14, x16)
    x18 = mapply(neighbors, x17)
    O = fill(x15, EIGHT, x18)
    return O



def solve_d10ecb37_e5062a87(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = ofcolor(x1, TWO)
    x3 = recolor(ZERO, x2)
    x4 = normalize(x3)
    x5 = occurrences(x1, x3)
    x6 = lbind(shift, x4)
    x7 = apply(x6, x5)
    x8 = astuple(ONE, THREE)
    x9 = astuple(FIVE, ONE)
    x10 = astuple(TWO, SIX)
    x11 = initset(x8)
    x12 = insert(x9, x11)
    x13 = insert(x10, x12)
    x14 = rbind(contained, x13)
    x15 = chain(flip, x14, ulcorner)
    x16 = sfilter(x7, x15)
    x17 = merge(x16)
    x18 = recolor(TWO, x17)
    O = paint(x1, x18)
    return O



def solve_d10ecb37_a8d7556c(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = initset(ORIGIN)
    x3 = recolor(ZERO, x2)
    x4 = upscale(x3, TWO)
    x5 = occurrences(x1, x4)
    x6 = lbind(shift, x4)
    x7 = mapply(x6, x5)
    x8 = fill(x1, TWO, x7)
    x9 = add(SIX, SIX)
    x10 = astuple(EIGHT, x9)
    x11 = index(x8, x10)
    x12 = equality(x11, TWO)
    x13 = initset(x10)
    x14 = add(x10, DOWN)
    x15 = insert(x14, x13)
    x16 = toobject(x15, x8)
    x17 = toobject(x15, x1)
    x18 = branch(x12, x17, x16)
    O = paint(x8, x18)
    return O



def solve_d10ecb37_834ec97d(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = shift(x4, DOWN)
    x6 = fill(x1, ZERO, x4)
    x7 = paint(x6, x5)
    x8 = uppermost(x5)
    x9 = leftmost(x5)
    x10 = subtract(x9, TEN)
    x11 = add(x9, TEN)
    x12 = interval(x10, x11, TWO)
    x13 = lbind(greater, x8)
    x14 = compose(x13, first)
    x15 = rbind(contained, x12)
    x16 = compose(x15, last)
    x17 = sfilter(x2, x14)
    x18 = sfilter(x17, x16)
    O = fill(x7, FOUR, x18)
    return O



def solve_d10ecb37_90f3ed37(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, uppermost)
    x4 = first(x3)
    x5 = remove(x4, x3)
    x6 = normalize(x4)
    x7 = lbind(shift, x6)
    x8 = compose(x7, ulcorner)
    x9 = interval(TWO, NEG_ONE, NEG_ONE)
    x10 = apply(tojvec, x9)
    x11 = rbind(apply, x10)
    x12 = lbind(compose, size)
    x13 = lbind(lbind, intersection)
    x14 = compose(x12, x13)
    x15 = lbind(lbind, shift)
    x16 = chain(x11, x15, x8)
    x17 = fork(argmax, x16, x14)
    x18 = mapply(x17, x5)
    O = underfill(x1, ONE, x18)
    return O



def solve_d10ecb37_8403a5d5(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = color(x4)
    x6 = leftmost(x4)
    x7 = interval(x6, TEN, TWO)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = sfilter(x2, x9)
    x11 = increment(x6)
    x12 = add(x6, THREE)
    x13 = interval(x11, TEN, FOUR)
    x14 = interval(x12, TEN, FOUR)
    x15 = lbind(astuple, NINE)
    x16 = apply(tojvec, x13)
    x17 = apply(x15, x14)
    x18 = fill(x1, x5, x10)
    x19 = fill(x18, FIVE, x16)
    O = fill(x19, FIVE, x17)
    return O



def solve_d10ecb37_539a4f51(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = shape(x1)
    x3 = index(x1, ORIGIN)
    x4 = colorcount(x1, ZERO)
    x5 = decrement(x2)
    x6 = positive(x4)
    x7 = branch(x6, x5, x2)
    x8 = crop(x1, ORIGIN, x7)
    x9 = width(x8)
    x10 = astuple(ONE, x9)
    x11 = crop(x8, ORIGIN, x10)
    x12 = vupscale(x11, x9)
    x13 = dmirror(x12)
    x14 = hconcat(x8, x12)
    x15 = hconcat(x13, x8)
    x16 = vconcat(x14, x15)
    x17 = asobject(x16)
    x18 = multiply(UNITY, TEN)
    x19 = canvas(x3, x18)
    O = paint(x19, x17)
    return O



def solve_d10ecb37_3bdb4ada(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = compose(increment, ulcorner)
    x5 = compose(decrement, lrcorner)
    x6 = apply(x4, x3)
    x7 = apply(x5, x3)
    x8 = papply(connect, x6, x7)
    x9 = apply(last, x6)
    x10 = compose(last, first)
    x11 = power(last, TWO)
    x12 = fork(subtract, x10, x11)
    x13 = compose(even, x12)
    x14 = lbind(rbind, astuple)
    x15 = lbind(compose, x13)
    x16 = compose(x15, x14)
    x17 = fork(sfilter, first, x16)
    x18 = pair(x8, x9)
    x19 = mapply(x17, x18)
    O = fill(x1, ZERO, x19)
    return O



def solve_d10ecb37_ec883f72(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = palette(x1)
    x3 = objects(x1, T, T, T)
    x4 = fork(multiply, height, width)
    x5 = argmax(x3, x4)
    x6 = color(x5)
    x7 = remove(ZERO, x2)
    x8 = other(x7, x6)
    x9 = lrcorner(x5)
    x10 = llcorner(x5)
    x11 = urcorner(x5)
    x12 = ulcorner(x5)
    x13 = shoot(x9, UNITY)
    x14 = shoot(x10, DOWN_LEFT)
    x15 = shoot(x11, UP_RIGHT)
    x16 = shoot(x12, NEG_UNITY)
    x17 = combine(x13, x14)
    x18 = combine(x15, x16)
    x19 = combine(x17, x18)
    O = underfill(x1, x8, x19)
    return O



def solve_d10ecb37_2bee17df(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = height(x1)
    x3 = rot90(x1)
    x4 = subtract(x2, TWO)
    x5 = interval(ZERO, x2, ONE)
    x6 = rbind(colorcount, ZERO)
    x7 = matcher(x6, x4)
    x8 = rbind(vsplit, x2)
    x9 = lbind(apply, x7)
    x10 = compose(x9, x8)
    x11 = x10(x1)
    x12 = pair(x5, x11)
    x13 = sfilter(x12, last)
    x14 = mapply(hfrontier, x13)
    x15 = x10(x3)
    x16 = pair(x15, x5)
    x17 = sfilter(x16, first)
    x18 = mapply(vfrontier, x17)
    x19 = astuple(x14, x18)
    x20 = merge(x19)
    O = underfill(x1, THREE, x20)
    return O



def solve_d10ecb37_29623171(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = leastcolor(x1)
    x3 = interval(ZERO, NINE, FOUR)
    x4 = product(x3, x3)
    x5 = rbind(add, THREE)
    x6 = rbind(interval, ONE)
    x7 = fork(x6, identity, x5)
    x8 = compose(x7, first)
    x9 = compose(x7, last)
    x10 = fork(product, x8, x9)
    x11 = rbind(colorcount, x2)
    x12 = rbind(toobject, x1)
    x13 = compose(x11, x12)
    x14 = apply(x10, x4)
    x15 = valmax(x14, x13)
    x16 = matcher(x13, x15)
    x17 = compose(flip, x16)
    x18 = mfilter(x14, x16)
    x19 = mfilter(x14, x17)
    x20 = fill(x1, x2, x18)
    O = fill(x20, ZERO, x19)
    return O



def solve_d10ecb37_b0c4d837(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = ofcolor(x1, FIVE)
    x3 = ofcolor(x1, EIGHT)
    x4 = height(x2)
    x5 = decrement(x4)
    x6 = height(x3)
    x7 = subtract(x5, x6)
    x8 = astuple(ONE, x7)
    x9 = canvas(EIGHT, x8)
    x10 = subtract(SIX, x7)
    x11 = astuple(ONE, x10)
    x12 = canvas(ZERO, x11)
    x13 = hconcat(x9, x12)
    x14 = hsplit(x13, TWO)
    x15 = first(x14)
    x16 = last(x14)
    x17 = vmirror(x16)
    x18 = vconcat(x15, x17)
    x19 = astuple(ONE, THREE)
    x20 = canvas(ZERO, x19)
    O = vconcat(x18, x20)
    return O



def solve_d10ecb37_8731374e(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = height(x4)
    x6 = width(x4)
    x7 = vsplit(x4, x5)
    x8 = lbind(greater, FOUR)
    x9 = compose(x8, numcolors)
    x10 = sfilter(x7, x9)
    x11 = merge(x10)
    x12 = rot90(x11)
    x13 = vsplit(x12, x6)
    x14 = sfilter(x13, x9)
    x15 = merge(x14)
    x16 = rot270(x15)
    x17 = leastcolor(x16)
    x18 = ofcolor(x16, x17)
    x19 = fork(combine, vfrontier, hfrontier)
    x20 = mapply(x19, x18)
    O = fill(x16, x17, x20)
    return O



def solve_d10ecb37_db93a21d(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, NINE)
    x4 = colorfilter(x2, NINE)
    x5 = rbind(shoot, DOWN)
    x6 = mapply(x5, x3)
    x7 = underfill(x1, ONE, x6)
    x8 = compose(halve, width)
    x9 = rbind(greater, ONE)
    x10 = compose(x9, x8)
    x11 = matcher(x8, THREE)
    x12 = power(outbox, TWO)
    x13 = power(outbox, THREE)
    x14 = mapply(outbox, x4)
    x15 = sfilter(x4, x10)
    x16 = sfilter(x4, x11)
    x17 = mapply(x12, x15)
    x18 = mapply(x13, x16)
    x19 = fill(x7, THREE, x14)
    x20 = fill(x19, THREE, x17)
    O = fill(x20, THREE, x18)
    return O



def solve_d10ecb37_53b68214(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = width(x1)
    x3 = objects(x1, T, T, T)
    x4 = first(x3)
    x5 = vperiod(x4)
    x6 = toivec(x5)
    x7 = interval(ZERO, NINE, ONE)
    x8 = lbind(multiply, x6)
    x9 = apply(x8, x7)
    x10 = lbind(shift, x4)
    x11 = mapply(x10, x9)
    x12 = astuple(x2, x2)
    x13 = portrait(x4)
    x14 = shape(x4)
    x15 = add(DOWN, x14)
    x16 = decrement(x15)
    x17 = shift(x4, x16)
    x18 = branch(x13, x11, x17)
    x19 = canvas(ZERO, x12)
    x20 = paint(x19, x4)
    O = paint(x20, x18)
    return O



def solve_d10ecb37_d6ad076f(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = argmin(x2, size)
    x4 = argmax(x2, size)
    x5 = vmatching(x3, x4)
    x6 = branch(x5, DOWN, RIGHT)
    x7 = branch(x5, uppermost, leftmost)
    x8 = valmax(x2, x7)
    x9 = x7(x3)
    x10 = equality(x8, x9)
    x11 = branch(x10, NEG_ONE, ONE)
    x12 = multiply(x6, x11)
    x13 = inbox(x3)
    x14 = rbind(shoot, x12)
    x15 = mapply(x14, x13)
    x16 = underfill(x1, EIGHT, x15)
    x17 = objects(x16, T, F, T)
    x18 = colorfilter(x17, EIGHT)
    x19 = rbind(bordering, x1)
    x20 = mfilter(x18, x19)
    O = cover(x16, x20)
    return O



def solve_d10ecb37_6cdd2623(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = prapply(connect, x3, x3)
    x5 = fgpartition(x1)
    x6 = merge(x5)
    x7 = cover(x1, x6)
    x8 = fork(either, hline, vline)
    x9 = box(x6)
    x10 = rbind(difference, x9)
    x11 = chain(positive, size, x10)
    x12 = fork(both, x8, x11)
    x13 = mfilter(x4, x12)
    O = fill(x7, x2, x13)
    return O



def solve_d10ecb37_cdecee7f(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = astuple(ONE, THREE)
    x4 = size(x2)
    x5 = order(x2, leftmost)
    x6 = apply(color, x5)
    x7 = rbind(canvas, UNITY)
    x8 = apply(x7, x6)
    x9 = merge(x8)
    x10 = dmirror(x9)
    x11 = subtract(NINE, x4)
    x12 = astuple(ONE, x11)
    x13 = canvas(ZERO, x12)
    x14 = hconcat(x10, x13)
    x15 = hsplit(x14, THREE)
    x16 = merge(x15)
    x17 = crop(x16, ORIGIN, x3)
    x18 = crop(x16, DOWN, x3)
    x19 = crop(x16, TWO_BY_ZERO, x3)
    x20 = vmirror(x18)
    x21 = vconcat(x17, x20)
    O = vconcat(x21, x19)
    return O



def solve_d10ecb37_3345333e(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = cover(x1, x3)
    x5 = leastcolor(x4)
    x6 = ofcolor(x4, x5)
    x7 = neighbors(ORIGIN)
    x8 = mapply(neighbors, x7)
    x9 = vmirror(x6)
    x10 = lbind(shift, x9)
    x11 = apply(x10, x8)
    x12 = rbind(intersection, x6)
    x13 = compose(size, x12)
    x14 = argmax(x11, x13)
    O = fill(x4, x5, x14)
    return O



def solve_d10ecb37_b190f7f5(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = portrait(x1)
    x3 = branch(x2, vsplit, hsplit)
    x4 = x3(x1, TWO)
    x5 = argmin(x4, numcolors)
    x6 = argmax(x4, numcolors)
    x7 = width(x6)
    x8 = rbind(repeat, x7)
    x9 = chain(dmirror, merge, x8)
    x10 = upscale(x6, x7)
    x11 = x9(x5)
    x12 = x9(x11)
    x13 = ofcolor(x12, ZERO)
    O = fill(x10, ZERO, x13)
    return O



def solve_d10ecb37_caa06a1f(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = asobject(x1)
    x3 = shape(x1)
    x4 = decrement(x3)
    x5 = index(x1, x4)
    x6 = double(x3)
    x7 = canvas(x5, x6)
    x8 = paint(x7, x2)
    x9 = objects(x8, F, F, T)
    x10 = first(x9)
    x11 = shift(x10, LEFT)
    x12 = vperiod(x11)
    x13 = hperiod(x11)
    x14 = neighbors(ORIGIN)
    x15 = lbind(mapply, neighbors)
    x16 = power(x15, TWO)
    x17 = x16(x14)
    x18 = astuple(x12, x13)
    x19 = lbind(multiply, x18)
    x20 = apply(x19, x17)
    x21 = lbind(shift, x11)
    x22 = mapply(x21, x20)
    O = paint(x1, x22)
    return O



def solve_d10ecb37_e21d9049(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = asindices(x1)
    x3 = leastcolor(x1)
    x4 = objects(x1, T, F, T)
    x5 = ofcolor(x1, x3)
    x6 = merge(x4)
    x7 = shape(x6)
    x8 = neighbors(ORIGIN)
    x9 = lbind(mapply, neighbors)
    x10 = power(x9, TWO)
    x11 = x10(x8)
    x12 = lbind(multiply, x7)
    x13 = lbind(shift, x6)
    x14 = apply(x12, x11)
    x15 = mapply(x13, x14)
    x16 = lbind(hmatching, x5)
    x17 = lbind(vmatching, x5)
    x18 = fork(either, x16, x17)
    x19 = compose(x18, initset)
    x20 = paint(x1, x15)
    x21 = sfilter(x2, x19)
    x22 = difference(x2, x21)
    O = cover(x20, x22)
    return O



def solve_d10ecb37_746b3537(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = chain(size, dedupe, first)
    x3 = x2(x1)
    x4 = equality(x3, ONE)
    x5 = branch(x4, dmirror, identity)
    x6 = x5(x1)
    x7 = objects(x6, T, F, F)
    x8 = order(x7, leftmost)
    x9 = apply(color, x8)
    x10 = repeat(x9, ONE)
    O = x5(x10)
    return O



def solve_d10ecb37_63613498(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = ofcolor(x2, ZERO)
    x4 = asindices(x2)
    x5 = difference(x4, x3)
    x6 = normalize(x5)
    x7 = objects(x1, T, F, T)
    x8 = compose(toindices, normalize)
    x9 = matcher(x8, x6)
    x10 = mfilter(x7, x9)
    x11 = fill(x1, FIVE, x10)
    x12 = asobject(x2)
    O = paint(x11, x12)
    return O



def solve_d10ecb37_06df4c85(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = partition(x1)
    x3 = mostcolor(x1)
    x4 = ofcolor(x1, x3)
    x5 = colorfilter(x2, ZERO)
    x6 = argmax(x2, size)
    x7 = difference(x2, x5)
    x8 = remove(x6, x7)
    x9 = merge(x8)
    x10 = product(x9, x9)
    x11 = power(first, TWO)
    x12 = compose(first, last)
    x13 = fork(equality, x11, x12)
    x14 = sfilter(x10, x13)
    x15 = compose(last, first)
    x16 = power(last, TWO)
    x17 = fork(connect, x15, x16)
    x18 = fork(recolor, color, x17)
    x19 = apply(x18, x14)
    x20 = fork(either, vline, hline)
    x21 = mfilter(x19, x20)
    x22 = paint(x1, x21)
    O = fill(x22, x3, x4)
    return O



def solve_d10ecb37_4522001f(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = toindices(x3)
    x5 = contained(ZERO_BY_TWO, x4)
    x6 = contained(TWO_BY_TWO, x4)
    x7 = contained(TWO_BY_ZERO, x4)
    x8 = astuple(NINE, NINE)
    x9 = canvas(ZERO, x8)
    x10 = astuple(THREE, ORIGIN)
    x11 = initset(x10)
    x12 = upscale(x11, TWO)
    x13 = upscale(x12, TWO)
    x14 = shape(x13)
    x15 = shift(x13, x14)
    x16 = combine(x13, x15)
    x17 = paint(x9, x16)
    x18 = rot90(x17)
    x19 = rot180(x17)
    x20 = rot270(x17)
    x21 = branch(x5, x18, x17)
    x22 = branch(x6, x19, x21)
    O = branch(x7, x20, x22)
    return O



def solve_d10ecb37_eb5a1d5d(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = compose(dmirror, dedupe)
    x3 = x2(x1)
    x4 = x2(x3)
    x5 = fork(remove, last, identity)
    x6 = compose(hmirror, x5)
    x7 = fork(vconcat, identity, x6)
    x8 = x7(x4)
    x9 = dmirror(x8)
    O = x7(x9)
    return O



def solve_d10ecb37_995c5fa3(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = hsplit(x1, THREE)
    x3 = astuple(TWO, ONE)
    x4 = rbind(ofcolor, ZERO)
    x5 = compose(ulcorner, x4)
    x6 = compose(size, x4)
    x7 = matcher(x6, ZERO)
    x8 = matcher(x5, UNITY)
    x9 = matcher(x5, DOWN)
    x10 = matcher(x5, x3)
    x11 = rbind(multiply, THREE)
    x12 = power(double, TWO)
    x13 = compose(double, x7)
    x14 = chain(x12, double, x8)
    x15 = compose(x11, x9)
    x16 = compose(x12, x10)
    x17 = fork(add, x13, x14)
    x18 = fork(add, x15, x16)
    x19 = fork(add, x17, x18)
    x20 = rbind(canvas, UNITY)
    x21 = compose(x20, x19)
    x22 = apply(x21, x2)
    x23 = merge(x22)
    O = hupscale(x23, THREE)
    return O



def solve_d10ecb37_36fdfd69(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = upscale(x1, TWO)
    x3 = objects(x2, T, T, T)
    x4 = colorfilter(x3, TWO)
    x5 = fork(manhattan, first, last)
    x6 = lbind(greater, FIVE)
    x7 = compose(x6, x5)
    x8 = product(x4, x4)
    x9 = sfilter(x8, x7)
    x10 = apply(merge, x9)
    x11 = mapply(delta, x10)
    x12 = fill(x2, FOUR, x11)
    x13 = merge(x4)
    x14 = paint(x12, x13)
    O = downscale(x14, TWO)
    return O



def solve_d10ecb37_045e512c(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = lbind(shift, x3)
    x6 = lbind(mapply, x5)
    x7 = double(TEN)
    x8 = interval(FOUR, x7, FOUR)
    x9 = rbind(apply, x8)
    x10 = lbind(position, x3)
    x11 = lbind(rbind, multiply)
    x12 = chain(x9, x11, x10)
    x13 = compose(x6, x12)
    x14 = fork(recolor, color, x13)
    x15 = mapply(x14, x4)
    O = paint(x1, x15)
    return O



def solve_d10ecb37_82819916(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = normalize(x3)
    x6 = compose(last, last)
    x7 = rbind(argmin, x6)
    x8 = compose(first, x7)
    x9 = fork(other, palette, x8)
    x10 = x8(x5)
    x11 = matcher(first, x10)
    x12 = sfilter(x5, x11)
    x13 = difference(x5, x12)
    x14 = compose(toivec, uppermost)
    x15 = lbind(shift, x12)
    x16 = lbind(shift, x13)
    x17 = compose(x15, x14)
    x18 = compose(x16, x14)
    x19 = fork(recolor, x8, x17)
    x20 = fork(recolor, x9, x18)
    x21 = fork(combine, x19, x20)
    x22 = mapply(x21, x4)
    O = paint(x1, x22)
    return O



def solve_d10ecb37_99fa7670(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x3)
    x8 = paint(x1, x7)
    x9 = add(x2, DOWN_LEFT)
    x10 = initset(x9)
    x11 = recolor(ZERO, x10)
    x12 = objects(x8, T, F, T)
    x13 = insert(x11, x12)
    x14 = order(x13, uppermost)
    x15 = first(x14)
    x16 = remove(x11, x14)
    x17 = remove(x15, x14)
    x18 = compose(lrcorner, first)
    x19 = compose(lrcorner, last)
    x20 = fork(connect, x18, x19)
    x21 = compose(color, first)
    x22 = fork(recolor, x21, x20)
    x23 = pair(x16, x17)
    x24 = mapply(x22, x23)
    O = underpaint(x8, x24)
    return O



def solve_d10ecb37_72322fa7(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, T, T)
    x3 = matcher(numcolors, ONE)
    x4 = sfilter(x2, x3)
    x5 = difference(x2, x4)
    x6 = lbind(matcher, first)
    x7 = compose(x6, mostcolor)
    x8 = fork(sfilter, identity, x7)
    x9 = fork(difference, identity, x8)
    x10 = lbind(occurrences, x1)
    x11 = compose(x10, x8)
    x12 = compose(x10, x9)
    x13 = compose(ulcorner, x9)
    x14 = fork(subtract, ulcorner, x13)
    x15 = lbind(rbind, add)
    x16 = compose(x15, x14)
    x17 = fork(apply, x16, x12)
    x18 = lbind(lbind, shift)
    x19 = compose(x18, normalize)
    x20 = fork(mapply, x19, x11)
    x21 = fork(mapply, x19, x17)
    x22 = mapply(x20, x5)
    x23 = mapply(x21, x5)
    x24 = paint(x1, x22)
    O = paint(x24, x23)
    return O



def solve_d10ecb37_855e0971(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = frontiers(x1)
    x3 = sfilter(x2, hline)
    x4 = size(x3)
    x5 = positive(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x1)
    x8 = rbind(subgrid, x7)
    x9 = matcher(color, ZERO)
    x10 = compose(flip, x9)
    x11 = partition(x7)
    x12 = sfilter(x11, x10)
    x13 = rbind(ofcolor, ZERO)
    x14 = lbind(mapply, vfrontier)
    x15 = chain(x14, x13, x8)
    x16 = fork(shift, x15, ulcorner)
    x17 = fork(intersection, toindices, x16)
    x18 = mapply(x17, x12)
    x19 = fill(x7, ZERO, x18)
    O = x6(x19)
    return O



def solve_d10ecb37_a78176bb(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = remove(ZERO, x2)
    x5 = other(x4, FIVE)
    x6 = colorfilter(x3, FIVE)
    x7 = lbind(index, x1)
    x8 = compose(x7, urcorner)
    x9 = matcher(x8, FIVE)
    x10 = sfilter(x6, x9)
    x11 = difference(x6, x10)
    x12 = apply(urcorner, x10)
    x13 = apply(llcorner, x11)
    x14 = rbind(add, UP_RIGHT)
    x15 = rbind(add, DOWN_LEFT)
    x16 = apply(x14, x12)
    x17 = apply(x15, x13)
    x18 = rbind(shoot, UNITY)
    x19 = rbind(shoot, NEG_UNITY)
    x20 = fork(combine, x18, x19)
    x21 = mapply(x20, x16)
    x22 = mapply(x20, x17)
    x23 = combine(x21, x22)
    x24 = fill(x1, x5, x23)
    O = replace(x24, FIVE, ZERO)
    return O



def solve_d10ecb37_952a094c(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = argmax(x2, size)
    x5 = outbox(x4)
    x6 = corners(x5)
    x7 = lbind(rbind, manhattan)
    x8 = lbind(argmax, x3)
    x9 = chain(x8, x7, initset)
    x10 = compose(color, x9)
    x11 = fork(astuple, x10, identity)
    x12 = apply(x11, x6)
    x13 = merge(x3)
    x14 = cover(x1, x13)
    O = paint(x14, x12)
    return O



def solve_d10ecb37_6d58a25d(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = merge(x4)
    x6 = color(x5)
    x7 = uppermost(x3)
    x8 = rbind(greater, x7)
    x9 = compose(x8, uppermost)
    x10 = rbind(vmatching, x3)
    x11 = fork(both, x10, x9)
    x12 = sfilter(x4, x11)
    x13 = increment(x7)
    x14 = rbind(greater, x13)
    x15 = compose(x14, first)
    x16 = rbind(sfilter, x15)
    x17 = chain(x16, vfrontier, center)
    x18 = mapply(x17, x12)
    O = underfill(x1, x6, x18)
    return O



def solve_d10ecb37_6aa20dc0(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(rbind, upscale)
    x10 = interval(ONE, FOUR, ONE)
    x11 = apply(x9, x10)
    x12 = initset(identity)
    x13 = insert(vmirror, x12)
    x14 = insert(hmirror, x13)
    x15 = insert(cmirror, x14)
    x16 = insert(dmirror, x15)
    x17 = fork(compose, first, last)
    x18 = lbind(occurrences, x1)
    x19 = lbind(lbind, shift)
    x20 = compose(x18, x8)
    x21 = product(x16, x11)
    x22 = apply(x17, x21)
    x23 = rapply(x22, x4)
    x24 = fork(mapply, x19, x20)
    x25 = mapply(x24, x23)
    O = paint(x1, x25)
    return O



def solve_d10ecb37_447fd412(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(rbind, upscale)
    x10 = interval(ONE, FOUR, ONE)
    x11 = apply(x9, x10)
    x12 = lbind(recolor, ZERO)
    x13 = compose(x12, outbox)
    x14 = fork(combine, identity, x13)
    x15 = lbind(occurrences, x1)
    x16 = lbind(rbind, subtract)
    x17 = lbind(apply, increment)
    x18 = lbind(lbind, shift)
    x19 = chain(x16, ulcorner, x8)
    x20 = chain(x15, x14, x8)
    x21 = fork(apply, x19, x20)
    x22 = compose(x17, x21)
    x23 = fork(mapply, x18, x22)
    x24 = rapply(x11, x4)
    x25 = mapply(x23, x24)
    O = paint(x1, x25)
    return O



def solve_d10ecb37_2bcee788(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = mostcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = replace(x1, x2, THREE)
    x5 = argmax(x3, size)
    x6 = argmin(x3, size)
    x7 = position(x5, x6)
    x8 = first(x7)
    x9 = last(x7)
    x10 = subgrid(x5, x4)
    x11 = hline(x6)
    x12 = hmirror(x10)
    x13 = vmirror(x10)
    x14 = branch(x11, x12, x13)
    x15 = branch(x11, x8, ZERO)
    x16 = branch(x11, ZERO, x9)
    x17 = asobject(x14)
    x18 = matcher(first, THREE)
    x19 = compose(flip, x18)
    x20 = sfilter(x17, x19)
    x21 = ulcorner(x5)
    x22 = shape(x5)
    x23 = astuple(x15, x16)
    x24 = multiply(x22, x23)
    x25 = add(x21, x24)
    x26 = shift(x20, x25)
    O = paint(x4, x26)
    return O



def solve_d10ecb37_f35d900a(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = palette(x1)
    x4 = remove(ZERO, x3)
    x5 = lbind(other, x4)
    x6 = compose(x5, color)
    x7 = fork(recolor, x6, outbox)
    x8 = mapply(x7, x2)
    x9 = mapply(toindices, x2)
    x10 = box(x9)
    x11 = difference(x10, x9)
    x12 = lbind(argmin, x9)
    x13 = rbind(compose, initset)
    x14 = lbind(rbind, manhattan)
    x15 = chain(x13, x14, initset)
    x16 = chain(initset, x12, x15)
    x17 = fork(manhattan, initset, x16)
    x18 = compose(even, x17)
    x19 = sfilter(x11, x18)
    x20 = paint(x1, x8)
    O = fill(x20, FIVE, x19)
    return O



def solve_d10ecb37_0dfd9992(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_d10ecb37_29ec7d0e(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_d10ecb37_36d67576(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, F, T)
    x3 = argmax(x2, numcolors)
    x4 = astuple(TWO, FOUR)
    x5 = rbind(contained, x4)
    x6 = compose(x5, first)
    x7 = rbind(sfilter, x6)
    x8 = lbind(rbind, subtract)
    x9 = lbind(occurrences, x1)
    x10 = lbind(lbind, shift)
    x11 = compose(x8, ulcorner)
    x12 = chain(x11, x7, normalize)
    x13 = chain(x9, x7, normalize)
    x14 = fork(apply, x12, x13)
    x15 = compose(x10, normalize)
    x16 = fork(mapply, x15, x14)
    x17 = astuple(cmirror, dmirror)
    x18 = astuple(hmirror, vmirror)
    x19 = combine(x17, x18)
    x20 = product(x19, x19)
    x21 = fork(compose, first, last)
    x22 = apply(x21, x20)
    x23 = totuple(x22)
    x24 = combine(x19, x23)
    x25 = rapply(x24, x3)
    x26 = mapply(x16, x25)
    O = paint(x1, x26)
    return O



def solve_d10ecb37_469497ad(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    x4 = upscale(x1, x3)
    x5 = objects(x4, F, F, T)
    x6 = argmin(x5, size)
    x7 = ulcorner(x6)
    x8 = llcorner(x6)
    x9 = shoot(x7, NEG_UNITY)
    x10 = shoot(x7, UNITY)
    x11 = shoot(x8, DOWN_LEFT)
    x12 = shoot(x8, UP_RIGHT)
    x13 = combine(x9, x10)
    x14 = combine(x11, x12)
    x15 = combine(x13, x14)
    x16 = underfill(x4, TWO, x15)
    x17 = objects(x16, T, F, T)
    x18 = argmax(x17, lrcorner)
    O = paint(x16, x18)
    return O



def solve_d10ecb37_484b58aa(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, TWO)
    x9 = astuple(TWO, x3)
    x10 = power(decrement, TWO)
    x11 = x10(x2)
    x12 = x10(x3)
    x13 = toivec(x12)
    x14 = tojvec(x11)
    x15 = crop(x1, x13, x9)
    x16 = crop(x1, x14, x8)
    x17 = asobject(x16)
    x18 = asobject(x15)
    x19 = vperiod(x17)
    x20 = hperiod(x18)
    x21 = astuple(x19, x20)
    x22 = lbind(multiply, x21)
    x23 = neighbors(ORIGIN)
    x24 = mapply(neighbors, x23)
    x25 = apply(x22, x24)
    x26 = lbind(shift, x7)
    x27 = mapply(x26, x25)
    O = paint(x1, x27)
    return O



def solve_d10ecb37_3befdf3e(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, F, T)
    x3 = leastcolor(x1)
    x4 = palette(x1)
    x5 = remove(ZERO, x4)
    x6 = other(x5, x3)
    x7 = switch(x1, x3, x6)
    x8 = compose(width, inbox)
    x9 = lbind(power, outbox)
    x10 = compose(x9, x8)
    x11 = initset(x10)
    x12 = lbind(rapply, x11)
    x13 = chain(initset, first, x12)
    x14 = fork(rapply, x13, identity)
    x15 = compose(first, x14)
    x16 = compose(backdrop, x15)
    x17 = lbind(chain, backdrop)
    x18 = lbind(x17, inbox)
    x19 = compose(x18, x10)
    x20 = lbind(apply, initset)
    x21 = chain(x20, corners, x16)
    x22 = fork(mapply, x19, x21)
    x23 = fork(intersection, x16, x22)
    x24 = mapply(x16, x2)
    x25 = mapply(x23, x2)
    x26 = underfill(x7, x6, x24)
    O = fill(x26, ZERO, x25)
    return O



def solve_d10ecb37_49d1d64f(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = shape(x1)
    x3 = add(x2, TWO)
    x4 = canvas(ZERO, x3)
    x5 = asobject(x1)
    x6 = shift(x5, UNITY)
    x7 = paint(x4, x6)
    x8 = asindices(x4)
    x9 = fork(difference, box, corners)
    x10 = x9(x8)
    x11 = lbind(lbind, manhattan)
    x12 = rbind(compose, initset)
    x13 = chain(x12, x11, initset)
    x14 = lbind(argmin, x6)
    x15 = chain(first, x14, x13)
    x16 = fork(astuple, x15, identity)
    x17 = apply(x16, x10)
    O = paint(x7, x17)
    return O



def solve_d10ecb37_57aa92db(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, T, T)
    x3 = objects(x1, T, F, T)
    x4 = lbind(lbind, colorcount)
    x5 = fork(apply, x4, palette)
    x6 = compose(maximum, x5)
    x7 = compose(minimum, x5)
    x8 = fork(subtract, x6, x7)
    x9 = argmax(x2, x8)
    x10 = leastcolor(x9)
    x11 = normalize(x9)
    x12 = matcher(first, x10)
    x13 = sfilter(x11, x12)
    x14 = ulcorner(x13)
    x15 = colorfilter(x3, x10)
    x16 = rbind(toobject, x1)
    x17 = lbind(remove, ZERO)
    x18 = chain(first, x17, palette)
    x19 = chain(x18, x16, outbox)
    x20 = lbind(multiply, x14)
    x21 = compose(x20, width)
    x22 = fork(subtract, ulcorner, x21)
    x23 = lbind(shift, x11)
    x24 = compose(x23, x22)
    x25 = fork(upscale, x24, width)
    x26 = fork(recolor, x19, x25)
    x27 = mapply(x26, x15)
    x28 = paint(x1, x27)
    x29 = merge(x3)
    O = paint(x28, x29)
    return O



def solve_d10ecb37_f1cefba8(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = palette(x1)
    x3 = objects(x1, F, F, T)
    x4 = ofcolor(x1, ZERO)
    x5 = first(x3)
    x6 = ulcorner(x5)
    x7 = subgrid(x5, x1)
    x8 = power(trim, TWO)
    x9 = x8(x7)
    x10 = asindices(x9)
    x11 = shift(x10, TWO_BY_TWO)
    x12 = fill(x7, ZERO, x11)
    x13 = leastcolor(x12)
    x14 = remove(ZERO, x2)
    x15 = other(x14, x13)
    x16 = ofcolor(x12, x13)
    x17 = shift(x16, x6)
    x18 = ofcolor(x1, x13)
    x19 = uppermost(x18)
    x20 = lowermost(x18)
    x21 = matcher(first, x19)
    x22 = matcher(first, x20)
    x23 = fork(either, x21, x22)
    x24 = sfilter(x17, x23)
    x25 = difference(x17, x24)
    x26 = mapply(vfrontier, x24)
    x27 = mapply(hfrontier, x25)
    x28 = combine(x26, x27)
    x29 = intersection(x4, x28)
    x30 = fill(x1, x15, x28)
    O = fill(x30, x13, x29)
    return O



def solve_d10ecb37_0e206a2e(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = palette(x1)
    x3 = objects(x1, F, F, T)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, numcolors)
    x6 = sfilter(x3, x5)
    x7 = remove(ZERO, x2)
    x8 = lbind(colorcount, x1)
    x9 = argmax(x7, x8)
    x10 = remove(x9, x7)
    x11 = rbind(contained, x10)
    x12 = compose(x11, first)
    x13 = rbind(sfilter, x12)
    x14 = lbind(rbind, subtract)
    x15 = lbind(occurrences, x1)
    x16 = lbind(lbind, shift)
    x17 = compose(x14, ulcorner)
    x18 = chain(x17, x13, normalize)
    x19 = chain(x15, x13, normalize)
    x20 = fork(apply, x18, x19)
    x21 = compose(x16, normalize)
    x22 = fork(mapply, x21, x20)
    x23 = astuple(cmirror, dmirror)
    x24 = astuple(hmirror, vmirror)
    x25 = combine(x23, x24)
    x26 = product(x25, x25)
    x27 = fork(compose, first, last)
    x28 = apply(x27, x26)
    x29 = totuple(x28)
    x30 = combine(x25, x29)
    x31 = lbind(rapply, x30)
    x32 = mapply(x31, x6)
    x33 = mapply(x22, x32)
    x34 = paint(x1, x33)
    x35 = merge(x6)
    O = cover(x34, x35)
    return O



def solve_d10ecb37_d22278a0(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = fork(multiply, sign, identity)
    x5 = lbind(apply, x4)
    x6 = chain(even, maximum, x5)
    x7 = lbind(sfilter, x2)
    x8 = fork(add, first, last)
    x9 = rbind(remove, x3)
    x10 = compose(center, last)
    x11 = fork(subtract, first, x10)
    x12 = compose(x6, x11)
    x13 = lbind(rbind, equality)
    x14 = lbind(argmin, x3)
    x15 = chain(x8, x5, x11)
    x16 = lbind(lbind, astuple)
    x17 = lbind(rbind, astuple)
    x18 = lbind(compose, x12)
    x19 = lbind(compose, x15)
    x20 = compose(x19, x16)
    x21 = compose(x19, x17)
    x22 = compose(x14, x20)
    x23 = rbind(compose, x22)
    x24 = lbind(lbind, valmin)
    x25 = rbind(compose, x20)
    x26 = chain(x25, x24, x9)
    x27 = lbind(fork, greater)
    x28 = fork(x27, x26, x21)
    x29 = chain(x7, x18, x17)
    x30 = chain(x7, x23, x13)
    x31 = fork(intersection, x29, x30)
    x32 = compose(x7, x28)
    x33 = fork(intersection, x31, x32)
    x34 = fork(recolor, color, x33)
    x35 = mapply(x34, x3)
    O = paint(x1, x35)
    return O



def solve_d10ecb37_150deff5(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = canvas(FIVE, TWO_BY_TWO)
    x3 = asobject(x2)
    x4 = occurrences(x1, x3)
    x5 = lbind(shift, x3)
    x6 = mapply(x5, x4)
    x7 = fill(x1, EIGHT, x6)
    x8 = canvas(FIVE, UNITY)
    x9 = astuple(TWO, ONE)
    x10 = canvas(EIGHT, x9)
    x11 = vconcat(x10, x8)
    x12 = asobject(x11)
    x13 = occurrences(x7, x12)
    x14 = lbind(shift, x12)
    x15 = mapply(x14, x13)
    x16 = fill(x7, TWO, x15)
    x17 = astuple(ONE, THREE)
    x18 = canvas(FIVE, x17)
    x19 = asobject(x18)
    x20 = occurrences(x16, x19)
    x21 = lbind(shift, x19)
    x22 = mapply(x21, x20)
    x23 = fill(x16, TWO, x22)
    x24 = hmirror(x11)
    x25 = asobject(x24)
    x26 = occurrences(x23, x25)
    x27 = lbind(shift, x25)
    x28 = mapply(x27, x26)
    x29 = fill(x23, TWO, x28)
    x30 = dmirror(x11)
    x31 = asobject(x30)
    x32 = occurrences(x29, x31)
    x33 = lbind(shift, x31)
    x34 = mapply(x33, x32)
    x35 = fill(x29, TWO, x34)
    x36 = vmirror(x30)
    x37 = asobject(x36)
    x38 = occurrences(x35, x37)
    x39 = lbind(shift, x37)
    x40 = mapply(x39, x38)
    O = fill(x35, TWO, x40)
    return O



def solve_d10ecb37_b7249182(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = portrait(x3)
    x5 = branch(x4, identity, dmirror)
    x6 = x5(x1)
    x7 = objects(x6, T, F, T)
    x8 = order(x7, uppermost)
    x9 = first(x8)
    x10 = last(x8)
    x11 = color(x9)
    x12 = color(x10)
    x13 = compose(first, toindices)
    x14 = x13(x9)
    x15 = x13(x10)
    x16 = connect(x14, x15)
    x17 = centerofmass(x16)
    x18 = connect(x14, x17)
    x19 = fill(x6, x12, x16)
    x20 = fill(x19, x11, x18)
    x21 = add(x17, DOWN)
    x22 = initset(x17)
    x23 = insert(x21, x22)
    x24 = toobject(x23, x20)
    x25 = astuple(ZERO, NEG_TWO)
    x26 = shift(x24, ZERO_BY_TWO)
    x27 = shift(x24, x25)
    x28 = combine(x26, x27)
    x29 = ulcorner(x28)
    x30 = urcorner(x28)
    x31 = connect(x29, x30)
    x32 = shift(x31, UP)
    x33 = llcorner(x28)
    x34 = lrcorner(x28)
    x35 = connect(x33, x34)
    x36 = shift(x35, DOWN)
    x37 = paint(x20, x28)
    x38 = fill(x37, x11, x32)
    x39 = fill(x38, x12, x36)
    x40 = cover(x39, x23)
    O = x5(x40)
    return O



def solve_d10ecb37_9d9215db(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = initset(x1)
    x6 = chain(numcolors, lefthalf, tophalf)
    x7 = insert(x2, x5)
    x8 = insert(x3, x7)
    x9 = insert(x4, x8)
    x10 = argmax(x9, x6)
    x11 = vmirror(x10)
    x12 = papply(pair, x10, x11)
    x13 = lbind(apply, maximum)
    x14 = apply(x13, x12)
    x15 = partition(x14)
    x16 = sizefilter(x15, FOUR)
    x17 = apply(llcorner, x16)
    x18 = apply(lrcorner, x16)
    x19 = combine(x17, x18)
    x20 = cover(x14, x19)
    x21 = tojvec(NEG_TWO)
    x22 = rbind(add, ZERO_BY_TWO)
    x23 = rbind(add, x21)
    x24 = compose(x22, ulcorner)
    x25 = compose(x23, urcorner)
    x26 = fork(connect, x24, x25)
    x27 = compose(even, last)
    x28 = rbind(sfilter, x27)
    x29 = chain(normalize, x28, x26)
    x30 = fork(shift, x29, x24)
    x31 = fork(recolor, color, x30)
    x32 = mapply(x31, x16)
    x33 = paint(x20, x32)
    x34 = rot90(x33)
    x35 = rot180(x33)
    x36 = rot270(x33)
    x37 = papply(pair, x33, x34)
    x38 = apply(x13, x37)
    x39 = papply(pair, x38, x35)
    x40 = apply(x13, x39)
    x41 = papply(pair, x40, x36)
    O = apply(x13, x41)
    return O



def solve_d10ecb37_264363fd(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, F, T)
    x3 = argmin(x2, size)
    x4 = normalize(x3)
    x5 = height(x3)
    x6 = width(x3)
    x7 = equality(x5, FIVE)
    x8 = equality(x6, FIVE)
    x9 = astuple(x7, x8)
    x10 = add(UNITY, x9)
    x11 = invert(x10)
    x12 = center(x3)
    x13 = index(x1, x12)
    x14 = branch(x7, UP, RIGHT)
    x15 = add(x14, x12)
    x16 = index(x1, x15)
    x17 = astuple(x13, ORIGIN)
    x18 = initset(x17)
    x19 = cover(x1, x3)
    x20 = mostcolor(x19)
    x21 = ofcolor(x19, x20)
    x22 = occurrences(x19, x18)
    x23 = objects(x19, F, F, T)
    x24 = rbind(occurrences, x18)
    x25 = rbind(subgrid, x19)
    x26 = compose(x24, x25)
    x27 = lbind(mapply, vfrontier)
    x28 = lbind(mapply, hfrontier)
    x29 = compose(x27, x26)
    x30 = compose(x28, x26)
    x31 = branch(x7, x29, x30)
    x32 = branch(x8, x30, x29)
    x33 = fork(combine, x31, x32)
    x34 = lbind(recolor, x16)
    x35 = compose(x34, x33)
    x36 = fork(paint, x25, x35)
    x37 = compose(asobject, x36)
    x38 = fork(shift, x37, ulcorner)
    x39 = mapply(x38, x23)
    x40 = paint(x19, x39)
    x41 = shift(x4, x11)
    x42 = lbind(shift, x41)
    x43 = mapply(x42, x22)
    x44 = paint(x40, x43)
    O = fill(x44, x20, x21)
    return O



def solve_d10ecb37_234bbc79(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, F, T)
    x3 = rbind(other, FIVE)
    x4 = compose(x3, palette)
    x5 = fork(recolor, x4, identity)
    x6 = apply(x5, x2)
    x7 = order(x6, leftmost)
    x8 = compose(last, last)
    x9 = lbind(matcher, x8)
    x10 = compose(x9, leftmost)
    x11 = compose(x9, rightmost)
    x12 = fork(sfilter, identity, x10)
    x13 = fork(sfilter, identity, x11)
    x14 = compose(dneighbors, last)
    x15 = rbind(chain, x14)
    x16 = lbind(x15, size)
    x17 = lbind(rbind, intersection)
    x18 = chain(x16, x17, toindices)
    x19 = fork(argmin, x12, x18)
    x20 = fork(argmin, x13, x18)
    x21 = compose(last, x19)
    x22 = compose(last, x20)
    x23 = astuple(ZERO, DOWN_LEFT)
    x24 = initset(x23)
    x25 = lbind(add, RIGHT)
    x26 = chain(x21, first, last)
    x27 = compose(x22, first)
    x28 = fork(subtract, x27, x26)
    x29 = compose(first, last)
    x30 = compose(x25, x28)
    x31 = fork(shift, x29, x30)
    x32 = fork(combine, first, x31)
    x33 = fork(remove, x29, last)
    x34 = fork(astuple, x32, x33)
    x35 = size(x2)
    x36 = power(x34, x35)
    x37 = astuple(x24, x7)
    x38 = x36(x37)
    x39 = first(x38)
    x40 = width(x39)
    x41 = decrement(x40)
    x42 = astuple(THREE, x41)
    x43 = canvas(ZERO, x42)
    O = paint(x43, x39)
    return O



def solve_d10ecb37_22233c11(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, T, T, T)
    x3 = rbind(upscale, TWO)
    x4 = chain(invert, halve, shape)
    x5 = fork(combine, hfrontier, vfrontier)
    x6 = compose(x3, vmirror)
    x7 = fork(shift, x6, x4)
    x8 = compose(toindices, x7)
    x9 = lbind(mapply, x5)
    x10 = compose(x9, toindices)
    x11 = fork(difference, x8, x10)
    x12 = mapply(x11, x2)
    O = fill(x1, EIGHT, x12)
    return O



def solve_d10ecb37_a64e4611(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = asindices(x1)
    x3 = fork(product, identity, identity)
    x4 = lbind(canvas, ZERO)
    x5 = compose(asobject, x4)
    x6 = fork(multiply, first, last)
    x7 = compose(positive, size)
    x8 = lbind(lbind, shift)
    x9 = rbind(fork, x6)
    x10 = lbind(x9, multiply)
    x11 = lbind(chain, x7)
    x12 = rbind(x11, x5)
    x13 = lbind(lbind, occurrences)
    x14 = chain(x10, x12, x13)
    x15 = compose(x3, first)
    x16 = compose(x14, last)
    x17 = fork(argmax, x15, x16)
    x18 = chain(x8, x5, x17)
    x19 = compose(x5, x17)
    x20 = fork(occurrences, last, x19)
    x21 = fork(mapply, x18, x20)
    x22 = multiply(TWO, SIX)
    x23 = interval(THREE, x22, ONE)
    x24 = astuple(x23, x1)
    x25 = x21(x24)
    x26 = fill(x1, THREE, x25)
    x27 = interval(THREE, TEN, ONE)
    x28 = astuple(x27, x26)
    x29 = x21(x28)
    x30 = fill(x26, THREE, x29)
    x31 = astuple(x27, x30)
    x32 = x21(x31)
    x33 = fill(x30, THREE, x32)
    x34 = rbind(toobject, x33)
    x35 = rbind(colorcount, THREE)
    x36 = chain(x35, x34, neighbors)
    x37 = matcher(x36, EIGHT)
    x38 = sfilter(x2, x37)
    x39 = fill(x1, THREE, x38)
    x40 = ofcolor(x39, ZERO)
    x41 = rbind(bordering, x39)
    x42 = compose(x41, initset)
    x43 = lbind(contained, THREE)
    x44 = rbind(toobject, x39)
    x45 = chain(x43, palette, x44)
    x46 = compose(x45, dneighbors)
    x47 = fork(both, x46, x42)
    x48 = sfilter(x40, x47)
    O = fill(x39, THREE, x48)
    return O



def solve_d10ecb37_97a05b5b(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = rbind(greater, ONE)
    x6 = compose(x5, numcolors)
    x7 = sfilter(x2, x6)
    x8 = lbind(rbind, subtract)
    x9 = switch(x4, TWO, ZERO)
    x10 = lbind(occurrences, x9)
    x11 = lbind(lbind, shift)
    x12 = compose(x8, ulcorner)
    x13 = matcher(first, TWO)
    x14 = compose(flip, x13)
    x15 = rbind(sfilter, x13)
    x16 = rbind(sfilter, x14)
    x17 = lbind(recolor, ZERO)
    x18 = compose(x17, x16)
    x19 = fork(combine, x18, x15)
    x20 = chain(x12, x19, normalize)
    x21 = objects(x9, T, T, T)
    x22 = apply(toindices, x21)
    x23 = chain(x10, x19, normalize)
    x24 = rbind(colorcount, TWO)
    x25 = lbind(sfilter, x22)
    x26 = chain(size, first, x25)
    x27 = compose(positive, size)
    x28 = lbind(lbind, contained)
    x29 = chain(x27, x25, x28)
    x30 = compose(x26, x28)
    x31 = rbind(sfilter, x29)
    x32 = compose(x31, x23)
    x33 = lbind(rbind, equality)
    x34 = rbind(compose, x30)
    x35 = chain(x34, x33, x24)
    x36 = fork(sfilter, x32, x35)
    x37 = fork(apply, x20, x36)
    x38 = compose(x11, normalize)
    x39 = fork(mapply, x38, x37)
    x40 = astuple(cmirror, dmirror)
    x41 = astuple(hmirror, vmirror)
    x42 = combine(x40, x41)
    x43 = product(x42, x42)
    x44 = fork(compose, first, last)
    x45 = apply(x44, x43)
    x46 = lbind(rapply, x45)
    x47 = mapply(x46, x7)
    x48 = mapply(x39, x47)
    x49 = paint(x4, x48)
    x50 = palette(x48)
    x51 = lbind(remove, TWO)
    x52 = x51(x50)
    x53 = chain(first, x51, palette)
    x54 = rbind(contained, x52)
    x55 = chain(flip, x54, x53)
    x56 = sfilter(x7, x55)
    x57 = fork(apply, x20, x23)
    x58 = fork(mapply, x38, x57)
    x59 = mapply(x46, x56)
    x60 = mapply(x58, x59)
    O = paint(x49, x60)
    return O



def solve_d10ecb37_3e980e27(I):
    x1 = crop(I, ORIGIN, TWO_BY_TWO)
    x2 = objects(x1, F, T, T)
    x3 = astuple(TEN, TEN)
    x4 = invert(x3)
    x5 = astuple(TWO, x4)
    x6 = astuple(THREE, x4)
    x7 = initset(x5)
    x8 = insert(x6, x7)
    x9 = insert(x8, x2)
    x10 = lbind(contained, TWO)
    x11 = lbind(contained, THREE)
    x12 = compose(invert, ulcorner)
    x13 = lbind(compose, x12)
    x14 = lbind(rbind, sfilter)
    x15 = compose(x13, x14)
    x16 = rbind(compose, center)
    x17 = lbind(lbind, shift)
    x18 = x15(x10)
    x19 = x15(x11)
    x20 = fork(shift, identity, x18)
    x21 = fork(shift, identity, x19)
    x22 = compose(x10, palette)
    x23 = compose(x11, palette)
    x24 = sfilter(x9, x22)
    x25 = argmax(x24, size)
    x26 = remove(x25, x24)
    x27 = vmirror(x25)
    x28 = chain(x16, x17, x20)
    x29 = x28(x27)
    x30 = mapply(x29, x26)
    x31 = sfilter(x9, x23)
    x32 = argmax(x31, size)
    x33 = remove(x32, x31)
    x34 = chain(x16, x17, x21)
    x35 = x34(x32)
    x36 = mapply(x35, x33)
    x37 = combine(x30, x36)
    O = paint(x1, x37)
    return O



def solve_d511f180_67a3c6ac(I):
    x1 = switch(I, FIVE, EIGHT)
    O = vmirror(x1)
    return O



def solve_d511f180_68b16354(I):
    x1 = switch(I, FIVE, EIGHT)
    O = hmirror(x1)
    return O



def solve_d511f180_74dd1130(I):
    x1 = switch(I, FIVE, EIGHT)
    O = dmirror(x1)
    return O



def solve_d511f180_3c9b0459(I):
    x1 = switch(I, FIVE, EIGHT)
    O = rot180(x1)
    return O



def solve_d511f180_6150a2bd(I):
    x1 = switch(I, FIVE, EIGHT)
    O = rot180(x1)
    return O



def solve_d511f180_9172f3a0(I):
    x1 = switch(I, FIVE, EIGHT)
    O = upscale(x1, THREE)
    return O



def solve_d511f180_9dfd6313(I):
    x1 = switch(I, FIVE, EIGHT)
    O = dmirror(x1)
    return O



def solve_d511f180_a416b8f3(I):
    x1 = switch(I, FIVE, EIGHT)
    O = hconcat(x1, x1)
    return O



def solve_d511f180_b1948b0a(I):
    x1 = switch(I, FIVE, EIGHT)
    O = replace(x1, SIX, TWO)
    return O



def solve_d511f180_c59eb873(I):
    x1 = switch(I, FIVE, EIGHT)
    O = upscale(x1, TWO)
    return O



def solve_d511f180_c8f0f002(I):
    x1 = switch(I, FIVE, EIGHT)
    O = replace(x1, SEVEN, FIVE)
    return O



def solve_d511f180_d10ecb37(I):
    x1 = switch(I, FIVE, EIGHT)
    O = crop(x1, ORIGIN, TWO_BY_TWO)
    return O



def solve_d511f180_ed36ccf7(I):
    x1 = switch(I, FIVE, EIGHT)
    O = rot270(x1)
    return O



def solve_d511f180_4c4377d9(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = hmirror(x1)
    O = vconcat(x2, x1)
    return O



def solve_d511f180_6d0aefbc(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_d511f180_6fa7a44f(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_d511f180_5614dbcf(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = replace(x1, FIVE, ZERO)
    O = downscale(x2, THREE)
    return O



def solve_d511f180_5bd6f4ac(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = tojvec(SIX)
    O = crop(x1, x2, THREE_BY_THREE)
    return O



def solve_d511f180_5582e5ca(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = mostcolor(x1)
    O = canvas(x2, THREE_BY_THREE)
    return O



def solve_d511f180_8be77c9e(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_d511f180_c9e6f938(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_d511f180_2dee498d(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = hsplit(x1, THREE)
    O = first(x2)
    return O



def solve_d511f180_1cf80156(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = subgrid(x3, x1)
    return O



def solve_d511f180_32597951(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, EIGHT)
    x3 = delta(x2)
    O = fill(x1, THREE, x3)
    return O



def solve_d511f180_25ff71a9(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = move(x1, x3, DOWN)
    return O



def solve_d511f180_0b148d64(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = partition(x1)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_d511f180_1f85a75f(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_d511f180_23b5c85d(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_d511f180_ac0a08a4(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = colorcount(x1, ZERO)
    x3 = subtract(NINE, x2)
    O = upscale(x1, x3)
    return O



def solve_d511f180_be94b721(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_d511f180_c909285e(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    O = subgrid(x3, x1)
    return O



def solve_d511f180_f25ffba3(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = bottomhalf(x1)
    x3 = hmirror(x2)
    O = vconcat(x3, x2)
    return O



def solve_d511f180_c1d99e64(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = frontiers(x1)
    x3 = merge(x2)
    O = fill(x1, TWO, x3)
    return O



def solve_d511f180_b91ae062(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    O = upscale(x1, x3)
    return O



def solve_d511f180_3aa6fb7a(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = mapply(corners, x2)
    O = underfill(x1, ONE, x3)
    return O



def solve_d511f180_7b7f7511(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = portrait(x1)
    x3 = branch(x2, tophalf, lefthalf)
    O = x3(x1)
    return O



def solve_d511f180_4258a5f9(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, FIVE)
    x3 = mapply(neighbors, x2)
    O = fill(x1, ONE, x3)
    return O



def solve_d511f180_2dc579da(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = vsplit(x1, TWO)
    x3 = rbind(hsplit, TWO)
    x4 = mapply(x3, x2)
    O = argmax(x4, numcolors)
    return O



def solve_d511f180_28bf18c6(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = hconcat(x4, x4)
    return O



def solve_d511f180_3af2c5a8(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_d511f180_44f52bb0(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = vmirror(x1)
    x3 = equality(x2, x1)
    x4 = branch(x3, ONE, SEVEN)
    O = canvas(x4, UNITY)
    return O



def solve_d511f180_62c24649(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_d511f180_67e8384a(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_d511f180_7468f01a(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = vmirror(x4)
    return O



def solve_d511f180_662c240a(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = vsplit(x1, THREE)
    x3 = fork(equality, dmirror, identity)
    x4 = compose(flip, x3)
    O = extract(x2, x4)
    return O



def solve_d511f180_42a50994(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = cover(x1, x4)
    return O



def solve_d511f180_56ff96f3(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = mapply(x3, x2)
    O = paint(x1, x4)
    return O



def solve_d511f180_50cb2852(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = compose(backdrop, inbox)
    x4 = mapply(x3, x2)
    O = fill(x1, EIGHT, x4)
    return O



def solve_d511f180_4347f46a(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = fork(difference, toindices, box)
    x4 = mapply(x3, x2)
    O = fill(x1, ZERO, x4)
    return O



def solve_d511f180_46f33fce(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = rot180(x1)
    x3 = downscale(x2, TWO)
    x4 = rot180(x3)
    O = upscale(x4, FOUR)
    return O



def solve_d511f180_a740d043(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    O = replace(x4, ONE, ZERO)
    return O



def solve_d511f180_a79310a0(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = move(x1, x3, DOWN)
    O = replace(x4, EIGHT, TWO)
    return O



def solve_d511f180_aabf363d(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, ZERO)
    x4 = leastcolor(x3)
    O = replace(x3, x4, x2)
    return O



def solve_d511f180_ae4f1146(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, F, F, T)
    x3 = rbind(colorcount, ONE)
    x4 = argmax(x2, x3)
    O = subgrid(x4, x1)
    return O



def solve_d511f180_b27ca6d3(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, THREE, x4)
    return O



def solve_d511f180_ce22a75a(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = mapply(backdrop, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_d511f180_dc1df850(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_d511f180_f25fbde4(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = upscale(x4, TWO)
    return O



def solve_d511f180_44d8ac46(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = apply(delta, x2)
    x4 = mfilter(x3, square)
    O = fill(x1, TWO, x4)
    return O



def solve_d511f180_1e0a9b12(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = apply(x3, x2)
    O = rot90(x4)
    return O



def solve_d511f180_0d3d703e(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = switch(x1, THREE, FOUR)
    x3 = switch(x2, EIGHT, NINE)
    x4 = switch(x3, TWO, SIX)
    O = switch(x4, ONE, FIVE)
    return O



def solve_d511f180_3618c87e(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = move(x1, x4, TWO_BY_ZERO)
    return O



def solve_d511f180_1c786137(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, height)
    x4 = subgrid(x3, x1)
    O = trim(x4)
    return O



def solve_d511f180_445eab21(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = fork(multiply, height, width)
    x4 = argmax(x2, x3)
    x5 = color(x4)
    O = canvas(x5, TWO_BY_TWO)
    return O



def solve_d511f180_6f8cd79b(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = asindices(x1)
    x3 = apply(initset, x2)
    x4 = rbind(bordering, x1)
    x5 = mfilter(x3, x4)
    O = fill(x1, EIGHT, x5)
    return O



def solve_d511f180_2013d3e2(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = lefthalf(x4)
    O = tophalf(x5)
    return O



def solve_d511f180_41e4d17e(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = mapply(x4, x2)
    O = underfill(x1, SIX, x5)
    return O



def solve_d511f180_9565186b(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = shape(x1)
    x3 = objects(x1, T, F, F)
    x4 = argmax(x3, size)
    x5 = canvas(FIVE, x2)
    O = paint(x5, x4)
    return O



def solve_d511f180_aedd82e4(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, TWO)
    x4 = sizefilter(x3, ONE)
    x5 = merge(x4)
    O = fill(x1, ONE, x5)
    return O



def solve_d511f180_bb43febb(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, FIVE)
    x4 = compose(backdrop, inbox)
    x5 = mapply(x4, x3)
    O = fill(x1, TWO, x5)
    return O



def solve_d511f180_e98196ab(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = objects(x2, T, F, T)
    x5 = merge(x4)
    O = paint(x3, x5)
    return O



def solve_d511f180_f76d97a5(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = palette(x1)
    x3 = first(x2)
    x4 = last(x2)
    x5 = switch(x1, x3, x4)
    O = replace(x5, FIVE, ZERO)
    return O



def solve_d511f180_ce9e57f2(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = fork(connect, ulcorner, centerofmass)
    x4 = mapply(x3, x2)
    x5 = fill(x1, EIGHT, x4)
    O = switch(x5, EIGHT, TWO)
    return O



def solve_d511f180_22eb0ac0(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    O = paint(x1, x5)
    return O



def solve_d511f180_9f236235(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = compress(x1)
    x3 = objects(x1, T, F, F)
    x4 = vmirror(x2)
    x5 = valmin(x3, width)
    O = downscale(x4, x5)
    return O



def solve_d511f180_a699fb00(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, RIGHT)
    x4 = shift(x2, LEFT)
    x5 = intersection(x3, x4)
    O = fill(x1, TWO, x5)
    return O



def solve_d511f180_46442a0e(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_d511f180_7fe24cdd(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_d511f180_0ca9ddb6(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, ONE)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x3)
    x6 = fill(x1, SEVEN, x4)
    O = fill(x6, FOUR, x5)
    return O



def solve_d511f180_543a7ed5(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, SIX)
    x4 = mapply(outbox, x3)
    x5 = fill(x1, THREE, x4)
    x6 = mapply(delta, x3)
    O = fill(x5, FOUR, x6)
    return O



def solve_d511f180_0520fde7(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = vmirror(x1)
    x3 = lefthalf(x2)
    x4 = righthalf(x2)
    x5 = vmirror(x4)
    x6 = cellwise(x3, x5, ZERO)
    O = replace(x6, ONE, TWO)
    return O



def solve_d511f180_dae9d2b5(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, FOUR)
    x5 = ofcolor(x3, THREE)
    x6 = combine(x4, x5)
    O = fill(x2, SIX, x6)
    return O



def solve_d511f180_8d5021e8(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = vmirror(x1)
    x3 = hconcat(x2, x1)
    x4 = hmirror(x3)
    x5 = vconcat(x3, x4)
    x6 = vconcat(x5, x3)
    O = hmirror(x6)
    return O



def solve_d511f180_b60334d2(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, FIVE)
    x3 = replace(x1, FIVE, ZERO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x2)
    x6 = fill(x3, ONE, x4)
    O = fill(x6, FIVE, x5)
    return O



def solve_d511f180_b94a9452(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = leastcolor(x4)
    x6 = mostcolor(x4)
    O = switch(x4, x5, x6)
    return O



def solve_d511f180_d037b0a7(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, DOWN)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    O = paint(x1, x6)
    return O



def solve_d511f180_d0f5fe59(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = astuple(x3, x3)
    x5 = canvas(ZERO, x4)
    x6 = shoot(ORIGIN, UNITY)
    O = fill(x5, EIGHT, x6)
    return O



def solve_d511f180_e3497940(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = vmirror(x3)
    x5 = objects(x4, T, F, T)
    x6 = merge(x5)
    O = paint(x2, x6)
    return O



def solve_d511f180_e9afcf9a(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = astuple(TWO, ONE)
    x3 = crop(x1, ORIGIN, x2)
    x4 = hmirror(x3)
    x5 = hconcat(x3, x4)
    x6 = hconcat(x5, x5)
    O = hconcat(x6, x5)
    return O



def solve_d511f180_d406998b(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = vmirror(x1)
    x3 = ofcolor(x2, FIVE)
    x4 = compose(even, last)
    x5 = sfilter(x3, x4)
    x6 = fill(x2, THREE, x5)
    O = vmirror(x6)
    return O



def solve_d511f180_3906de3d(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = switch(x2, ONE, TWO)
    x5 = apply(x3, x4)
    x6 = switch(x5, ONE, TWO)
    O = cmirror(x6)
    return O



def solve_d511f180_00d62c1b(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, FOUR, x6)
    return O



def solve_d511f180_7b6016b9(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, F)
    x3 = rbind(bordering, x1)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x4)
    x6 = fill(x1, TWO, x5)
    O = replace(x6, ZERO, THREE)
    return O



def solve_d511f180_67385a82(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, THREE)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = merge(x5)
    O = fill(x1, EIGHT, x6)
    return O



def solve_d511f180_a5313dff(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, ONE, x6)
    return O



def solve_d511f180_ea32f347(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, FIVE, FOUR)
    x4 = argmin(x2, size)
    x5 = argmax(x2, size)
    x6 = fill(x3, ONE, x5)
    O = fill(x6, TWO, x4)
    return O



def solve_d511f180_d631b094(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = ofcolor(x1, x3)
    x5 = size(x4)
    x6 = astuple(ONE, x5)
    O = canvas(x3, x6)
    return O



def solve_d511f180_10fcaaa3(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = leastcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = vconcat(x3, x3)
    x5 = ofcolor(x4, x2)
    x6 = mapply(ineighbors, x5)
    O = underfill(x4, EIGHT, x6)
    return O



def solve_d511f180_007bbfb7(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = hupscale(x1, THREE)
    x3 = vupscale(x2, THREE)
    x4 = hconcat(x1, x1)
    x5 = hconcat(x4, x1)
    x6 = vconcat(x5, x5)
    x7 = vconcat(x6, x5)
    O = cellwise(x3, x7, ZERO)
    return O



def solve_d511f180_496994bd(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = width(x1)
    x3 = height(x1)
    x4 = halve(x3)
    x5 = astuple(x4, x2)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    O = vconcat(x6, x7)
    return O



def solve_d511f180_1f876c06(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = fgpartition(x1)
    x3 = compose(last, first)
    x4 = power(last, TWO)
    x5 = fork(connect, x3, x4)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_d511f180_39a8645d(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = matcher(color, x5)
    x7 = extract(x2, x6)
    O = subgrid(x7, x1)
    return O



def solve_d511f180_1b2d62fb(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = replace(x2, NINE, ZERO)
    O = fill(x7, EIGHT, x6)
    return O



def solve_d511f180_90c28cc7(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = dedupe(x4)
    x6 = rot90(x5)
    x7 = dedupe(x6)
    O = rot270(x7)
    return O



def solve_d511f180_b6afb2da(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, F)
    x3 = replace(x1, FIVE, TWO)
    x4 = colorfilter(x2, FIVE)
    x5 = mapply(box, x4)
    x6 = fill(x3, FOUR, x5)
    x7 = mapply(corners, x4)
    O = fill(x6, ONE, x7)
    return O



def solve_d511f180_b9b7f026(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, F)
    x3 = argmin(x2, size)
    x4 = rbind(adjacent, x3)
    x5 = remove(x3, x2)
    x6 = extract(x5, x4)
    x7 = color(x6)
    O = canvas(x7, UNITY)
    return O



def solve_d511f180_ba97ae07(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = ofcolor(x1, x5)
    x7 = backdrop(x6)
    O = fill(x1, x5, x7)
    return O



def solve_d511f180_c9f8e694(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = height(x1)
    x3 = width(x1)
    x4 = ofcolor(x1, ZERO)
    x5 = astuple(x2, ONE)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hupscale(x6, x3)
    O = fill(x7, ZERO, x4)
    return O



def solve_d511f180_d23f8c26(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = asindices(x1)
    x3 = width(x1)
    x4 = halve(x3)
    x5 = matcher(last, x4)
    x6 = compose(flip, x5)
    x7 = sfilter(x2, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_d511f180_d5d6de2d(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = sfilter(x2, square)
    x4 = difference(x2, x3)
    x5 = compose(backdrop, inbox)
    x6 = mapply(x5, x4)
    x7 = replace(x1, TWO, ZERO)
    O = fill(x7, THREE, x6)
    return O



def solve_d511f180_dbc1a6ce(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, ONE)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_d511f180_ded97339(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, EIGHT)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_d511f180_ea786f4a(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = width(x1)
    x3 = shoot(ORIGIN, UNITY)
    x4 = decrement(x2)
    x5 = tojvec(x4)
    x6 = shoot(x5, DOWN_LEFT)
    x7 = combine(x3, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_d511f180_08ed6ac7(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = order(x2, height)
    x5 = size(x3)
    x6 = interval(x5, ZERO, NEG_ONE)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_d511f180_40853293(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = partition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    x6 = mfilter(x4, vline)
    x7 = paint(x1, x5)
    O = paint(x7, x6)
    return O



def solve_d511f180_5521c0d9(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = cover(x1, x3)
    x5 = chain(toivec, invert, height)
    x6 = fork(shift, identity, x5)
    x7 = mapply(x6, x2)
    O = paint(x4, x7)
    return O



def solve_d511f180_f8ff0b80(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = rbind(canvas, UNITY)
    x6 = apply(x5, x4)
    x7 = merge(x6)
    O = hmirror(x7)
    return O



def solve_d511f180_85c4e7cd(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, F)
    x3 = compose(invert, size)
    x4 = order(x2, size)
    x5 = order(x2, x3)
    x6 = apply(color, x5)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_d511f180_d2abd087(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = matcher(size, SIX)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x3)
    x6 = mfilter(x2, x4)
    x7 = fill(x1, TWO, x5)
    O = fill(x7, ONE, x6)
    return O



def solve_d511f180_363442ee(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, ONE)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = asobject(x3)
    x5 = lbind(shift, x4)
    x6 = compose(x5, decrement)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_d511f180_5168d44c(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, THREE)
    x3 = height(x2)
    x4 = equality(x3, ONE)
    x5 = branch(x4, ZERO_BY_TWO, TWO_BY_ZERO)
    x6 = ofcolor(x1, TWO)
    x7 = recolor(TWO, x6)
    O = move(x1, x7, x5)
    return O



def solve_d511f180_d9fac9be(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = color(x4)
    x6 = remove(ZERO, x2)
    x7 = other(x6, x5)
    O = canvas(x7, UNITY)
    return O



def solve_d511f180_e50d258f(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = width(x1)
    x3 = astuple(NINE, x2)
    x4 = canvas(ZERO, x3)
    x5 = vconcat(x1, x4)
    x6 = objects(x5, F, F, T)
    x7 = rbind(colorcount, TWO)
    x8 = argmax(x6, x7)
    O = subgrid(x8, x1)
    return O



def solve_d511f180_810b9b61(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = apply(toindices, x2)
    x4 = fork(either, vline, hline)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = fork(equality, identity, box)
    x8 = mfilter(x6, x7)
    O = fill(x1, THREE, x8)
    return O



def solve_d511f180_54d82841(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = height(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(last, center)
    x5 = apply(x4, x3)
    x6 = decrement(x2)
    x7 = lbind(astuple, x6)
    x8 = apply(x7, x5)
    O = fill(x1, FOUR, x8)
    return O



def solve_d511f180_60b61512(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = mapply(delta, x2)
    O = fill(x1, SEVEN, x3)
    return O



def solve_d511f180_25d8a9c8(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, THREE)
    x5 = mfilter(x4, hline)
    x6 = toindices(x5)
    x7 = difference(x2, x6)
    x8 = fill(x1, FIVE, x6)
    O = fill(x8, ZERO, x7)
    return O



def solve_d511f180_239be575(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, F, T, T)
    x3 = lbind(contained, TWO)
    x4 = compose(x3, palette)
    x5 = sfilter(x2, x4)
    x6 = size(x5)
    x7 = greater(x6, ONE)
    x8 = branch(x7, ZERO, EIGHT)
    O = canvas(x8, UNITY)
    return O



def solve_d511f180_6430c8c4(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(FOUR, FOUR)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, THREE, x7)
    return O



def solve_d511f180_94f9d214(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = astuple(FOUR, FOUR)
    x7 = canvas(ZERO, x6)
    x8 = intersection(x4, x5)
    O = fill(x7, TWO, x8)
    return O



def solve_d511f180_ce4f8723(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = astuple(FOUR, FOUR)
    x8 = canvas(THREE, x7)
    O = fill(x8, ZERO, x6)
    return O



def solve_d511f180_d13f3404(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, UNITY)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = astuple(SIX, SIX)
    x8 = canvas(ZERO, x7)
    O = paint(x8, x6)
    return O



def solve_d511f180_f2829549(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = shape(x2)
    x8 = canvas(ZERO, x7)
    O = fill(x8, THREE, x6)
    return O



def solve_d511f180_fafffa47(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = shape(x3)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, TWO, x7)
    return O



def solve_d511f180_fcb5c309(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = colorfilter(x3, x2)
    x5 = difference(x3, x4)
    x6 = argmax(x5, size)
    x7 = color(x6)
    x8 = subgrid(x6, x1)
    O = replace(x8, x7, x2)
    return O



def solve_d511f180_e76a88a6(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, F, F, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = remove(x3, x2)
    x6 = apply(ulcorner, x5)
    x7 = lbind(shift, x4)
    x8 = mapply(x7, x6)
    O = paint(x1, x8)
    return O



def solve_d511f180_7c008303(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, THREE)
    x3 = subgrid(x2, x1)
    x4 = ofcolor(x3, ZERO)
    x5 = replace(x1, THREE, ZERO)
    x6 = replace(x5, EIGHT, ZERO)
    x7 = compress(x6)
    x8 = upscale(x7, THREE)
    O = fill(x8, ZERO, x4)
    return O



def solve_d511f180_7f4411dc(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = rbind(difference, x3)
    x5 = rbind(greater, TWO)
    x6 = chain(x5, size, x4)
    x7 = compose(x6, dneighbors)
    x8 = sfilter(x3, x7)
    O = fill(x1, ZERO, x8)
    return O



def solve_d511f180_b230c067(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(normalize, x3)
    x5 = leastcommon(x4)
    x6 = matcher(normalize, x5)
    x7 = extract(x2, x6)
    x8 = replace(x1, EIGHT, ONE)
    O = fill(x8, TWO, x7)
    return O



def solve_d511f180_e8593010(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = sizefilter(x2, TWO)
    x5 = merge(x3)
    x6 = fill(x1, THREE, x5)
    x7 = merge(x4)
    x8 = fill(x6, TWO, x7)
    O = replace(x8, ZERO, ONE)
    return O



def solve_d511f180_6d75e8bb(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = ulcorner(x3)
    x5 = subgrid(x3, x1)
    x6 = replace(x5, ZERO, TWO)
    x7 = asobject(x6)
    x8 = shift(x7, x4)
    O = paint(x1, x8)
    return O



def solve_d511f180_1190e5a7(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = mostcolor(x1)
    x3 = frontiers(x1)
    x4 = sfilter(x3, vline)
    x5 = difference(x3, x4)
    x6 = astuple(x5, x4)
    x7 = apply(size, x6)
    x8 = increment(x7)
    O = canvas(x2, x8)
    return O



def solve_d511f180_6e02f1e3(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = numcolors(x1)
    x3 = canvas(ZERO, THREE_BY_THREE)
    x4 = equality(x2, THREE)
    x5 = equality(x2, TWO)
    x6 = branch(x4, TWO_BY_ZERO, ORIGIN)
    x7 = branch(x5, TWO_BY_TWO, ZERO_BY_TWO)
    x8 = connect(x6, x7)
    O = fill(x3, FIVE, x8)
    return O



def solve_d511f180_a61f2674(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = replace(x1, FIVE, ZERO)
    x6 = recolor(ONE, x3)
    x7 = recolor(TWO, x4)
    x8 = combine(x6, x7)
    O = paint(x5, x8)
    return O



def solve_d511f180_fcc82909(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, F, T, T)
    x3 = rbind(add, DOWN)
    x4 = compose(x3, llcorner)
    x5 = compose(toivec, numcolors)
    x6 = fork(add, lrcorner, x5)
    x7 = fork(astuple, x4, x6)
    x8 = compose(box, x7)
    x9 = mapply(x8, x2)
    O = fill(x1, THREE, x9)
    return O



def solve_d511f180_72ca375d(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = rbind(subgrid, x1)
    x5 = apply(x4, x3)
    x6 = apply(vmirror, x5)
    x7 = papply(equality, x5, x6)
    x8 = pair(x5, x7)
    x9 = extract(x8, last)
    O = first(x9)
    return O



def solve_d511f180_253bf280(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, EIGHT)
    x3 = prapply(connect, x2, x2)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = fork(either, vline, hline)
    x8 = mfilter(x6, x7)
    x9 = fill(x1, THREE, x8)
    O = fill(x9, EIGHT, x2)
    return O



def solve_d511f180_1f642eb9(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = rbind(gravitate, x5)
    x7 = compose(crement, x6)
    x8 = fork(shift, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_d511f180_31aa019c(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = first(x3)
    x5 = neighbors(x4)
    x6 = astuple(TEN, TEN)
    x7 = canvas(ZERO, x6)
    x8 = initset(x4)
    x9 = fill(x7, x2, x8)
    O = fill(x9, TWO, x5)
    return O



def solve_d511f180_27a28665(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, F)
    x3 = valmax(x2, size)
    x4 = equality(x3, ONE)
    x5 = equality(x3, FOUR)
    x6 = equality(x3, FIVE)
    x7 = branch(x4, TWO, ONE)
    x8 = branch(x5, THREE, x7)
    x9 = branch(x6, SIX, x8)
    O = canvas(x9, UNITY)
    return O



def solve_d511f180_7ddcd7ec(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = color(x5)
    x7 = lbind(position, x5)
    x8 = fork(shoot, center, x7)
    x9 = mapply(x8, x3)
    O = fill(x1, x6, x9)
    return O



def solve_d511f180_3bd67248(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = height(x1)
    x3 = decrement(x2)
    x4 = decrement(x3)
    x5 = astuple(x4, ONE)
    x6 = astuple(x3, ONE)
    x7 = shoot(x5, UP_RIGHT)
    x8 = shoot(x6, RIGHT)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_d511f180_73251a56(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = dmirror(x1)
    x3 = papply(pair, x1, x2)
    x4 = lbind(apply, maximum)
    x5 = apply(x4, x3)
    x6 = mostcolor(x5)
    x7 = replace(x5, ZERO, x6)
    x8 = index(x7, ORIGIN)
    x9 = shoot(ORIGIN, UNITY)
    O = fill(x7, x8, x9)
    return O



def solve_d511f180_25d487eb(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = ofcolor(x1, x2)
    x5 = center(x4)
    x6 = merge(x3)
    x7 = center(x6)
    x8 = subtract(x7, x5)
    x9 = shoot(x5, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_d511f180_8f2ea7aa(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    O = cellwise(x5, x9, ZERO)
    return O



def solve_d511f180_b8825c91(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = replace(x1, FOUR, ZERO)
    x3 = dmirror(x2)
    x4 = papply(pair, x2, x3)
    x5 = lbind(apply, maximum)
    x6 = apply(x5, x4)
    x7 = cmirror(x6)
    x8 = papply(pair, x6, x7)
    x9 = apply(x5, x8)
    O = cmirror(x9)
    return O



def solve_d511f180_cce03e0d(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = upscale(x1, THREE)
    x3 = hconcat(x1, x1)
    x4 = hconcat(x3, x1)
    x5 = vconcat(x4, x4)
    x6 = vconcat(x5, x4)
    x7 = ofcolor(x2, ZERO)
    x8 = ofcolor(x2, ONE)
    x9 = combine(x7, x8)
    O = fill(x6, ZERO, x9)
    return O



def solve_d511f180_d364b489(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, DOWN)
    x4 = fill(x1, EIGHT, x3)
    x5 = shift(x2, UP)
    x6 = fill(x4, TWO, x5)
    x7 = shift(x2, RIGHT)
    x8 = fill(x6, SIX, x7)
    x9 = shift(x2, LEFT)
    O = fill(x8, SEVEN, x9)
    return O



def solve_d511f180_a5f85a15(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = interval(ONE, NINE, ONE)
    x4 = apply(double, x3)
    x5 = apply(decrement, x4)
    x6 = papply(astuple, x5, x5)
    x7 = apply(ulcorner, x2)
    x8 = lbind(shift, x6)
    x9 = mapply(x8, x7)
    O = fill(x1, FOUR, x9)
    return O



def solve_d511f180_3ac3eb23(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = chain(ineighbors, last, first)
    x4 = fork(recolor, color, x3)
    x5 = mapply(x4, x2)
    x6 = paint(x1, x5)
    x7 = vsplit(x6, THREE)
    x8 = first(x7)
    x9 = vconcat(x8, x8)
    O = vconcat(x8, x9)
    return O



def solve_d511f180_22168020(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = palette(x1)
    x3 = remove(ZERO, x2)
    x4 = lbind(ofcolor, x1)
    x5 = lbind(prapply, connect)
    x6 = fork(x5, x4, x4)
    x7 = compose(merge, x6)
    x8 = fork(recolor, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_d511f180_6e82a1ae(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sizefilter, x2)
    x4 = compose(merge, x3)
    x5 = x4(TWO)
    x6 = x4(THREE)
    x7 = x4(FOUR)
    x8 = fill(x1, THREE, x5)
    x9 = fill(x8, TWO, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_d511f180_868de0fa(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, F)
    x3 = sfilter(x2, square)
    x4 = compose(even, height)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = merge(x5)
    x8 = merge(x6)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, SEVEN, x8)
    return O



def solve_d511f180_681b3aeb(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = rot270(x1)
    x3 = objects(x2, T, F, T)
    x4 = argmax(x3, size)
    x5 = argmin(x3, size)
    x6 = color(x5)
    x7 = canvas(x6, THREE_BY_THREE)
    x8 = normalize(x4)
    x9 = paint(x7, x8)
    O = rot90(x9)
    return O



def solve_d511f180_8e5a5113(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = rot90(x2)
    x4 = rot180(x2)
    x5 = astuple(x3, x4)
    x6 = astuple(FOUR, EIGHT)
    x7 = apply(tojvec, x6)
    x8 = apply(asobject, x5)
    x9 = mpapply(shift, x8, x7)
    O = paint(x1, x9)
    return O



def solve_d511f180_025d127b(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = apply(color, x2)
    x4 = merge(x2)
    x5 = lbind(colorfilter, x2)
    x6 = rbind(argmax, rightmost)
    x7 = compose(x6, x5)
    x8 = mapply(x7, x3)
    x9 = difference(x4, x8)
    O = move(x1, x9, RIGHT)
    return O



def solve_d511f180_2281f1f4(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, FIVE)
    x3 = product(x2, x2)
    x4 = power(first, TWO)
    x5 = power(last, TWO)
    x6 = fork(astuple, x4, x5)
    x7 = apply(x6, x3)
    x8 = urcorner(x2)
    x9 = remove(x8, x7)
    O = underfill(x1, TWO, x9)
    return O



def solve_d511f180_cf98881b(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = hsplit(x1, THREE)
    x3 = first(x2)
    x4 = remove(x3, x2)
    x5 = first(x4)
    x6 = last(x4)
    x7 = ofcolor(x5, NINE)
    x8 = ofcolor(x3, FOUR)
    x9 = fill(x6, NINE, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_d511f180_bda2d7a6(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = partition(x1)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = last(x3)
    x6 = remove(x5, x3)
    x7 = repeat(x5, ONE)
    x8 = combine(x7, x6)
    x9 = mpapply(recolor, x4, x8)
    O = paint(x1, x9)
    return O



def solve_d511f180_6455b5f5(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = argmax(x2, size)
    x5 = valmin(x2, size)
    x6 = sizefilter(x3, x5)
    x7 = recolor(ONE, x4)
    x8 = merge(x6)
    x9 = paint(x1, x7)
    O = fill(x9, EIGHT, x8)
    return O



def solve_d511f180_b8cdaf2b(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = shift(x3, UP)
    x5 = ulcorner(x4)
    x6 = urcorner(x4)
    x7 = shoot(x5, NEG_UNITY)
    x8 = shoot(x6, UP_RIGHT)
    x9 = combine(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_d511f180_bd4472b8(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = width(x1)
    x3 = astuple(TWO, x2)
    x4 = crop(x1, ORIGIN, x3)
    x5 = tophalf(x4)
    x6 = dmirror(x5)
    x7 = hupscale(x6, x2)
    x8 = repeat(x7, TWO)
    x9 = merge(x8)
    O = vconcat(x4, x9)
    return O



def solve_d511f180_4be741c5(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = branch(x2, height, width)
    x5 = x4(x1)
    x6 = astuple(ONE, x5)
    x7 = x3(x1)
    x8 = crop(x7, ORIGIN, x6)
    x9 = apply(dedupe, x8)
    O = x3(x9)
    return O



def solve_d511f180_bbc9ae5d(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = width(x1)
    x3 = palette(x1)
    x4 = halve(x2)
    x5 = vupscale(x1, x4)
    x6 = rbind(shoot, UNITY)
    x7 = other(x3, ZERO)
    x8 = ofcolor(x5, x7)
    x9 = mapply(x6, x8)
    O = fill(x5, x7, x9)
    return O



def solve_d511f180_d90796e8(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, F, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = lbind(contained, TWO)
    x5 = compose(x4, palette)
    x6 = mfilter(x3, x5)
    x7 = cover(x1, x6)
    x8 = matcher(first, THREE)
    x9 = sfilter(x6, x8)
    O = fill(x7, EIGHT, x9)
    return O



def solve_d511f180_2c608aff(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = toindices(x4)
    x6 = ofcolor(x1, x2)
    x7 = prapply(connect, x5, x6)
    x8 = fork(either, vline, hline)
    x9 = mfilter(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_d511f180_f8b3ba0a(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = compress(x1)
    x3 = astuple(THREE, ONE)
    x4 = palette(x2)
    x5 = lbind(colorcount, x2)
    x6 = compose(invert, x5)
    x7 = order(x4, x6)
    x8 = rbind(canvas, UNITY)
    x9 = apply(x8, x7)
    x10 = merge(x9)
    O = crop(x10, DOWN, x3)
    return O



def solve_d511f180_80af3007(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    x10 = cellwise(x5, x9, ZERO)
    O = downscale(x10, THREE)
    return O



def solve_d511f180_83302e8f(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = sfilter(x3, square)
    x5 = difference(x3, x4)
    x6 = merge(x4)
    x7 = recolor(THREE, x6)
    x8 = merge(x5)
    x9 = recolor(FOUR, x8)
    x10 = paint(x1, x7)
    O = paint(x10, x9)
    return O



def solve_d511f180_1fad071e(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, ONE)
    x4 = sizefilter(x3, FOUR)
    x5 = size(x4)
    x6 = subtract(FIVE, x5)
    x7 = astuple(ONE, x5)
    x8 = canvas(ONE, x7)
    x9 = astuple(ONE, x6)
    x10 = canvas(ZERO, x9)
    O = hconcat(x8, x10)
    return O



def solve_d511f180_11852cab(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = hmirror(x3)
    x5 = vmirror(x3)
    x6 = dmirror(x3)
    x7 = cmirror(x3)
    x8 = paint(x1, x4)
    x9 = paint(x8, x5)
    x10 = paint(x9, x6)
    O = paint(x10, x7)
    return O



def solve_d511f180_3428a4f5(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(SIX, FIVE)
    x5 = ofcolor(x2, TWO)
    x6 = ofcolor(x3, TWO)
    x7 = combine(x5, x6)
    x8 = intersection(x5, x6)
    x9 = difference(x7, x8)
    x10 = canvas(ZERO, x4)
    O = fill(x10, THREE, x9)
    return O



def solve_d511f180_178fcbfb(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(vfrontier, x3)
    x5 = fill(x1, TWO, x4)
    x6 = colorfilter(x2, TWO)
    x7 = difference(x2, x6)
    x8 = compose(hfrontier, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x7)
    O = paint(x5, x10)
    return O



def solve_d511f180_54d9e175(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = compose(neighbors, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x3)
    x7 = paint(x1, x6)
    x8 = replace(x7, ONE, SIX)
    x9 = replace(x8, TWO, SEVEN)
    x10 = replace(x9, THREE, EIGHT)
    O = replace(x10, FOUR, NINE)
    return O



def solve_d511f180_623ea044(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = center(x3)
    x5 = color(x3)
    x6 = astuple(UNITY, NEG_UNITY)
    x7 = astuple(UP_RIGHT, DOWN_LEFT)
    x8 = combine(x6, x7)
    x9 = lbind(shoot, x4)
    x10 = mapply(x9, x8)
    O = fill(x1, x5, x10)
    return O



def solve_d511f180_794b24be(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, ONE)
    x3 = size(x2)
    x4 = decrement(x3)
    x5 = canvas(ZERO, THREE_BY_THREE)
    x6 = tojvec(x4)
    x7 = connect(ORIGIN, x6)
    x8 = equality(x3, FOUR)
    x9 = insert(UNITY, x7)
    x10 = branch(x8, x9, x7)
    O = fill(x5, TWO, x10)
    return O



def solve_d511f180_88a62173(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = tophalf(x3)
    x6 = bottomhalf(x2)
    x7 = bottomhalf(x3)
    x8 = astuple(x4, x5)
    x9 = astuple(x6, x7)
    x10 = combine(x8, x9)
    O = leastcommon(x10)
    return O



def solve_d511f180_890034e9(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = inbox(x3)
    x5 = recolor(ZERO, x4)
    x6 = occurrences(x1, x5)
    x7 = normalize(x3)
    x8 = shift(x7, NEG_UNITY)
    x9 = lbind(shift, x8)
    x10 = mapply(x9, x6)
    O = fill(x1, x2, x10)
    return O



def solve_d511f180_99b1bc43(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = combine(x4, x5)
    x7 = intersection(x4, x5)
    x8 = difference(x6, x7)
    x9 = shape(x2)
    x10 = canvas(ZERO, x9)
    O = fill(x10, THREE, x8)
    return O



def solve_d511f180_a9f96cdd(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = shift(x2, NEG_UNITY)
    x5 = fill(x3, THREE, x4)
    x6 = shift(x2, UP_RIGHT)
    x7 = fill(x5, SIX, x6)
    x8 = shift(x2, DOWN_LEFT)
    x9 = fill(x7, EIGHT, x8)
    x10 = shift(x2, UNITY)
    O = fill(x9, SEVEN, x10)
    return O



def solve_d511f180_af902bf9(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, FOUR)
    x3 = prapply(connect, x2, x2)
    x4 = fork(either, vline, hline)
    x5 = mfilter(x3, x4)
    x6 = underfill(x1, NEG_ONE, x5)
    x7 = objects(x6, F, F, T)
    x8 = compose(backdrop, inbox)
    x9 = mapply(x8, x7)
    x10 = fill(x6, TWO, x9)
    O = replace(x10, NEG_ONE, ZERO)
    return O



def solve_d511f180_b548a754(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, EIGHT, ZERO)
    x4 = leastcolor(x3)
    x5 = replace(x3, x4, ZERO)
    x6 = leastcolor(x5)
    x7 = merge(x2)
    x8 = backdrop(x7)
    x9 = box(x7)
    x10 = fill(x1, x4, x8)
    O = fill(x10, x6, x9)
    return O



def solve_d511f180_c3e719e8(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = mostcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = upscale(x1, THREE)
    x5 = ofcolor(x4, x2)
    x6 = asindices(x4)
    x7 = difference(x6, x5)
    x8 = hconcat(x3, x1)
    x9 = vconcat(x8, x8)
    x10 = vconcat(x9, x8)
    O = fill(x10, ZERO, x7)
    return O



def solve_d511f180_de1cd16c(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = rbind(subgrid, x1)
    x7 = apply(x6, x5)
    x8 = rbind(colorcount, x2)
    x9 = argmax(x7, x8)
    x10 = mostcolor(x9)
    O = canvas(x10, UNITY)
    return O



def solve_d511f180_d8c310e9(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = hperiod(x3)
    x5 = multiply(x4, THREE)
    x6 = tojvec(x4)
    x7 = tojvec(x5)
    x8 = shift(x3, x6)
    x9 = shift(x3, x7)
    x10 = paint(x1, x8)
    O = paint(x10, x9)
    return O



def solve_d511f180_a3325580(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = valmax(x2, size)
    x4 = sizefilter(x2, x3)
    x5 = order(x4, leftmost)
    x6 = apply(color, x5)
    x7 = astuple(ONE, x3)
    x8 = rbind(canvas, x7)
    x9 = apply(x8, x6)
    x10 = merge(x9)
    O = dmirror(x10)
    return O



def solve_d511f180_8eb1be9a(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = interval(NEG_TWO, FOUR, ONE)
    x5 = lbind(shift, x3)
    x6 = height(x3)
    x7 = rbind(multiply, x6)
    x8 = apply(x7, x4)
    x9 = apply(toivec, x8)
    x10 = mapply(x5, x9)
    O = paint(x1, x10)
    return O



def solve_d511f180_1b60fb0c(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = rot90(x1)
    x3 = ofcolor(x1, ONE)
    x4 = ofcolor(x2, ONE)
    x5 = neighbors(ORIGIN)
    x6 = mapply(neighbors, x5)
    x7 = lbind(shift, x4)
    x8 = apply(x7, x6)
    x9 = lbind(intersection, x3)
    x10 = compose(size, x9)
    x11 = argmax(x8, x10)
    O = underfill(x1, TWO, x11)
    return O



def solve_d511f180_ddf7fa4f(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = colorfilter(x2, FIVE)
    x5 = product(x3, x4)
    x6 = fork(vmatching, first, last)
    x7 = sfilter(x5, x6)
    x8 = compose(color, first)
    x9 = fork(recolor, x8, last)
    x10 = mapply(x9, x7)
    O = paint(x1, x10)
    return O



def solve_d511f180_47c1f68c(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = leastcolor(x1)
    x3 = vmirror(x1)
    x4 = objects(x1, T, T, T)
    x5 = merge(x4)
    x6 = mostcolor(x5)
    x7 = cellwise(x1, x3, x2)
    x8 = hmirror(x7)
    x9 = cellwise(x7, x8, x2)
    x10 = compress(x9)
    O = replace(x10, x2, x6)
    return O



def solve_d511f180_6c434453(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, EIGHT)
    x4 = dneighbors(UNITY)
    x5 = insert(UNITY, x4)
    x6 = merge(x3)
    x7 = cover(x1, x6)
    x8 = apply(ulcorner, x3)
    x9 = lbind(shift, x5)
    x10 = mapply(x9, x8)
    O = fill(x7, TWO, x10)
    return O



def solve_d511f180_23581191(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = paint(x1, x6)
    x8 = fork(intersection, first, last)
    x9 = apply(x4, x2)
    x10 = x8(x9)
    O = fill(x7, TWO, x10)
    return O



def solve_d511f180_c8cbb738(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = mostcolor(x1)
    x3 = fgpartition(x1)
    x4 = valmax(x3, shape)
    x5 = canvas(x2, x4)
    x6 = apply(normalize, x3)
    x7 = lbind(subtract, x4)
    x8 = chain(halve, x7, shape)
    x9 = fork(shift, identity, x8)
    x10 = mapply(x9, x6)
    O = paint(x5, x10)
    return O



def solve_d511f180_dc0a314f(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, THREE)
    x3 = replace(x1, THREE, ZERO)
    x4 = dmirror(x3)
    x5 = papply(pair, x3, x4)
    x6 = lbind(apply, maximum)
    x7 = apply(x6, x5)
    x8 = cmirror(x7)
    x9 = papply(pair, x7, x8)
    x10 = apply(x6, x9)
    O = subgrid(x2, x10)
    return O



def solve_d511f180_d4469b4b(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = equality(x3, ONE)
    x5 = equality(x3, TWO)
    x6 = branch(x4, UNITY, TWO_BY_TWO)
    x7 = branch(x5, RIGHT, x6)
    x8 = fork(combine, vfrontier, hfrontier)
    x9 = x8(x7)
    x10 = canvas(ZERO, THREE_BY_THREE)
    O = fill(x10, FIVE, x9)
    return O



def solve_d511f180_6ecd11f4(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = subgrid(x3, x1)
    x6 = subgrid(x4, x1)
    x7 = width(x5)
    x8 = width(x6)
    x9 = divide(x7, x8)
    x10 = downscale(x5, x9)
    x11 = ofcolor(x10, ZERO)
    O = fill(x6, ZERO, x11)
    return O



def solve_d511f180_eb281b96(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = height(x1)
    x3 = width(x1)
    x4 = decrement(x2)
    x5 = astuple(x4, x3)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    x8 = vconcat(x1, x7)
    x9 = double(x4)
    x10 = astuple(x9, x3)
    x11 = crop(x8, DOWN, x10)
    O = vconcat(x8, x11)
    return O



def solve_d511f180_ff28f65a(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = double(x3)
    x5 = interval(ZERO, x4, TWO)
    x6 = apply(tojvec, x5)
    x7 = astuple(ONE, NINE)
    x8 = canvas(ZERO, x7)
    x9 = fill(x8, ONE, x6)
    x10 = hsplit(x9, THREE)
    O = merge(x10)
    return O



def solve_d511f180_7e0986d6(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = replace(x1, x2, ZERO)
    x5 = leastcolor(x4)
    x6 = rbind(colorcount, x5)
    x7 = chain(positive, decrement, x6)
    x8 = rbind(toobject, x4)
    x9 = chain(x7, x8, dneighbors)
    x10 = sfilter(x3, x9)
    O = fill(x4, x5, x10)
    return O



def solve_d511f180_09629e4f(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, F, T, T)
    x3 = argmin(x2, numcolors)
    x4 = normalize(x3)
    x5 = upscale(x4, FOUR)
    x6 = paint(x1, x5)
    x7 = ofcolor(x1, FIVE)
    O = fill(x6, FIVE, x7)
    return O



def solve_d511f180_a85d4709(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, FIVE)
    x3 = lbind(matcher, last)
    x4 = lbind(sfilter, x2)
    x5 = lbind(mapply, hfrontier)
    x6 = chain(x5, x4, x3)
    x7 = x6(ZERO)
    x8 = x6(TWO)
    x9 = x6(ONE)
    x10 = fill(x1, TWO, x7)
    x11 = fill(x10, THREE, x8)
    O = fill(x11, FOUR, x9)
    return O



def solve_d511f180_feca6190(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = multiply(x3, FIVE)
    x5 = astuple(x4, x4)
    x6 = canvas(ZERO, x5)
    x7 = rbind(shoot, UNITY)
    x8 = compose(x7, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x2)
    x11 = paint(x6, x10)
    O = hmirror(x11)
    return O



def solve_d511f180_a68b268e(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = lefthalf(x2)
    x5 = righthalf(x2)
    x6 = lefthalf(x3)
    x7 = righthalf(x3)
    x8 = ofcolor(x5, FOUR)
    x9 = ofcolor(x4, SEVEN)
    x10 = ofcolor(x6, EIGHT)
    x11 = fill(x7, EIGHT, x10)
    x12 = fill(x11, FOUR, x8)
    O = fill(x12, SEVEN, x9)
    return O



def solve_d511f180_beb8660c(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(invert, size)
    x5 = order(x3, x4)
    x6 = apply(normalize, x5)
    x7 = size(x6)
    x8 = interval(ZERO, x7, ONE)
    x9 = apply(toivec, x8)
    x10 = mpapply(shift, x6, x9)
    x11 = canvas(ZERO, x2)
    x12 = paint(x11, x10)
    O = rot180(x12)
    return O



def solve_d511f180_913fb3ed(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, THREE)
    x3 = ofcolor(x1, EIGHT)
    x4 = ofcolor(x1, TWO)
    x5 = mapply(neighbors, x2)
    x6 = mapply(neighbors, x3)
    x7 = mapply(neighbors, x4)
    x8 = fill(x1, SIX, x5)
    x9 = fill(x8, FOUR, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_d511f180_0962bcdd(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = leastcolor(x1)
    x3 = replace(x1, ZERO, x2)
    x4 = leastcolor(x3)
    x5 = ofcolor(x1, x4)
    x6 = mapply(dneighbors, x5)
    x7 = fill(x1, x4, x6)
    x8 = objects(x7, F, T, T)
    x9 = fork(connect, ulcorner, lrcorner)
    x10 = fork(connect, llcorner, urcorner)
    x11 = fork(combine, x9, x10)
    x12 = mapply(x11, x8)
    O = fill(x7, x2, x12)
    return O



def solve_d511f180_3631a71a(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = shape(x1)
    x3 = replace(x1, NINE, ZERO)
    x4 = lbind(apply, maximum)
    x5 = dmirror(x3)
    x6 = papply(pair, x3, x5)
    x7 = apply(x4, x6)
    x8 = subtract(x2, TWO_BY_TWO)
    x9 = crop(x7, TWO_BY_TWO, x8)
    x10 = vmirror(x9)
    x11 = objects(x10, T, F, T)
    x12 = merge(x11)
    x13 = shift(x12, TWO_BY_TWO)
    O = paint(x7, x13)
    return O



def solve_d511f180_05269061(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = neighbors(ORIGIN)
    x4 = mapply(neighbors, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = merge(x2)
    x8 = lbind(shift, x7)
    x9 = mapply(x8, x6)
    x10 = shift(x9, UP_RIGHT)
    x11 = shift(x9, DOWN_LEFT)
    x12 = paint(x1, x9)
    x13 = paint(x12, x10)
    O = paint(x13, x11)
    return O



def solve_d511f180_95990924(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = apply(ulcorner, x3)
    x5 = apply(urcorner, x3)
    x6 = apply(llcorner, x3)
    x7 = apply(lrcorner, x3)
    x8 = fill(x1, ONE, x4)
    x9 = fill(x8, TWO, x5)
    x10 = fill(x9, THREE, x6)
    O = fill(x10, FOUR, x7)
    return O



def solve_d511f180_e509e548(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = rbind(subgrid, x1)
    x4 = chain(palette, trim, x3)
    x5 = lbind(contained, THREE)
    x6 = compose(x5, x4)
    x7 = fork(add, height, width)
    x8 = compose(decrement, x7)
    x9 = fork(equality, size, x8)
    x10 = mfilter(x2, x6)
    x11 = mfilter(x2, x9)
    x12 = replace(x1, THREE, SIX)
    x13 = fill(x12, TWO, x10)
    O = fill(x13, ONE, x11)
    return O



def solve_d511f180_d43fd935(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, THREE)
    x4 = sizefilter(x2, ONE)
    x5 = rbind(vmatching, x3)
    x6 = rbind(hmatching, x3)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = rbind(gravitate, x3)
    x10 = fork(add, center, x9)
    x11 = fork(connect, center, x10)
    x12 = fork(recolor, color, x11)
    x13 = mapply(x12, x8)
    O = paint(x1, x13)
    return O



def solve_d511f180_e73095fd(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = fork(equality, toindices, backdrop)
    x5 = sfilter(x3, x4)
    x6 = lbind(mapply, dneighbors)
    x7 = chain(x6, corners, outbox)
    x8 = fork(difference, x7, outbox)
    x9 = ofcolor(x1, FIVE)
    x10 = rbind(intersection, x9)
    x11 = matcher(size, ZERO)
    x12 = chain(x11, x10, x8)
    x13 = mfilter(x5, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_d511f180_1bfc4729(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = asindices(x1)
    x3 = tophalf(x1)
    x4 = bottomhalf(x1)
    x5 = leastcolor(x3)
    x6 = leastcolor(x4)
    x7 = hfrontier(TWO_BY_ZERO)
    x8 = box(x2)
    x9 = combine(x7, x8)
    x10 = fill(x3, x5, x9)
    x11 = hmirror(x10)
    x12 = replace(x11, x5, x6)
    O = vconcat(x10, x12)
    return O



def solve_d511f180_93b581b8(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = fgpartition(x1)
    x3 = chain(cmirror, dmirror, merge)
    x4 = x3(x2)
    x5 = upscale(x4, THREE)
    x6 = astuple(NEG_TWO, NEG_TWO)
    x7 = shift(x5, x6)
    x8 = underpaint(x1, x7)
    x9 = toindices(x4)
    x10 = fork(combine, hfrontier, vfrontier)
    x11 = mapply(x10, x9)
    x12 = difference(x11, x9)
    O = fill(x8, ZERO, x12)
    return O



def solve_d511f180_9edfc990(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = ofcolor(x1, ONE)
    x5 = rbind(adjacent, x4)
    x6 = mfilter(x3, x5)
    x7 = recolor(ONE, x6)
    O = paint(x1, x7)
    return O



def solve_d511f180_7447852a(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = compose(last, center)
    x5 = order(x3, x4)
    x6 = size(x5)
    x7 = interval(ZERO, x6, THREE)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = interval(ZERO, x6, ONE)
    x11 = pair(x5, x10)
    x12 = sfilter(x11, x9)
    x13 = mapply(first, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_d511f180_97999447(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = apply(toindices, x2)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    x8 = paint(x1, x7)
    x9 = interval(ZERO, FIVE, ONE)
    x10 = apply(double, x9)
    x11 = apply(increment, x10)
    x12 = apply(tojvec, x11)
    x13 = prapply(shift, x3, x12)
    x14 = merge(x13)
    O = fill(x8, FIVE, x14)
    return O



def solve_d511f180_91714a58(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = shape(x1)
    x3 = asindices(x1)
    x4 = objects(x1, T, F, T)
    x5 = argmax(x4, size)
    x6 = mostcolor(x5)
    x7 = canvas(ZERO, x2)
    x8 = paint(x7, x5)
    x9 = rbind(toobject, x8)
    x10 = rbind(colorcount, x6)
    x11 = chain(x10, x9, neighbors)
    x12 = lbind(greater, THREE)
    x13 = compose(x12, x11)
    x14 = sfilter(x3, x13)
    O = fill(x8, ZERO, x14)
    return O



def solve_d511f180_8e1813be(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = replace(x1, FIVE, ZERO)
    x3 = objects(x2, T, T, T)
    x4 = first(x3)
    x5 = vline(x4)
    x6 = branch(x5, dmirror, identity)
    x7 = x6(x2)
    x8 = objects(x7, T, T, T)
    x9 = order(x8, uppermost)
    x10 = apply(color, x9)
    x11 = dedupe(x10)
    x12 = size(x11)
    x13 = rbind(repeat, x12)
    x14 = apply(x13, x11)
    O = x6(x14)
    return O



def solve_d511f180_bc1d5164(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = leastcolor(x1)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = crop(x1, TWO_BY_ZERO, THREE_BY_THREE)
    x5 = tojvec(FOUR)
    x6 = crop(x1, x5, THREE_BY_THREE)
    x7 = astuple(TWO, FOUR)
    x8 = crop(x1, x7, THREE_BY_THREE)
    x9 = canvas(ZERO, THREE_BY_THREE)
    x10 = rbind(ofcolor, x2)
    x11 = astuple(x3, x4)
    x12 = astuple(x6, x8)
    x13 = combine(x11, x12)
    x14 = mapply(x10, x13)
    O = fill(x9, x2, x14)
    return O



def solve_d511f180_ce602527(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = vmirror(x1)
    x3 = fgpartition(x2)
    x4 = order(x3, size)
    x5 = last(x4)
    x6 = remove(x5, x4)
    x7 = compose(toindices, normalize)
    x8 = rbind(upscale, TWO)
    x9 = chain(toindices, x8, normalize)
    x10 = x7(x5)
    x11 = rbind(intersection, x10)
    x12 = chain(size, x11, x9)
    x13 = argmax(x6, x12)
    x14 = subgrid(x13, x2)
    O = vmirror(x14)
    return O



def solve_d511f180_5c2c9af4(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = center(x3)
    x5 = ulcorner(x3)
    x6 = subtract(x4, x5)
    x7 = multiply(NEG_ONE, NINE)
    x8 = interval(ZERO, NINE, ONE)
    x9 = interval(ZERO, x7, NEG_ONE)
    x10 = lbind(multiply, x6)
    x11 = apply(x10, x8)
    x12 = apply(x10, x9)
    x13 = pair(x11, x12)
    x14 = mapply(box, x13)
    x15 = shift(x14, x4)
    O = fill(x1, x2, x15)
    return O



def solve_d511f180_75b8110e(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = bottomhalf(x2)
    x6 = tophalf(x3)
    x7 = bottomhalf(x3)
    x8 = rbind(ofcolor, ZERO)
    x9 = fork(difference, asindices, x8)
    x10 = fork(toobject, x9, identity)
    x11 = x10(x6)
    x12 = x10(x5)
    x13 = x10(x7)
    x14 = paint(x4, x13)
    x15 = paint(x14, x12)
    O = paint(x15, x11)
    return O



def solve_d511f180_c3f564a4(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = asindices(x1)
    x3 = dmirror(x1)
    x4 = invert(NINE)
    x5 = papply(pair, x1, x3)
    x6 = lbind(apply, maximum)
    x7 = apply(x6, x5)
    x8 = ofcolor(x7, ZERO)
    x9 = difference(x2, x8)
    x10 = toobject(x9, x7)
    x11 = interval(x4, NINE, ONE)
    x12 = interval(NINE, x4, NEG_ONE)
    x13 = pair(x11, x12)
    x14 = lbind(shift, x10)
    x15 = mapply(x14, x13)
    O = paint(x7, x15)
    return O



def solve_d511f180_1a07d186(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = mapply(x12, x8)
    x14 = merge(x3)
    x15 = cover(x1, x14)
    O = paint(x15, x13)
    return O



def solve_d511f180_d687bc17(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = merge(x3)
    x14 = mapply(x12, x8)
    x15 = cover(x1, x13)
    O = paint(x15, x14)
    return O



def solve_d511f180_9af7a82c(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, F)
    x3 = order(x2, size)
    x4 = valmax(x2, size)
    x5 = rbind(astuple, ONE)
    x6 = lbind(subtract, x4)
    x7 = compose(x5, size)
    x8 = chain(x5, x6, size)
    x9 = fork(canvas, color, x7)
    x10 = lbind(canvas, ZERO)
    x11 = compose(x10, x8)
    x12 = fork(vconcat, x9, x11)
    x13 = compose(cmirror, x12)
    x14 = apply(x13, x3)
    x15 = merge(x14)
    O = cmirror(x15)
    return O



def solve_d511f180_ef135b50(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, ZERO)
    x4 = product(x2, x2)
    x5 = power(first, TWO)
    x6 = compose(first, last)
    x7 = fork(equality, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = fork(connect, first, last)
    x10 = mapply(x9, x8)
    x11 = intersection(x10, x3)
    x12 = fill(x1, NINE, x11)
    x13 = trim(x12)
    x14 = asobject(x13)
    x15 = shift(x14, UNITY)
    O = paint(x1, x15)
    return O



def solve_d511f180_cbded52d(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = product(x3, x3)
    x5 = fork(vmatching, first, last)
    x6 = fork(hmatching, first, last)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = compose(center, first)
    x10 = compose(center, last)
    x11 = fork(connect, x9, x10)
    x12 = chain(initset, center, x11)
    x13 = compose(color, first)
    x14 = fork(recolor, x13, x12)
    x15 = mapply(x14, x8)
    O = paint(x1, x15)
    return O



def solve_d511f180_e26a3af2(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = rot90(x1)
    x3 = apply(mostcommon, x1)
    x4 = apply(mostcommon, x2)
    x5 = repeat(x3, ONE)
    x6 = repeat(x4, ONE)
    x7 = compose(size, dedupe)
    x8 = x7(x3)
    x9 = x7(x4)
    x10 = greater(x9, x8)
    x11 = branch(x10, height, width)
    x12 = x11(x1)
    x13 = rot90(x5)
    x14 = branch(x10, x6, x13)
    x15 = branch(x10, vupscale, hupscale)
    O = x15(x14, x12)
    return O



def solve_d511f180_6cf79266(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, ZERO)
    x3 = astuple(ZERO, ORIGIN)
    x4 = initset(x3)
    x5 = upscale(x4, THREE)
    x6 = toindices(x5)
    x7 = lbind(shift, x6)
    x8 = rbind(difference, x2)
    x9 = chain(size, x8, x7)
    x10 = matcher(x9, ZERO)
    x11 = lbind(add, NEG_UNITY)
    x12 = chain(flip, x10, x11)
    x13 = fork(both, x10, x12)
    x14 = sfilter(x2, x13)
    x15 = mapply(x7, x14)
    O = fill(x1, ONE, x15)
    return O



def solve_d511f180_a87f7484(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = numcolors(x1)
    x3 = portrait(x1)
    x4 = branch(x3, dmirror, identity)
    x5 = x4(x1)
    x6 = decrement(x2)
    x7 = hsplit(x5, x6)
    x8 = rbind(ofcolor, ZERO)
    x9 = apply(x8, x7)
    x10 = leastcommon(x9)
    x11 = matcher(x8, x10)
    x12 = extract(x7, x11)
    O = x4(x12)
    return O



def solve_d511f180_4093f84a(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, FIVE)
    x4 = ofcolor(x1, FIVE)
    x5 = portrait(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x3)
    x8 = lefthalf(x7)
    x9 = righthalf(x7)
    x10 = rbind(order, identity)
    x11 = rbind(order, invert)
    x12 = apply(x10, x8)
    x13 = apply(x11, x9)
    x14 = hconcat(x12, x13)
    O = x6(x14)
    return O



def solve_d511f180_ba26e723(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = rbind(divide, THREE)
    x3 = rbind(multiply, THREE)
    x4 = compose(x3, x2)
    x5 = fork(equality, identity, x4)
    x6 = compose(x5, last)
    x7 = ofcolor(x1, FOUR)
    x8 = sfilter(x7, x6)
    O = fill(x1, SIX, x8)
    return O



def solve_d511f180_29c11459(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = objects(x3, T, F, T)
    x5 = objects(x2, T, F, T)
    x6 = compose(hfrontier, center)
    x7 = fork(recolor, color, x6)
    x8 = mapply(x7, x5)
    x9 = paint(x2, x8)
    x10 = mapply(x7, x4)
    x11 = paint(x1, x10)
    x12 = objects(x9, T, F, T)
    x13 = apply(urcorner, x12)
    x14 = shift(x13, RIGHT)
    x15 = merge(x12)
    x16 = paint(x11, x15)
    O = fill(x16, FIVE, x14)
    return O



def solve_d511f180_963e52fc(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = width(x1)
    x3 = asobject(x1)
    x4 = hperiod(x3)
    x5 = height(x3)
    x6 = astuple(x5, x4)
    x7 = ulcorner(x3)
    x8 = crop(x1, x7, x6)
    x9 = rot90(x8)
    x10 = double(x2)
    x11 = divide(x10, x4)
    x12 = increment(x11)
    x13 = repeat(x9, x12)
    x14 = merge(x13)
    x15 = rot270(x14)
    x16 = astuple(x5, x10)
    O = crop(x15, ORIGIN, x16)
    return O



def solve_d511f180_1f0c79e5(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = leastcolor(x3)
    x5 = ofcolor(x3, x4)
    x6 = combine(x2, x5)
    x7 = recolor(x4, x6)
    x8 = compose(decrement, double)
    x9 = ulcorner(x6)
    x10 = invert(x9)
    x11 = shift(x2, x10)
    x12 = apply(x8, x11)
    x13 = interval(ZERO, NINE, ONE)
    x14 = prapply(multiply, x12, x13)
    x15 = lbind(shift, x7)
    x16 = mapply(x15, x14)
    O = paint(x1, x16)
    return O



def solve_d511f180_6773b310(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = compress(x1)
    x3 = neighbors(ORIGIN)
    x4 = insert(ORIGIN, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = astuple(FOUR, FOUR)
    x8 = shift(x6, x7)
    x9 = fork(insert, identity, neighbors)
    x10 = apply(x9, x8)
    x11 = rbind(toobject, x2)
    x12 = apply(x11, x10)
    x13 = rbind(colorcount, SIX)
    x14 = matcher(x13, TWO)
    x15 = mfilter(x12, x14)
    x16 = fill(x2, ONE, x15)
    x17 = replace(x16, SIX, ZERO)
    O = downscale(x17, THREE)
    return O



def solve_d511f180_780d0b14(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = asindices(x1)
    x3 = objects(x1, T, T, T)
    x4 = rbind(greater, TWO)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = totuple(x6)
    x8 = apply(color, x7)
    x9 = apply(center, x7)
    x10 = pair(x8, x9)
    x11 = fill(x1, ZERO, x2)
    x12 = paint(x11, x10)
    x13 = rbind(greater, ONE)
    x14 = compose(dedupe, totuple)
    x15 = chain(x13, size, x14)
    x16 = sfilter(x12, x15)
    x17 = rot90(x16)
    x18 = sfilter(x17, x15)
    O = rot270(x18)
    return O



def solve_d511f180_2204b7a8(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sfilter, x2)
    x4 = compose(size, x3)
    x5 = x4(vline)
    x6 = x4(hline)
    x7 = greater(x5, x6)
    x8 = branch(x7, lefthalf, tophalf)
    x9 = branch(x7, righthalf, bottomhalf)
    x10 = branch(x7, hconcat, vconcat)
    x11 = x8(x1)
    x12 = x9(x1)
    x13 = index(x11, ORIGIN)
    x14 = shape(x12)
    x15 = decrement(x14)
    x16 = index(x12, x15)
    x17 = replace(x11, THREE, x13)
    x18 = replace(x12, THREE, x16)
    O = x10(x17, x18)
    return O



def solve_d511f180_d9f24cd1(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, FIVE)
    x4 = prapply(connect, x2, x3)
    x5 = mfilter(x4, vline)
    x6 = underfill(x1, TWO, x5)
    x7 = matcher(numcolors, TWO)
    x8 = objects(x6, F, F, T)
    x9 = sfilter(x8, x7)
    x10 = difference(x8, x9)
    x11 = colorfilter(x10, TWO)
    x12 = mapply(toindices, x11)
    x13 = apply(urcorner, x9)
    x14 = shift(x13, UNITY)
    x15 = rbind(shoot, UP)
    x16 = mapply(x15, x14)
    x17 = fill(x6, TWO, x16)
    x18 = mapply(vfrontier, x12)
    O = fill(x17, TWO, x18)
    return O



def solve_d511f180_b782dc8a(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = ofcolor(x1, x2)
    x5 = first(x4)
    x6 = dneighbors(x5)
    x7 = toobject(x6, x1)
    x8 = mostcolor(x7)
    x9 = ofcolor(x1, x8)
    x10 = colorfilter(x3, ZERO)
    x11 = rbind(adjacent, x9)
    x12 = mfilter(x10, x11)
    x13 = toindices(x12)
    x14 = rbind(manhattan, x4)
    x15 = chain(even, x14, initset)
    x16 = sfilter(x13, x15)
    x17 = difference(x13, x16)
    x18 = fill(x1, x2, x16)
    O = fill(x18, x8, x17)
    return O



def solve_d511f180_673ef223(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, EIGHT)
    x4 = replace(x1, EIGHT, FOUR)
    x5 = colorfilter(x2, TWO)
    x6 = argmin(x2, uppermost)
    x7 = apply(uppermost, x5)
    x8 = fork(subtract, maximum, minimum)
    x9 = x8(x7)
    x10 = toivec(x9)
    x11 = leftmost(x6)
    x12 = equality(x11, ZERO)
    x13 = branch(x12, LEFT, RIGHT)
    x14 = rbind(shoot, x13)
    x15 = mapply(x14, x3)
    x16 = underfill(x4, EIGHT, x15)
    x17 = shift(x3, x10)
    x18 = mapply(hfrontier, x17)
    O = underfill(x16, EIGHT, x18)
    return O



def solve_d511f180_f5b8619d(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = mapply(vfrontier, x3)
    x5 = underfill(x1, EIGHT, x4)
    x6 = hconcat(x5, x5)
    O = vconcat(x6, x6)
    return O



def solve_d511f180_f8c80d96(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = colorfilter(x3, x2)
    x5 = argmax(x4, size)
    x6 = argmin(x3, width)
    x7 = size(x6)
    x8 = equality(x7, ONE)
    x9 = branch(x8, identity, outbox)
    x10 = chain(outbox, outbox, x9)
    x11 = power(x10, TWO)
    x12 = power(x10, THREE)
    x13 = x10(x5)
    x14 = x11(x5)
    x15 = x12(x5)
    x16 = fill(x1, x2, x13)
    x17 = fill(x16, x2, x14)
    x18 = fill(x17, x2, x15)
    O = replace(x18, ZERO, FIVE)
    return O



def solve_d511f180_ecdecbb3(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = colorfilter(x2, EIGHT)
    x5 = product(x3, x4)
    x6 = fork(gravitate, first, last)
    x7 = compose(crement, x6)
    x8 = compose(center, first)
    x9 = fork(add, x8, x7)
    x10 = fork(connect, x8, x9)
    x11 = apply(x10, x5)
    x12 = lbind(greater, EIGHT)
    x13 = compose(x12, size)
    x14 = mfilter(x11, x13)
    x15 = fill(x1, TWO, x14)
    x16 = apply(x9, x5)
    x17 = intersection(x14, x16)
    x18 = mapply(neighbors, x17)
    O = fill(x15, EIGHT, x18)
    return O



def solve_d511f180_e5062a87(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, TWO)
    x3 = recolor(ZERO, x2)
    x4 = normalize(x3)
    x5 = occurrences(x1, x3)
    x6 = lbind(shift, x4)
    x7 = apply(x6, x5)
    x8 = astuple(ONE, THREE)
    x9 = astuple(FIVE, ONE)
    x10 = astuple(TWO, SIX)
    x11 = initset(x8)
    x12 = insert(x9, x11)
    x13 = insert(x10, x12)
    x14 = rbind(contained, x13)
    x15 = chain(flip, x14, ulcorner)
    x16 = sfilter(x7, x15)
    x17 = merge(x16)
    x18 = recolor(TWO, x17)
    O = paint(x1, x18)
    return O



def solve_d511f180_a8d7556c(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = initset(ORIGIN)
    x3 = recolor(ZERO, x2)
    x4 = upscale(x3, TWO)
    x5 = occurrences(x1, x4)
    x6 = lbind(shift, x4)
    x7 = mapply(x6, x5)
    x8 = fill(x1, TWO, x7)
    x9 = add(SIX, SIX)
    x10 = astuple(EIGHT, x9)
    x11 = index(x8, x10)
    x12 = equality(x11, TWO)
    x13 = initset(x10)
    x14 = add(x10, DOWN)
    x15 = insert(x14, x13)
    x16 = toobject(x15, x8)
    x17 = toobject(x15, x1)
    x18 = branch(x12, x17, x16)
    O = paint(x8, x18)
    return O



def solve_d511f180_834ec97d(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = shift(x4, DOWN)
    x6 = fill(x1, ZERO, x4)
    x7 = paint(x6, x5)
    x8 = uppermost(x5)
    x9 = leftmost(x5)
    x10 = subtract(x9, TEN)
    x11 = add(x9, TEN)
    x12 = interval(x10, x11, TWO)
    x13 = lbind(greater, x8)
    x14 = compose(x13, first)
    x15 = rbind(contained, x12)
    x16 = compose(x15, last)
    x17 = sfilter(x2, x14)
    x18 = sfilter(x17, x16)
    O = fill(x7, FOUR, x18)
    return O



def solve_d511f180_90f3ed37(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, uppermost)
    x4 = first(x3)
    x5 = remove(x4, x3)
    x6 = normalize(x4)
    x7 = lbind(shift, x6)
    x8 = compose(x7, ulcorner)
    x9 = interval(TWO, NEG_ONE, NEG_ONE)
    x10 = apply(tojvec, x9)
    x11 = rbind(apply, x10)
    x12 = lbind(compose, size)
    x13 = lbind(lbind, intersection)
    x14 = compose(x12, x13)
    x15 = lbind(lbind, shift)
    x16 = chain(x11, x15, x8)
    x17 = fork(argmax, x16, x14)
    x18 = mapply(x17, x5)
    O = underfill(x1, ONE, x18)
    return O



def solve_d511f180_8403a5d5(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = color(x4)
    x6 = leftmost(x4)
    x7 = interval(x6, TEN, TWO)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = sfilter(x2, x9)
    x11 = increment(x6)
    x12 = add(x6, THREE)
    x13 = interval(x11, TEN, FOUR)
    x14 = interval(x12, TEN, FOUR)
    x15 = lbind(astuple, NINE)
    x16 = apply(tojvec, x13)
    x17 = apply(x15, x14)
    x18 = fill(x1, x5, x10)
    x19 = fill(x18, FIVE, x16)
    O = fill(x19, FIVE, x17)
    return O



def solve_d511f180_539a4f51(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = shape(x1)
    x3 = index(x1, ORIGIN)
    x4 = colorcount(x1, ZERO)
    x5 = decrement(x2)
    x6 = positive(x4)
    x7 = branch(x6, x5, x2)
    x8 = crop(x1, ORIGIN, x7)
    x9 = width(x8)
    x10 = astuple(ONE, x9)
    x11 = crop(x8, ORIGIN, x10)
    x12 = vupscale(x11, x9)
    x13 = dmirror(x12)
    x14 = hconcat(x8, x12)
    x15 = hconcat(x13, x8)
    x16 = vconcat(x14, x15)
    x17 = asobject(x16)
    x18 = multiply(UNITY, TEN)
    x19 = canvas(x3, x18)
    O = paint(x19, x17)
    return O



def solve_d511f180_3bdb4ada(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = compose(increment, ulcorner)
    x5 = compose(decrement, lrcorner)
    x6 = apply(x4, x3)
    x7 = apply(x5, x3)
    x8 = papply(connect, x6, x7)
    x9 = apply(last, x6)
    x10 = compose(last, first)
    x11 = power(last, TWO)
    x12 = fork(subtract, x10, x11)
    x13 = compose(even, x12)
    x14 = lbind(rbind, astuple)
    x15 = lbind(compose, x13)
    x16 = compose(x15, x14)
    x17 = fork(sfilter, first, x16)
    x18 = pair(x8, x9)
    x19 = mapply(x17, x18)
    O = fill(x1, ZERO, x19)
    return O



def solve_d511f180_ec883f72(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = palette(x1)
    x3 = objects(x1, T, T, T)
    x4 = fork(multiply, height, width)
    x5 = argmax(x3, x4)
    x6 = color(x5)
    x7 = remove(ZERO, x2)
    x8 = other(x7, x6)
    x9 = lrcorner(x5)
    x10 = llcorner(x5)
    x11 = urcorner(x5)
    x12 = ulcorner(x5)
    x13 = shoot(x9, UNITY)
    x14 = shoot(x10, DOWN_LEFT)
    x15 = shoot(x11, UP_RIGHT)
    x16 = shoot(x12, NEG_UNITY)
    x17 = combine(x13, x14)
    x18 = combine(x15, x16)
    x19 = combine(x17, x18)
    O = underfill(x1, x8, x19)
    return O



def solve_d511f180_2bee17df(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = height(x1)
    x3 = rot90(x1)
    x4 = subtract(x2, TWO)
    x5 = interval(ZERO, x2, ONE)
    x6 = rbind(colorcount, ZERO)
    x7 = matcher(x6, x4)
    x8 = rbind(vsplit, x2)
    x9 = lbind(apply, x7)
    x10 = compose(x9, x8)
    x11 = x10(x1)
    x12 = pair(x5, x11)
    x13 = sfilter(x12, last)
    x14 = mapply(hfrontier, x13)
    x15 = x10(x3)
    x16 = pair(x15, x5)
    x17 = sfilter(x16, first)
    x18 = mapply(vfrontier, x17)
    x19 = astuple(x14, x18)
    x20 = merge(x19)
    O = underfill(x1, THREE, x20)
    return O



def solve_d511f180_29623171(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = leastcolor(x1)
    x3 = interval(ZERO, NINE, FOUR)
    x4 = product(x3, x3)
    x5 = rbind(add, THREE)
    x6 = rbind(interval, ONE)
    x7 = fork(x6, identity, x5)
    x8 = compose(x7, first)
    x9 = compose(x7, last)
    x10 = fork(product, x8, x9)
    x11 = rbind(colorcount, x2)
    x12 = rbind(toobject, x1)
    x13 = compose(x11, x12)
    x14 = apply(x10, x4)
    x15 = valmax(x14, x13)
    x16 = matcher(x13, x15)
    x17 = compose(flip, x16)
    x18 = mfilter(x14, x16)
    x19 = mfilter(x14, x17)
    x20 = fill(x1, x2, x18)
    O = fill(x20, ZERO, x19)
    return O



def solve_d511f180_8731374e(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = height(x4)
    x6 = width(x4)
    x7 = vsplit(x4, x5)
    x8 = lbind(greater, FOUR)
    x9 = compose(x8, numcolors)
    x10 = sfilter(x7, x9)
    x11 = merge(x10)
    x12 = rot90(x11)
    x13 = vsplit(x12, x6)
    x14 = sfilter(x13, x9)
    x15 = merge(x14)
    x16 = rot270(x15)
    x17 = leastcolor(x16)
    x18 = ofcolor(x16, x17)
    x19 = fork(combine, vfrontier, hfrontier)
    x20 = mapply(x19, x18)
    O = fill(x16, x17, x20)
    return O



def solve_d511f180_db93a21d(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, NINE)
    x4 = colorfilter(x2, NINE)
    x5 = rbind(shoot, DOWN)
    x6 = mapply(x5, x3)
    x7 = underfill(x1, ONE, x6)
    x8 = compose(halve, width)
    x9 = rbind(greater, ONE)
    x10 = compose(x9, x8)
    x11 = matcher(x8, THREE)
    x12 = power(outbox, TWO)
    x13 = power(outbox, THREE)
    x14 = mapply(outbox, x4)
    x15 = sfilter(x4, x10)
    x16 = sfilter(x4, x11)
    x17 = mapply(x12, x15)
    x18 = mapply(x13, x16)
    x19 = fill(x7, THREE, x14)
    x20 = fill(x19, THREE, x17)
    O = fill(x20, THREE, x18)
    return O



def solve_d511f180_53b68214(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = width(x1)
    x3 = objects(x1, T, T, T)
    x4 = first(x3)
    x5 = vperiod(x4)
    x6 = toivec(x5)
    x7 = interval(ZERO, NINE, ONE)
    x8 = lbind(multiply, x6)
    x9 = apply(x8, x7)
    x10 = lbind(shift, x4)
    x11 = mapply(x10, x9)
    x12 = astuple(x2, x2)
    x13 = portrait(x4)
    x14 = shape(x4)
    x15 = add(DOWN, x14)
    x16 = decrement(x15)
    x17 = shift(x4, x16)
    x18 = branch(x13, x11, x17)
    x19 = canvas(ZERO, x12)
    x20 = paint(x19, x4)
    O = paint(x20, x18)
    return O



def solve_d511f180_d6ad076f(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = argmin(x2, size)
    x4 = argmax(x2, size)
    x5 = vmatching(x3, x4)
    x6 = branch(x5, DOWN, RIGHT)
    x7 = branch(x5, uppermost, leftmost)
    x8 = valmax(x2, x7)
    x9 = x7(x3)
    x10 = equality(x8, x9)
    x11 = branch(x10, NEG_ONE, ONE)
    x12 = multiply(x6, x11)
    x13 = inbox(x3)
    x14 = rbind(shoot, x12)
    x15 = mapply(x14, x13)
    x16 = underfill(x1, EIGHT, x15)
    x17 = objects(x16, T, F, T)
    x18 = colorfilter(x17, EIGHT)
    x19 = rbind(bordering, x1)
    x20 = mfilter(x18, x19)
    O = cover(x16, x20)
    return O



def solve_d511f180_6cdd2623(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = prapply(connect, x3, x3)
    x5 = fgpartition(x1)
    x6 = merge(x5)
    x7 = cover(x1, x6)
    x8 = fork(either, hline, vline)
    x9 = box(x6)
    x10 = rbind(difference, x9)
    x11 = chain(positive, size, x10)
    x12 = fork(both, x8, x11)
    x13 = mfilter(x4, x12)
    O = fill(x7, x2, x13)
    return O



def solve_d511f180_8d510a79(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, ONE)
    x3 = ofcolor(x1, TWO)
    x4 = ofcolor(x1, FIVE)
    x5 = uppermost(x4)
    x6 = chain(toivec, decrement, double)
    x7 = lbind(greater, x5)
    x8 = compose(x7, first)
    x9 = chain(invert, x6, x8)
    x10 = fork(shoot, identity, x9)
    x11 = compose(x6, x8)
    x12 = fork(shoot, identity, x11)
    x13 = lbind(matcher, x8)
    x14 = compose(x13, x8)
    x15 = fork(sfilter, x12, x14)
    x16 = mapply(x10, x2)
    x17 = mapply(x15, x3)
    x18 = underfill(x1, TWO, x17)
    O = fill(x18, ONE, x16)
    return O



def solve_d511f180_cdecee7f(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = astuple(ONE, THREE)
    x4 = size(x2)
    x5 = order(x2, leftmost)
    x6 = apply(color, x5)
    x7 = rbind(canvas, UNITY)
    x8 = apply(x7, x6)
    x9 = merge(x8)
    x10 = dmirror(x9)
    x11 = subtract(NINE, x4)
    x12 = astuple(ONE, x11)
    x13 = canvas(ZERO, x12)
    x14 = hconcat(x10, x13)
    x15 = hsplit(x14, THREE)
    x16 = merge(x15)
    x17 = crop(x16, ORIGIN, x3)
    x18 = crop(x16, DOWN, x3)
    x19 = crop(x16, TWO_BY_ZERO, x3)
    x20 = vmirror(x18)
    x21 = vconcat(x17, x20)
    O = vconcat(x21, x19)
    return O



def solve_d511f180_3345333e(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = cover(x1, x3)
    x5 = leastcolor(x4)
    x6 = ofcolor(x4, x5)
    x7 = neighbors(ORIGIN)
    x8 = mapply(neighbors, x7)
    x9 = vmirror(x6)
    x10 = lbind(shift, x9)
    x11 = apply(x10, x8)
    x12 = rbind(intersection, x6)
    x13 = compose(size, x12)
    x14 = argmax(x11, x13)
    O = fill(x4, x5, x14)
    return O



def solve_d511f180_b190f7f5(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = portrait(x1)
    x3 = branch(x2, vsplit, hsplit)
    x4 = x3(x1, TWO)
    x5 = argmin(x4, numcolors)
    x6 = argmax(x4, numcolors)
    x7 = width(x6)
    x8 = rbind(repeat, x7)
    x9 = chain(dmirror, merge, x8)
    x10 = upscale(x6, x7)
    x11 = x9(x5)
    x12 = x9(x11)
    x13 = ofcolor(x12, ZERO)
    O = fill(x10, ZERO, x13)
    return O



def solve_d511f180_caa06a1f(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = asobject(x1)
    x3 = shape(x1)
    x4 = decrement(x3)
    x5 = index(x1, x4)
    x6 = double(x3)
    x7 = canvas(x5, x6)
    x8 = paint(x7, x2)
    x9 = objects(x8, F, F, T)
    x10 = first(x9)
    x11 = shift(x10, LEFT)
    x12 = vperiod(x11)
    x13 = hperiod(x11)
    x14 = neighbors(ORIGIN)
    x15 = lbind(mapply, neighbors)
    x16 = power(x15, TWO)
    x17 = x16(x14)
    x18 = astuple(x12, x13)
    x19 = lbind(multiply, x18)
    x20 = apply(x19, x17)
    x21 = lbind(shift, x11)
    x22 = mapply(x21, x20)
    O = paint(x1, x22)
    return O



def solve_d511f180_e21d9049(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = asindices(x1)
    x3 = leastcolor(x1)
    x4 = objects(x1, T, F, T)
    x5 = ofcolor(x1, x3)
    x6 = merge(x4)
    x7 = shape(x6)
    x8 = neighbors(ORIGIN)
    x9 = lbind(mapply, neighbors)
    x10 = power(x9, TWO)
    x11 = x10(x8)
    x12 = lbind(multiply, x7)
    x13 = lbind(shift, x6)
    x14 = apply(x12, x11)
    x15 = mapply(x13, x14)
    x16 = lbind(hmatching, x5)
    x17 = lbind(vmatching, x5)
    x18 = fork(either, x16, x17)
    x19 = compose(x18, initset)
    x20 = paint(x1, x15)
    x21 = sfilter(x2, x19)
    x22 = difference(x2, x21)
    O = cover(x20, x22)
    return O



def solve_d511f180_d89b689b(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, EIGHT)
    x4 = sizefilter(x2, ONE)
    x5 = apply(initset, x3)
    x6 = lbind(argmin, x5)
    x7 = lbind(rbind, manhattan)
    x8 = compose(x6, x7)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x4)
    x11 = merge(x4)
    x12 = cover(x1, x11)
    O = paint(x12, x10)
    return O



def solve_d511f180_746b3537(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = chain(size, dedupe, first)
    x3 = x2(x1)
    x4 = equality(x3, ONE)
    x5 = branch(x4, dmirror, identity)
    x6 = x5(x1)
    x7 = objects(x6, T, F, F)
    x8 = order(x7, leftmost)
    x9 = apply(color, x8)
    x10 = repeat(x9, ONE)
    O = x5(x10)
    return O



def solve_d511f180_63613498(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = ofcolor(x2, ZERO)
    x4 = asindices(x2)
    x5 = difference(x4, x3)
    x6 = normalize(x5)
    x7 = objects(x1, T, F, T)
    x8 = compose(toindices, normalize)
    x9 = matcher(x8, x6)
    x10 = mfilter(x7, x9)
    x11 = fill(x1, FIVE, x10)
    x12 = asobject(x2)
    O = paint(x11, x12)
    return O



def solve_d511f180_06df4c85(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = partition(x1)
    x3 = mostcolor(x1)
    x4 = ofcolor(x1, x3)
    x5 = colorfilter(x2, ZERO)
    x6 = argmax(x2, size)
    x7 = difference(x2, x5)
    x8 = remove(x6, x7)
    x9 = merge(x8)
    x10 = product(x9, x9)
    x11 = power(first, TWO)
    x12 = compose(first, last)
    x13 = fork(equality, x11, x12)
    x14 = sfilter(x10, x13)
    x15 = compose(last, first)
    x16 = power(last, TWO)
    x17 = fork(connect, x15, x16)
    x18 = fork(recolor, color, x17)
    x19 = apply(x18, x14)
    x20 = fork(either, vline, hline)
    x21 = mfilter(x19, x20)
    x22 = paint(x1, x21)
    O = fill(x22, x3, x4)
    return O



def solve_d511f180_4522001f(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = toindices(x3)
    x5 = contained(ZERO_BY_TWO, x4)
    x6 = contained(TWO_BY_TWO, x4)
    x7 = contained(TWO_BY_ZERO, x4)
    x8 = astuple(NINE, NINE)
    x9 = canvas(ZERO, x8)
    x10 = astuple(THREE, ORIGIN)
    x11 = initset(x10)
    x12 = upscale(x11, TWO)
    x13 = upscale(x12, TWO)
    x14 = shape(x13)
    x15 = shift(x13, x14)
    x16 = combine(x13, x15)
    x17 = paint(x9, x16)
    x18 = rot90(x17)
    x19 = rot180(x17)
    x20 = rot270(x17)
    x21 = branch(x5, x18, x17)
    x22 = branch(x6, x19, x21)
    O = branch(x7, x20, x22)
    return O



def solve_d511f180_eb5a1d5d(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = compose(dmirror, dedupe)
    x3 = x2(x1)
    x4 = x2(x3)
    x5 = fork(remove, last, identity)
    x6 = compose(hmirror, x5)
    x7 = fork(vconcat, identity, x6)
    x8 = x7(x4)
    x9 = dmirror(x8)
    O = x7(x9)
    return O



def solve_d511f180_995c5fa3(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = hsplit(x1, THREE)
    x3 = astuple(TWO, ONE)
    x4 = rbind(ofcolor, ZERO)
    x5 = compose(ulcorner, x4)
    x6 = compose(size, x4)
    x7 = matcher(x6, ZERO)
    x8 = matcher(x5, UNITY)
    x9 = matcher(x5, DOWN)
    x10 = matcher(x5, x3)
    x11 = rbind(multiply, THREE)
    x12 = power(double, TWO)
    x13 = compose(double, x7)
    x14 = chain(x12, double, x8)
    x15 = compose(x11, x9)
    x16 = compose(x12, x10)
    x17 = fork(add, x13, x14)
    x18 = fork(add, x15, x16)
    x19 = fork(add, x17, x18)
    x20 = rbind(canvas, UNITY)
    x21 = compose(x20, x19)
    x22 = apply(x21, x2)
    x23 = merge(x22)
    O = hupscale(x23, THREE)
    return O



def solve_d511f180_d06dbe63(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = ofcolor(x1, EIGHT)
    x3 = center(x2)
    x4 = connect(ORIGIN, DOWN)
    x5 = connect(ORIGIN, ZERO_BY_TWO)
    x6 = combine(x4, x5)
    x7 = subtract(x3, TWO_BY_ZERO)
    x8 = shift(x6, x7)
    x9 = astuple(NEG_TWO, TWO)
    x10 = interval(ZERO, FIVE, ONE)
    x11 = lbind(multiply, x9)
    x12 = apply(x11, x10)
    x13 = lbind(shift, x8)
    x14 = mapply(x13, x12)
    x15 = fill(x1, FIVE, x14)
    x16 = rot180(x15)
    x17 = ofcolor(x16, EIGHT)
    x18 = center(x17)
    x19 = subtract(x18, x7)
    x20 = shift(x14, x19)
    x21 = toivec(NEG_TWO)
    x22 = shift(x20, x21)
    x23 = fill(x16, FIVE, x22)
    O = rot180(x23)
    return O



def solve_d511f180_36fdfd69(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = upscale(x1, TWO)
    x3 = objects(x2, T, T, T)
    x4 = colorfilter(x3, TWO)
    x5 = fork(manhattan, first, last)
    x6 = lbind(greater, FIVE)
    x7 = compose(x6, x5)
    x8 = product(x4, x4)
    x9 = sfilter(x8, x7)
    x10 = apply(merge, x9)
    x11 = mapply(delta, x10)
    x12 = fill(x2, FOUR, x11)
    x13 = merge(x4)
    x14 = paint(x12, x13)
    O = downscale(x14, TWO)
    return O



def solve_d511f180_0a938d79(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = x3(x1)
    x5 = fgpartition(x4)
    x6 = merge(x5)
    x7 = chain(double, decrement, width)
    x8 = x7(x6)
    x9 = compose(vfrontier, tojvec)
    x10 = lbind(mapply, x9)
    x11 = rbind(interval, x8)
    x12 = width(x4)
    x13 = rbind(x11, x12)
    x14 = chain(x10, x13, leftmost)
    x15 = fork(recolor, color, x14)
    x16 = mapply(x15, x5)
    x17 = paint(x4, x16)
    O = x3(x17)
    return O



def solve_d511f180_045e512c(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = lbind(shift, x3)
    x6 = lbind(mapply, x5)
    x7 = double(TEN)
    x8 = interval(FOUR, x7, FOUR)
    x9 = rbind(apply, x8)
    x10 = lbind(position, x3)
    x11 = lbind(rbind, multiply)
    x12 = chain(x9, x11, x10)
    x13 = compose(x6, x12)
    x14 = fork(recolor, color, x13)
    x15 = mapply(x14, x4)
    O = paint(x1, x15)
    return O



def solve_d511f180_82819916(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = normalize(x3)
    x6 = compose(last, last)
    x7 = rbind(argmin, x6)
    x8 = compose(first, x7)
    x9 = fork(other, palette, x8)
    x10 = x8(x5)
    x11 = matcher(first, x10)
    x12 = sfilter(x5, x11)
    x13 = difference(x5, x12)
    x14 = compose(toivec, uppermost)
    x15 = lbind(shift, x12)
    x16 = lbind(shift, x13)
    x17 = compose(x15, x14)
    x18 = compose(x16, x14)
    x19 = fork(recolor, x8, x17)
    x20 = fork(recolor, x9, x18)
    x21 = fork(combine, x19, x20)
    x22 = mapply(x21, x4)
    O = paint(x1, x22)
    return O



def solve_d511f180_99fa7670(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x3)
    x8 = paint(x1, x7)
    x9 = add(x2, DOWN_LEFT)
    x10 = initset(x9)
    x11 = recolor(ZERO, x10)
    x12 = objects(x8, T, F, T)
    x13 = insert(x11, x12)
    x14 = order(x13, uppermost)
    x15 = first(x14)
    x16 = remove(x11, x14)
    x17 = remove(x15, x14)
    x18 = compose(lrcorner, first)
    x19 = compose(lrcorner, last)
    x20 = fork(connect, x18, x19)
    x21 = compose(color, first)
    x22 = fork(recolor, x21, x20)
    x23 = pair(x16, x17)
    x24 = mapply(x22, x23)
    O = underpaint(x8, x24)
    return O



def solve_d511f180_72322fa7(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, F, T, T)
    x3 = matcher(numcolors, ONE)
    x4 = sfilter(x2, x3)
    x5 = difference(x2, x4)
    x6 = lbind(matcher, first)
    x7 = compose(x6, mostcolor)
    x8 = fork(sfilter, identity, x7)
    x9 = fork(difference, identity, x8)
    x10 = lbind(occurrences, x1)
    x11 = compose(x10, x8)
    x12 = compose(x10, x9)
    x13 = compose(ulcorner, x9)
    x14 = fork(subtract, ulcorner, x13)
    x15 = lbind(rbind, add)
    x16 = compose(x15, x14)
    x17 = fork(apply, x16, x12)
    x18 = lbind(lbind, shift)
    x19 = compose(x18, normalize)
    x20 = fork(mapply, x19, x11)
    x21 = fork(mapply, x19, x17)
    x22 = mapply(x20, x5)
    x23 = mapply(x21, x5)
    x24 = paint(x1, x22)
    O = paint(x24, x23)
    return O



def solve_d511f180_855e0971(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = frontiers(x1)
    x3 = sfilter(x2, hline)
    x4 = size(x3)
    x5 = positive(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x1)
    x8 = rbind(subgrid, x7)
    x9 = matcher(color, ZERO)
    x10 = compose(flip, x9)
    x11 = partition(x7)
    x12 = sfilter(x11, x10)
    x13 = rbind(ofcolor, ZERO)
    x14 = lbind(mapply, vfrontier)
    x15 = chain(x14, x13, x8)
    x16 = fork(shift, x15, ulcorner)
    x17 = fork(intersection, toindices, x16)
    x18 = mapply(x17, x12)
    x19 = fill(x7, ZERO, x18)
    O = x6(x19)
    return O



def solve_d511f180_a78176bb(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = palette(x1)
    x3 = objects(x1, T, F, T)
    x4 = remove(ZERO, x2)
    x5 = other(x4, FIVE)
    x6 = colorfilter(x3, FIVE)
    x7 = lbind(index, x1)
    x8 = compose(x7, urcorner)
    x9 = matcher(x8, FIVE)
    x10 = sfilter(x6, x9)
    x11 = difference(x6, x10)
    x12 = apply(urcorner, x10)
    x13 = apply(llcorner, x11)
    x14 = rbind(add, UP_RIGHT)
    x15 = rbind(add, DOWN_LEFT)
    x16 = apply(x14, x12)
    x17 = apply(x15, x13)
    x18 = rbind(shoot, UNITY)
    x19 = rbind(shoot, NEG_UNITY)
    x20 = fork(combine, x18, x19)
    x21 = mapply(x20, x16)
    x22 = mapply(x20, x17)
    x23 = combine(x21, x22)
    x24 = fill(x1, x5, x23)
    O = replace(x24, FIVE, ZERO)
    return O



def solve_d511f180_952a094c(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = argmax(x2, size)
    x5 = outbox(x4)
    x6 = corners(x5)
    x7 = lbind(rbind, manhattan)
    x8 = lbind(argmax, x3)
    x9 = chain(x8, x7, initset)
    x10 = compose(color, x9)
    x11 = fork(astuple, x10, identity)
    x12 = apply(x11, x6)
    x13 = merge(x3)
    x14 = cover(x1, x13)
    O = paint(x14, x12)
    return O



def solve_d511f180_6d58a25d(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = merge(x4)
    x6 = color(x5)
    x7 = uppermost(x3)
    x8 = rbind(greater, x7)
    x9 = compose(x8, uppermost)
    x10 = rbind(vmatching, x3)
    x11 = fork(both, x10, x9)
    x12 = sfilter(x4, x11)
    x13 = increment(x7)
    x14 = rbind(greater, x13)
    x15 = compose(x14, first)
    x16 = rbind(sfilter, x15)
    x17 = chain(x16, vfrontier, center)
    x18 = mapply(x17, x12)
    O = underfill(x1, x6, x18)
    return O



def solve_d511f180_6aa20dc0(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(rbind, upscale)
    x10 = interval(ONE, FOUR, ONE)
    x11 = apply(x9, x10)
    x12 = initset(identity)
    x13 = insert(vmirror, x12)
    x14 = insert(hmirror, x13)
    x15 = insert(cmirror, x14)
    x16 = insert(dmirror, x15)
    x17 = fork(compose, first, last)
    x18 = lbind(occurrences, x1)
    x19 = lbind(lbind, shift)
    x20 = compose(x18, x8)
    x21 = product(x16, x11)
    x22 = apply(x17, x21)
    x23 = rapply(x22, x4)
    x24 = fork(mapply, x19, x20)
    x25 = mapply(x24, x23)
    O = paint(x1, x25)
    return O



def solve_d511f180_447fd412(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(rbind, upscale)
    x10 = interval(ONE, FOUR, ONE)
    x11 = apply(x9, x10)
    x12 = lbind(recolor, ZERO)
    x13 = compose(x12, outbox)
    x14 = fork(combine, identity, x13)
    x15 = lbind(occurrences, x1)
    x16 = lbind(rbind, subtract)
    x17 = lbind(apply, increment)
    x18 = lbind(lbind, shift)
    x19 = chain(x16, ulcorner, x8)
    x20 = chain(x15, x14, x8)
    x21 = fork(apply, x19, x20)
    x22 = compose(x17, x21)
    x23 = fork(mapply, x18, x22)
    x24 = rapply(x11, x4)
    x25 = mapply(x23, x24)
    O = paint(x1, x25)
    return O



def solve_d511f180_2bcee788(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = mostcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = replace(x1, x2, THREE)
    x5 = argmax(x3, size)
    x6 = argmin(x3, size)
    x7 = position(x5, x6)
    x8 = first(x7)
    x9 = last(x7)
    x10 = subgrid(x5, x4)
    x11 = hline(x6)
    x12 = hmirror(x10)
    x13 = vmirror(x10)
    x14 = branch(x11, x12, x13)
    x15 = branch(x11, x8, ZERO)
    x16 = branch(x11, ZERO, x9)
    x17 = asobject(x14)
    x18 = matcher(first, THREE)
    x19 = compose(flip, x18)
    x20 = sfilter(x17, x19)
    x21 = ulcorner(x5)
    x22 = shape(x5)
    x23 = astuple(x15, x16)
    x24 = multiply(x22, x23)
    x25 = add(x21, x24)
    x26 = shift(x20, x25)
    O = paint(x4, x26)
    return O



def solve_d511f180_f35d900a(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = palette(x1)
    x4 = remove(ZERO, x3)
    x5 = lbind(other, x4)
    x6 = compose(x5, color)
    x7 = fork(recolor, x6, outbox)
    x8 = mapply(x7, x2)
    x9 = mapply(toindices, x2)
    x10 = box(x9)
    x11 = difference(x10, x9)
    x12 = lbind(argmin, x9)
    x13 = rbind(compose, initset)
    x14 = lbind(rbind, manhattan)
    x15 = chain(x13, x14, initset)
    x16 = chain(initset, x12, x15)
    x17 = fork(manhattan, initset, x16)
    x18 = compose(even, x17)
    x19 = sfilter(x11, x18)
    x20 = paint(x1, x8)
    O = fill(x20, FIVE, x19)
    return O



def solve_d511f180_0dfd9992(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_d511f180_29ec7d0e(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_d511f180_469497ad(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    x4 = upscale(x1, x3)
    x5 = objects(x4, F, F, T)
    x6 = argmin(x5, size)
    x7 = ulcorner(x6)
    x8 = llcorner(x6)
    x9 = shoot(x7, NEG_UNITY)
    x10 = shoot(x7, UNITY)
    x11 = shoot(x8, DOWN_LEFT)
    x12 = shoot(x8, UP_RIGHT)
    x13 = combine(x9, x10)
    x14 = combine(x11, x12)
    x15 = combine(x13, x14)
    x16 = underfill(x4, TWO, x15)
    x17 = objects(x16, T, F, T)
    x18 = argmax(x17, lrcorner)
    O = paint(x16, x18)
    return O



def solve_d511f180_484b58aa(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, TWO)
    x9 = astuple(TWO, x3)
    x10 = power(decrement, TWO)
    x11 = x10(x2)
    x12 = x10(x3)
    x13 = toivec(x12)
    x14 = tojvec(x11)
    x15 = crop(x1, x13, x9)
    x16 = crop(x1, x14, x8)
    x17 = asobject(x16)
    x18 = asobject(x15)
    x19 = vperiod(x17)
    x20 = hperiod(x18)
    x21 = astuple(x19, x20)
    x22 = lbind(multiply, x21)
    x23 = neighbors(ORIGIN)
    x24 = mapply(neighbors, x23)
    x25 = apply(x22, x24)
    x26 = lbind(shift, x7)
    x27 = mapply(x26, x25)
    O = paint(x1, x27)
    return O



def solve_d511f180_3befdf3e(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, F, F, T)
    x3 = leastcolor(x1)
    x4 = palette(x1)
    x5 = remove(ZERO, x4)
    x6 = other(x5, x3)
    x7 = switch(x1, x3, x6)
    x8 = compose(width, inbox)
    x9 = lbind(power, outbox)
    x10 = compose(x9, x8)
    x11 = initset(x10)
    x12 = lbind(rapply, x11)
    x13 = chain(initset, first, x12)
    x14 = fork(rapply, x13, identity)
    x15 = compose(first, x14)
    x16 = compose(backdrop, x15)
    x17 = lbind(chain, backdrop)
    x18 = lbind(x17, inbox)
    x19 = compose(x18, x10)
    x20 = lbind(apply, initset)
    x21 = chain(x20, corners, x16)
    x22 = fork(mapply, x19, x21)
    x23 = fork(intersection, x16, x22)
    x24 = mapply(x16, x2)
    x25 = mapply(x23, x2)
    x26 = underfill(x7, x6, x24)
    O = fill(x26, ZERO, x25)
    return O



def solve_d511f180_49d1d64f(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = shape(x1)
    x3 = add(x2, TWO)
    x4 = canvas(ZERO, x3)
    x5 = asobject(x1)
    x6 = shift(x5, UNITY)
    x7 = paint(x4, x6)
    x8 = asindices(x4)
    x9 = fork(difference, box, corners)
    x10 = x9(x8)
    x11 = lbind(lbind, manhattan)
    x12 = rbind(compose, initset)
    x13 = chain(x12, x11, initset)
    x14 = lbind(argmin, x6)
    x15 = chain(first, x14, x13)
    x16 = fork(astuple, x15, identity)
    x17 = apply(x16, x10)
    O = paint(x7, x17)
    return O



def solve_d511f180_57aa92db(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, F, T, T)
    x3 = objects(x1, T, F, T)
    x4 = lbind(lbind, colorcount)
    x5 = fork(apply, x4, palette)
    x6 = compose(maximum, x5)
    x7 = compose(minimum, x5)
    x8 = fork(subtract, x6, x7)
    x9 = argmax(x2, x8)
    x10 = leastcolor(x9)
    x11 = normalize(x9)
    x12 = matcher(first, x10)
    x13 = sfilter(x11, x12)
    x14 = ulcorner(x13)
    x15 = colorfilter(x3, x10)
    x16 = rbind(toobject, x1)
    x17 = lbind(remove, ZERO)
    x18 = chain(first, x17, palette)
    x19 = chain(x18, x16, outbox)
    x20 = lbind(multiply, x14)
    x21 = compose(x20, width)
    x22 = fork(subtract, ulcorner, x21)
    x23 = lbind(shift, x11)
    x24 = compose(x23, x22)
    x25 = fork(upscale, x24, width)
    x26 = fork(recolor, x19, x25)
    x27 = mapply(x26, x15)
    x28 = paint(x1, x27)
    x29 = merge(x3)
    O = paint(x28, x29)
    return O



def solve_d511f180_aba27056(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, T)
    x3 = mapply(toindices, x2)
    x4 = box(x3)
    x5 = difference(x4, x3)
    x6 = delta(x3)
    x7 = position(x6, x5)
    x8 = interval(ZERO, NINE, ONE)
    x9 = lbind(multiply, x7)
    x10 = apply(x9, x8)
    x11 = lbind(shift, x5)
    x12 = mapply(x11, x10)
    x13 = fill(x1, FOUR, x6)
    x14 = fill(x13, FOUR, x12)
    x15 = corners(x5)
    x16 = ofcolor(x14, ZERO)
    x17 = rbind(toobject, x14)
    x18 = rbind(colorcount, ZERO)
    x19 = chain(x18, x17, dneighbors)
    x20 = matcher(x19, TWO)
    x21 = rbind(adjacent, x3)
    x22 = rbind(adjacent, x12)
    x23 = fork(both, x21, x22)
    x24 = compose(x23, initset)
    x25 = sfilter(x16, x20)
    x26 = sfilter(x25, x24)
    x27 = product(x15, x26)
    x28 = fork(subtract, last, first)
    x29 = fork(shoot, first, x28)
    x30 = mapply(x29, x27)
    O = fill(x14, FOUR, x30)
    return O



def solve_d511f180_508bd3b6(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = width(x1)
    x3 = objects(x1, T, T, T)
    x4 = argmin(x3, size)
    x5 = argmax(x3, size)
    x6 = ulcorner(x4)
    x7 = urcorner(x4)
    x8 = index(x1, x6)
    x9 = equality(x8, EIGHT)
    x10 = branch(x9, x6, x7)
    x11 = branch(x9, UNITY, DOWN_LEFT)
    x12 = multiply(x11, x2)
    x13 = double(x12)
    x14 = add(x10, x13)
    x15 = subtract(x10, x13)
    x16 = connect(x14, x15)
    x17 = fill(x1, THREE, x16)
    x18 = paint(x17, x5)
    x19 = objects(x18, T, F, T)
    x20 = rbind(adjacent, x5)
    x21 = extract(x19, x20)
    x22 = first(x21)
    x23 = last(x22)
    x24 = flip(x9)
    x25 = branch(x24, UNITY, DOWN_LEFT)
    x26 = multiply(x25, x2)
    x27 = double(x26)
    x28 = add(x23, x27)
    x29 = subtract(x23, x27)
    x30 = connect(x28, x29)
    x31 = fill(x18, THREE, x30)
    x32 = paint(x31, x4)
    O = paint(x32, x5)
    return O



def solve_d511f180_d07ae81c(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, F, F)
    x3 = sizefilter(x2, ONE)
    x4 = apply(color, x3)
    x5 = difference(x2, x3)
    x6 = apply(color, x5)
    x7 = first(x6)
    x8 = last(x6)
    x9 = ofcolor(x1, x7)
    x10 = ofcolor(x1, x8)
    x11 = rbind(shoot, UNITY)
    x12 = rbind(shoot, NEG_UNITY)
    x13 = rbind(shoot, DOWN_LEFT)
    x14 = rbind(shoot, UP_RIGHT)
    x15 = fork(combine, x11, x12)
    x16 = fork(combine, x13, x14)
    x17 = fork(combine, x15, x16)
    x18 = compose(x17, center)
    x19 = mapply(x18, x3)
    x20 = intersection(x9, x19)
    x21 = intersection(x10, x19)
    x22 = first(x3)
    x23 = color(x22)
    x24 = center(x22)
    x25 = neighbors(x24)
    x26 = toobject(x25, x1)
    x27 = mostcolor(x26)
    x28 = other(x4, x23)
    x29 = equality(x27, x7)
    x30 = branch(x29, x23, x28)
    x31 = branch(x29, x28, x23)
    x32 = fill(x1, x30, x20)
    O = fill(x32, x31, x21)
    return O



def solve_d511f180_0e206a2e(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = palette(x1)
    x3 = objects(x1, F, F, T)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, numcolors)
    x6 = sfilter(x3, x5)
    x7 = remove(ZERO, x2)
    x8 = lbind(colorcount, x1)
    x9 = argmax(x7, x8)
    x10 = remove(x9, x7)
    x11 = rbind(contained, x10)
    x12 = compose(x11, first)
    x13 = rbind(sfilter, x12)
    x14 = lbind(rbind, subtract)
    x15 = lbind(occurrences, x1)
    x16 = lbind(lbind, shift)
    x17 = compose(x14, ulcorner)
    x18 = chain(x17, x13, normalize)
    x19 = chain(x15, x13, normalize)
    x20 = fork(apply, x18, x19)
    x21 = compose(x16, normalize)
    x22 = fork(mapply, x21, x20)
    x23 = astuple(cmirror, dmirror)
    x24 = astuple(hmirror, vmirror)
    x25 = combine(x23, x24)
    x26 = product(x25, x25)
    x27 = fork(compose, first, last)
    x28 = apply(x27, x26)
    x29 = totuple(x28)
    x30 = combine(x25, x29)
    x31 = lbind(rapply, x30)
    x32 = mapply(x31, x6)
    x33 = mapply(x22, x32)
    x34 = paint(x1, x33)
    x35 = merge(x6)
    O = cover(x34, x35)
    return O



def solve_d511f180_d22278a0(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = fork(multiply, sign, identity)
    x5 = lbind(apply, x4)
    x6 = chain(even, maximum, x5)
    x7 = lbind(sfilter, x2)
    x8 = fork(add, first, last)
    x9 = rbind(remove, x3)
    x10 = compose(center, last)
    x11 = fork(subtract, first, x10)
    x12 = compose(x6, x11)
    x13 = lbind(rbind, equality)
    x14 = lbind(argmin, x3)
    x15 = chain(x8, x5, x11)
    x16 = lbind(lbind, astuple)
    x17 = lbind(rbind, astuple)
    x18 = lbind(compose, x12)
    x19 = lbind(compose, x15)
    x20 = compose(x19, x16)
    x21 = compose(x19, x17)
    x22 = compose(x14, x20)
    x23 = rbind(compose, x22)
    x24 = lbind(lbind, valmin)
    x25 = rbind(compose, x20)
    x26 = chain(x25, x24, x9)
    x27 = lbind(fork, greater)
    x28 = fork(x27, x26, x21)
    x29 = chain(x7, x18, x17)
    x30 = chain(x7, x23, x13)
    x31 = fork(intersection, x29, x30)
    x32 = compose(x7, x28)
    x33 = fork(intersection, x31, x32)
    x34 = fork(recolor, color, x33)
    x35 = mapply(x34, x3)
    O = paint(x1, x35)
    return O



def solve_d511f180_150deff5(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = canvas(FIVE, TWO_BY_TWO)
    x3 = asobject(x2)
    x4 = occurrences(x1, x3)
    x5 = lbind(shift, x3)
    x6 = mapply(x5, x4)
    x7 = fill(x1, EIGHT, x6)
    x8 = canvas(FIVE, UNITY)
    x9 = astuple(TWO, ONE)
    x10 = canvas(EIGHT, x9)
    x11 = vconcat(x10, x8)
    x12 = asobject(x11)
    x13 = occurrences(x7, x12)
    x14 = lbind(shift, x12)
    x15 = mapply(x14, x13)
    x16 = fill(x7, TWO, x15)
    x17 = astuple(ONE, THREE)
    x18 = canvas(FIVE, x17)
    x19 = asobject(x18)
    x20 = occurrences(x16, x19)
    x21 = lbind(shift, x19)
    x22 = mapply(x21, x20)
    x23 = fill(x16, TWO, x22)
    x24 = hmirror(x11)
    x25 = asobject(x24)
    x26 = occurrences(x23, x25)
    x27 = lbind(shift, x25)
    x28 = mapply(x27, x26)
    x29 = fill(x23, TWO, x28)
    x30 = dmirror(x11)
    x31 = asobject(x30)
    x32 = occurrences(x29, x31)
    x33 = lbind(shift, x31)
    x34 = mapply(x33, x32)
    x35 = fill(x29, TWO, x34)
    x36 = vmirror(x30)
    x37 = asobject(x36)
    x38 = occurrences(x35, x37)
    x39 = lbind(shift, x37)
    x40 = mapply(x39, x38)
    O = fill(x35, TWO, x40)
    return O



def solve_d511f180_9d9215db(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = initset(x1)
    x6 = chain(numcolors, lefthalf, tophalf)
    x7 = insert(x2, x5)
    x8 = insert(x3, x7)
    x9 = insert(x4, x8)
    x10 = argmax(x9, x6)
    x11 = vmirror(x10)
    x12 = papply(pair, x10, x11)
    x13 = lbind(apply, maximum)
    x14 = apply(x13, x12)
    x15 = partition(x14)
    x16 = sizefilter(x15, FOUR)
    x17 = apply(llcorner, x16)
    x18 = apply(lrcorner, x16)
    x19 = combine(x17, x18)
    x20 = cover(x14, x19)
    x21 = tojvec(NEG_TWO)
    x22 = rbind(add, ZERO_BY_TWO)
    x23 = rbind(add, x21)
    x24 = compose(x22, ulcorner)
    x25 = compose(x23, urcorner)
    x26 = fork(connect, x24, x25)
    x27 = compose(even, last)
    x28 = rbind(sfilter, x27)
    x29 = chain(normalize, x28, x26)
    x30 = fork(shift, x29, x24)
    x31 = fork(recolor, color, x30)
    x32 = mapply(x31, x16)
    x33 = paint(x20, x32)
    x34 = rot90(x33)
    x35 = rot180(x33)
    x36 = rot270(x33)
    x37 = papply(pair, x33, x34)
    x38 = apply(x13, x37)
    x39 = papply(pair, x38, x35)
    x40 = apply(x13, x39)
    x41 = papply(pair, x40, x36)
    O = apply(x13, x41)
    return O



def solve_d511f180_264363fd(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, F, F, T)
    x3 = argmin(x2, size)
    x4 = normalize(x3)
    x5 = height(x3)
    x6 = width(x3)
    x7 = equality(x5, FIVE)
    x8 = equality(x6, FIVE)
    x9 = astuple(x7, x8)
    x10 = add(UNITY, x9)
    x11 = invert(x10)
    x12 = center(x3)
    x13 = index(x1, x12)
    x14 = branch(x7, UP, RIGHT)
    x15 = add(x14, x12)
    x16 = index(x1, x15)
    x17 = astuple(x13, ORIGIN)
    x18 = initset(x17)
    x19 = cover(x1, x3)
    x20 = mostcolor(x19)
    x21 = ofcolor(x19, x20)
    x22 = occurrences(x19, x18)
    x23 = objects(x19, F, F, T)
    x24 = rbind(occurrences, x18)
    x25 = rbind(subgrid, x19)
    x26 = compose(x24, x25)
    x27 = lbind(mapply, vfrontier)
    x28 = lbind(mapply, hfrontier)
    x29 = compose(x27, x26)
    x30 = compose(x28, x26)
    x31 = branch(x7, x29, x30)
    x32 = branch(x8, x30, x29)
    x33 = fork(combine, x31, x32)
    x34 = lbind(recolor, x16)
    x35 = compose(x34, x33)
    x36 = fork(paint, x25, x35)
    x37 = compose(asobject, x36)
    x38 = fork(shift, x37, ulcorner)
    x39 = mapply(x38, x23)
    x40 = paint(x19, x39)
    x41 = shift(x4, x11)
    x42 = lbind(shift, x41)
    x43 = mapply(x42, x22)
    x44 = paint(x40, x43)
    O = fill(x44, x20, x21)
    return O



def solve_d511f180_234bbc79(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, F, F, T)
    x3 = rbind(other, FIVE)
    x4 = compose(x3, palette)
    x5 = fork(recolor, x4, identity)
    x6 = apply(x5, x2)
    x7 = order(x6, leftmost)
    x8 = compose(last, last)
    x9 = lbind(matcher, x8)
    x10 = compose(x9, leftmost)
    x11 = compose(x9, rightmost)
    x12 = fork(sfilter, identity, x10)
    x13 = fork(sfilter, identity, x11)
    x14 = compose(dneighbors, last)
    x15 = rbind(chain, x14)
    x16 = lbind(x15, size)
    x17 = lbind(rbind, intersection)
    x18 = chain(x16, x17, toindices)
    x19 = fork(argmin, x12, x18)
    x20 = fork(argmin, x13, x18)
    x21 = compose(last, x19)
    x22 = compose(last, x20)
    x23 = astuple(ZERO, DOWN_LEFT)
    x24 = initset(x23)
    x25 = lbind(add, RIGHT)
    x26 = chain(x21, first, last)
    x27 = compose(x22, first)
    x28 = fork(subtract, x27, x26)
    x29 = compose(first, last)
    x30 = compose(x25, x28)
    x31 = fork(shift, x29, x30)
    x32 = fork(combine, first, x31)
    x33 = fork(remove, x29, last)
    x34 = fork(astuple, x32, x33)
    x35 = size(x2)
    x36 = power(x34, x35)
    x37 = astuple(x24, x7)
    x38 = x36(x37)
    x39 = first(x38)
    x40 = width(x39)
    x41 = decrement(x40)
    x42 = astuple(THREE, x41)
    x43 = canvas(ZERO, x42)
    O = paint(x43, x39)
    return O



def solve_d511f180_22233c11(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, T, T, T)
    x3 = rbind(upscale, TWO)
    x4 = chain(invert, halve, shape)
    x5 = fork(combine, hfrontier, vfrontier)
    x6 = compose(x3, vmirror)
    x7 = fork(shift, x6, x4)
    x8 = compose(toindices, x7)
    x9 = lbind(mapply, x5)
    x10 = compose(x9, toindices)
    x11 = fork(difference, x8, x10)
    x12 = mapply(x11, x2)
    O = fill(x1, EIGHT, x12)
    return O



def solve_d511f180_a64e4611(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = asindices(x1)
    x3 = fork(product, identity, identity)
    x4 = lbind(canvas, ZERO)
    x5 = compose(asobject, x4)
    x6 = fork(multiply, first, last)
    x7 = compose(positive, size)
    x8 = lbind(lbind, shift)
    x9 = rbind(fork, x6)
    x10 = lbind(x9, multiply)
    x11 = lbind(chain, x7)
    x12 = rbind(x11, x5)
    x13 = lbind(lbind, occurrences)
    x14 = chain(x10, x12, x13)
    x15 = compose(x3, first)
    x16 = compose(x14, last)
    x17 = fork(argmax, x15, x16)
    x18 = chain(x8, x5, x17)
    x19 = compose(x5, x17)
    x20 = fork(occurrences, last, x19)
    x21 = fork(mapply, x18, x20)
    x22 = multiply(TWO, SIX)
    x23 = interval(THREE, x22, ONE)
    x24 = astuple(x23, x1)
    x25 = x21(x24)
    x26 = fill(x1, THREE, x25)
    x27 = interval(THREE, TEN, ONE)
    x28 = astuple(x27, x26)
    x29 = x21(x28)
    x30 = fill(x26, THREE, x29)
    x31 = astuple(x27, x30)
    x32 = x21(x31)
    x33 = fill(x30, THREE, x32)
    x34 = rbind(toobject, x33)
    x35 = rbind(colorcount, THREE)
    x36 = chain(x35, x34, neighbors)
    x37 = matcher(x36, EIGHT)
    x38 = sfilter(x2, x37)
    x39 = fill(x1, THREE, x38)
    x40 = ofcolor(x39, ZERO)
    x41 = rbind(bordering, x39)
    x42 = compose(x41, initset)
    x43 = lbind(contained, THREE)
    x44 = rbind(toobject, x39)
    x45 = chain(x43, palette, x44)
    x46 = compose(x45, dneighbors)
    x47 = fork(both, x46, x42)
    x48 = sfilter(x40, x47)
    O = fill(x39, THREE, x48)
    return O



def solve_d511f180_97a05b5b(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = rbind(greater, ONE)
    x6 = compose(x5, numcolors)
    x7 = sfilter(x2, x6)
    x8 = lbind(rbind, subtract)
    x9 = switch(x4, TWO, ZERO)
    x10 = lbind(occurrences, x9)
    x11 = lbind(lbind, shift)
    x12 = compose(x8, ulcorner)
    x13 = matcher(first, TWO)
    x14 = compose(flip, x13)
    x15 = rbind(sfilter, x13)
    x16 = rbind(sfilter, x14)
    x17 = lbind(recolor, ZERO)
    x18 = compose(x17, x16)
    x19 = fork(combine, x18, x15)
    x20 = chain(x12, x19, normalize)
    x21 = objects(x9, T, T, T)
    x22 = apply(toindices, x21)
    x23 = chain(x10, x19, normalize)
    x24 = rbind(colorcount, TWO)
    x25 = lbind(sfilter, x22)
    x26 = chain(size, first, x25)
    x27 = compose(positive, size)
    x28 = lbind(lbind, contained)
    x29 = chain(x27, x25, x28)
    x30 = compose(x26, x28)
    x31 = rbind(sfilter, x29)
    x32 = compose(x31, x23)
    x33 = lbind(rbind, equality)
    x34 = rbind(compose, x30)
    x35 = chain(x34, x33, x24)
    x36 = fork(sfilter, x32, x35)
    x37 = fork(apply, x20, x36)
    x38 = compose(x11, normalize)
    x39 = fork(mapply, x38, x37)
    x40 = astuple(cmirror, dmirror)
    x41 = astuple(hmirror, vmirror)
    x42 = combine(x40, x41)
    x43 = product(x42, x42)
    x44 = fork(compose, first, last)
    x45 = apply(x44, x43)
    x46 = lbind(rapply, x45)
    x47 = mapply(x46, x7)
    x48 = mapply(x39, x47)
    x49 = paint(x4, x48)
    x50 = palette(x48)
    x51 = lbind(remove, TWO)
    x52 = x51(x50)
    x53 = chain(first, x51, palette)
    x54 = rbind(contained, x52)
    x55 = chain(flip, x54, x53)
    x56 = sfilter(x7, x55)
    x57 = fork(apply, x20, x23)
    x58 = fork(mapply, x38, x57)
    x59 = mapply(x46, x56)
    x60 = mapply(x58, x59)
    O = paint(x49, x60)
    return O



def solve_d511f180_3e980e27(I):
    x1 = switch(I, FIVE, EIGHT)
    x2 = objects(x1, F, T, T)
    x3 = astuple(TEN, TEN)
    x4 = invert(x3)
    x5 = astuple(TWO, x4)
    x6 = astuple(THREE, x4)
    x7 = initset(x5)
    x8 = insert(x6, x7)
    x9 = insert(x8, x2)
    x10 = lbind(contained, TWO)
    x11 = lbind(contained, THREE)
    x12 = compose(invert, ulcorner)
    x13 = lbind(compose, x12)
    x14 = lbind(rbind, sfilter)
    x15 = compose(x13, x14)
    x16 = rbind(compose, center)
    x17 = lbind(lbind, shift)
    x18 = x15(x10)
    x19 = x15(x11)
    x20 = fork(shift, identity, x18)
    x21 = fork(shift, identity, x19)
    x22 = compose(x10, palette)
    x23 = compose(x11, palette)
    x24 = sfilter(x9, x22)
    x25 = argmax(x24, size)
    x26 = remove(x25, x24)
    x27 = vmirror(x25)
    x28 = chain(x16, x17, x20)
    x29 = x28(x27)
    x30 = mapply(x29, x26)
    x31 = sfilter(x9, x23)
    x32 = argmax(x31, size)
    x33 = remove(x32, x31)
    x34 = chain(x16, x17, x21)
    x35 = x34(x32)
    x36 = mapply(x35, x33)
    x37 = combine(x30, x36)
    O = paint(x1, x37)
    return O



def solve_ed36ccf7_67a3c6ac(I):
    x1 = rot270(I)
    O = vmirror(x1)
    return O



def solve_ed36ccf7_68b16354(I):
    x1 = rot270(I)
    O = hmirror(x1)
    return O



def solve_ed36ccf7_74dd1130(I):
    x1 = rot270(I)
    O = dmirror(x1)
    return O



def solve_ed36ccf7_3c9b0459(I):
    x1 = rot270(I)
    O = rot180(x1)
    return O



def solve_ed36ccf7_6150a2bd(I):
    x1 = rot270(I)
    O = rot180(x1)
    return O



def solve_ed36ccf7_9172f3a0(I):
    x1 = rot270(I)
    O = upscale(x1, THREE)
    return O



def solve_ed36ccf7_9dfd6313(I):
    x1 = rot270(I)
    O = dmirror(x1)
    return O



def solve_ed36ccf7_a416b8f3(I):
    x1 = rot270(I)
    O = hconcat(x1, x1)
    return O



def solve_ed36ccf7_b1948b0a(I):
    x1 = rot270(I)
    O = replace(x1, SIX, TWO)
    return O



def solve_ed36ccf7_c59eb873(I):
    x1 = rot270(I)
    O = upscale(x1, TWO)
    return O



def solve_ed36ccf7_c8f0f002(I):
    x1 = rot270(I)
    O = replace(x1, SEVEN, FIVE)
    return O



def solve_ed36ccf7_d10ecb37(I):
    x1 = rot270(I)
    O = crop(x1, ORIGIN, TWO_BY_TWO)
    return O



def solve_ed36ccf7_d511f180(I):
    x1 = rot270(I)
    O = switch(x1, FIVE, EIGHT)
    return O



def solve_ed36ccf7_4c4377d9(I):
    x1 = rot270(I)
    x2 = hmirror(x1)
    O = vconcat(x2, x1)
    return O



def solve_ed36ccf7_6d0aefbc(I):
    x1 = rot270(I)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_ed36ccf7_6fa7a44f(I):
    x1 = rot270(I)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_ed36ccf7_5614dbcf(I):
    x1 = rot270(I)
    x2 = replace(x1, FIVE, ZERO)
    O = downscale(x2, THREE)
    return O



def solve_ed36ccf7_5bd6f4ac(I):
    x1 = rot270(I)
    x2 = tojvec(SIX)
    O = crop(x1, x2, THREE_BY_THREE)
    return O



def solve_ed36ccf7_5582e5ca(I):
    x1 = rot270(I)
    x2 = mostcolor(x1)
    O = canvas(x2, THREE_BY_THREE)
    return O



def solve_ed36ccf7_8be77c9e(I):
    x1 = rot270(I)
    x2 = hmirror(x1)
    O = vconcat(x1, x2)
    return O



def solve_ed36ccf7_c9e6f938(I):
    x1 = rot270(I)
    x2 = vmirror(x1)
    O = hconcat(x1, x2)
    return O



def solve_ed36ccf7_2dee498d(I):
    x1 = rot270(I)
    x2 = hsplit(x1, THREE)
    O = first(x2)
    return O



def solve_ed36ccf7_1cf80156(I):
    x1 = rot270(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = subgrid(x3, x1)
    return O



def solve_ed36ccf7_32597951(I):
    x1 = rot270(I)
    x2 = ofcolor(x1, EIGHT)
    x3 = delta(x2)
    O = fill(x1, THREE, x3)
    return O



def solve_ed36ccf7_25ff71a9(I):
    x1 = rot270(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    O = move(x1, x3, DOWN)
    return O



def solve_ed36ccf7_0b148d64(I):
    x1 = rot270(I)
    x2 = partition(x1)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_ed36ccf7_1f85a75f(I):
    x1 = rot270(I)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_ed36ccf7_23b5c85d(I):
    x1 = rot270(I)
    x2 = objects(x1, T, T, T)
    x3 = argmin(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_ed36ccf7_9ecd008a(I):
    x1 = rot270(I)
    x2 = vmirror(x1)
    x3 = ofcolor(x1, ZERO)
    O = subgrid(x3, x2)
    return O



def solve_ed36ccf7_ac0a08a4(I):
    x1 = rot270(I)
    x2 = colorcount(x1, ZERO)
    x3 = subtract(NINE, x2)
    O = upscale(x1, x3)
    return O



def solve_ed36ccf7_be94b721(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    O = subgrid(x3, x1)
    return O



def solve_ed36ccf7_c909285e(I):
    x1 = rot270(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    O = subgrid(x3, x1)
    return O



def solve_ed36ccf7_f25ffba3(I):
    x1 = rot270(I)
    x2 = bottomhalf(x1)
    x3 = hmirror(x2)
    O = vconcat(x3, x2)
    return O



def solve_ed36ccf7_c1d99e64(I):
    x1 = rot270(I)
    x2 = frontiers(x1)
    x3 = merge(x2)
    O = fill(x1, TWO, x3)
    return O



def solve_ed36ccf7_b91ae062(I):
    x1 = rot270(I)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    O = upscale(x1, x3)
    return O



def solve_ed36ccf7_3aa6fb7a(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = mapply(corners, x2)
    O = underfill(x1, ONE, x3)
    return O



def solve_ed36ccf7_7b7f7511(I):
    x1 = rot270(I)
    x2 = portrait(x1)
    x3 = branch(x2, tophalf, lefthalf)
    O = x3(x1)
    return O



def solve_ed36ccf7_4258a5f9(I):
    x1 = rot270(I)
    x2 = ofcolor(x1, FIVE)
    x3 = mapply(neighbors, x2)
    O = fill(x1, ONE, x3)
    return O



def solve_ed36ccf7_2dc579da(I):
    x1 = rot270(I)
    x2 = vsplit(x1, TWO)
    x3 = rbind(hsplit, TWO)
    x4 = mapply(x3, x2)
    O = argmax(x4, numcolors)
    return O



def solve_ed36ccf7_28bf18c6(I):
    x1 = rot270(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = hconcat(x4, x4)
    return O



def solve_ed36ccf7_3af2c5a8(I):
    x1 = rot270(I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_ed36ccf7_44f52bb0(I):
    x1 = rot270(I)
    x2 = vmirror(x1)
    x3 = equality(x2, x1)
    x4 = branch(x3, ONE, SEVEN)
    O = canvas(x4, UNITY)
    return O



def solve_ed36ccf7_62c24649(I):
    x1 = rot270(I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_ed36ccf7_67e8384a(I):
    x1 = rot270(I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hmirror(x3)
    O = vconcat(x3, x4)
    return O



def solve_ed36ccf7_7468f01a(I):
    x1 = rot270(I)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = vmirror(x4)
    return O



def solve_ed36ccf7_662c240a(I):
    x1 = rot270(I)
    x2 = vsplit(x1, THREE)
    x3 = fork(equality, dmirror, identity)
    x4 = compose(flip, x3)
    O = extract(x2, x4)
    return O



def solve_ed36ccf7_42a50994(I):
    x1 = rot270(I)
    x2 = objects(x1, T, T, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = cover(x1, x4)
    return O



def solve_ed36ccf7_56ff96f3(I):
    x1 = rot270(I)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = mapply(x3, x2)
    O = paint(x1, x4)
    return O



def solve_ed36ccf7_50cb2852(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = compose(backdrop, inbox)
    x4 = mapply(x3, x2)
    O = fill(x1, EIGHT, x4)
    return O



def solve_ed36ccf7_4347f46a(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(difference, toindices, box)
    x4 = mapply(x3, x2)
    O = fill(x1, ZERO, x4)
    return O



def solve_ed36ccf7_46f33fce(I):
    x1 = rot270(I)
    x2 = rot180(x1)
    x3 = downscale(x2, TWO)
    x4 = rot180(x3)
    O = upscale(x4, FOUR)
    return O



def solve_ed36ccf7_a740d043(I):
    x1 = rot270(I)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    O = replace(x4, ONE, ZERO)
    return O



def solve_ed36ccf7_a79310a0(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = move(x1, x3, DOWN)
    O = replace(x4, EIGHT, TWO)
    return O



def solve_ed36ccf7_aabf363d(I):
    x1 = rot270(I)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, ZERO)
    x4 = leastcolor(x3)
    O = replace(x3, x4, x2)
    return O



def solve_ed36ccf7_ae4f1146(I):
    x1 = rot270(I)
    x2 = objects(x1, F, F, T)
    x3 = rbind(colorcount, ONE)
    x4 = argmax(x2, x3)
    O = subgrid(x4, x1)
    return O



def solve_ed36ccf7_b27ca6d3(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, THREE, x4)
    return O



def solve_ed36ccf7_ce22a75a(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = mapply(backdrop, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_ed36ccf7_dc1df850(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = mapply(outbox, x3)
    O = fill(x1, ONE, x4)
    return O



def solve_ed36ccf7_f25fbde4(I):
    x1 = rot270(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    O = upscale(x4, TWO)
    return O



def solve_ed36ccf7_44d8ac46(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(delta, x2)
    x4 = mfilter(x3, square)
    O = fill(x1, TWO, x4)
    return O



def solve_ed36ccf7_1e0a9b12(I):
    x1 = rot270(I)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = apply(x3, x2)
    O = rot90(x4)
    return O



def solve_ed36ccf7_0d3d703e(I):
    x1 = rot270(I)
    x2 = switch(x1, THREE, FOUR)
    x3 = switch(x2, EIGHT, NINE)
    x4 = switch(x3, TWO, SIX)
    O = switch(x4, ONE, FIVE)
    return O



def solve_ed36ccf7_3618c87e(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = move(x1, x4, TWO_BY_ZERO)
    return O



def solve_ed36ccf7_1c786137(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, height)
    x4 = subgrid(x3, x1)
    O = trim(x4)
    return O



def solve_ed36ccf7_445eab21(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(multiply, height, width)
    x4 = argmax(x2, x3)
    x5 = color(x4)
    O = canvas(x5, TWO_BY_TWO)
    return O



def solve_ed36ccf7_6f8cd79b(I):
    x1 = rot270(I)
    x2 = asindices(x1)
    x3 = apply(initset, x2)
    x4 = rbind(bordering, x1)
    x5 = mfilter(x3, x4)
    O = fill(x1, EIGHT, x5)
    return O



def solve_ed36ccf7_2013d3e2(I):
    x1 = rot270(I)
    x2 = objects(x1, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = lefthalf(x4)
    O = tophalf(x5)
    return O



def solve_ed36ccf7_41e4d17e(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = mapply(x4, x2)
    O = underfill(x1, SIX, x5)
    return O



def solve_ed36ccf7_9565186b(I):
    x1 = rot270(I)
    x2 = shape(x1)
    x3 = objects(x1, T, F, F)
    x4 = argmax(x3, size)
    x5 = canvas(FIVE, x2)
    O = paint(x5, x4)
    return O



def solve_ed36ccf7_aedd82e4(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, TWO)
    x4 = sizefilter(x3, ONE)
    x5 = merge(x4)
    O = fill(x1, ONE, x5)
    return O



def solve_ed36ccf7_bb43febb(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, FIVE)
    x4 = compose(backdrop, inbox)
    x5 = mapply(x4, x3)
    O = fill(x1, TWO, x5)
    return O



def solve_ed36ccf7_e98196ab(I):
    x1 = rot270(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = objects(x2, T, F, T)
    x5 = merge(x4)
    O = paint(x3, x5)
    return O



def solve_ed36ccf7_f76d97a5(I):
    x1 = rot270(I)
    x2 = palette(x1)
    x3 = first(x2)
    x4 = last(x2)
    x5 = switch(x1, x3, x4)
    O = replace(x5, FIVE, ZERO)
    return O



def solve_ed36ccf7_ce9e57f2(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = fork(connect, ulcorner, centerofmass)
    x4 = mapply(x3, x2)
    x5 = fill(x1, EIGHT, x4)
    O = switch(x5, EIGHT, TWO)
    return O



def solve_ed36ccf7_22eb0ac0(I):
    x1 = rot270(I)
    x2 = fgpartition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    O = paint(x1, x5)
    return O



def solve_ed36ccf7_9f236235(I):
    x1 = rot270(I)
    x2 = compress(x1)
    x3 = objects(x1, T, F, F)
    x4 = vmirror(x2)
    x5 = valmin(x3, width)
    O = downscale(x4, x5)
    return O



def solve_ed36ccf7_a699fb00(I):
    x1 = rot270(I)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, RIGHT)
    x4 = shift(x2, LEFT)
    x5 = intersection(x3, x4)
    O = fill(x1, TWO, x5)
    return O



def solve_ed36ccf7_46442a0e(I):
    x1 = rot270(I)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_ed36ccf7_7fe24cdd(I):
    x1 = rot270(I)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = hconcat(x1, x2)
    x6 = hconcat(x4, x3)
    O = vconcat(x5, x6)
    return O



def solve_ed36ccf7_0ca9ddb6(I):
    x1 = rot270(I)
    x2 = ofcolor(x1, ONE)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x3)
    x6 = fill(x1, SEVEN, x4)
    O = fill(x6, FOUR, x5)
    return O



def solve_ed36ccf7_543a7ed5(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, SIX)
    x4 = mapply(outbox, x3)
    x5 = fill(x1, THREE, x4)
    x6 = mapply(delta, x3)
    O = fill(x5, FOUR, x6)
    return O



def solve_ed36ccf7_0520fde7(I):
    x1 = rot270(I)
    x2 = vmirror(x1)
    x3 = lefthalf(x2)
    x4 = righthalf(x2)
    x5 = vmirror(x4)
    x6 = cellwise(x3, x5, ZERO)
    O = replace(x6, ONE, TWO)
    return O



def solve_ed36ccf7_dae9d2b5(I):
    x1 = rot270(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, FOUR)
    x5 = ofcolor(x3, THREE)
    x6 = combine(x4, x5)
    O = fill(x2, SIX, x6)
    return O



def solve_ed36ccf7_8d5021e8(I):
    x1 = rot270(I)
    x2 = vmirror(x1)
    x3 = hconcat(x2, x1)
    x4 = hmirror(x3)
    x5 = vconcat(x3, x4)
    x6 = vconcat(x5, x3)
    O = hmirror(x6)
    return O



def solve_ed36ccf7_b60334d2(I):
    x1 = rot270(I)
    x2 = ofcolor(x1, FIVE)
    x3 = replace(x1, FIVE, ZERO)
    x4 = mapply(dneighbors, x2)
    x5 = mapply(ineighbors, x2)
    x6 = fill(x3, ONE, x4)
    O = fill(x6, FIVE, x5)
    return O



def solve_ed36ccf7_b94a9452(I):
    x1 = rot270(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = leastcolor(x4)
    x6 = mostcolor(x4)
    O = switch(x4, x5, x6)
    return O



def solve_ed36ccf7_d037b0a7(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, DOWN)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    O = paint(x1, x6)
    return O



def solve_ed36ccf7_d0f5fe59(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = astuple(x3, x3)
    x5 = canvas(ZERO, x4)
    x6 = shoot(ORIGIN, UNITY)
    O = fill(x5, EIGHT, x6)
    return O



def solve_ed36ccf7_e3497940(I):
    x1 = rot270(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = vmirror(x3)
    x5 = objects(x4, T, F, T)
    x6 = merge(x5)
    O = paint(x2, x6)
    return O



def solve_ed36ccf7_e9afcf9a(I):
    x1 = rot270(I)
    x2 = astuple(TWO, ONE)
    x3 = crop(x1, ORIGIN, x2)
    x4 = hmirror(x3)
    x5 = hconcat(x3, x4)
    x6 = hconcat(x5, x5)
    O = hconcat(x6, x5)
    return O



def solve_ed36ccf7_d406998b(I):
    x1 = rot270(I)
    x2 = vmirror(x1)
    x3 = ofcolor(x2, FIVE)
    x4 = compose(even, last)
    x5 = sfilter(x3, x4)
    x6 = fill(x2, THREE, x5)
    O = vmirror(x6)
    return O



def solve_ed36ccf7_3906de3d(I):
    x1 = rot270(I)
    x2 = rot270(x1)
    x3 = rbind(order, identity)
    x4 = switch(x2, ONE, TWO)
    x5 = apply(x3, x4)
    x6 = switch(x5, ONE, TWO)
    O = cmirror(x6)
    return O



def solve_ed36ccf7_00d62c1b(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, FOUR, x6)
    return O



def solve_ed36ccf7_7b6016b9(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, F)
    x3 = rbind(bordering, x1)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x4)
    x6 = fill(x1, TWO, x5)
    O = replace(x6, ZERO, THREE)
    return O



def solve_ed36ccf7_67385a82(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, THREE)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = merge(x5)
    O = fill(x1, EIGHT, x6)
    return O



def solve_ed36ccf7_a5313dff(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, x1)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(x1, ONE, x6)
    return O



def solve_ed36ccf7_ea32f347(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, FIVE, FOUR)
    x4 = argmin(x2, size)
    x5 = argmax(x2, size)
    x6 = fill(x3, ONE, x5)
    O = fill(x6, TWO, x4)
    return O



def solve_ed36ccf7_d631b094(I):
    x1 = rot270(I)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = ofcolor(x1, x3)
    x5 = size(x4)
    x6 = astuple(ONE, x5)
    O = canvas(x3, x6)
    return O



def solve_ed36ccf7_10fcaaa3(I):
    x1 = rot270(I)
    x2 = leastcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = vconcat(x3, x3)
    x5 = ofcolor(x4, x2)
    x6 = mapply(ineighbors, x5)
    O = underfill(x4, EIGHT, x6)
    return O



def solve_ed36ccf7_007bbfb7(I):
    x1 = rot270(I)
    x2 = hupscale(x1, THREE)
    x3 = vupscale(x2, THREE)
    x4 = hconcat(x1, x1)
    x5 = hconcat(x4, x1)
    x6 = vconcat(x5, x5)
    x7 = vconcat(x6, x5)
    O = cellwise(x3, x7, ZERO)
    return O



def solve_ed36ccf7_496994bd(I):
    x1 = rot270(I)
    x2 = width(x1)
    x3 = height(x1)
    x4 = halve(x3)
    x5 = astuple(x4, x2)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    O = vconcat(x6, x7)
    return O



def solve_ed36ccf7_1f876c06(I):
    x1 = rot270(I)
    x2 = fgpartition(x1)
    x3 = compose(last, first)
    x4 = power(last, TWO)
    x5 = fork(connect, x3, x4)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_ed36ccf7_39a8645d(I):
    x1 = rot270(I)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = matcher(color, x5)
    x7 = extract(x2, x6)
    O = subgrid(x7, x1)
    return O



def solve_ed36ccf7_1b2d62fb(I):
    x1 = rot270(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = replace(x2, NINE, ZERO)
    O = fill(x7, EIGHT, x6)
    return O



def solve_ed36ccf7_90c28cc7(I):
    x1 = rot270(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = dedupe(x4)
    x6 = rot90(x5)
    x7 = dedupe(x6)
    O = rot270(x7)
    return O



def solve_ed36ccf7_b6afb2da(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, F)
    x3 = replace(x1, FIVE, TWO)
    x4 = colorfilter(x2, FIVE)
    x5 = mapply(box, x4)
    x6 = fill(x3, FOUR, x5)
    x7 = mapply(corners, x4)
    O = fill(x6, ONE, x7)
    return O



def solve_ed36ccf7_b9b7f026(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, F)
    x3 = argmin(x2, size)
    x4 = rbind(adjacent, x3)
    x5 = remove(x3, x2)
    x6 = extract(x5, x4)
    x7 = color(x6)
    O = canvas(x7, UNITY)
    return O



def solve_ed36ccf7_ba97ae07(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = apply(color, x3)
    x5 = mostcommon(x4)
    x6 = ofcolor(x1, x5)
    x7 = backdrop(x6)
    O = fill(x1, x5, x7)
    return O



def solve_ed36ccf7_c9f8e694(I):
    x1 = rot270(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = ofcolor(x1, ZERO)
    x5 = astuple(x2, ONE)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hupscale(x6, x3)
    O = fill(x7, ZERO, x4)
    return O



def solve_ed36ccf7_d23f8c26(I):
    x1 = rot270(I)
    x2 = asindices(x1)
    x3 = width(x1)
    x4 = halve(x3)
    x5 = matcher(last, x4)
    x6 = compose(flip, x5)
    x7 = sfilter(x2, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_ed36ccf7_d5d6de2d(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = sfilter(x2, square)
    x4 = difference(x2, x3)
    x5 = compose(backdrop, inbox)
    x6 = mapply(x5, x4)
    x7 = replace(x1, TWO, ZERO)
    O = fill(x7, THREE, x6)
    return O



def solve_ed36ccf7_dbc1a6ce(I):
    x1 = rot270(I)
    x2 = ofcolor(x1, ONE)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_ed36ccf7_ded97339(I):
    x1 = rot270(I)
    x2 = ofcolor(x1, EIGHT)
    x3 = product(x2, x2)
    x4 = fork(connect, first, last)
    x5 = apply(x4, x3)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    O = underfill(x1, EIGHT, x7)
    return O



def solve_ed36ccf7_ea786f4a(I):
    x1 = rot270(I)
    x2 = width(x1)
    x3 = shoot(ORIGIN, UNITY)
    x4 = decrement(x2)
    x5 = tojvec(x4)
    x6 = shoot(x5, DOWN_LEFT)
    x7 = combine(x3, x6)
    O = fill(x1, ZERO, x7)
    return O



def solve_ed36ccf7_08ed6ac7(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = order(x2, height)
    x5 = size(x3)
    x6 = interval(x5, ZERO, NEG_ONE)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_ed36ccf7_40853293(I):
    x1 = rot270(I)
    x2 = partition(x1)
    x3 = fork(recolor, color, backdrop)
    x4 = apply(x3, x2)
    x5 = mfilter(x4, hline)
    x6 = mfilter(x4, vline)
    x7 = paint(x1, x5)
    O = paint(x7, x6)
    return O



def solve_ed36ccf7_5521c0d9(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = cover(x1, x3)
    x5 = chain(toivec, invert, height)
    x6 = fork(shift, identity, x5)
    x7 = mapply(x6, x2)
    O = paint(x4, x7)
    return O



def solve_ed36ccf7_f8ff0b80(I):
    x1 = rot270(I)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = rbind(canvas, UNITY)
    x6 = apply(x5, x4)
    x7 = merge(x6)
    O = hmirror(x7)
    return O



def solve_ed36ccf7_85c4e7cd(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, F)
    x3 = compose(invert, size)
    x4 = order(x2, size)
    x5 = order(x2, x3)
    x6 = apply(color, x5)
    x7 = mpapply(recolor, x6, x4)
    O = paint(x1, x7)
    return O



def solve_ed36ccf7_d2abd087(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = matcher(size, SIX)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x3)
    x6 = mfilter(x2, x4)
    x7 = fill(x1, TWO, x5)
    O = fill(x7, ONE, x6)
    return O



def solve_ed36ccf7_017c7c7b(I):
    x1 = rot270(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = equality(x2, x3)
    x5 = crop(x1, TWO_BY_ZERO, THREE_BY_THREE)
    x6 = branch(x4, x3, x5)
    x7 = vconcat(x1, x6)
    O = replace(x7, ONE, TWO)
    return O



def solve_ed36ccf7_363442ee(I):
    x1 = rot270(I)
    x2 = ofcolor(x1, ONE)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = asobject(x3)
    x5 = lbind(shift, x4)
    x6 = compose(x5, decrement)
    x7 = mapply(x6, x2)
    O = paint(x1, x7)
    return O



def solve_ed36ccf7_5168d44c(I):
    x1 = rot270(I)
    x2 = ofcolor(x1, THREE)
    x3 = height(x2)
    x4 = equality(x3, ONE)
    x5 = branch(x4, ZERO_BY_TWO, TWO_BY_ZERO)
    x6 = ofcolor(x1, TWO)
    x7 = recolor(TWO, x6)
    O = move(x1, x7, x5)
    return O



def solve_ed36ccf7_e50d258f(I):
    x1 = rot270(I)
    x2 = width(x1)
    x3 = astuple(NINE, x2)
    x4 = canvas(ZERO, x3)
    x5 = vconcat(x1, x4)
    x6 = objects(x5, F, F, T)
    x7 = rbind(colorcount, TWO)
    x8 = argmax(x6, x7)
    O = subgrid(x8, x1)
    return O



def solve_ed36ccf7_810b9b61(I):
    x1 = rot270(I)
    x2 = objects(x1, T, T, T)
    x3 = apply(toindices, x2)
    x4 = fork(either, vline, hline)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = fork(equality, identity, box)
    x8 = mfilter(x6, x7)
    O = fill(x1, THREE, x8)
    return O



def solve_ed36ccf7_54d82841(I):
    x1 = rot270(I)
    x2 = height(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(last, center)
    x5 = apply(x4, x3)
    x6 = decrement(x2)
    x7 = lbind(astuple, x6)
    x8 = apply(x7, x5)
    O = fill(x1, FOUR, x8)
    return O



def solve_ed36ccf7_60b61512(I):
    x1 = rot270(I)
    x2 = objects(x1, T, T, T)
    x3 = mapply(delta, x2)
    O = fill(x1, SEVEN, x3)
    return O



def solve_ed36ccf7_25d8a9c8(I):
    x1 = rot270(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, THREE)
    x5 = mfilter(x4, hline)
    x6 = toindices(x5)
    x7 = difference(x2, x6)
    x8 = fill(x1, FIVE, x6)
    O = fill(x8, ZERO, x7)
    return O



def solve_ed36ccf7_239be575(I):
    x1 = rot270(I)
    x2 = objects(x1, F, T, T)
    x3 = lbind(contained, TWO)
    x4 = compose(x3, palette)
    x5 = sfilter(x2, x4)
    x6 = size(x5)
    x7 = greater(x6, ONE)
    x8 = branch(x7, ZERO, EIGHT)
    O = canvas(x8, UNITY)
    return O



def solve_ed36ccf7_6430c8c4(I):
    x1 = rot270(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(FOUR, FOUR)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, THREE, x7)
    return O



def solve_ed36ccf7_94f9d214(I):
    x1 = rot270(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = astuple(FOUR, FOUR)
    x7 = canvas(ZERO, x6)
    x8 = intersection(x4, x5)
    O = fill(x7, TWO, x8)
    return O



def solve_ed36ccf7_ce4f8723(I):
    x1 = rot270(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = astuple(FOUR, FOUR)
    x8 = canvas(THREE, x7)
    O = fill(x8, ZERO, x6)
    return O



def solve_ed36ccf7_d13f3404(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = rbind(shoot, UNITY)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = astuple(SIX, SIX)
    x8 = canvas(ZERO, x7)
    O = paint(x8, x6)
    return O



def solve_ed36ccf7_f2829549(I):
    x1 = rot270(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = intersection(x4, x5)
    x7 = shape(x2)
    x8 = canvas(ZERO, x7)
    O = fill(x8, THREE, x6)
    return O



def solve_ed36ccf7_fafffa47(I):
    x1 = rot270(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = shape(x3)
    x5 = ofcolor(x2, ZERO)
    x6 = ofcolor(x3, ZERO)
    x7 = intersection(x5, x6)
    x8 = canvas(ZERO, x4)
    O = fill(x8, TWO, x7)
    return O



def solve_ed36ccf7_e76a88a6(I):
    x1 = rot270(I)
    x2 = objects(x1, F, F, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = remove(x3, x2)
    x6 = apply(ulcorner, x5)
    x7 = lbind(shift, x4)
    x8 = mapply(x7, x6)
    O = paint(x1, x8)
    return O



def solve_ed36ccf7_7f4411dc(I):
    x1 = rot270(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = rbind(difference, x3)
    x5 = rbind(greater, TWO)
    x6 = chain(x5, size, x4)
    x7 = compose(x6, dneighbors)
    x8 = sfilter(x3, x7)
    O = fill(x1, ZERO, x8)
    return O



def solve_ed36ccf7_b230c067(I):
    x1 = rot270(I)
    x2 = objects(x1, T, T, T)
    x3 = totuple(x2)
    x4 = apply(normalize, x3)
    x5 = leastcommon(x4)
    x6 = matcher(normalize, x5)
    x7 = extract(x2, x6)
    x8 = replace(x1, EIGHT, ONE)
    O = fill(x8, TWO, x7)
    return O



def solve_ed36ccf7_e8593010(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = sizefilter(x2, TWO)
    x5 = merge(x3)
    x6 = fill(x1, THREE, x5)
    x7 = merge(x4)
    x8 = fill(x6, TWO, x7)
    O = replace(x8, ZERO, ONE)
    return O



def solve_ed36ccf7_6d75e8bb(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = ulcorner(x3)
    x5 = subgrid(x3, x1)
    x6 = replace(x5, ZERO, TWO)
    x7 = asobject(x6)
    x8 = shift(x7, x4)
    O = paint(x1, x8)
    return O



def solve_ed36ccf7_1190e5a7(I):
    x1 = rot270(I)
    x2 = mostcolor(x1)
    x3 = frontiers(x1)
    x4 = sfilter(x3, vline)
    x5 = difference(x3, x4)
    x6 = astuple(x5, x4)
    x7 = apply(size, x6)
    x8 = increment(x7)
    O = canvas(x2, x8)
    return O



def solve_ed36ccf7_6e02f1e3(I):
    x1 = rot270(I)
    x2 = numcolors(x1)
    x3 = canvas(ZERO, THREE_BY_THREE)
    x4 = equality(x2, THREE)
    x5 = equality(x2, TWO)
    x6 = branch(x4, TWO_BY_ZERO, ORIGIN)
    x7 = branch(x5, TWO_BY_TWO, ZERO_BY_TWO)
    x8 = connect(x6, x7)
    O = fill(x3, FIVE, x8)
    return O



def solve_ed36ccf7_a61f2674(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = replace(x1, FIVE, ZERO)
    x6 = recolor(ONE, x3)
    x7 = recolor(TWO, x4)
    x8 = combine(x6, x7)
    O = paint(x5, x8)
    return O



def solve_ed36ccf7_fcc82909(I):
    x1 = rot270(I)
    x2 = objects(x1, F, T, T)
    x3 = rbind(add, DOWN)
    x4 = compose(x3, llcorner)
    x5 = compose(toivec, numcolors)
    x6 = fork(add, lrcorner, x5)
    x7 = fork(astuple, x4, x6)
    x8 = compose(box, x7)
    x9 = mapply(x8, x2)
    O = fill(x1, THREE, x9)
    return O



def solve_ed36ccf7_253bf280(I):
    x1 = rot270(I)
    x2 = ofcolor(x1, EIGHT)
    x3 = prapply(connect, x2, x2)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = fork(either, vline, hline)
    x8 = mfilter(x6, x7)
    x9 = fill(x1, THREE, x8)
    O = fill(x9, EIGHT, x2)
    return O



def solve_ed36ccf7_1f642eb9(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = rbind(gravitate, x5)
    x7 = compose(crement, x6)
    x8 = fork(shift, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_ed36ccf7_31aa019c(I):
    x1 = rot270(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = first(x3)
    x5 = neighbors(x4)
    x6 = astuple(TEN, TEN)
    x7 = canvas(ZERO, x6)
    x8 = initset(x4)
    x9 = fill(x7, x2, x8)
    O = fill(x9, TWO, x5)
    return O



def solve_ed36ccf7_27a28665(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, F)
    x3 = valmax(x2, size)
    x4 = equality(x3, ONE)
    x5 = equality(x3, FOUR)
    x6 = equality(x3, FIVE)
    x7 = branch(x4, TWO, ONE)
    x8 = branch(x5, THREE, x7)
    x9 = branch(x6, SIX, x8)
    O = canvas(x9, UNITY)
    return O



def solve_ed36ccf7_7ddcd7ec(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = color(x5)
    x7 = lbind(position, x5)
    x8 = fork(shoot, center, x7)
    x9 = mapply(x8, x3)
    O = fill(x1, x6, x9)
    return O



def solve_ed36ccf7_3bd67248(I):
    x1 = rot270(I)
    x2 = height(x1)
    x3 = decrement(x2)
    x4 = decrement(x3)
    x5 = astuple(x4, ONE)
    x6 = astuple(x3, ONE)
    x7 = shoot(x5, UP_RIGHT)
    x8 = shoot(x6, RIGHT)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_ed36ccf7_73251a56(I):
    x1 = rot270(I)
    x2 = dmirror(x1)
    x3 = papply(pair, x1, x2)
    x4 = lbind(apply, maximum)
    x5 = apply(x4, x3)
    x6 = mostcolor(x5)
    x7 = replace(x5, ZERO, x6)
    x8 = index(x7, ORIGIN)
    x9 = shoot(ORIGIN, UNITY)
    O = fill(x7, x8, x9)
    return O



def solve_ed36ccf7_25d487eb(I):
    x1 = rot270(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = ofcolor(x1, x2)
    x5 = center(x4)
    x6 = merge(x3)
    x7 = center(x6)
    x8 = subtract(x7, x5)
    x9 = shoot(x5, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_ed36ccf7_8f2ea7aa(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = merge(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    O = cellwise(x5, x9, ZERO)
    return O



def solve_ed36ccf7_b8825c91(I):
    x1 = rot270(I)
    x2 = replace(x1, FOUR, ZERO)
    x3 = dmirror(x2)
    x4 = papply(pair, x2, x3)
    x5 = lbind(apply, maximum)
    x6 = apply(x5, x4)
    x7 = cmirror(x6)
    x8 = papply(pair, x6, x7)
    x9 = apply(x5, x8)
    O = cmirror(x9)
    return O



def solve_ed36ccf7_cce03e0d(I):
    x1 = rot270(I)
    x2 = upscale(x1, THREE)
    x3 = hconcat(x1, x1)
    x4 = hconcat(x3, x1)
    x5 = vconcat(x4, x4)
    x6 = vconcat(x5, x4)
    x7 = ofcolor(x2, ZERO)
    x8 = ofcolor(x2, ONE)
    x9 = combine(x7, x8)
    O = fill(x6, ZERO, x9)
    return O



def solve_ed36ccf7_d364b489(I):
    x1 = rot270(I)
    x2 = ofcolor(x1, ONE)
    x3 = shift(x2, DOWN)
    x4 = fill(x1, EIGHT, x3)
    x5 = shift(x2, UP)
    x6 = fill(x4, TWO, x5)
    x7 = shift(x2, RIGHT)
    x8 = fill(x6, SIX, x7)
    x9 = shift(x2, LEFT)
    O = fill(x8, SEVEN, x9)
    return O



def solve_ed36ccf7_a5f85a15(I):
    x1 = rot270(I)
    x2 = objects(x1, T, T, T)
    x3 = interval(ONE, NINE, ONE)
    x4 = apply(double, x3)
    x5 = apply(decrement, x4)
    x6 = papply(astuple, x5, x5)
    x7 = apply(ulcorner, x2)
    x8 = lbind(shift, x6)
    x9 = mapply(x8, x7)
    O = fill(x1, FOUR, x9)
    return O



def solve_ed36ccf7_3ac3eb23(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = chain(ineighbors, last, first)
    x4 = fork(recolor, color, x3)
    x5 = mapply(x4, x2)
    x6 = paint(x1, x5)
    x7 = vsplit(x6, THREE)
    x8 = first(x7)
    x9 = vconcat(x8, x8)
    O = vconcat(x8, x9)
    return O



def solve_ed36ccf7_444801d8(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, ONE)
    x4 = rbind(toobject, x1)
    x5 = chain(leastcolor, x4, delta)
    x6 = rbind(shift, UP)
    x7 = compose(x6, backdrop)
    x8 = fork(recolor, x5, x7)
    x9 = mapply(x8, x3)
    O = underpaint(x1, x9)
    return O



def solve_ed36ccf7_22168020(I):
    x1 = rot270(I)
    x2 = palette(x1)
    x3 = remove(ZERO, x2)
    x4 = lbind(ofcolor, x1)
    x5 = lbind(prapply, connect)
    x6 = fork(x5, x4, x4)
    x7 = compose(merge, x6)
    x8 = fork(recolor, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(x1, x9)
    return O



def solve_ed36ccf7_6e82a1ae(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sizefilter, x2)
    x4 = compose(merge, x3)
    x5 = x4(TWO)
    x6 = x4(THREE)
    x7 = x4(FOUR)
    x8 = fill(x1, THREE, x5)
    x9 = fill(x8, TWO, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_ed36ccf7_b2862040(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, NINE)
    x4 = colorfilter(x2, ONE)
    x5 = rbind(bordering, x1)
    x6 = compose(flip, x5)
    x7 = mfilter(x3, x6)
    x8 = rbind(adjacent, x7)
    x9 = mfilter(x4, x8)
    O = fill(x1, EIGHT, x9)
    return O



def solve_ed36ccf7_868de0fa(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, F)
    x3 = sfilter(x2, square)
    x4 = compose(even, height)
    x5 = sfilter(x3, x4)
    x6 = difference(x3, x5)
    x7 = merge(x5)
    x8 = merge(x6)
    x9 = fill(x1, TWO, x7)
    O = fill(x9, SEVEN, x8)
    return O



def solve_ed36ccf7_681b3aeb(I):
    x1 = rot270(I)
    x2 = rot270(x1)
    x3 = objects(x2, T, F, T)
    x4 = argmax(x3, size)
    x5 = argmin(x3, size)
    x6 = color(x5)
    x7 = canvas(x6, THREE_BY_THREE)
    x8 = normalize(x4)
    x9 = paint(x7, x8)
    O = rot90(x9)
    return O



def solve_ed36ccf7_8e5a5113(I):
    x1 = rot270(I)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = rot90(x2)
    x4 = rot180(x2)
    x5 = astuple(x3, x4)
    x6 = astuple(FOUR, EIGHT)
    x7 = apply(tojvec, x6)
    x8 = apply(asobject, x5)
    x9 = mpapply(shift, x8, x7)
    O = paint(x1, x9)
    return O



def solve_ed36ccf7_025d127b(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(color, x2)
    x4 = merge(x2)
    x5 = lbind(colorfilter, x2)
    x6 = rbind(argmax, rightmost)
    x7 = compose(x6, x5)
    x8 = mapply(x7, x3)
    x9 = difference(x4, x8)
    O = move(x1, x9, RIGHT)
    return O



def solve_ed36ccf7_2281f1f4(I):
    x1 = rot270(I)
    x2 = ofcolor(x1, FIVE)
    x3 = product(x2, x2)
    x4 = power(first, TWO)
    x5 = power(last, TWO)
    x6 = fork(astuple, x4, x5)
    x7 = apply(x6, x3)
    x8 = urcorner(x2)
    x9 = remove(x8, x7)
    O = underfill(x1, TWO, x9)
    return O



def solve_ed36ccf7_cf98881b(I):
    x1 = rot270(I)
    x2 = hsplit(x1, THREE)
    x3 = first(x2)
    x4 = remove(x3, x2)
    x5 = first(x4)
    x6 = last(x4)
    x7 = ofcolor(x5, NINE)
    x8 = ofcolor(x3, FOUR)
    x9 = fill(x6, NINE, x7)
    O = fill(x9, FOUR, x8)
    return O



def solve_ed36ccf7_bda2d7a6(I):
    x1 = rot270(I)
    x2 = partition(x1)
    x3 = order(x2, size)
    x4 = apply(color, x3)
    x5 = last(x3)
    x6 = remove(x5, x3)
    x7 = repeat(x5, ONE)
    x8 = combine(x7, x6)
    x9 = mpapply(recolor, x4, x8)
    O = paint(x1, x9)
    return O



def solve_ed36ccf7_6455b5f5(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = argmax(x2, size)
    x5 = valmin(x2, size)
    x6 = sizefilter(x3, x5)
    x7 = recolor(ONE, x4)
    x8 = merge(x6)
    x9 = paint(x1, x7)
    O = fill(x9, EIGHT, x8)
    return O



def solve_ed36ccf7_b8cdaf2b(I):
    x1 = rot270(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = shift(x3, UP)
    x5 = ulcorner(x4)
    x6 = urcorner(x4)
    x7 = shoot(x5, NEG_UNITY)
    x8 = shoot(x6, UP_RIGHT)
    x9 = combine(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_ed36ccf7_bd4472b8(I):
    x1 = rot270(I)
    x2 = width(x1)
    x3 = astuple(TWO, x2)
    x4 = crop(x1, ORIGIN, x3)
    x5 = tophalf(x4)
    x6 = dmirror(x5)
    x7 = hupscale(x6, x2)
    x8 = repeat(x7, TWO)
    x9 = merge(x8)
    O = vconcat(x4, x9)
    return O



def solve_ed36ccf7_4be741c5(I):
    x1 = rot270(I)
    x2 = portrait(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = branch(x2, height, width)
    x5 = x4(x1)
    x6 = astuple(ONE, x5)
    x7 = x3(x1)
    x8 = crop(x7, ORIGIN, x6)
    x9 = apply(dedupe, x8)
    O = x3(x9)
    return O



def solve_ed36ccf7_bbc9ae5d(I):
    x1 = rot270(I)
    x2 = width(x1)
    x3 = palette(x1)
    x4 = halve(x2)
    x5 = vupscale(x1, x4)
    x6 = rbind(shoot, UNITY)
    x7 = other(x3, ZERO)
    x8 = ofcolor(x5, x7)
    x9 = mapply(x6, x8)
    O = fill(x5, x7, x9)
    return O



def solve_ed36ccf7_d90796e8(I):
    x1 = rot270(I)
    x2 = objects(x1, F, F, T)
    x3 = sizefilter(x2, TWO)
    x4 = lbind(contained, TWO)
    x5 = compose(x4, palette)
    x6 = mfilter(x3, x5)
    x7 = cover(x1, x6)
    x8 = matcher(first, THREE)
    x9 = sfilter(x6, x8)
    O = fill(x7, EIGHT, x9)
    return O



def solve_ed36ccf7_2c608aff(I):
    x1 = rot270(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = argmax(x3, size)
    x5 = toindices(x4)
    x6 = ofcolor(x1, x2)
    x7 = prapply(connect, x5, x6)
    x8 = fork(either, vline, hline)
    x9 = mfilter(x7, x8)
    O = underfill(x1, x2, x9)
    return O



def solve_ed36ccf7_f8b3ba0a(I):
    x1 = rot270(I)
    x2 = compress(x1)
    x3 = astuple(THREE, ONE)
    x4 = palette(x2)
    x5 = lbind(colorcount, x2)
    x6 = compose(invert, x5)
    x7 = order(x4, x6)
    x8 = rbind(canvas, UNITY)
    x9 = apply(x8, x7)
    x10 = merge(x9)
    O = crop(x10, DOWN, x3)
    return O



def solve_ed36ccf7_80af3007(I):
    x1 = rot270(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, x1)
    x5 = upscale(x4, THREE)
    x6 = hconcat(x4, x4)
    x7 = hconcat(x6, x4)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    x10 = cellwise(x5, x9, ZERO)
    O = downscale(x10, THREE)
    return O



def solve_ed36ccf7_83302e8f(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = sfilter(x3, square)
    x5 = difference(x3, x4)
    x6 = merge(x4)
    x7 = recolor(THREE, x6)
    x8 = merge(x5)
    x9 = recolor(FOUR, x8)
    x10 = paint(x1, x7)
    O = paint(x10, x9)
    return O



def solve_ed36ccf7_1fad071e(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, ONE)
    x4 = sizefilter(x3, FOUR)
    x5 = size(x4)
    x6 = subtract(FIVE, x5)
    x7 = astuple(ONE, x5)
    x8 = canvas(ONE, x7)
    x9 = astuple(ONE, x6)
    x10 = canvas(ZERO, x9)
    O = hconcat(x8, x10)
    return O



def solve_ed36ccf7_11852cab(I):
    x1 = rot270(I)
    x2 = objects(x1, T, T, T)
    x3 = merge(x2)
    x4 = hmirror(x3)
    x5 = vmirror(x3)
    x6 = dmirror(x3)
    x7 = cmirror(x3)
    x8 = paint(x1, x4)
    x9 = paint(x8, x5)
    x10 = paint(x9, x6)
    O = paint(x10, x7)
    return O



def solve_ed36ccf7_3428a4f5(I):
    x1 = rot270(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = astuple(SIX, FIVE)
    x5 = ofcolor(x2, TWO)
    x6 = ofcolor(x3, TWO)
    x7 = combine(x5, x6)
    x8 = intersection(x5, x6)
    x9 = difference(x7, x8)
    x10 = canvas(ZERO, x4)
    O = fill(x10, THREE, x9)
    return O



def solve_ed36ccf7_178fcbfb(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, TWO)
    x4 = mapply(vfrontier, x3)
    x5 = fill(x1, TWO, x4)
    x6 = colorfilter(x2, TWO)
    x7 = difference(x2, x6)
    x8 = compose(hfrontier, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x7)
    O = paint(x5, x10)
    return O



def solve_ed36ccf7_54d9e175(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = compose(neighbors, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x3)
    x7 = paint(x1, x6)
    x8 = replace(x7, ONE, SIX)
    x9 = replace(x8, TWO, SEVEN)
    x10 = replace(x9, THREE, EIGHT)
    O = replace(x10, FOUR, NINE)
    return O



def solve_ed36ccf7_623ea044(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = first(x2)
    x4 = center(x3)
    x5 = color(x3)
    x6 = astuple(UNITY, NEG_UNITY)
    x7 = astuple(UP_RIGHT, DOWN_LEFT)
    x8 = combine(x6, x7)
    x9 = lbind(shoot, x4)
    x10 = mapply(x9, x8)
    O = fill(x1, x5, x10)
    return O



def solve_ed36ccf7_794b24be(I):
    x1 = rot270(I)
    x2 = ofcolor(x1, ONE)
    x3 = size(x2)
    x4 = decrement(x3)
    x5 = canvas(ZERO, THREE_BY_THREE)
    x6 = tojvec(x4)
    x7 = connect(ORIGIN, x6)
    x8 = equality(x3, FOUR)
    x9 = insert(UNITY, x7)
    x10 = branch(x8, x9, x7)
    O = fill(x5, TWO, x10)
    return O



def solve_ed36ccf7_88a62173(I):
    x1 = rot270(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = tophalf(x3)
    x6 = bottomhalf(x2)
    x7 = bottomhalf(x3)
    x8 = astuple(x4, x5)
    x9 = astuple(x6, x7)
    x10 = combine(x8, x9)
    O = leastcommon(x10)
    return O



def solve_ed36ccf7_890034e9(I):
    x1 = rot270(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = inbox(x3)
    x5 = recolor(ZERO, x4)
    x6 = occurrences(x1, x5)
    x7 = normalize(x3)
    x8 = shift(x7, NEG_UNITY)
    x9 = lbind(shift, x8)
    x10 = mapply(x9, x6)
    O = fill(x1, x2, x10)
    return O



def solve_ed36ccf7_99b1bc43(I):
    x1 = rot270(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = ofcolor(x2, ZERO)
    x5 = ofcolor(x3, ZERO)
    x6 = combine(x4, x5)
    x7 = intersection(x4, x5)
    x8 = difference(x6, x7)
    x9 = shape(x2)
    x10 = canvas(ZERO, x9)
    O = fill(x10, THREE, x8)
    return O



def solve_ed36ccf7_a9f96cdd(I):
    x1 = rot270(I)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = shift(x2, NEG_UNITY)
    x5 = fill(x3, THREE, x4)
    x6 = shift(x2, UP_RIGHT)
    x7 = fill(x5, SIX, x6)
    x8 = shift(x2, DOWN_LEFT)
    x9 = fill(x7, EIGHT, x8)
    x10 = shift(x2, UNITY)
    O = fill(x9, SEVEN, x10)
    return O



def solve_ed36ccf7_af902bf9(I):
    x1 = rot270(I)
    x2 = ofcolor(x1, FOUR)
    x3 = prapply(connect, x2, x2)
    x4 = fork(either, vline, hline)
    x5 = mfilter(x3, x4)
    x6 = underfill(x1, NEG_ONE, x5)
    x7 = objects(x6, F, F, T)
    x8 = compose(backdrop, inbox)
    x9 = mapply(x8, x7)
    x10 = fill(x6, TWO, x9)
    O = replace(x10, NEG_ONE, ZERO)
    return O



def solve_ed36ccf7_b548a754(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = replace(x1, EIGHT, ZERO)
    x4 = leastcolor(x3)
    x5 = replace(x3, x4, ZERO)
    x6 = leastcolor(x5)
    x7 = merge(x2)
    x8 = backdrop(x7)
    x9 = box(x7)
    x10 = fill(x1, x4, x8)
    O = fill(x10, x6, x9)
    return O



def solve_ed36ccf7_c3e719e8(I):
    x1 = rot270(I)
    x2 = mostcolor(x1)
    x3 = hconcat(x1, x1)
    x4 = upscale(x1, THREE)
    x5 = ofcolor(x4, x2)
    x6 = asindices(x4)
    x7 = difference(x6, x5)
    x8 = hconcat(x3, x1)
    x9 = vconcat(x8, x8)
    x10 = vconcat(x9, x8)
    O = fill(x10, ZERO, x7)
    return O



def solve_ed36ccf7_de1cd16c(I):
    x1 = rot270(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = sizefilter(x3, ONE)
    x5 = difference(x3, x4)
    x6 = rbind(subgrid, x1)
    x7 = apply(x6, x5)
    x8 = rbind(colorcount, x2)
    x9 = argmax(x7, x8)
    x10 = mostcolor(x9)
    O = canvas(x10, UNITY)
    return O



def solve_ed36ccf7_d8c310e9(I):
    x1 = rot270(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = hperiod(x3)
    x5 = multiply(x4, THREE)
    x6 = tojvec(x4)
    x7 = tojvec(x5)
    x8 = shift(x3, x6)
    x9 = shift(x3, x7)
    x10 = paint(x1, x8)
    O = paint(x10, x9)
    return O



def solve_ed36ccf7_a3325580(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = valmax(x2, size)
    x4 = sizefilter(x2, x3)
    x5 = order(x4, leftmost)
    x6 = apply(color, x5)
    x7 = astuple(ONE, x3)
    x8 = rbind(canvas, x7)
    x9 = apply(x8, x6)
    x10 = merge(x9)
    O = dmirror(x10)
    return O



def solve_ed36ccf7_8eb1be9a(I):
    x1 = rot270(I)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = interval(NEG_TWO, FOUR, ONE)
    x5 = lbind(shift, x3)
    x6 = height(x3)
    x7 = rbind(multiply, x6)
    x8 = apply(x7, x4)
    x9 = apply(toivec, x8)
    x10 = mapply(x5, x9)
    O = paint(x1, x10)
    return O



def solve_ed36ccf7_321b1fc6(I):
    x1 = rot270(I)
    x2 = objects(x1, F, F, T)
    x3 = colorfilter(x2, EIGHT)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = cover(x1, x5)
    x7 = normalize(x5)
    x8 = lbind(shift, x7)
    x9 = apply(ulcorner, x3)
    x10 = mapply(x8, x9)
    O = paint(x6, x10)
    return O



def solve_ed36ccf7_1b60fb0c(I):
    x1 = rot270(I)
    x2 = rot90(x1)
    x3 = ofcolor(x1, ONE)
    x4 = ofcolor(x2, ONE)
    x5 = neighbors(ORIGIN)
    x6 = mapply(neighbors, x5)
    x7 = lbind(shift, x4)
    x8 = apply(x7, x6)
    x9 = lbind(intersection, x3)
    x10 = compose(size, x9)
    x11 = argmax(x8, x10)
    O = underfill(x1, TWO, x11)
    return O



def solve_ed36ccf7_ddf7fa4f(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = colorfilter(x2, FIVE)
    x5 = product(x3, x4)
    x6 = fork(vmatching, first, last)
    x7 = sfilter(x5, x6)
    x8 = compose(color, first)
    x9 = fork(recolor, x8, last)
    x10 = mapply(x9, x7)
    O = paint(x1, x10)
    return O



def solve_ed36ccf7_47c1f68c(I):
    x1 = rot270(I)
    x2 = leastcolor(x1)
    x3 = vmirror(x1)
    x4 = objects(x1, T, T, T)
    x5 = merge(x4)
    x6 = mostcolor(x5)
    x7 = cellwise(x1, x3, x2)
    x8 = hmirror(x7)
    x9 = cellwise(x7, x8, x2)
    x10 = compress(x9)
    O = replace(x10, x2, x6)
    return O



def solve_ed36ccf7_6c434453(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, EIGHT)
    x4 = dneighbors(UNITY)
    x5 = insert(UNITY, x4)
    x6 = merge(x3)
    x7 = cover(x1, x6)
    x8 = apply(ulcorner, x3)
    x9 = lbind(shift, x5)
    x10 = mapply(x9, x8)
    O = fill(x7, TWO, x10)
    return O



def solve_ed36ccf7_23581191(I):
    x1 = rot270(I)
    x2 = objects(x1, T, T, T)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = paint(x1, x6)
    x8 = fork(intersection, first, last)
    x9 = apply(x4, x2)
    x10 = x8(x9)
    O = fill(x7, TWO, x10)
    return O



def solve_ed36ccf7_c8cbb738(I):
    x1 = rot270(I)
    x2 = mostcolor(x1)
    x3 = fgpartition(x1)
    x4 = valmax(x3, shape)
    x5 = canvas(x2, x4)
    x6 = apply(normalize, x3)
    x7 = lbind(subtract, x4)
    x8 = chain(halve, x7, shape)
    x9 = fork(shift, identity, x8)
    x10 = mapply(x9, x6)
    O = paint(x5, x10)
    return O



def solve_ed36ccf7_d4469b4b(I):
    x1 = rot270(I)
    x2 = palette(x1)
    x3 = other(x2, ZERO)
    x4 = equality(x3, ONE)
    x5 = equality(x3, TWO)
    x6 = branch(x4, UNITY, TWO_BY_TWO)
    x7 = branch(x5, RIGHT, x6)
    x8 = fork(combine, vfrontier, hfrontier)
    x9 = x8(x7)
    x10 = canvas(ZERO, THREE_BY_THREE)
    O = fill(x10, FIVE, x9)
    return O



def solve_ed36ccf7_6ecd11f4(I):
    x1 = rot270(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = subgrid(x3, x1)
    x6 = subgrid(x4, x1)
    x7 = width(x5)
    x8 = width(x6)
    x9 = divide(x7, x8)
    x10 = downscale(x5, x9)
    x11 = ofcolor(x10, ZERO)
    O = fill(x6, ZERO, x11)
    return O



def solve_ed36ccf7_c444b776(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = argmin(x3, size)
    x5 = backdrop(x4)
    x6 = toobject(x5, x1)
    x7 = normalize(x6)
    x8 = lbind(shift, x7)
    x9 = compose(x8, ulcorner)
    x10 = mapply(x9, x3)
    O = paint(x1, x10)
    return O



def solve_ed36ccf7_eb281b96(I):
    x1 = rot270(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = decrement(x2)
    x5 = astuple(x4, x3)
    x6 = crop(x1, ORIGIN, x5)
    x7 = hmirror(x6)
    x8 = vconcat(x1, x7)
    x9 = double(x4)
    x10 = astuple(x9, x3)
    x11 = crop(x8, DOWN, x10)
    O = vconcat(x8, x11)
    return O



def solve_ed36ccf7_ff28f65a(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = double(x3)
    x5 = interval(ZERO, x4, TWO)
    x6 = apply(tojvec, x5)
    x7 = astuple(ONE, NINE)
    x8 = canvas(ZERO, x7)
    x9 = fill(x8, ONE, x6)
    x10 = hsplit(x9, THREE)
    O = merge(x10)
    return O



def solve_ed36ccf7_7e0986d6(I):
    x1 = rot270(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = replace(x1, x2, ZERO)
    x5 = leastcolor(x4)
    x6 = rbind(colorcount, x5)
    x7 = chain(positive, decrement, x6)
    x8 = rbind(toobject, x4)
    x9 = chain(x7, x8, dneighbors)
    x10 = sfilter(x3, x9)
    O = fill(x4, x5, x10)
    return O



def solve_ed36ccf7_09629e4f(I):
    x1 = rot270(I)
    x2 = objects(x1, F, T, T)
    x3 = argmin(x2, numcolors)
    x4 = normalize(x3)
    x5 = upscale(x4, FOUR)
    x6 = paint(x1, x5)
    x7 = ofcolor(x1, FIVE)
    O = fill(x6, FIVE, x7)
    return O



def solve_ed36ccf7_a85d4709(I):
    x1 = rot270(I)
    x2 = ofcolor(x1, FIVE)
    x3 = lbind(matcher, last)
    x4 = lbind(sfilter, x2)
    x5 = lbind(mapply, hfrontier)
    x6 = chain(x5, x4, x3)
    x7 = x6(ZERO)
    x8 = x6(TWO)
    x9 = x6(ONE)
    x10 = fill(x1, TWO, x7)
    x11 = fill(x10, THREE, x8)
    O = fill(x11, FOUR, x9)
    return O



def solve_ed36ccf7_feca6190(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = size(x2)
    x4 = multiply(x3, FIVE)
    x5 = astuple(x4, x4)
    x6 = canvas(ZERO, x5)
    x7 = rbind(shoot, UNITY)
    x8 = compose(x7, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x2)
    x11 = paint(x6, x10)
    O = hmirror(x11)
    return O



def solve_ed36ccf7_a68b268e(I):
    x1 = rot270(I)
    x2 = tophalf(x1)
    x3 = bottomhalf(x1)
    x4 = lefthalf(x2)
    x5 = righthalf(x2)
    x6 = lefthalf(x3)
    x7 = righthalf(x3)
    x8 = ofcolor(x5, FOUR)
    x9 = ofcolor(x4, SEVEN)
    x10 = ofcolor(x6, EIGHT)
    x11 = fill(x7, EIGHT, x10)
    x12 = fill(x11, FOUR, x8)
    O = fill(x12, SEVEN, x9)
    return O



def solve_ed36ccf7_beb8660c(I):
    x1 = rot270(I)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = compose(invert, size)
    x5 = order(x3, x4)
    x6 = apply(normalize, x5)
    x7 = size(x6)
    x8 = interval(ZERO, x7, ONE)
    x9 = apply(toivec, x8)
    x10 = mpapply(shift, x6, x9)
    x11 = canvas(ZERO, x2)
    x12 = paint(x11, x10)
    O = rot180(x12)
    return O



def solve_ed36ccf7_913fb3ed(I):
    x1 = rot270(I)
    x2 = ofcolor(x1, THREE)
    x3 = ofcolor(x1, EIGHT)
    x4 = ofcolor(x1, TWO)
    x5 = mapply(neighbors, x2)
    x6 = mapply(neighbors, x3)
    x7 = mapply(neighbors, x4)
    x8 = fill(x1, SIX, x5)
    x9 = fill(x8, FOUR, x6)
    O = fill(x9, ONE, x7)
    return O



def solve_ed36ccf7_0962bcdd(I):
    x1 = rot270(I)
    x2 = leastcolor(x1)
    x3 = replace(x1, ZERO, x2)
    x4 = leastcolor(x3)
    x5 = ofcolor(x1, x4)
    x6 = mapply(dneighbors, x5)
    x7 = fill(x1, x4, x6)
    x8 = objects(x7, F, T, T)
    x9 = fork(connect, ulcorner, lrcorner)
    x10 = fork(connect, llcorner, urcorner)
    x11 = fork(combine, x9, x10)
    x12 = mapply(x11, x8)
    O = fill(x7, x2, x12)
    return O



def solve_ed36ccf7_3631a71a(I):
    x1 = rot270(I)
    x2 = shape(x1)
    x3 = replace(x1, NINE, ZERO)
    x4 = lbind(apply, maximum)
    x5 = dmirror(x3)
    x6 = papply(pair, x3, x5)
    x7 = apply(x4, x6)
    x8 = subtract(x2, TWO_BY_TWO)
    x9 = crop(x7, TWO_BY_TWO, x8)
    x10 = vmirror(x9)
    x11 = objects(x10, T, F, T)
    x12 = merge(x11)
    x13 = shift(x12, TWO_BY_TWO)
    O = paint(x7, x13)
    return O



def solve_ed36ccf7_05269061(I):
    x1 = rot270(I)
    x2 = objects(x1, T, T, T)
    x3 = neighbors(ORIGIN)
    x4 = mapply(neighbors, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = merge(x2)
    x8 = lbind(shift, x7)
    x9 = mapply(x8, x6)
    x10 = shift(x9, UP_RIGHT)
    x11 = shift(x9, DOWN_LEFT)
    x12 = paint(x1, x9)
    x13 = paint(x12, x10)
    O = paint(x13, x11)
    return O



def solve_ed36ccf7_95990924(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(outbox, x2)
    x4 = apply(ulcorner, x3)
    x5 = apply(urcorner, x3)
    x6 = apply(llcorner, x3)
    x7 = apply(lrcorner, x3)
    x8 = fill(x1, ONE, x4)
    x9 = fill(x8, TWO, x5)
    x10 = fill(x9, THREE, x6)
    O = fill(x10, FOUR, x7)
    return O



def solve_ed36ccf7_e509e548(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = rbind(subgrid, x1)
    x4 = chain(palette, trim, x3)
    x5 = lbind(contained, THREE)
    x6 = compose(x5, x4)
    x7 = fork(add, height, width)
    x8 = compose(decrement, x7)
    x9 = fork(equality, size, x8)
    x10 = mfilter(x2, x6)
    x11 = mfilter(x2, x9)
    x12 = replace(x1, THREE, SIX)
    x13 = fill(x12, TWO, x10)
    O = fill(x13, ONE, x11)
    return O



def solve_ed36ccf7_d43fd935(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, THREE)
    x4 = sizefilter(x2, ONE)
    x5 = rbind(vmatching, x3)
    x6 = rbind(hmatching, x3)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = rbind(gravitate, x3)
    x10 = fork(add, center, x9)
    x11 = fork(connect, center, x10)
    x12 = fork(recolor, color, x11)
    x13 = mapply(x12, x8)
    O = paint(x1, x13)
    return O



def solve_ed36ccf7_e73095fd(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = fork(equality, toindices, backdrop)
    x5 = sfilter(x3, x4)
    x6 = lbind(mapply, dneighbors)
    x7 = chain(x6, corners, outbox)
    x8 = fork(difference, x7, outbox)
    x9 = ofcolor(x1, FIVE)
    x10 = rbind(intersection, x9)
    x11 = matcher(size, ZERO)
    x12 = chain(x11, x10, x8)
    x13 = mfilter(x5, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_ed36ccf7_1bfc4729(I):
    x1 = rot270(I)
    x2 = asindices(x1)
    x3 = tophalf(x1)
    x4 = bottomhalf(x1)
    x5 = leastcolor(x3)
    x6 = leastcolor(x4)
    x7 = hfrontier(TWO_BY_ZERO)
    x8 = box(x2)
    x9 = combine(x7, x8)
    x10 = fill(x3, x5, x9)
    x11 = hmirror(x10)
    x12 = replace(x11, x5, x6)
    O = vconcat(x10, x12)
    return O



def solve_ed36ccf7_93b581b8(I):
    x1 = rot270(I)
    x2 = fgpartition(x1)
    x3 = chain(cmirror, dmirror, merge)
    x4 = x3(x2)
    x5 = upscale(x4, THREE)
    x6 = astuple(NEG_TWO, NEG_TWO)
    x7 = shift(x5, x6)
    x8 = underpaint(x1, x7)
    x9 = toindices(x4)
    x10 = fork(combine, hfrontier, vfrontier)
    x11 = mapply(x10, x9)
    x12 = difference(x11, x9)
    O = fill(x8, ZERO, x12)
    return O



def solve_ed36ccf7_7447852a(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = compose(last, center)
    x5 = order(x3, x4)
    x6 = size(x5)
    x7 = interval(ZERO, x6, THREE)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = interval(ZERO, x6, ONE)
    x11 = pair(x5, x10)
    x12 = sfilter(x11, x9)
    x13 = mapply(first, x12)
    O = fill(x1, FOUR, x13)
    return O



def solve_ed36ccf7_97999447(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = apply(toindices, x2)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x2)
    x8 = paint(x1, x7)
    x9 = interval(ZERO, FIVE, ONE)
    x10 = apply(double, x9)
    x11 = apply(increment, x10)
    x12 = apply(tojvec, x11)
    x13 = prapply(shift, x3, x12)
    x14 = merge(x13)
    O = fill(x8, FIVE, x14)
    return O



def solve_ed36ccf7_91714a58(I):
    x1 = rot270(I)
    x2 = shape(x1)
    x3 = asindices(x1)
    x4 = objects(x1, T, F, T)
    x5 = argmax(x4, size)
    x6 = mostcolor(x5)
    x7 = canvas(ZERO, x2)
    x8 = paint(x7, x5)
    x9 = rbind(toobject, x8)
    x10 = rbind(colorcount, x6)
    x11 = chain(x10, x9, neighbors)
    x12 = lbind(greater, THREE)
    x13 = compose(x12, x11)
    x14 = sfilter(x3, x13)
    O = fill(x8, ZERO, x14)
    return O



def solve_ed36ccf7_bc1d5164(I):
    x1 = rot270(I)
    x2 = leastcolor(x1)
    x3 = crop(x1, ORIGIN, THREE_BY_THREE)
    x4 = crop(x1, TWO_BY_ZERO, THREE_BY_THREE)
    x5 = tojvec(FOUR)
    x6 = crop(x1, x5, THREE_BY_THREE)
    x7 = astuple(TWO, FOUR)
    x8 = crop(x1, x7, THREE_BY_THREE)
    x9 = canvas(ZERO, THREE_BY_THREE)
    x10 = rbind(ofcolor, x2)
    x11 = astuple(x3, x4)
    x12 = astuple(x6, x8)
    x13 = combine(x11, x12)
    x14 = mapply(x10, x13)
    O = fill(x9, x2, x14)
    return O



def solve_ed36ccf7_5c2c9af4(I):
    x1 = rot270(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = center(x3)
    x5 = ulcorner(x3)
    x6 = subtract(x4, x5)
    x7 = multiply(NEG_ONE, NINE)
    x8 = interval(ZERO, NINE, ONE)
    x9 = interval(ZERO, x7, NEG_ONE)
    x10 = lbind(multiply, x6)
    x11 = apply(x10, x8)
    x12 = apply(x10, x9)
    x13 = pair(x11, x12)
    x14 = mapply(box, x13)
    x15 = shift(x14, x4)
    O = fill(x1, x2, x15)
    return O



def solve_ed36ccf7_75b8110e(I):
    x1 = rot270(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = tophalf(x2)
    x5 = bottomhalf(x2)
    x6 = tophalf(x3)
    x7 = bottomhalf(x3)
    x8 = rbind(ofcolor, ZERO)
    x9 = fork(difference, asindices, x8)
    x10 = fork(toobject, x9, identity)
    x11 = x10(x6)
    x12 = x10(x5)
    x13 = x10(x7)
    x14 = paint(x4, x13)
    x15 = paint(x14, x12)
    O = paint(x15, x11)
    return O



def solve_ed36ccf7_c3f564a4(I):
    x1 = rot270(I)
    x2 = asindices(x1)
    x3 = dmirror(x1)
    x4 = invert(NINE)
    x5 = papply(pair, x1, x3)
    x6 = lbind(apply, maximum)
    x7 = apply(x6, x5)
    x8 = ofcolor(x7, ZERO)
    x9 = difference(x2, x8)
    x10 = toobject(x9, x7)
    x11 = interval(x4, NINE, ONE)
    x12 = interval(NINE, x4, NEG_ONE)
    x13 = pair(x11, x12)
    x14 = lbind(shift, x10)
    x15 = mapply(x14, x13)
    O = paint(x7, x15)
    return O



def solve_ed36ccf7_1a07d186(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = mapply(x12, x8)
    x14 = merge(x3)
    x15 = cover(x1, x14)
    O = paint(x15, x13)
    return O



def solve_ed36ccf7_d687bc17(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = apply(color, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, color)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorfilter, x4)
    x10 = chain(first, x9, color)
    x11 = fork(gravitate, identity, x10)
    x12 = fork(shift, identity, x11)
    x13 = merge(x3)
    x14 = mapply(x12, x8)
    x15 = cover(x1, x13)
    O = paint(x15, x14)
    return O



def solve_ed36ccf7_9af7a82c(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, F)
    x3 = order(x2, size)
    x4 = valmax(x2, size)
    x5 = rbind(astuple, ONE)
    x6 = lbind(subtract, x4)
    x7 = compose(x5, size)
    x8 = chain(x5, x6, size)
    x9 = fork(canvas, color, x7)
    x10 = lbind(canvas, ZERO)
    x11 = compose(x10, x8)
    x12 = fork(vconcat, x9, x11)
    x13 = compose(cmirror, x12)
    x14 = apply(x13, x3)
    x15 = merge(x14)
    O = cmirror(x15)
    return O



def solve_ed36ccf7_ef135b50(I):
    x1 = rot270(I)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, ZERO)
    x4 = product(x2, x2)
    x5 = power(first, TWO)
    x6 = compose(first, last)
    x7 = fork(equality, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = fork(connect, first, last)
    x10 = mapply(x9, x8)
    x11 = intersection(x10, x3)
    x12 = fill(x1, NINE, x11)
    x13 = trim(x12)
    x14 = asobject(x13)
    x15 = shift(x14, UNITY)
    O = paint(x1, x15)
    return O



def solve_ed36ccf7_cbded52d(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = sizefilter(x2, ONE)
    x4 = product(x3, x3)
    x5 = fork(vmatching, first, last)
    x6 = fork(hmatching, first, last)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x4, x7)
    x9 = compose(center, first)
    x10 = compose(center, last)
    x11 = fork(connect, x9, x10)
    x12 = chain(initset, center, x11)
    x13 = compose(color, first)
    x14 = fork(recolor, x13, x12)
    x15 = mapply(x14, x8)
    O = paint(x1, x15)
    return O



def solve_ed36ccf7_e26a3af2(I):
    x1 = rot270(I)
    x2 = rot90(x1)
    x3 = apply(mostcommon, x1)
    x4 = apply(mostcommon, x2)
    x5 = repeat(x3, ONE)
    x6 = repeat(x4, ONE)
    x7 = compose(size, dedupe)
    x8 = x7(x3)
    x9 = x7(x4)
    x10 = greater(x9, x8)
    x11 = branch(x10, height, width)
    x12 = x11(x1)
    x13 = rot90(x5)
    x14 = branch(x10, x6, x13)
    x15 = branch(x10, vupscale, hupscale)
    O = x15(x14, x12)
    return O



def solve_ed36ccf7_6cf79266(I):
    x1 = rot270(I)
    x2 = ofcolor(x1, ZERO)
    x3 = astuple(ZERO, ORIGIN)
    x4 = initset(x3)
    x5 = upscale(x4, THREE)
    x6 = toindices(x5)
    x7 = lbind(shift, x6)
    x8 = rbind(difference, x2)
    x9 = chain(size, x8, x7)
    x10 = matcher(x9, ZERO)
    x11 = lbind(add, NEG_UNITY)
    x12 = chain(flip, x10, x11)
    x13 = fork(both, x10, x12)
    x14 = sfilter(x2, x13)
    x15 = mapply(x7, x14)
    O = fill(x1, ONE, x15)
    return O



def solve_ed36ccf7_a87f7484(I):
    x1 = rot270(I)
    x2 = numcolors(x1)
    x3 = portrait(x1)
    x4 = branch(x3, dmirror, identity)
    x5 = x4(x1)
    x6 = decrement(x2)
    x7 = hsplit(x5, x6)
    x8 = rbind(ofcolor, ZERO)
    x9 = apply(x8, x7)
    x10 = leastcommon(x9)
    x11 = matcher(x8, x10)
    x12 = extract(x7, x11)
    O = x4(x12)
    return O



def solve_ed36ccf7_4093f84a(I):
    x1 = rot270(I)
    x2 = leastcolor(x1)
    x3 = replace(x1, x2, FIVE)
    x4 = ofcolor(x1, FIVE)
    x5 = portrait(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x3)
    x8 = lefthalf(x7)
    x9 = righthalf(x7)
    x10 = rbind(order, identity)
    x11 = rbind(order, invert)
    x12 = apply(x10, x8)
    x13 = apply(x11, x9)
    x14 = hconcat(x12, x13)
    O = x6(x14)
    return O



def solve_ed36ccf7_ba26e723(I):
    x1 = rot270(I)
    x2 = rbind(divide, THREE)
    x3 = rbind(multiply, THREE)
    x4 = compose(x3, x2)
    x5 = fork(equality, identity, x4)
    x6 = compose(x5, last)
    x7 = ofcolor(x1, FOUR)
    x8 = sfilter(x7, x6)
    O = fill(x1, SIX, x8)
    return O



def solve_ed36ccf7_29c11459(I):
    x1 = rot270(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = objects(x3, T, F, T)
    x5 = objects(x2, T, F, T)
    x6 = compose(hfrontier, center)
    x7 = fork(recolor, color, x6)
    x8 = mapply(x7, x5)
    x9 = paint(x2, x8)
    x10 = mapply(x7, x4)
    x11 = paint(x1, x10)
    x12 = objects(x9, T, F, T)
    x13 = apply(urcorner, x12)
    x14 = shift(x13, RIGHT)
    x15 = merge(x12)
    x16 = paint(x11, x15)
    O = fill(x16, FIVE, x14)
    return O



def solve_ed36ccf7_963e52fc(I):
    x1 = rot270(I)
    x2 = width(x1)
    x3 = asobject(x1)
    x4 = hperiod(x3)
    x5 = height(x3)
    x6 = astuple(x5, x4)
    x7 = ulcorner(x3)
    x8 = crop(x1, x7, x6)
    x9 = rot90(x8)
    x10 = double(x2)
    x11 = divide(x10, x4)
    x12 = increment(x11)
    x13 = repeat(x9, x12)
    x14 = merge(x13)
    x15 = rot270(x14)
    x16 = astuple(x5, x10)
    O = crop(x15, ORIGIN, x16)
    return O



def solve_ed36ccf7_1f0c79e5(I):
    x1 = rot270(I)
    x2 = ofcolor(x1, TWO)
    x3 = replace(x1, TWO, ZERO)
    x4 = leastcolor(x3)
    x5 = ofcolor(x3, x4)
    x6 = combine(x2, x5)
    x7 = recolor(x4, x6)
    x8 = compose(decrement, double)
    x9 = ulcorner(x6)
    x10 = invert(x9)
    x11 = shift(x2, x10)
    x12 = apply(x8, x11)
    x13 = interval(ZERO, NINE, ONE)
    x14 = prapply(multiply, x12, x13)
    x15 = lbind(shift, x7)
    x16 = mapply(x15, x14)
    O = paint(x1, x16)
    return O



def solve_ed36ccf7_6773b310(I):
    x1 = rot270(I)
    x2 = compress(x1)
    x3 = neighbors(ORIGIN)
    x4 = insert(ORIGIN, x3)
    x5 = rbind(multiply, THREE)
    x6 = apply(x5, x4)
    x7 = astuple(FOUR, FOUR)
    x8 = shift(x6, x7)
    x9 = fork(insert, identity, neighbors)
    x10 = apply(x9, x8)
    x11 = rbind(toobject, x2)
    x12 = apply(x11, x10)
    x13 = rbind(colorcount, SIX)
    x14 = matcher(x13, TWO)
    x15 = mfilter(x12, x14)
    x16 = fill(x2, ONE, x15)
    x17 = replace(x16, SIX, ZERO)
    O = downscale(x17, THREE)
    return O



def solve_ed36ccf7_780d0b14(I):
    x1 = rot270(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, T, T)
    x4 = rbind(greater, TWO)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = totuple(x6)
    x8 = apply(color, x7)
    x9 = apply(center, x7)
    x10 = pair(x8, x9)
    x11 = fill(x1, ZERO, x2)
    x12 = paint(x11, x10)
    x13 = rbind(greater, ONE)
    x14 = compose(dedupe, totuple)
    x15 = chain(x13, size, x14)
    x16 = sfilter(x12, x15)
    x17 = rot90(x16)
    x18 = sfilter(x17, x15)
    O = rot270(x18)
    return O



def solve_ed36ccf7_2204b7a8(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = lbind(sfilter, x2)
    x4 = compose(size, x3)
    x5 = x4(vline)
    x6 = x4(hline)
    x7 = greater(x5, x6)
    x8 = branch(x7, lefthalf, tophalf)
    x9 = branch(x7, righthalf, bottomhalf)
    x10 = branch(x7, hconcat, vconcat)
    x11 = x8(x1)
    x12 = x9(x1)
    x13 = index(x11, ORIGIN)
    x14 = shape(x12)
    x15 = decrement(x14)
    x16 = index(x12, x15)
    x17 = replace(x11, THREE, x13)
    x18 = replace(x12, THREE, x16)
    O = x10(x17, x18)
    return O



def solve_ed36ccf7_d9f24cd1(I):
    x1 = rot270(I)
    x2 = ofcolor(x1, TWO)
    x3 = ofcolor(x1, FIVE)
    x4 = prapply(connect, x2, x3)
    x5 = mfilter(x4, vline)
    x6 = underfill(x1, TWO, x5)
    x7 = matcher(numcolors, TWO)
    x8 = objects(x6, F, F, T)
    x9 = sfilter(x8, x7)
    x10 = difference(x8, x9)
    x11 = colorfilter(x10, TWO)
    x12 = mapply(toindices, x11)
    x13 = apply(urcorner, x9)
    x14 = shift(x13, UNITY)
    x15 = rbind(shoot, UP)
    x16 = mapply(x15, x14)
    x17 = fill(x6, TWO, x16)
    x18 = mapply(vfrontier, x12)
    O = fill(x17, TWO, x18)
    return O



def solve_ed36ccf7_b782dc8a(I):
    x1 = rot270(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = ofcolor(x1, x2)
    x5 = first(x4)
    x6 = dneighbors(x5)
    x7 = toobject(x6, x1)
    x8 = mostcolor(x7)
    x9 = ofcolor(x1, x8)
    x10 = colorfilter(x3, ZERO)
    x11 = rbind(adjacent, x9)
    x12 = mfilter(x10, x11)
    x13 = toindices(x12)
    x14 = rbind(manhattan, x4)
    x15 = chain(even, x14, initset)
    x16 = sfilter(x13, x15)
    x17 = difference(x13, x16)
    x18 = fill(x1, x2, x16)
    O = fill(x18, x8, x17)
    return O



def solve_ed36ccf7_673ef223(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = ofcolor(x1, EIGHT)
    x4 = replace(x1, EIGHT, FOUR)
    x5 = colorfilter(x2, TWO)
    x6 = argmin(x2, uppermost)
    x7 = apply(uppermost, x5)
    x8 = fork(subtract, maximum, minimum)
    x9 = x8(x7)
    x10 = toivec(x9)
    x11 = leftmost(x6)
    x12 = equality(x11, ZERO)
    x13 = branch(x12, LEFT, RIGHT)
    x14 = rbind(shoot, x13)
    x15 = mapply(x14, x3)
    x16 = underfill(x4, EIGHT, x15)
    x17 = shift(x3, x10)
    x18 = mapply(hfrontier, x17)
    O = underfill(x16, EIGHT, x18)
    return O



def solve_ed36ccf7_f5b8619d(I):
    x1 = rot270(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = mapply(vfrontier, x3)
    x5 = underfill(x1, EIGHT, x4)
    x6 = hconcat(x5, x5)
    O = vconcat(x6, x6)
    return O



def solve_ed36ccf7_f8c80d96(I):
    x1 = rot270(I)
    x2 = leastcolor(x1)
    x3 = objects(x1, T, F, F)
    x4 = colorfilter(x3, x2)
    x5 = argmax(x4, size)
    x6 = argmin(x3, width)
    x7 = size(x6)
    x8 = equality(x7, ONE)
    x9 = branch(x8, identity, outbox)
    x10 = chain(outbox, outbox, x9)
    x11 = power(x10, TWO)
    x12 = power(x10, THREE)
    x13 = x10(x5)
    x14 = x11(x5)
    x15 = x12(x5)
    x16 = fill(x1, x2, x13)
    x17 = fill(x16, x2, x14)
    x18 = fill(x17, x2, x15)
    O = replace(x18, ZERO, FIVE)
    return O



def solve_ed36ccf7_ecdecbb3(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = colorfilter(x2, TWO)
    x4 = colorfilter(x2, EIGHT)
    x5 = product(x3, x4)
    x6 = fork(gravitate, first, last)
    x7 = compose(crement, x6)
    x8 = compose(center, first)
    x9 = fork(add, x8, x7)
    x10 = fork(connect, x8, x9)
    x11 = apply(x10, x5)
    x12 = lbind(greater, EIGHT)
    x13 = compose(x12, size)
    x14 = mfilter(x11, x13)
    x15 = fill(x1, TWO, x14)
    x16 = apply(x9, x5)
    x17 = intersection(x14, x16)
    x18 = mapply(neighbors, x17)
    O = fill(x15, EIGHT, x18)
    return O



def solve_ed36ccf7_e5062a87(I):
    x1 = rot270(I)
    x2 = ofcolor(x1, TWO)
    x3 = recolor(ZERO, x2)
    x4 = normalize(x3)
    x5 = occurrences(x1, x3)
    x6 = lbind(shift, x4)
    x7 = apply(x6, x5)
    x8 = astuple(ONE, THREE)
    x9 = astuple(FIVE, ONE)
    x10 = astuple(TWO, SIX)
    x11 = initset(x8)
    x12 = insert(x9, x11)
    x13 = insert(x10, x12)
    x14 = rbind(contained, x13)
    x15 = chain(flip, x14, ulcorner)
    x16 = sfilter(x7, x15)
    x17 = merge(x16)
    x18 = recolor(TWO, x17)
    O = paint(x1, x18)
    return O



def solve_ed36ccf7_a8d7556c(I):
    x1 = rot270(I)
    x2 = initset(ORIGIN)
    x3 = recolor(ZERO, x2)
    x4 = upscale(x3, TWO)
    x5 = occurrences(x1, x4)
    x6 = lbind(shift, x4)
    x7 = mapply(x6, x5)
    x8 = fill(x1, TWO, x7)
    x9 = add(SIX, SIX)
    x10 = astuple(EIGHT, x9)
    x11 = index(x8, x10)
    x12 = equality(x11, TWO)
    x13 = initset(x10)
    x14 = add(x10, DOWN)
    x15 = insert(x14, x13)
    x16 = toobject(x15, x8)
    x17 = toobject(x15, x1)
    x18 = branch(x12, x17, x16)
    O = paint(x8, x18)
    return O



def solve_ed36ccf7_834ec97d(I):
    x1 = rot270(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = shift(x4, DOWN)
    x6 = fill(x1, ZERO, x4)
    x7 = paint(x6, x5)
    x8 = uppermost(x5)
    x9 = leftmost(x5)
    x10 = subtract(x9, TEN)
    x11 = add(x9, TEN)
    x12 = interval(x10, x11, TWO)
    x13 = lbind(greater, x8)
    x14 = compose(x13, first)
    x15 = rbind(contained, x12)
    x16 = compose(x15, last)
    x17 = sfilter(x2, x14)
    x18 = sfilter(x17, x16)
    O = fill(x7, FOUR, x18)
    return O



def solve_ed36ccf7_90f3ed37(I):
    x1 = rot270(I)
    x2 = objects(x1, T, T, T)
    x3 = order(x2, uppermost)
    x4 = first(x3)
    x5 = remove(x4, x3)
    x6 = normalize(x4)
    x7 = lbind(shift, x6)
    x8 = compose(x7, ulcorner)
    x9 = interval(TWO, NEG_ONE, NEG_ONE)
    x10 = apply(tojvec, x9)
    x11 = rbind(apply, x10)
    x12 = lbind(compose, size)
    x13 = lbind(lbind, intersection)
    x14 = compose(x12, x13)
    x15 = lbind(lbind, shift)
    x16 = chain(x11, x15, x8)
    x17 = fork(argmax, x16, x14)
    x18 = mapply(x17, x5)
    O = underfill(x1, ONE, x18)
    return O



def solve_ed36ccf7_8403a5d5(I):
    x1 = rot270(I)
    x2 = asindices(x1)
    x3 = objects(x1, T, F, T)
    x4 = first(x3)
    x5 = color(x4)
    x6 = leftmost(x4)
    x7 = interval(x6, TEN, TWO)
    x8 = rbind(contained, x7)
    x9 = compose(x8, last)
    x10 = sfilter(x2, x9)
    x11 = increment(x6)
    x12 = add(x6, THREE)
    x13 = interval(x11, TEN, FOUR)
    x14 = interval(x12, TEN, FOUR)
    x15 = lbind(astuple, NINE)
    x16 = apply(tojvec, x13)
    x17 = apply(x15, x14)
    x18 = fill(x1, x5, x10)
    x19 = fill(x18, FIVE, x16)
    O = fill(x19, FIVE, x17)
    return O



def solve_ed36ccf7_91413438(I):
    x1 = rot270(I)
    x2 = colorcount(x1, ZERO)
    x3 = subtract(NINE, x2)
    x4 = multiply(x2, THREE)
    x5 = multiply(x4, x2)
    x6 = subtract(x5, THREE)
    x7 = astuple(THREE, x6)
    x8 = canvas(ZERO, x7)
    x9 = hconcat(x1, x8)
    x10 = objects(x9, T, T, T)
    x11 = first(x10)
    x12 = lbind(shift, x11)
    x13 = compose(x12, tojvec)
    x14 = interval(ZERO, x3, ONE)
    x15 = rbind(multiply, THREE)
    x16 = apply(x15, x14)
    x17 = mapply(x13, x16)
    x18 = paint(x9, x17)
    x19 = hsplit(x18, x2)
    O = merge(x19)
    return O



def solve_ed36ccf7_539a4f51(I):
    x1 = rot270(I)
    x2 = shape(x1)
    x3 = index(x1, ORIGIN)
    x4 = colorcount(x1, ZERO)
    x5 = decrement(x2)
    x6 = positive(x4)
    x7 = branch(x6, x5, x2)
    x8 = crop(x1, ORIGIN, x7)
    x9 = width(x8)
    x10 = astuple(ONE, x9)
    x11 = crop(x8, ORIGIN, x10)
    x12 = vupscale(x11, x9)
    x13 = dmirror(x12)
    x14 = hconcat(x8, x12)
    x15 = hconcat(x13, x8)
    x16 = vconcat(x14, x15)
    x17 = asobject(x16)
    x18 = multiply(UNITY, TEN)
    x19 = canvas(x3, x18)
    O = paint(x19, x17)
    return O



def solve_ed36ccf7_3bdb4ada(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = totuple(x2)
    x4 = compose(increment, ulcorner)
    x5 = compose(decrement, lrcorner)
    x6 = apply(x4, x3)
    x7 = apply(x5, x3)
    x8 = papply(connect, x6, x7)
    x9 = apply(last, x6)
    x10 = compose(last, first)
    x11 = power(last, TWO)
    x12 = fork(subtract, x10, x11)
    x13 = compose(even, x12)
    x14 = lbind(rbind, astuple)
    x15 = lbind(compose, x13)
    x16 = compose(x15, x14)
    x17 = fork(sfilter, first, x16)
    x18 = pair(x8, x9)
    x19 = mapply(x17, x18)
    O = fill(x1, ZERO, x19)
    return O



def solve_ed36ccf7_2bee17df(I):
    x1 = rot270(I)
    x2 = height(x1)
    x3 = rot90(x1)
    x4 = subtract(x2, TWO)
    x5 = interval(ZERO, x2, ONE)
    x6 = rbind(colorcount, ZERO)
    x7 = matcher(x6, x4)
    x8 = rbind(vsplit, x2)
    x9 = lbind(apply, x7)
    x10 = compose(x9, x8)
    x11 = x10(x1)
    x12 = pair(x5, x11)
    x13 = sfilter(x12, last)
    x14 = mapply(hfrontier, x13)
    x15 = x10(x3)
    x16 = pair(x15, x5)
    x17 = sfilter(x16, first)
    x18 = mapply(vfrontier, x17)
    x19 = astuple(x14, x18)
    x20 = merge(x19)
    O = underfill(x1, THREE, x20)
    return O



def solve_ed36ccf7_e8dc4411(I):
    x1 = rot270(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, ZERO)
    x4 = ofcolor(x1, x2)
    x5 = position(x3, x4)
    x6 = fork(connect, ulcorner, lrcorner)
    x7 = x6(x3)
    x8 = intersection(x3, x7)
    x9 = equality(x7, x8)
    x10 = fork(subtract, identity, crement)
    x11 = fork(add, identity, x10)
    x12 = branch(x9, identity, x11)
    x13 = shape(x3)
    x14 = multiply(x13, x5)
    x15 = apply(x12, x14)
    x16 = interval(ONE, FIVE, ONE)
    x17 = lbind(multiply, x15)
    x18 = apply(x17, x16)
    x19 = lbind(shift, x3)
    x20 = mapply(x19, x18)
    O = fill(x1, x2, x20)
    return O



def solve_ed36ccf7_29623171(I):
    x1 = rot270(I)
    x2 = leastcolor(x1)
    x3 = interval(ZERO, NINE, FOUR)
    x4 = product(x3, x3)
    x5 = rbind(add, THREE)
    x6 = rbind(interval, ONE)
    x7 = fork(x6, identity, x5)
    x8 = compose(x7, first)
    x9 = compose(x7, last)
    x10 = fork(product, x8, x9)
    x11 = rbind(colorcount, x2)
    x12 = rbind(toobject, x1)
    x13 = compose(x11, x12)
    x14 = apply(x10, x4)
    x15 = valmax(x14, x13)
    x16 = matcher(x13, x15)
    x17 = compose(flip, x16)
    x18 = mfilter(x14, x16)
    x19 = mfilter(x14, x17)
    x20 = fill(x1, x2, x18)
    O = fill(x20, ZERO, x19)
    return O



def solve_ed36ccf7_b0c4d837(I):
    x1 = rot270(I)
    x2 = ofcolor(x1, FIVE)
    x3 = ofcolor(x1, EIGHT)
    x4 = height(x2)
    x5 = decrement(x4)
    x6 = height(x3)
    x7 = subtract(x5, x6)
    x8 = astuple(ONE, x7)
    x9 = canvas(EIGHT, x8)
    x10 = subtract(SIX, x7)
    x11 = astuple(ONE, x10)
    x12 = canvas(ZERO, x11)
    x13 = hconcat(x9, x12)
    x14 = hsplit(x13, TWO)
    x15 = first(x14)
    x16 = last(x14)
    x17 = vmirror(x16)
    x18 = vconcat(x15, x17)
    x19 = astuple(ONE, THREE)
    x20 = canvas(ZERO, x19)
    O = vconcat(x18, x20)
    return O



def solve_ed36ccf7_8731374e(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, F)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = height(x4)
    x6 = width(x4)
    x7 = vsplit(x4, x5)
    x8 = lbind(greater, FOUR)
    x9 = compose(x8, numcolors)
    x10 = sfilter(x7, x9)
    x11 = merge(x10)
    x12 = rot90(x11)
    x13 = vsplit(x12, x6)
    x14 = sfilter(x13, x9)
    x15 = merge(x14)
    x16 = rot270(x15)
    x17 = leastcolor(x16)
    x18 = ofcolor(x16, x17)
    x19 = fork(combine, vfrontier, hfrontier)
    x20 = mapply(x19, x18)
    O = fill(x16, x17, x20)
    return O



def solve_ed36ccf7_db93a21d(I):
    x1 = rot270(I)
    x2 = objects(x1, T, T, T)
    x3 = ofcolor(x1, NINE)
    x4 = colorfilter(x2, NINE)
    x5 = rbind(shoot, DOWN)
    x6 = mapply(x5, x3)
    x7 = underfill(x1, ONE, x6)
    x8 = compose(halve, width)
    x9 = rbind(greater, ONE)
    x10 = compose(x9, x8)
    x11 = matcher(x8, THREE)
    x12 = power(outbox, TWO)
    x13 = power(outbox, THREE)
    x14 = mapply(outbox, x4)
    x15 = sfilter(x4, x10)
    x16 = sfilter(x4, x11)
    x17 = mapply(x12, x15)
    x18 = mapply(x13, x16)
    x19 = fill(x7, THREE, x14)
    x20 = fill(x19, THREE, x17)
    O = fill(x20, THREE, x18)
    return O



def solve_ed36ccf7_53b68214(I):
    x1 = rot270(I)
    x2 = width(x1)
    x3 = objects(x1, T, T, T)
    x4 = first(x3)
    x5 = vperiod(x4)
    x6 = toivec(x5)
    x7 = interval(ZERO, NINE, ONE)
    x8 = lbind(multiply, x6)
    x9 = apply(x8, x7)
    x10 = lbind(shift, x4)
    x11 = mapply(x10, x9)
    x12 = astuple(x2, x2)
    x13 = portrait(x4)
    x14 = shape(x4)
    x15 = add(DOWN, x14)
    x16 = decrement(x15)
    x17 = shift(x4, x16)
    x18 = branch(x13, x11, x17)
    x19 = canvas(ZERO, x12)
    x20 = paint(x19, x4)
    O = paint(x20, x18)
    return O



def solve_ed36ccf7_d6ad076f(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = argmin(x2, size)
    x4 = argmax(x2, size)
    x5 = vmatching(x3, x4)
    x6 = branch(x5, DOWN, RIGHT)
    x7 = branch(x5, uppermost, leftmost)
    x8 = valmax(x2, x7)
    x9 = x7(x3)
    x10 = equality(x8, x9)
    x11 = branch(x10, NEG_ONE, ONE)
    x12 = multiply(x6, x11)
    x13 = inbox(x3)
    x14 = rbind(shoot, x12)
    x15 = mapply(x14, x13)
    x16 = underfill(x1, EIGHT, x15)
    x17 = objects(x16, T, F, T)
    x18 = colorfilter(x17, EIGHT)
    x19 = rbind(bordering, x1)
    x20 = mfilter(x18, x19)
    O = cover(x16, x20)
    return O



def solve_ed36ccf7_6cdd2623(I):
    x1 = rot270(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = prapply(connect, x3, x3)
    x5 = fgpartition(x1)
    x6 = merge(x5)
    x7 = cover(x1, x6)
    x8 = fork(either, hline, vline)
    x9 = box(x6)
    x10 = rbind(difference, x9)
    x11 = chain(positive, size, x10)
    x12 = fork(both, x8, x11)
    x13 = mfilter(x4, x12)
    O = fill(x7, x2, x13)
    return O



def solve_ed36ccf7_cdecee7f(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = astuple(ONE, THREE)
    x4 = size(x2)
    x5 = order(x2, leftmost)
    x6 = apply(color, x5)
    x7 = rbind(canvas, UNITY)
    x8 = apply(x7, x6)
    x9 = merge(x8)
    x10 = dmirror(x9)
    x11 = subtract(NINE, x4)
    x12 = astuple(ONE, x11)
    x13 = canvas(ZERO, x12)
    x14 = hconcat(x10, x13)
    x15 = hsplit(x14, THREE)
    x16 = merge(x15)
    x17 = crop(x16, ORIGIN, x3)
    x18 = crop(x16, DOWN, x3)
    x19 = crop(x16, TWO_BY_ZERO, x3)
    x20 = vmirror(x18)
    x21 = vconcat(x17, x20)
    O = vconcat(x21, x19)
    return O



def solve_ed36ccf7_3345333e(I):
    x1 = rot270(I)
    x2 = leastcolor(x1)
    x3 = ofcolor(x1, x2)
    x4 = cover(x1, x3)
    x5 = leastcolor(x4)
    x6 = ofcolor(x4, x5)
    x7 = neighbors(ORIGIN)
    x8 = mapply(neighbors, x7)
    x9 = vmirror(x6)
    x10 = lbind(shift, x9)
    x11 = apply(x10, x8)
    x12 = rbind(intersection, x6)
    x13 = compose(size, x12)
    x14 = argmax(x11, x13)
    O = fill(x4, x5, x14)
    return O



def solve_ed36ccf7_b190f7f5(I):
    x1 = rot270(I)
    x2 = portrait(x1)
    x3 = branch(x2, vsplit, hsplit)
    x4 = x3(x1, TWO)
    x5 = argmin(x4, numcolors)
    x6 = argmax(x4, numcolors)
    x7 = width(x6)
    x8 = rbind(repeat, x7)
    x9 = chain(dmirror, merge, x8)
    x10 = upscale(x6, x7)
    x11 = x9(x5)
    x12 = x9(x11)
    x13 = ofcolor(x12, ZERO)
    O = fill(x10, ZERO, x13)
    return O



def solve_ed36ccf7_caa06a1f(I):
    x1 = rot270(I)
    x2 = asobject(x1)
    x3 = shape(x1)
    x4 = decrement(x3)
    x5 = index(x1, x4)
    x6 = double(x3)
    x7 = canvas(x5, x6)
    x8 = paint(x7, x2)
    x9 = objects(x8, F, F, T)
    x10 = first(x9)
    x11 = shift(x10, LEFT)
    x12 = vperiod(x11)
    x13 = hperiod(x11)
    x14 = neighbors(ORIGIN)
    x15 = lbind(mapply, neighbors)
    x16 = power(x15, TWO)
    x17 = x16(x14)
    x18 = astuple(x12, x13)
    x19 = lbind(multiply, x18)
    x20 = apply(x19, x17)
    x21 = lbind(shift, x11)
    x22 = mapply(x21, x20)
    O = paint(x1, x22)
    return O



def solve_ed36ccf7_e21d9049(I):
    x1 = rot270(I)
    x2 = asindices(x1)
    x3 = leastcolor(x1)
    x4 = objects(x1, T, F, T)
    x5 = ofcolor(x1, x3)
    x6 = merge(x4)
    x7 = shape(x6)
    x8 = neighbors(ORIGIN)
    x9 = lbind(mapply, neighbors)
    x10 = power(x9, TWO)
    x11 = x10(x8)
    x12 = lbind(multiply, x7)
    x13 = lbind(shift, x6)
    x14 = apply(x12, x11)
    x15 = mapply(x13, x14)
    x16 = lbind(hmatching, x5)
    x17 = lbind(vmatching, x5)
    x18 = fork(either, x16, x17)
    x19 = compose(x18, initset)
    x20 = paint(x1, x15)
    x21 = sfilter(x2, x19)
    x22 = difference(x2, x21)
    O = cover(x20, x22)
    return O



def solve_ed36ccf7_746b3537(I):
    x1 = rot270(I)
    x2 = chain(size, dedupe, first)
    x3 = x2(x1)
    x4 = equality(x3, ONE)
    x5 = branch(x4, dmirror, identity)
    x6 = x5(x1)
    x7 = objects(x6, T, F, F)
    x8 = order(x7, leftmost)
    x9 = apply(color, x8)
    x10 = repeat(x9, ONE)
    O = x5(x10)
    return O



def solve_ed36ccf7_63613498(I):
    x1 = rot270(I)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    x3 = ofcolor(x2, ZERO)
    x4 = asindices(x2)
    x5 = difference(x4, x3)
    x6 = normalize(x5)
    x7 = objects(x1, T, F, T)
    x8 = compose(toindices, normalize)
    x9 = matcher(x8, x6)
    x10 = mfilter(x7, x9)
    x11 = fill(x1, FIVE, x10)
    x12 = asobject(x2)
    O = paint(x11, x12)
    return O



def solve_ed36ccf7_06df4c85(I):
    x1 = rot270(I)
    x2 = partition(x1)
    x3 = mostcolor(x1)
    x4 = ofcolor(x1, x3)
    x5 = colorfilter(x2, ZERO)
    x6 = argmax(x2, size)
    x7 = difference(x2, x5)
    x8 = remove(x6, x7)
    x9 = merge(x8)
    x10 = product(x9, x9)
    x11 = power(first, TWO)
    x12 = compose(first, last)
    x13 = fork(equality, x11, x12)
    x14 = sfilter(x10, x13)
    x15 = compose(last, first)
    x16 = power(last, TWO)
    x17 = fork(connect, x15, x16)
    x18 = fork(recolor, color, x17)
    x19 = apply(x18, x14)
    x20 = fork(either, vline, hline)
    x21 = mfilter(x19, x20)
    x22 = paint(x1, x21)
    O = fill(x22, x3, x4)
    return O



def solve_ed36ccf7_4522001f(I):
    x1 = rot270(I)
    x2 = objects(x1, F, F, T)
    x3 = first(x2)
    x4 = toindices(x3)
    x5 = contained(ZERO_BY_TWO, x4)
    x6 = contained(TWO_BY_TWO, x4)
    x7 = contained(TWO_BY_ZERO, x4)
    x8 = astuple(NINE, NINE)
    x9 = canvas(ZERO, x8)
    x10 = astuple(THREE, ORIGIN)
    x11 = initset(x10)
    x12 = upscale(x11, TWO)
    x13 = upscale(x12, TWO)
    x14 = shape(x13)
    x15 = shift(x13, x14)
    x16 = combine(x13, x15)
    x17 = paint(x9, x16)
    x18 = rot90(x17)
    x19 = rot180(x17)
    x20 = rot270(x17)
    x21 = branch(x5, x18, x17)
    x22 = branch(x6, x19, x21)
    O = branch(x7, x20, x22)
    return O



def solve_ed36ccf7_eb5a1d5d(I):
    x1 = rot270(I)
    x2 = compose(dmirror, dedupe)
    x3 = x2(x1)
    x4 = x2(x3)
    x5 = fork(remove, last, identity)
    x6 = compose(hmirror, x5)
    x7 = fork(vconcat, identity, x6)
    x8 = x7(x4)
    x9 = dmirror(x8)
    O = x7(x9)
    return O



def solve_ed36ccf7_995c5fa3(I):
    x1 = rot270(I)
    x2 = hsplit(x1, THREE)
    x3 = astuple(TWO, ONE)
    x4 = rbind(ofcolor, ZERO)
    x5 = compose(ulcorner, x4)
    x6 = compose(size, x4)
    x7 = matcher(x6, ZERO)
    x8 = matcher(x5, UNITY)
    x9 = matcher(x5, DOWN)
    x10 = matcher(x5, x3)
    x11 = rbind(multiply, THREE)
    x12 = power(double, TWO)
    x13 = compose(double, x7)
    x14 = chain(x12, double, x8)
    x15 = compose(x11, x9)
    x16 = compose(x12, x10)
    x17 = fork(add, x13, x14)
    x18 = fork(add, x15, x16)
    x19 = fork(add, x17, x18)
    x20 = rbind(canvas, UNITY)
    x21 = compose(x20, x19)
    x22 = apply(x21, x2)
    x23 = merge(x22)
    O = hupscale(x23, THREE)
    return O



def solve_ed36ccf7_36fdfd69(I):
    x1 = rot270(I)
    x2 = upscale(x1, TWO)
    x3 = objects(x2, T, T, T)
    x4 = colorfilter(x3, TWO)
    x5 = fork(manhattan, first, last)
    x6 = lbind(greater, FIVE)
    x7 = compose(x6, x5)
    x8 = product(x4, x4)
    x9 = sfilter(x8, x7)
    x10 = apply(merge, x9)
    x11 = mapply(delta, x10)
    x12 = fill(x2, FOUR, x11)
    x13 = merge(x4)
    x14 = paint(x12, x13)
    O = downscale(x14, TWO)
    return O



def solve_ed36ccf7_045e512c(I):
    x1 = rot270(I)
    x2 = objects(x1, T, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = lbind(shift, x3)
    x6 = lbind(mapply, x5)
    x7 = double(TEN)
    x8 = interval(FOUR, x7, FOUR)
    x9 = rbind(apply, x8)
    x10 = lbind(position, x3)
    x11 = lbind(rbind, multiply)
    x12 = chain(x9, x11, x10)
    x13 = compose(x6, x12)
    x14 = fork(recolor, color, x13)
    x15 = mapply(x14, x4)
    O = paint(x1, x15)
    return O



def solve_ed36ccf7_82819916(I):
    x1 = rot270(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = normalize(x3)
    x6 = compose(last, last)
    x7 = rbind(argmin, x6)
    x8 = compose(first, x7)
    x9 = fork(other, palette, x8)
    x10 = x8(x5)
    x11 = matcher(first, x10)
    x12 = sfilter(x5, x11)
    x13 = difference(x5, x12)
    x14 = compose(toivec, uppermost)
    x15 = lbind(shift, x12)
    x16 = lbind(shift, x13)
    x17 = compose(x15, x14)
    x18 = compose(x16, x14)
    x19 = fork(recolor, x8, x17)
    x20 = fork(recolor, x9, x18)
    x21 = fork(combine, x19, x20)
    x22 = mapply(x21, x4)
    O = paint(x1, x22)
    return O



def solve_ed36ccf7_99fa7670(I):
    x1 = rot270(I)
    x2 = shape(x1)
    x3 = objects(x1, T, F, T)
    x4 = rbind(shoot, RIGHT)
    x5 = compose(x4, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x3)
    x8 = paint(x1, x7)
    x9 = add(x2, DOWN_LEFT)
    x10 = initset(x9)
    x11 = recolor(ZERO, x10)
    x12 = objects(x8, T, F, T)
    x13 = insert(x11, x12)
    x14 = order(x13, uppermost)
    x15 = first(x14)
    x16 = remove(x11, x14)
    x17 = remove(x15, x14)
    x18 = compose(lrcorner, first)
    x19 = compose(lrcorner, last)
    x20 = fork(connect, x18, x19)
    x21 = compose(color, first)
    x22 = fork(recolor, x21, x20)
    x23 = pair(x16, x17)
    x24 = mapply(x22, x23)
    O = underpaint(x8, x24)
    return O



def solve_ed36ccf7_72322fa7(I):
    x1 = rot270(I)
    x2 = objects(x1, F, T, T)
    x3 = matcher(numcolors, ONE)
    x4 = sfilter(x2, x3)
    x5 = difference(x2, x4)
    x6 = lbind(matcher, first)
    x7 = compose(x6, mostcolor)
    x8 = fork(sfilter, identity, x7)
    x9 = fork(difference, identity, x8)
    x10 = lbind(occurrences, x1)
    x11 = compose(x10, x8)
    x12 = compose(x10, x9)
    x13 = compose(ulcorner, x9)
    x14 = fork(subtract, ulcorner, x13)
    x15 = lbind(rbind, add)
    x16 = compose(x15, x14)
    x17 = fork(apply, x16, x12)
    x18 = lbind(lbind, shift)
    x19 = compose(x18, normalize)
    x20 = fork(mapply, x19, x11)
    x21 = fork(mapply, x19, x17)
    x22 = mapply(x20, x5)
    x23 = mapply(x21, x5)
    x24 = paint(x1, x22)
    O = paint(x24, x23)
    return O



def solve_ed36ccf7_855e0971(I):
    x1 = rot270(I)
    x2 = frontiers(x1)
    x3 = sfilter(x2, hline)
    x4 = size(x3)
    x5 = positive(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(x1)
    x8 = rbind(subgrid, x7)
    x9 = matcher(color, ZERO)
    x10 = compose(flip, x9)
    x11 = partition(x7)
    x12 = sfilter(x11, x10)
    x13 = rbind(ofcolor, ZERO)
    x14 = lbind(mapply, vfrontier)
    x15 = chain(x14, x13, x8)
    x16 = fork(shift, x15, ulcorner)
    x17 = fork(intersection, toindices, x16)
    x18 = mapply(x17, x12)
    x19 = fill(x7, ZERO, x18)
    O = x6(x19)
    return O



def solve_ed36ccf7_6aa20dc0(I):
    x1 = rot270(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, numcolors)
    x4 = normalize(x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(rbind, upscale)
    x10 = interval(ONE, FOUR, ONE)
    x11 = apply(x9, x10)
    x12 = initset(identity)
    x13 = insert(vmirror, x12)
    x14 = insert(hmirror, x13)
    x15 = insert(cmirror, x14)
    x16 = insert(dmirror, x15)
    x17 = fork(compose, first, last)
    x18 = lbind(occurrences, x1)
    x19 = lbind(lbind, shift)
    x20 = compose(x18, x8)
    x21 = product(x16, x11)
    x22 = apply(x17, x21)
    x23 = rapply(x22, x4)
    x24 = fork(mapply, x19, x20)
    x25 = mapply(x24, x23)
    O = paint(x1, x25)
    return O



def solve_ed36ccf7_2bcee788(I):
    x1 = rot270(I)
    x2 = mostcolor(x1)
    x3 = objects(x1, T, F, T)
    x4 = replace(x1, x2, THREE)
    x5 = argmax(x3, size)
    x6 = argmin(x3, size)
    x7 = position(x5, x6)
    x8 = first(x7)
    x9 = last(x7)
    x10 = subgrid(x5, x4)
    x11 = hline(x6)
    x12 = hmirror(x10)
    x13 = vmirror(x10)
    x14 = branch(x11, x12, x13)
    x15 = branch(x11, x8, ZERO)
    x16 = branch(x11, ZERO, x9)
    x17 = asobject(x14)
    x18 = matcher(first, THREE)
    x19 = compose(flip, x18)
    x20 = sfilter(x17, x19)
    x21 = ulcorner(x5)
    x22 = shape(x5)
    x23 = astuple(x15, x16)
    x24 = multiply(x22, x23)
    x25 = add(x21, x24)
    x26 = shift(x20, x25)
    O = paint(x4, x26)
    return O



def solve_ed36ccf7_0dfd9992(I):
    x1 = rot270(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_ed36ccf7_29ec7d0e(I):
    x1 = rot270(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, ONE)
    x9 = astuple(ONE, x3)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(x1, x12, x9)
    x15 = crop(x1, x13, x8)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x7)
    x26 = mapply(x25, x24)
    O = paint(x1, x26)
    return O



def solve_ed36ccf7_469497ad(I):
    x1 = rot270(I)
    x2 = numcolors(x1)
    x3 = decrement(x2)
    x4 = upscale(x1, x3)
    x5 = objects(x4, F, F, T)
    x6 = argmin(x5, size)
    x7 = ulcorner(x6)
    x8 = llcorner(x6)
    x9 = shoot(x7, NEG_UNITY)
    x10 = shoot(x7, UNITY)
    x11 = shoot(x8, DOWN_LEFT)
    x12 = shoot(x8, UP_RIGHT)
    x13 = combine(x9, x10)
    x14 = combine(x11, x12)
    x15 = combine(x13, x14)
    x16 = underfill(x4, TWO, x15)
    x17 = objects(x16, T, F, T)
    x18 = argmax(x17, lrcorner)
    O = paint(x16, x18)
    return O



def solve_ed36ccf7_484b58aa(I):
    x1 = rot270(I)
    x2 = height(x1)
    x3 = width(x1)
    x4 = partition(x1)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    x8 = astuple(x2, TWO)
    x9 = astuple(TWO, x3)
    x10 = power(decrement, TWO)
    x11 = x10(x2)
    x12 = x10(x3)
    x13 = toivec(x12)
    x14 = tojvec(x11)
    x15 = crop(x1, x13, x9)
    x16 = crop(x1, x14, x8)
    x17 = asobject(x16)
    x18 = asobject(x15)
    x19 = vperiod(x17)
    x20 = hperiod(x18)
    x21 = astuple(x19, x20)
    x22 = lbind(multiply, x21)
    x23 = neighbors(ORIGIN)
    x24 = mapply(neighbors, x23)
    x25 = apply(x22, x24)
    x26 = lbind(shift, x7)
    x27 = mapply(x26, x25)
    O = paint(x1, x27)
    return O



def solve_ed36ccf7_49d1d64f(I):
    x1 = rot270(I)
    x2 = shape(x1)
    x3 = add(x2, TWO)
    x4 = canvas(ZERO, x3)
    x5 = asobject(x1)
    x6 = shift(x5, UNITY)
    x7 = paint(x4, x6)
    x8 = asindices(x4)
    x9 = fork(difference, box, corners)
    x10 = x9(x8)
    x11 = lbind(lbind, manhattan)
    x12 = rbind(compose, initset)
    x13 = chain(x12, x11, initset)
    x14 = lbind(argmin, x6)
    x15 = chain(first, x14, x13)
    x16 = fork(astuple, x15, identity)
    x17 = apply(x16, x10)
    O = paint(x7, x17)
    return O



def solve_ed36ccf7_57aa92db(I):
    x1 = rot270(I)
    x2 = objects(x1, F, T, T)
    x3 = objects(x1, T, F, T)
    x4 = lbind(lbind, colorcount)
    x5 = fork(apply, x4, palette)
    x6 = compose(maximum, x5)
    x7 = compose(minimum, x5)
    x8 = fork(subtract, x6, x7)
    x9 = argmax(x2, x8)
    x10 = leastcolor(x9)
    x11 = normalize(x9)
    x12 = matcher(first, x10)
    x13 = sfilter(x11, x12)
    x14 = ulcorner(x13)
    x15 = colorfilter(x3, x10)
    x16 = rbind(toobject, x1)
    x17 = lbind(remove, ZERO)
    x18 = chain(first, x17, palette)
    x19 = chain(x18, x16, outbox)
    x20 = lbind(multiply, x14)
    x21 = compose(x20, width)
    x22 = fork(subtract, ulcorner, x21)
    x23 = lbind(shift, x11)
    x24 = compose(x23, x22)
    x25 = fork(upscale, x24, width)
    x26 = fork(recolor, x19, x25)
    x27 = mapply(x26, x15)
    x28 = paint(x1, x27)
    x29 = merge(x3)
    O = paint(x28, x29)
    return O



def solve_ed36ccf7_0e206a2e(I):
    x1 = rot270(I)
    x2 = palette(x1)
    x3 = objects(x1, F, F, T)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, numcolors)
    x6 = sfilter(x3, x5)
    x7 = remove(ZERO, x2)
    x8 = lbind(colorcount, x1)
    x9 = argmax(x7, x8)
    x10 = remove(x9, x7)
    x11 = rbind(contained, x10)
    x12 = compose(x11, first)
    x13 = rbind(sfilter, x12)
    x14 = lbind(rbind, subtract)
    x15 = lbind(occurrences, x1)
    x16 = lbind(lbind, shift)
    x17 = compose(x14, ulcorner)
    x18 = chain(x17, x13, normalize)
    x19 = chain(x15, x13, normalize)
    x20 = fork(apply, x18, x19)
    x21 = compose(x16, normalize)
    x22 = fork(mapply, x21, x20)
    x23 = astuple(cmirror, dmirror)
    x24 = astuple(hmirror, vmirror)
    x25 = combine(x23, x24)
    x26 = product(x25, x25)
    x27 = fork(compose, first, last)
    x28 = apply(x27, x26)
    x29 = totuple(x28)
    x30 = combine(x25, x29)
    x31 = lbind(rapply, x30)
    x32 = mapply(x31, x6)
    x33 = mapply(x22, x32)
    x34 = paint(x1, x33)
    x35 = merge(x6)
    O = cover(x34, x35)
    return O



def solve_ed36ccf7_150deff5(I):
    x1 = rot270(I)
    x2 = canvas(FIVE, TWO_BY_TWO)
    x3 = asobject(x2)
    x4 = occurrences(x1, x3)
    x5 = lbind(shift, x3)
    x6 = mapply(x5, x4)
    x7 = fill(x1, EIGHT, x6)
    x8 = canvas(FIVE, UNITY)
    x9 = astuple(TWO, ONE)
    x10 = canvas(EIGHT, x9)
    x11 = vconcat(x10, x8)
    x12 = asobject(x11)
    x13 = occurrences(x7, x12)
    x14 = lbind(shift, x12)
    x15 = mapply(x14, x13)
    x16 = fill(x7, TWO, x15)
    x17 = astuple(ONE, THREE)
    x18 = canvas(FIVE, x17)
    x19 = asobject(x18)
    x20 = occurrences(x16, x19)
    x21 = lbind(shift, x19)
    x22 = mapply(x21, x20)
    x23 = fill(x16, TWO, x22)
    x24 = hmirror(x11)
    x25 = asobject(x24)
    x26 = occurrences(x23, x25)
    x27 = lbind(shift, x25)
    x28 = mapply(x27, x26)
    x29 = fill(x23, TWO, x28)
    x30 = dmirror(x11)
    x31 = asobject(x30)
    x32 = occurrences(x29, x31)
    x33 = lbind(shift, x31)
    x34 = mapply(x33, x32)
    x35 = fill(x29, TWO, x34)
    x36 = vmirror(x30)
    x37 = asobject(x36)
    x38 = occurrences(x35, x37)
    x39 = lbind(shift, x37)
    x40 = mapply(x39, x38)
    O = fill(x35, TWO, x40)
    return O



def solve_ed36ccf7_9d9215db(I):
    x1 = rot270(I)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = rot270(x1)
    x5 = initset(x1)
    x6 = chain(numcolors, lefthalf, tophalf)
    x7 = insert(x2, x5)
    x8 = insert(x3, x7)
    x9 = insert(x4, x8)
    x10 = argmax(x9, x6)
    x11 = vmirror(x10)
    x12 = papply(pair, x10, x11)
    x13 = lbind(apply, maximum)
    x14 = apply(x13, x12)
    x15 = partition(x14)
    x16 = sizefilter(x15, FOUR)
    x17 = apply(llcorner, x16)
    x18 = apply(lrcorner, x16)
    x19 = combine(x17, x18)
    x20 = cover(x14, x19)
    x21 = tojvec(NEG_TWO)
    x22 = rbind(add, ZERO_BY_TWO)
    x23 = rbind(add, x21)
    x24 = compose(x22, ulcorner)
    x25 = compose(x23, urcorner)
    x26 = fork(connect, x24, x25)
    x27 = compose(even, last)
    x28 = rbind(sfilter, x27)
    x29 = chain(normalize, x28, x26)
    x30 = fork(shift, x29, x24)
    x31 = fork(recolor, color, x30)
    x32 = mapply(x31, x16)
    x33 = paint(x20, x32)
    x34 = rot90(x33)
    x35 = rot180(x33)
    x36 = rot270(x33)
    x37 = papply(pair, x33, x34)
    x38 = apply(x13, x37)
    x39 = papply(pair, x38, x35)
    x40 = apply(x13, x39)
    x41 = papply(pair, x40, x36)
    O = apply(x13, x41)
    return O



def solve_ed36ccf7_264363fd(I):
    x1 = rot270(I)
    x2 = objects(x1, F, F, T)
    x3 = argmin(x2, size)
    x4 = normalize(x3)
    x5 = height(x3)
    x6 = width(x3)
    x7 = equality(x5, FIVE)
    x8 = equality(x6, FIVE)
    x9 = astuple(x7, x8)
    x10 = add(UNITY, x9)
    x11 = invert(x10)
    x12 = center(x3)
    x13 = index(x1, x12)
    x14 = branch(x7, UP, RIGHT)
    x15 = add(x14, x12)
    x16 = index(x1, x15)
    x17 = astuple(x13, ORIGIN)
    x18 = initset(x17)
    x19 = cover(x1, x3)
    x20 = mostcolor(x19)
    x21 = ofcolor(x19, x20)
    x22 = occurrences(x19, x18)
    x23 = objects(x19, F, F, T)
    x24 = rbind(occurrences, x18)
    x25 = rbind(subgrid, x19)
    x26 = compose(x24, x25)
    x27 = lbind(mapply, vfrontier)
    x28 = lbind(mapply, hfrontier)
    x29 = compose(x27, x26)
    x30 = compose(x28, x26)
    x31 = branch(x7, x29, x30)
    x32 = branch(x8, x30, x29)
    x33 = fork(combine, x31, x32)
    x34 = lbind(recolor, x16)
    x35 = compose(x34, x33)
    x36 = fork(paint, x25, x35)
    x37 = compose(asobject, x36)
    x38 = fork(shift, x37, ulcorner)
    x39 = mapply(x38, x23)
    x40 = paint(x19, x39)
    x41 = shift(x4, x11)
    x42 = lbind(shift, x41)
    x43 = mapply(x42, x22)
    x44 = paint(x40, x43)
    O = fill(x44, x20, x21)
    return O



def solve_ed36ccf7_22233c11(I):
    x1 = rot270(I)
    x2 = objects(x1, T, T, T)
    x3 = rbind(upscale, TWO)
    x4 = chain(invert, halve, shape)
    x5 = fork(combine, hfrontier, vfrontier)
    x6 = compose(x3, vmirror)
    x7 = fork(shift, x6, x4)
    x8 = compose(toindices, x7)
    x9 = lbind(mapply, x5)
    x10 = compose(x9, toindices)
    x11 = fork(difference, x8, x10)
    x12 = mapply(x11, x2)
    O = fill(x1, EIGHT, x12)
    return O



def solve_ed36ccf7_a64e4611(I):
    x1 = rot270(I)
    x2 = asindices(x1)
    x3 = fork(product, identity, identity)
    x4 = lbind(canvas, ZERO)
    x5 = compose(asobject, x4)
    x6 = fork(multiply, first, last)
    x7 = compose(positive, size)
    x8 = lbind(lbind, shift)
    x9 = rbind(fork, x6)
    x10 = lbind(x9, multiply)
    x11 = lbind(chain, x7)
    x12 = rbind(x11, x5)
    x13 = lbind(lbind, occurrences)
    x14 = chain(x10, x12, x13)
    x15 = compose(x3, first)
    x16 = compose(x14, last)
    x17 = fork(argmax, x15, x16)
    x18 = chain(x8, x5, x17)
    x19 = compose(x5, x17)
    x20 = fork(occurrences, last, x19)
    x21 = fork(mapply, x18, x20)
    x22 = multiply(TWO, SIX)
    x23 = interval(THREE, x22, ONE)
    x24 = astuple(x23, x1)
    x25 = x21(x24)
    x26 = fill(x1, THREE, x25)
    x27 = interval(THREE, TEN, ONE)
    x28 = astuple(x27, x26)
    x29 = x21(x28)
    x30 = fill(x26, THREE, x29)
    x31 = astuple(x27, x30)
    x32 = x21(x31)
    x33 = fill(x30, THREE, x32)
    x34 = rbind(toobject, x33)
    x35 = rbind(colorcount, THREE)
    x36 = chain(x35, x34, neighbors)
    x37 = matcher(x36, EIGHT)
    x38 = sfilter(x2, x37)
    x39 = fill(x1, THREE, x38)
    x40 = ofcolor(x39, ZERO)
    x41 = rbind(bordering, x39)
    x42 = compose(x41, initset)
    x43 = lbind(contained, THREE)
    x44 = rbind(toobject, x39)
    x45 = chain(x43, palette, x44)
    x46 = compose(x45, dneighbors)
    x47 = fork(both, x46, x42)
    x48 = sfilter(x40, x47)
    O = fill(x39, THREE, x48)
    return O



def solve_ed36ccf7_97a05b5b(I):
    x1 = rot270(I)
    x2 = objects(x1, F, T, T)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, x1)
    x5 = rbind(greater, ONE)
    x6 = compose(x5, numcolors)
    x7 = sfilter(x2, x6)
    x8 = lbind(rbind, subtract)
    x9 = switch(x4, TWO, ZERO)
    x10 = lbind(occurrences, x9)
    x11 = lbind(lbind, shift)
    x12 = compose(x8, ulcorner)
    x13 = matcher(first, TWO)
    x14 = compose(flip, x13)
    x15 = rbind(sfilter, x13)
    x16 = rbind(sfilter, x14)
    x17 = lbind(recolor, ZERO)
    x18 = compose(x17, x16)
    x19 = fork(combine, x18, x15)
    x20 = chain(x12, x19, normalize)
    x21 = objects(x9, T, T, T)
    x22 = apply(toindices, x21)
    x23 = chain(x10, x19, normalize)
    x24 = rbind(colorcount, TWO)
    x25 = lbind(sfilter, x22)
    x26 = chain(size, first, x25)
    x27 = compose(positive, size)
    x28 = lbind(lbind, contained)
    x29 = chain(x27, x25, x28)
    x30 = compose(x26, x28)
    x31 = rbind(sfilter, x29)
    x32 = compose(x31, x23)
    x33 = lbind(rbind, equality)
    x34 = rbind(compose, x30)
    x35 = chain(x34, x33, x24)
    x36 = fork(sfilter, x32, x35)
    x37 = fork(apply, x20, x36)
    x38 = compose(x11, normalize)
    x39 = fork(mapply, x38, x37)
    x40 = astuple(cmirror, dmirror)
    x41 = astuple(hmirror, vmirror)
    x42 = combine(x40, x41)
    x43 = product(x42, x42)
    x44 = fork(compose, first, last)
    x45 = apply(x44, x43)
    x46 = lbind(rapply, x45)
    x47 = mapply(x46, x7)
    x48 = mapply(x39, x47)
    x49 = paint(x4, x48)
    x50 = palette(x48)
    x51 = lbind(remove, TWO)
    x52 = x51(x50)
    x53 = chain(first, x51, palette)
    x54 = rbind(contained, x52)
    x55 = chain(flip, x54, x53)
    x56 = sfilter(x7, x55)
    x57 = fork(apply, x20, x23)
    x58 = fork(mapply, x38, x57)
    x59 = mapply(x46, x56)
    x60 = mapply(x58, x59)
    O = paint(x49, x60)
    return O



def solve_ed36ccf7_3e980e27(I):
    x1 = rot270(I)
    x2 = objects(x1, F, T, T)
    x3 = astuple(TEN, TEN)
    x4 = invert(x3)
    x5 = astuple(TWO, x4)
    x6 = astuple(THREE, x4)
    x7 = initset(x5)
    x8 = insert(x6, x7)
    x9 = insert(x8, x2)
    x10 = lbind(contained, TWO)
    x11 = lbind(contained, THREE)
    x12 = compose(invert, ulcorner)
    x13 = lbind(compose, x12)
    x14 = lbind(rbind, sfilter)
    x15 = compose(x13, x14)
    x16 = rbind(compose, center)
    x17 = lbind(lbind, shift)
    x18 = x15(x10)
    x19 = x15(x11)
    x20 = fork(shift, identity, x18)
    x21 = fork(shift, identity, x19)
    x22 = compose(x10, palette)
    x23 = compose(x11, palette)
    x24 = sfilter(x9, x22)
    x25 = argmax(x24, size)
    x26 = remove(x25, x24)
    x27 = vmirror(x25)
    x28 = chain(x16, x17, x20)
    x29 = x28(x27)
    x30 = mapply(x29, x26)
    x31 = sfilter(x9, x23)
    x32 = argmax(x31, size)
    x33 = remove(x32, x31)
    x34 = chain(x16, x17, x21)
    x35 = x34(x32)
    x36 = mapply(x35, x33)
    x37 = combine(x30, x36)
    O = paint(x1, x37)
    return O



